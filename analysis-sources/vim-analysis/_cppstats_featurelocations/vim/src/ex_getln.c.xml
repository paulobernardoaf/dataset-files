<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\ex_getln.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt; (y) ? (x) : (y))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>static</specifier> <name>cmdline_info_T</name></type> <name>ccline</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>new_cmdpos</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>extra_char</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>extra_char_shift</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cmd_hkmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>getcmdline_int</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>firstc</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>init_ccline</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cmdline_charsize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_cmdspos</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_cmdspos_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>correct_cmdspos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cells</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>alloc_cmdbuff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>draw_cmdline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>save_cmdline</name><parameter_list>(<parameter><decl><type><name>cmdline_info_T</name> <modifier>*</modifier></type><name>ccp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>restore_cmdline</name><parameter_list>(<parameter><decl><type><name>cmdline_info_T</name> <modifier>*</modifier></type><name>ccp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cmdline_paste</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literally</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remcr</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cmdline_del</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>redrawcmdprompt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ccheck_abbr</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>open_cmdwin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>cedit_key</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>trigger_cmd_autocmd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>typechar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>typestr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>typestr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>typechar</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typestr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>evt</name></expr></argument>, <argument><expr><name>typestr</name></expr></argument>, <argument><expr><name>typestr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>abandon_cmdline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>empty_pattern</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"mMvVcCZ"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>colnr_T</name></type> <name>vs_curswant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>vs_leftcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>vs_topline</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>vs_topfill</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>vs_botline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>vs_empty_rows</name></decl>;</decl_stmt>
}</block></struct></type> <name>viewstate_T</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>save_viewstate</name><parameter_list>(<parameter><decl><type><name>viewstate_T</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_curswant</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_leftcol</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_topline</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_topfill</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_botline</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_empty_rows</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>restore_viewstate</name><parameter_list>(<parameter><decl><type><name>viewstate_T</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_curswant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_leftcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_topline</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_topfill</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_botline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_empty_rows</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>pos_T</name></type> <name>search_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>viewstate_T</name></type> <name>init_viewstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>viewstate_T</name></type> <name>old_viewstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>match_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>match_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_incsearch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>incsearch_postponed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>magic_save</name></decl>;</decl_stmt>
}</block></struct></type> <name>incsearch_state_T</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_incsearch_state</name><parameter_list>(<parameter><decl><type><name>incsearch_state_T</name> <modifier>*</modifier></type><name>is_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>match_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>did_incsearch</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>incsearch_postponed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>magic_save</name></name> <operator>=</operator> <name>p_magic</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR_POS</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is_state</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>save_cursor</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_viewstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is_state</name><operator>-&gt;</operator><name>init_viewstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_viewstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is_state</name><operator>-&gt;</operator><name>old_viewstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_search_match</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+=</operator> <name>search_match_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>search_match_endcol</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_incsearch_highlighting</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>firstc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>search_delim</name></decl></parameter>, <parameter><decl><type><name>incsearch_state_T</name> <modifier>*</modifier></type><name>is_state</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>skiplen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>patlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cmdmod_T</name></type> <name>save_cmdmod</name> <init>= <expr><name>cmdmod</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delim_optional</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>exarg_T</name></type> <name>ea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_last_pat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>skiplen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>patlen</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_is</name> <operator>||</operator> <name>cmd_silent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>search_first_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>search_last_line</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>firstc</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>firstc</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>search_delim</name> <operator>=</operator> <name>firstc</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>firstc</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ea</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>line1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>line2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>addr_type</name></name> <operator>=</operator> <name>ADDR_LINES</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_command_modifiers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdmod</name> <operator>=</operator> <name>save_cmdmod</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skip_range</name><argument_list>(<argument><expr><name><name>ea</name><operator>.</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"sgvl"</literal></expr></argument>, <argument><expr><operator>*</operator><name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>cmd</name></expr>;</init> <condition><expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"substitute"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"smagic"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"snomagic"</literal></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>cmd</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"vglobal"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_magic</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_magic</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>cmd</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"vimgrep"</literal></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>cmd</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"vimgrepadd"</literal></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>cmd</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"lvimgrep"</literal></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"lvimgrepadd"</literal></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>cmd</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>!=</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delim_optional</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delim</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>delim_optional</name> <operator>&amp;&amp;</operator> <call><name>vim_isIDc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><operator>*</operator><name>p</name><operator>++</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>search_delim</name> <operator>=</operator> <name>delim</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>skip_regexp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><name>p_magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_last_pat</name> <operator>=</operator> <name>end</name> <operator>==</operator> <name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>==</operator> <name>delim</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>use_last_pat</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_last_pat</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>end</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>empty</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>empty</name> <operator>=</operator> <call><name>empty_pattern</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>skiplen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>patlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>save_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_cmd_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>.</operator><name>addr_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>.</operator><name>line2</name></name> <operator>&lt;</operator> <name><name>ea</name><operator>.</operator><name>line1</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>search_first_line</name> <operator>=</operator> <name><name>ea</name><operator>.</operator><name>line2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_last_line</name> <operator>=</operator> <name><name>ea</name><operator>.</operator><name>line1</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>search_first_line</name> <operator>=</operator> <name><name>ea</name><operator>.</operator><name>line1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_last_line</name> <operator>=</operator> <name><name>ea</name><operator>.</operator><name>line2</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'o'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>search_first_line</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_last_line</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<label><name>theend</name>:</label>
<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>finish_incsearch_highlighting</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>gotesc</name></decl></parameter>,
<parameter><decl><type><name>incsearch_state_T</name> <modifier>*</modifier></type><name>is_state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>call_update_screen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is_state</name><operator>-&gt;</operator><name>did_incsearch</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>did_incsearch</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gotesc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>save_cursor</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>is_state</name><operator>-&gt;</operator><name>save_cursor</name></name></expr></argument>, <argument><expr><name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>save_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>restore_viewstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is_state</name><operator>-&gt;</operator><name>old_viewstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>


<expr_stmt><expr><name>search_first_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>search_last_line</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_magic</name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>magic_save</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>call_update_screen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>may_do_incsearch_highlighting</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>firstc</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>incsearch_state_T</name> <modifier>*</modifier></type><name>is_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>skiplen</name></decl>, <decl><type ref="prev"/><name>patlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pos_T</name></type> <name>end_pos</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>proftime_T</name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>searchit_arg_T</name></type> <name>sia</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>next_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_last_pat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_do_incsearch</name> <init>= <expr><name><name>is_state</name><operator>-&gt;</operator><name>did_incsearch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>search_delim</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>save_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_incsearch_highlighting</name><argument_list>(<argument><expr><name>firstc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>search_delim</name></expr></argument>, <argument><expr><name>is_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patlen</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>restore_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_incsearch_highlighting</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>is_state</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>did_do_incsearch</name> <operator>&amp;&amp;</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>char_avail</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>restore_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>incsearch_postponed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>incsearch_postponed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>search_first_line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>search_first_line</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>search_first_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>next_char</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>skiplen</name> <operator>+</operator> <name>patlen</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_last_pat</name> <operator>=</operator> <name>patlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>skiplen</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>skiplen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>next_char</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>patlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>use_last_pat</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>search_flags</name> <init>= <expr><name>SEARCH_OPT</name> <operator>+</operator> <name>SEARCH_NOOF</name> <operator>+</operator> <name>SEARCH_PEEK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cursor_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>profile_setlimit</name><argument_list>(<argument><expr><literal type="number">500L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_hls</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>search_flags</name> <operator>+=</operator> <name>SEARCH_KEEP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>search_first_line</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>search_flags</name> <operator>+=</operator> <name>SEARCH_START</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>skiplen</name> <operator>+</operator> <name>patlen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sia</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sia</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sia</name><operator>.</operator><name>sa_tm</name></name> <operator>=</operator> <operator>&amp;</operator><name>tm</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>found</name> <operator>=</operator> <macro><name>do_search</name><argument_list>(<argument>NULL</argument>, <argument>firstc == <literal type="char">':'</literal> ? <literal type="char">'/'</literal> : firstc</argument>, <argument>search_delim</argument>,
<argument>ccline.cmdbuff + skiplen</argument>, <argument>count</argument>, <argument>search_flags</argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument>&amp;sia
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
NULL</argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>skiplen</name> <operator>+</operator> <name>patlen</name></expr>]</index></name> <operator>=</operator> <name>next_char</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>search_first_line</name>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>search_last_line</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>char_avail</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>incsearch_postponed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 



<expr_stmt><expr><call><name>restore_viewstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is_state</name><operator>-&gt;</operator><name>old_viewstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>save_pos</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>match_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_search_match</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>match_end</name></name> <operator>=</operator> <name>end_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_pos</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_last_pat</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>next_char</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>skiplen</name> <operator>+</operator> <name>patlen</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>skiplen</name> <operator>+</operator> <name>patlen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>empty_pattern</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_hlsearch</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>skiplen</name> <operator>+</operator> <name>patlen</name></expr>]</index></name> <operator>=</operator> <name>next_char</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ru</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>skiplen</name> <operator>+</operator> <name>patlen</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>found</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>end_pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_starthere</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>did_incsearch</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>may_adjust_incsearch_highlighting</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>firstc</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>incsearch_state_T</name> <modifier>*</modifier></type><name>is_state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>skiplen</name></decl>, <decl><type ref="prev"/><name>patlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>search_flags</name> <init>= <expr><name>SEARCH_NOOF</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>search_delim</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>save_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_incsearch_highlighting</name><argument_list>(<argument><expr><name>firstc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>search_delim</name></expr></argument>, <argument><expr><name>is_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patlen</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>restore_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>patlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>skiplen</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>restore_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>search_delim</name> <operator>==</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>skiplen</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skiplen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>patlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pat</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>skiplen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>cursor_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_G</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>match_end</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name><name>is_state</name><operator>-&gt;</operator><name>match_start</name></name></expr></argument>, <argument><expr><name><name>is_state</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>search_flags</name> <operator>+=</operator> <name>SEARCH_COL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>match_start</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_hls</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>search_flags</name> <operator>+=</operator> <name>SEARCH_KEEP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save</name> <operator>=</operator> <name><name>pat</name><index>[<expr><name>patlen</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pat</name><index>[<expr><name>patlen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>searchit</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>c</name> <operator>==</operator> <name>Ctrl_G</name></expr> ?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary></expr></argument>,
<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><name>RE_SEARCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pat</name><index>[<expr><name>patlen</name></expr>]</index></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>match_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>match_end</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>match_start</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_T</name> <operator>&amp;&amp;</operator> <name>firstc</name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_G</name> <operator>&amp;&amp;</operator> <name>firstc</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>Ctrl_G</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>firstc</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is_state</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_search_match</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is_state</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>match_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_viewstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is_state</name><operator>-&gt;</operator><name>old_viewstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>match_end</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>restore_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>may_add_char_to_search</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>firstc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>incsearch_state_T</name> <modifier>*</modifier></type><name>is_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>skiplen</name></decl>, <decl><type ref="prev"/><name>patlen</name></decl>, <decl><type ref="prev"/><name>search_delim</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>save_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_incsearch_highlighting</name><argument_list>(<argument><expr><name>firstc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>search_delim</name></expr></argument>, <argument><expr><name>is_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patlen</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>restore_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>restore_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>is_state</name><operator>-&gt;</operator><name>did_incsearch</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>is_state</name><operator>-&gt;</operator><name>match_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>p_ic</name> <operator>&amp;&amp;</operator> <name>p_scs</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>pat_has_uppercase</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>skiplen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <call><name>MB_TOLOWER</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <name>search_delim</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator>
<ternary><condition><expr><name>p_magic</name></expr> ?</condition><then> <expr><literal type="string">"\\~^$.*["</literal></expr> </then><else>: <expr><literal type="string">"\\^$"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_char2len</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_c</name> <init>= <expr><operator>*</operator><name>c</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>mb_char2len</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>save_c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmdline_has_arabic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u8c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>u8cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>mb_l</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>utfc_ptr2char_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ARABIC_CHAR</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>cmdline_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ccline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmdline_info_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




















<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>getcmdline</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>firstc</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <name>do_concat</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>getcmdline_int</name><argument_list>(<argument><expr><name>firstc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>getcmdline_int</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>firstc</name></decl></parameter>,
<parameter><decl><type><name>long</name> <name>count</name></type> <name>UNUSED</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>init_ccline</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gotesc</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>do_abbr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lookfor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>hiscnt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>histype</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>incsearch_state_T</name></type> <name>is_state</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>did_wild_list</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>wim_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_msg_scroll</name> <init>= <expr><name>msg_scroll</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>some_key_typed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>ignore_drag_release</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>break_ctrl_c</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>expand_T</name></type> <name>xpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>b_im_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cmdline_info_T</name></type> <name>save_ccline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_save_ccline</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmdline_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>save_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_save_ccline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>init_ccline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ccline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmdline_info_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>firstc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>firstc</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>break_ctrl_c</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>firstc</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <name>firstc</name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name>firstc</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd_hkmap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>overstrike</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>init_incsearch_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>is_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>firstc</name> <operator>==</operator> <literal type="char">'@'</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>firstc</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdindent</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>firstc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>indent</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>alloc_cmdbuff</name><argument_list>(<argument><expr><ternary><condition><expr><name>exmode_active</name></expr> ?</condition><then> <expr><literal type="number">250</literal></expr> </then><else>: <expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sb_text_start_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>firstc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>indent</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name>indent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <name>indent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <name>indent</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ExpandInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>xpc</name></name> <operator>=</operator> <operator>&amp;</operator><name>xpc</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rlc</name></name> <operator>==</operator> <literal type="char">'s'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>firstc</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>firstc</name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdmsg_rl</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdmsg_rl</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd_silent</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>msg_scrolled</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scrolled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>gotocmdline</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scrolled</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmdprompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>set_cmdspos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_NONE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_shell</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>input_fn</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>xp_context</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_pattern</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_arg</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>xp_arg</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>CMDLINE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>firstc</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>firstc</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <name>firstc</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>==</operator> <name>B_IMODE_USE_INSERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_im_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b_im_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b_im_ptr</name> <operator>==</operator> <name>B_IMODE_LMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>State</name> <operator>|=</operator> <name>LANGMAP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>im_set_active</name><argument_list>(<argument><expr><operator>*</operator><name>b_im_ptr</name> <operator>==</operator> <name>B_IMODE_IM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>p_imcmdline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>im_set_active</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>settmode</name><argument_list>(<argument><expr><name>TMODE_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>cmdline_type</name> <operator>=</operator> <ternary><condition><expr><name>firstc</name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><name>firstc</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trigger_cmd_autocmd</name><argument_list>(<argument><expr><name>cmdline_type</name></expr></argument>, <argument><expr><name>EVENT_CMDLINEENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_history</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hiscnt</name> <operator>=</operator> <call><name>get_hislen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>histype</name> <operator>=</operator> <call><name>hist_char2type</name><argument_list>(<argument><expr><name>firstc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>do_digraph</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>quit_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 




<expr_stmt><expr><call><name>may_trigger_safestate</name><argument_list>(<argument><expr><name><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 



<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>safe_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><name>c</name> <operator>==</operator> <name>K_IGNORE</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_NOP</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>KeyTyped</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>some_key_typed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmd_hkmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>hkmap</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyStuffed</name></expr>)</condition>
<block>{<block_content>



<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>K_RIGHT</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_S_RIGHT</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_S_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_C_RIGHT</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_C_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_LEFT</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_S_LEFT</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_S_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_C_LEFT</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_C_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_C</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>intr_char</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name>break_ctrl_c</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <operator>!</operator><name>global_busy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>lookfor</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_S_DOWN</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_S_UP</name>
<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_DOWN</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_UP</name>
<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_PAGEDOWN</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_PAGEUP</name>
<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_KPAGEDOWN</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_KPAGEUP</name>
<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_LEFT</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_RIGHT</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>Ctrl_P</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_N</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>lookfor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>p_wc</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>K_S_TAB</name> <operator>&amp;&amp;</operator> <name><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>did_wild_list</name> <operator>&amp;&amp;</operator> <name>p_wmnu</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_P</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_N</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUNAMES</name> <operator>&amp;&amp;</operator> <name>p_wmnu</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KENTER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_DOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>c</name> <operator>==</operator> <name>p_wc</name> <operator>&amp;&amp;</operator> <name>KeyTyped</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>p_wcm</name>
<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_N</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_P</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_A</name>
<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_L</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ExpandOne</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WILD_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_wild_list</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_wmnu</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>K_UP</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_DOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wim_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_wmnu</name> <operator>&amp;&amp;</operator> <name>wild_menu_showing</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>skt</name> <init>= <expr><name>KeyTyped</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_RedrawingDisabled</name> <init>= <expr><name>RedrawingDisabled</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>input_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wild_menu_showing</name> <operator>==</operator> <name>WM_SCROLLED</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>cmdline_row</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>save_p_ls</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p_ls</name> <operator>=</operator> <name>save_p_ls</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wmh</name> <operator>=</operator> <name>save_p_wmh</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>save_p_ls</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>win_redraw_last_status</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_statuslines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>skt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wild_menu_showing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>input_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <name>old_RedrawingDisabled</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUNAMES</name> <operator>&amp;&amp;</operator> <name>p_wmnu</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_DOWN</name> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p_wc</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_UP</name></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>xpc</name><operator>.</operator><name>xp_pattern</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmdline_del</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p_wc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES</name>
<operator>||</operator> <name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_DIRECTORIES</name>
<operator>||</operator> <name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_SHELLCMD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>p_wmnu</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>upseg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>upseg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upseg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upseg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upseg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upseg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_DOWN</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>PATHSEP</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&lt;</operator> <literal type="number">3</literal>
<operator>||</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal>
<operator>||</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p_wc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>xpc</name><operator>.</operator><name>xp_pattern</name></name></expr></argument>, <argument><expr><name>upseg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>K_DOWN</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>xpc</name><operator>.</operator><name>xp_pattern</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>j</name> <operator>&gt;</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>found</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>j</name> <operator>==</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cmdline_del</name><argument_list>(<argument><expr><name>j</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p_wc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_UP</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>xpc</name><operator>.</operator><name>xp_pattern</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>j</name> <operator>&gt;</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" *?[{`$%#"</literal></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>upseg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>upseg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>cmdline_del</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_on_cmdline</name><argument_list>(<argument><expr><name>upseg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmdline_del</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p_wc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_BSL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>Ctrl_N</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_G</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">'e'</literal>
<operator>||</operator> <operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name>KeyTyped</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_BSL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>==</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_cmdpos</name> <operator>=</operator> <literal type="number">99999</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_cmdpos</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_expr_register</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><operator>++</operator><name>textlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_expr_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>textlock</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>realloc_cmdbuff</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>new_cmdpos</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name>new_cmdpos</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_changed</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_G</name> <operator>&amp;&amp;</operator> <name>p_im</name> <operator>&amp;&amp;</operator> <name>restart_edit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gotesc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<goto>goto <name>returncmd</name>;</goto> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>cedit_key</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_CMDWIN</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <name>K_CMDWIN</name> <operator>||</operator> <name>ex_normal_busy</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>got_int</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>open_cmdwin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>some_key_typed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>do_digraph</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KENTER</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>ESC</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>KeyTyped</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_ESC</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exmode_active</name>
<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>ESC</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>==</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_KENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>gotesc</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>ccheck_abbr</name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <name>ABBR_OFF</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_changed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd_silent</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <name>p_wc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>gotesc</name> <operator>&amp;&amp;</operator> <name>KeyTyped</name><operator>)</operator> <operator>||</operator> <name>c</name> <operator>==</operator> <name>p_wcm</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>options</name> <init>= <expr><name>WILD_NO_BEEP</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wim_flags</name><index>[<expr><name>wim_index</name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_BUFLASTUSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>WILD_BUFLASTUSED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><name>did_wild_list</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wim_flags</name><index>[<expr><name>wim_index</name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LIST</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>showmatches</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_wild_list</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wim_flags</name><index>[<expr><name>wim_index</name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LONGEST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_LONGEST</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wim_flags</name><index>[<expr><name>wim_index</name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_FULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_NEXT</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>wim_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wim_flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LONGEST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_LONGEST</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_EXPAND_KEEP</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ExpandOne</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WILD_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>cmdline_changed</name>;</goto>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>wim_flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>WIM_LONGEST</name> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wim_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wim_flags</name><index>[<expr><name>wim_index</name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LIST</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name>p_wmnu</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wim_flags</name><index>[<expr><name>wim_index</name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_FULL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>wim_flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LONGEST</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>p_wmnu_save</name> <init>= <expr><name>p_wmnu</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_wmnu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_PREV</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_wmnu</name> <operator>=</operator> <name>p_wmnu_save</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>showmatches</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>p_wmnu</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>wim_flags</name><index>[<expr><name>wim_index</name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LIST</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>showmatches</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_wild_list</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wim_flags</name><index>[<expr><name>wim_index</name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LONGEST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_LONGEST</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wim_flags</name><index>[<expr><name>wim_index</name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_FULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_NEXT</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_WILD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wim_index</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>wim_index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ESC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gotesc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_changed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gotesc</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_S_TAB</name> <operator>&amp;&amp;</operator> <name>KeyTyped</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_EXPAND_KEEP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>
<operator>&amp;&amp;</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_PREV</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>
<operator>&amp;&amp;</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_PREV</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_changed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_ZERO</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>do_abbr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 




<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>K_BS</name></expr>:</case>
<case>case <expr><name>Ctrl_H</name></expr>:</case>
<case>case <expr><name>K_DEL</name></expr>:</case>
<case>case <expr><name>K_KDEL</name></expr>:</case>
<case>case <expr><name>Ctrl_W</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_KDEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_DEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_DEL</name> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>!=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>K_DEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+=</operator> <call><name>mb_off_next</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mb_prevptr</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_W</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>&amp;&amp;</operator> <call><name>vim_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mb_prevptr</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>&amp;&amp;</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mb_prevptr</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><call><name>mb_get_class</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_W</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>&amp;&amp;</operator> <call><name>vim_isspace</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isspace</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-=</operator> <name>j</name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>is_state</name><operator>.</operator><name>search_start</name></name> <operator>=</operator> <name><name>is_state</name><operator>.</operator><name>save_cursor</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>is_state</name><operator>.</operator><name>old_viewstate</name></name> <operator>=</operator> <name><name>is_state</name><operator>.</operator><name>init_viewstate</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_W</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdprompt</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>indent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exmode_active</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_not_changed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd_silent</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is_state</name><operator>.</operator><name>search_start</name></name> <operator>=</operator> <name><name>is_state</name><operator>.</operator><name>save_cursor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<goto>goto <name>returncmd</name>;</goto> 
</block_content>}</block></if></if_stmt>
<goto>goto <name>cmdline_changed</name>;</goto>

<case>case <expr><name>K_INS</name></expr>:</case>
<case>case <expr><name>K_KINS</name></expr>:</case>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>overstrike</name></name> <operator>=</operator> <operator>!</operator><name><name>ccline</name><operator>.</operator><name>overstrike</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>cmdline_not_changed</name>;</goto>

<case>case <expr><name>Ctrl_HAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>map_to_exists_mode</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>LANGMAP</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>State</name> <operator>^=</operator> <name>LANGMAP</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>im_set_active</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>b_im_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>LANGMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b_im_ptr</name> <operator>=</operator> <name>B_IMODE_LMAP</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b_im_ptr</name> <operator>=</operator> <name>B_IMODE_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><ternary><condition><expr><operator>(</operator><name>p_imdisable</name> <operator>&amp;&amp;</operator> <name>b_im_ptr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><operator>*</operator><name>b_im_ptr</name> <operator>==</operator> <name>B_IMODE_IM</name></expr> </then><else>: <expr><call><name>im_get_status</name><argument_list>()</argument_list></call></expr></else></ternary></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>im_set_active</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>b_im_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b_im_ptr</name> <operator>=</operator> <name>B_IMODE_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>im_set_active</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>b_im_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b_im_ptr</name> <operator>=</operator> <name>B_IMODE_IM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>b_im_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b_im_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_iminsert_global</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_imsearch_global</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>status_redraw_curbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>cmdline_not_changed</name>;</goto>


<case>case <expr><name>Ctrl_U</name></expr>:</case>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is_state</name><operator>.</operator><name>search_start</name></name> <operator>=</operator> <name><name>is_state</name><operator>.</operator><name>save_cursor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_changed</name>;</goto>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>Ctrl_Y</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>SELECT_CLEARED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>SELECT_DONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_copy_modeless_selection</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ESC</name></expr>:</case> 
<case>case <expr><name>Ctrl_C</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>exmode_active</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>ex_normal_busy</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_not_changed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gotesc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<goto>goto <name>returncmd</name>;</goto> 

<case>case <expr><name>Ctrl_R</name></expr>:</case> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>putcmdline</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>c</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>Ctrl_O</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>Ctrl_R</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>Ctrl_R</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>extra_char</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><name>new_cmdpos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>==</operator> <literal type="char">'='</literal> 
<operator>||</operator> <name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_expr_register</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>ESC</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>cmdline_paste</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name> <operator>==</operator> <name>Ctrl_R</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gotesc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<goto>goto <name>returncmd</name>;</goto> 
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>new_cmdpos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_cmdpos</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name>new_cmdpos</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_changed</name>;</goto>

<case>case <expr><name>Ctrl_D</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>showmatches</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXPAND_NOTHING</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue> 

<case>case <expr><name>K_RIGHT</name></expr>:</case>
<case>case <expr><name>K_S_RIGHT</name></expr>:</case>
<case>case <expr><name>K_C_RIGHT</name></expr>:</case>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cmdline_charsize</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>+</operator> <name>i</name> <operator>&gt;=</operator> <name>Columns</name> <operator>*</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name>
<operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
while <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <name>K_S_RIGHT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_C_RIGHT</name>
<operator>||</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name><operator>|</operator><name>MOD_MASK_CTRL</name><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_cmdspos_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>

<case>case <expr><name>K_LEFT</name></expr>:</case>
<case>case <expr><name>K_S_LEFT</name></expr>:</case>
<case>case <expr><name>K_C_LEFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_not_changed</name>;</goto></block_content></block></if></if_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>-=</operator> <call><name>cmdline_charsize</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>K_S_LEFT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_C_LEFT</name>
<operator>||</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name><operator>|</operator><name>MOD_MASK_CTRL</name><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_cmdspos_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>

<case>case <expr><name>K_IGNORE</name></expr>:</case>

<goto>goto <name>cmdline_not_changed</name>;</goto>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>


<case>case <expr><name>K_F4</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>==</operator> <name>MOD_MASK_ALT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<goto>goto <name>cmdline_not_changed</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>K_MIDDLEDRAG</name></expr>:</case>
<case>case <expr><name>K_MIDDLERELEASE</name></expr>:</case>
<goto>goto <name>cmdline_not_changed</name>;</goto> 

<case>case <expr><name>K_MIDDLEMOUSE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_not_changed</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>available</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmdline_paste</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>cmdline_paste</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_changed</name>;</goto>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>K_DROP</name></expr>:</case>
<expr_stmt><expr><call><name>cmdline_paste</name><argument_list>(<argument><expr><literal type="char">'~'</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_changed</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>K_LEFTDRAG</name></expr>:</case>
<case>case <expr><name>K_LEFTRELEASE</name></expr>:</case>
<case>case <expr><name>K_RIGHTDRAG</name></expr>:</case>
<case>case <expr><name>K_RIGHTRELEASE</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>ignore_drag_release</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_not_changed</name>;</goto></block_content></block></if></if_stmt>

<case>case <expr><name>K_LEFTMOUSE</name></expr>:</case>
<case>case <expr><name>K_RIGHTMOUSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_LEFTRELEASE</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_RIGHTRELEASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ignore_drag_release</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ignore_drag_release</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_not_changed</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mouse_row</name> <operator>&lt;</operator> <name>cmdline_row</name> <operator>&amp;&amp;</operator> <name><name>clip_star</name><operator>.</operator><name>available</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>, <decl><type ref="prev"/><name>is_click</name></decl>, <decl><type ref="prev"/><name>is_drag</name></decl>;</decl_stmt>




<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>get_mouse_button</name><argument_list>(<argument><expr><call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>is_click</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_drag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mouse_model_popup</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>button</name> <operator>==</operator> <name>MOUSE_LEFT</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mod_mask</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clip_modeless</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>is_click</name></expr></argument>, <argument><expr><name>is_drag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_cmdspos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</condition>
<incr><expr><operator>++</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cmdline_charsize</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mouse_row</name> <operator>&lt;=</operator> <name>cmdline_row</name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>/</operator> <name>Columns</name>
<operator>&amp;&amp;</operator> <name>mouse_col</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>%</operator> <name>Columns</name> <operator>+</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>correct_cmdspos</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name>
<operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<goto>goto <name>cmdline_not_changed</name>;</goto>


<case>case <expr><name>K_MOUSEDOWN</name></expr>:</case>
<case>case <expr><name>K_MOUSEUP</name></expr>:</case>
<case>case <expr><name>K_MOUSELEFT</name></expr>:</case>
<case>case <expr><name>K_MOUSERIGHT</name></expr>:</case>

<case>case <expr><name>K_X1MOUSE</name></expr>:</case>
<case>case <expr><name>K_X1DRAG</name></expr>:</case>
<case>case <expr><name>K_X1RELEASE</name></expr>:</case>
<case>case <expr><name>K_X2MOUSE</name></expr>:</case>
<case>case <expr><name>K_X2DRAG</name></expr>:</case>
<case>case <expr><name>K_X2RELEASE</name></expr>:</case>
<case>case <expr><name>K_MOUSEMOVE</name></expr>:</case>
<goto>goto <name>cmdline_not_changed</name>;</goto>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>K_LEFTMOUSE_NM</name></expr>:</case> 
<case>case <expr><name>K_LEFTRELEASE_NM</name></expr>:</case>
<goto>goto <name>cmdline_not_changed</name>;</goto>

<case>case <expr><name>K_VER_SCROLLBAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_do_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>

<case>case <expr><name>K_HOR_SCROLLBAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_do_horiz_scroll</name><argument_list>(<argument><expr><name>scrollbar_value</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>K_TABLINE</name></expr>:</case>
<case>case <expr><name>K_TABMENU</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><call><name>gui_use_tabline</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_set_curtab</name><argument_list>(<argument><expr><call><name>tabpage_index</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>K_SELECT</name></expr>:</case> 
<goto>goto <name>cmdline_not_changed</name>;</goto>

<case>case <expr><name>Ctrl_B</name></expr>:</case> 
<case>case <expr><name>K_HOME</name></expr>:</case>
<case>case <expr><name>K_KHOME</name></expr>:</case>
<case>case <expr><name>K_S_HOME</name></expr>:</case>
<case>case <expr><name>K_C_HOME</name></expr>:</case>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_cmdspos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>

<case>case <expr><name>Ctrl_E</name></expr>:</case> 
<case>case <expr><name>K_END</name></expr>:</case>
<case>case <expr><name>K_KEND</name></expr>:</case>
<case>case <expr><name>K_S_END</name></expr>:</case>
<case>case <expr><name>K_C_END</name></expr>:</case>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_cmdspos_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>

<case>case <expr><name>Ctrl_A</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<goto>goto <name>cmdline_changed</name>;</goto>

<case>case <expr><name>Ctrl_L</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>may_add_char_to_search</name><argument_list>(<argument><expr><name>firstc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_state</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_not_changed</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>WILD_LONGEST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<goto>goto <name>cmdline_changed</name>;</goto>

<case>case <expr><name>Ctrl_N</name></expr>:</case> 
<case>case <expr><name>Ctrl_P</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_P</name><operator>)</operator></expr> ?</condition><then> <expr><name>WILD_PREV</name></expr> </then><else>: <expr><name>WILD_NEXT</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>firstc</name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>K_UP</name></expr>:</case>
<case>case <expr><name>K_DOWN</name></expr>:</case>
<case>case <expr><name>K_S_UP</name></expr>:</case>
<case>case <expr><name>K_S_DOWN</name></expr>:</case>
<case>case <expr><name>K_PAGEUP</name></expr>:</case>
<case>case <expr><name>K_KPAGEUP</name></expr>:</case>
<case>case <expr><name>K_PAGEDOWN</name></expr>:</case>
<case>case <expr><name>K_KPAGEDOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>get_hislen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>firstc</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<goto>goto <name>cmdline_not_changed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>hiscnt</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>lookfor</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lookfor</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_not_changed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lookfor</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>lookfor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_UP</name><operator>||</operator> <name>c</name> <operator>==</operator> <name>K_S_UP</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_PAGEUP</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KPAGEUP</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hiscnt</name> <operator>==</operator> <call><name>get_hislen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>hiscnt</name> <operator>=</operator> <operator>*</operator><call><name>get_hisidx</name><argument_list>(<argument><expr><name>histype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>hiscnt</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_hisidx</name><argument_list>(<argument><expr><name>histype</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <call><name>get_hislen</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hiscnt</name> <operator>=</operator> <call><name>get_hislen</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>hiscnt</name> <operator>!=</operator> <operator>*</operator><call><name>get_hisidx</name><argument_list>(<argument><expr><name>histype</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>hiscnt</name></expr>;</expr_stmt></block_content></block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>hiscnt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hiscnt</name> <operator>==</operator> <operator>*</operator><call><name>get_hisidx</name><argument_list>(<argument><expr><name>histype</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hiscnt</name> <operator>=</operator> <call><name>get_hislen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>hiscnt</name> <operator>==</operator> <call><name>get_hislen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hiscnt</name> <operator>==</operator> <call><name>get_hislen</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>hiscnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>hiscnt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hiscnt</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>get_histentry</name><argument_list>(<argument><expr><name>histype</name></expr></argument>)</argument_list></call><index>[<expr><name>hiscnt</name></expr>]</index><operator>.</operator><name>hisstr</name>
<operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hiscnt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>!=</operator> <name>K_UP</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_DOWN</name><operator>)</operator>
<operator>||</operator> <name>hiscnt</name> <operator>==</operator> <name>i</name>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><call><name>get_histentry</name><argument_list>(<argument><expr><name>histype</name></expr></argument>)</argument_list></call><index>[<expr><name>hiscnt</name></expr>]</index><operator>.</operator><name>hisstr</name></expr></argument>,
<argument><expr><name>lookfor</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>hiscnt</name> <operator>!=</operator> <name>i</name></expr>)</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_firstc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hiscnt</name> <operator>==</operator> <call><name>get_hislen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>lookfor</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_histentry</name><argument_list>(<argument><expr><name>histype</name></expr></argument>)</argument_list></call><index>[<expr><name>hiscnt</name></expr>]</index><operator>.</operator><name>hisstr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>histype</name> <operator>==</operator> <name>HIST_SEARCH</name>
<operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>lookfor</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>old_firstc</name> <operator>=</operator> <name><name>p</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>firstc</name></expr>)</condition>
<block>{<block_content>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>old_firstc</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>firstc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>firstc</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>alloc_cmdbuff</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>returncmd</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>alloc_cmdbuff</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>returncmd</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_changed</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>Ctrl_G</name></expr>:</case> 
<case>case <expr><name>Ctrl_T</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>may_adjust_incsearch_highlighting</name><argument_list>(
<argument><expr><name>firstc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_not_changed</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>Ctrl_V</name></expr>:</case>
<case>case <expr><name>Ctrl_Q</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev_mod_mask</name> <init>= <expr><name>mod_mask</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ignore_drag_release</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putcmdline</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_literal</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>do_abbr</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>extra_char</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmd_silent</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <name>ESC</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CSI</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>prev_mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>decodeModifyOtherKeys</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>Ctrl_K</name></expr>:</case>
<expr_stmt><expr><name>ignore_drag_release</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putcmdline</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_digraph</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_char</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>Ctrl__</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ari</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmd_hkmap</name> <operator>=</operator> <operator>!</operator><name>cmd_hkmap</name></expr>;</expr_stmt>
<goto>goto <name>cmdline_not_changed</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>K_PS</name></expr>:</case>
<expr_stmt><expr><call><name>bracketed_paste</name><argument_list>(<argument><expr><name>PASTE_CMDLINE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cmdline_changed</name>;</goto>

<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>intr_char</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gotesc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<goto>goto <name>returncmd</name>;</goto> 
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>





<if_stmt><if>if <condition>(<expr><name>do_abbr</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>ccheck_abbr</name><argument_list>(


<argument><expr><ternary><condition><expr><operator>(</operator><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>c</name> <operator>+</operator> <name>ABBR_OFF</name><operator>)</operator></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></argument>)</argument_list></call>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_RSB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cmdline_changed</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>mod_mask</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_on_cmdline</name><argument_list>(<argument><expr><call><name>get_special_key_name</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mod_mask</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_on_cmdline</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_on_cmdline</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>cmdline_changed</name>;</goto>









<label><name>cmdline_not_changed</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is_state</name><operator>.</operator><name>incsearch_postponed</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>cmdline_changed</name>:</label>

<expr_stmt><expr><call><name>trigger_cmd_autocmd</name><argument_list>(<argument><expr><name>cmdline_type</name></expr></argument>, <argument><expr><name>EVENT_CMDLINECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>may_do_incsearch_highlighting</name><argument_list>(<argument><expr><name>firstc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name>
<operator>&amp;&amp;</operator> <call><name>cmdline_has_arabic</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>




<if_stmt><if>if <condition>(<expr><call><name>vpeekc</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<label><name>returncmd</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cmdmsg_rl</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ExpandCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>xpc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>finish_incsearch_highlighting</name><argument_list>(<argument><expr><name>gotesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_state</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>&amp;&amp;</operator> <name>firstc</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>some_key_typed</name> <operator>||</operator> <name>histype</name> <operator>==</operator> <name>HIST_SEARCH</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>add_to_history</name><argument_list>(<argument><expr><name>histype</name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>histype</name> <operator>==</operator> <name>HIST_SEARCH</name></expr> ?</condition><then> <expr><name>firstc</name></expr> </then><else>: <expr><name>NUL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>firstc</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_last_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_last_cmdline</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gotesc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abandon_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>msg_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>save_msg_scroll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>some_key_typed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>trigger_cmd_autocmd</name><argument_list>(<argument><expr><name>cmdline_type</name></expr></argument>, <argument><expr><name>EVENT_CMDLINELEAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>b_im_ptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>b_im_ptr</name> <operator>!=</operator> <name>B_IMODE_LMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>im_save_status</name><argument_list>(<argument><expr><name>b_im_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>im_set_active</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>sb_text_end_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>theend</name>:</label>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>did_save_ccline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>restore_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>getcmdline_prompt</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>firstc</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>xp_context</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>xp_arg</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cmdline_info_T</name></type> <name>save_ccline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_save_ccline</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msg_col_save</name> <init>= <expr><name>msg_col</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msg_silent_save</name> <init>= <expr><name>msg_silent</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>save_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_save_ccline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ccline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmdline_info_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdprompt</name></name> <operator>=</operator> <name>prompt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdattr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>xp_context</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>xp_arg</name></name> <operator>=</operator> <name>xp_arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>input_fn</name></name> <operator>=</operator> <operator>(</operator><name>firstc</name> <operator>==</operator> <literal type="char">'@'</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>getcmdline_int</name><argument_list>(<argument><expr><name>firstc</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_save_ccline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>restore_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>msg_silent_save</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>msg_col_save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>int</name></type>
<name>check_opt_wim</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>new_wim_flags</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_wim_flags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_wim</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"longest"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_wim_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>|=</operator> <name>WIM_LONGEST</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"full"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_wim_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>|=</operator> <name>WIM_FULL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_wim_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>|=</operator> <name>WIM_LIST</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"lastused"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_wim_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>|=</operator> <name>WIM_BUFLASTUSED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>new_wim_flags</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>new_wim_flags</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
</block_content>}</block></while>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wim_flags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>new_wim_flags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>text_locked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>textlock</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>text_locked_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><call><name>get_text_locked_msg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>get_text_locked_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e_cmdwin</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>e_secure</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>curbuf_locked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curbuf_lock</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E788: Not allowed to edit another buffer now"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>allbuf_locked</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>allbuf_locked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>allbuf_lock</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E811: Not allowed to change buffer information now"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmdline_charsize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>ptr2cells</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_cmdspos</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdindent</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <literal type="number">0</literal> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdindent</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_cmdspos_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_cmdspos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>KeyTyped</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>Columns</name> <operator>*</operator> <name>Rows</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cmdline_charsize</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>correct_cmdspos</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>+=</operator> <name>c</name><operator>)</operator> <operator>&gt;=</operator> <name>m</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>-=</operator> <name>c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>correct_cmdspos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cells</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>%</operator> <name>Columns</name> <operator>+</operator> <name>cells</name> <operator>&gt;</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>getexline</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, 
<parameter><decl><type><name>void</name> <modifier>*</modifier><name>cookie</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>do_concat</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exec_from_reg</name> <operator>&amp;&amp;</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>getcmdline</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>do_concat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>getexmodeline</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>promptc</name></decl></parameter>, 

<parameter><decl><type><name>void</name> <modifier>*</modifier><name>cookie</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <name>do_concat</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>line_ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>escaped</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>vcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msg_col</name> <operator>||</operator> <name>msg_didout</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>promptc</name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>promptc</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_prompt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>indent</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>startcol</name> <operator>=</operator> <name>msg_col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>promptc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <name>indent</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>indent</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><name>TAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>indent</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>indent</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt>




<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>sw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<expr_stmt><expr><name>prev_char</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ex_normal_busy</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>K_PS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bracketed_paste</name><argument_list>(<argument><expr><name>PASTE_EX</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>redraw</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>escaped</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>BS</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>K_BS</name>
<operator>||</operator> <name>c1</name> <operator>==</operator> <name>DEL</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>K_DEL</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>K_KDEL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<goto>goto <name>redraw</name>;</goto>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>Ctrl_U</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>redraw</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>Ctrl_T</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sw</name> <operator>=</operator> <call><name>get_sw_value</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <call><name>get_indent_str</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>indent</name> <operator>+=</operator> <name>sw</name> <operator>-</operator> <name>indent</name> <operator>%</operator> <name>sw</name></expr>;</expr_stmt>
<label><name>add_indent</name>:</label>
<while>while <condition>(<expr><call><name>get_indent_str</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>indent</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<label><name>redraw</name>:</label>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>TAB</name></expr>)</condition>
<block>{<block_content>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><operator>++</operator><name>vcol</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition>;</do>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>Ctrl_D</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_char</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>prev_char</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prev_char</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ex_keep_indent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><operator>--</operator><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <call><name>get_indent_str</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>indent</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>indent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>indent</name> <operator>-=</operator> <name>indent</name> <operator>%</operator> <call><name>get_sw_value</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>(<expr><call><name>get_indent_str</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>indent</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<goto>goto <name>add_indent</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>Ctrl_Q</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>escaped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <name>TAB</name></expr>)</condition>
<block>{<block_content>

<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><operator>++</operator><name>vcol</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition>;</do>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(
<argument><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <call><name>char2cells</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>escaped</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pend</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pend</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>bcount</name> <operator>&amp;&amp;</operator> <name><name>pend</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>-</operator> <name>bcount</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>bcount</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>bcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <operator>(</operator><name>bcount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pend</name> <operator>-=</operator> <operator>(</operator><name>bcount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pend</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bcount</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>pend</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pend</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>


<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>&lt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>msg_row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_CURSOR_SHAPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type>
<name>cmdline_overstrike</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ccline</name><operator>.</operator><name>overstrike</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>cmdline_at_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>colnr_T</name></type>
<name>cmdline_getvcol_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MAXCOL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>redrawcmd_preedit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>xic</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>p_imdisable</name>
<operator>&amp;&amp;</operator> <call><name>im_is_preediting</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmdpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmdspos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_col</name> <operator>=</operator> <name>msg_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdspos</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdindent</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>preedit_start_col</name>
<operator>&amp;&amp;</operator> <name>cmdpos</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>cmdspos</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>cmdpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdpos</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>cmdpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>cmdspos</name> <operator>+=</operator> <name>preedit_start_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdpos</name> <operator>+=</operator> <name>preedit_start_col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name> <operator>+</operator> <operator>(</operator><name>cmdspos</name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Columns</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>cmdspos</name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cmdpos</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>char_attr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>im_get_feedback_attr</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>cmdpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>char_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans_len_attr</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>cmdpos</name></expr></argument>, <argument><expr><name>char_len</name></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdpos</name> <operator>+=</operator> <name>char_len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>old_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>old_col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<function><type><specifier>static</specifier> <name>void</name></type>
<name>alloc_cmdbuff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbufflen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>realloc_cmdbuff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbufflen</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alloc_cmdbuff</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> 
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>xpc</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>xpc</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>xpc</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_NOTHING</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>xpc</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_UNSUCCESSFUL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>ccline</name><operator>.</operator><name>xpc</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>-</operator> <name>p</name><operator>)</operator></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>xpc</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>arshape_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>free_arshape_buf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>arshape_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>draw_cmdline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>start</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name> <operator>&amp;&amp;</operator> <call><name>cmdline_has_arabic</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>, <decl><type ref="prev"/><name>pc1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u8c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>u8cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>buflen</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>arshape_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>arshape_buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arshape_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>arshape_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>mb_l</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>utfc_ptr2char_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ARABIC_CHAR</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name>prev_c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_c1</name> <operator>=</operator> <name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <name>mb_l</name> <operator>&gt;=</operator> <name>start</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>mb_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <name>mb_l</name> <operator>&gt;=</operator> <name>start</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>pcc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>utfc_ptr2char_len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>mb_l</name></expr></argument>, <argument><expr><name>pcc</name></expr></argument>,
<argument><expr><name>start</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>j</name> <operator>-</operator> <name>mb_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>arabic_shape</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pc1</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>u8c</name></expr></argument>, <argument><expr><name>arshape_buf</name> <operator>+</operator> <name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>arshape_buf</name> <operator>+</operator> <name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u8cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name><name>u8cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>arshape_buf</name> <operator>+</operator> <name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>arshape_buf</name> <operator>+</operator> <name>newlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>mb_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <name>mb_l</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name>arshape_buf</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>putcmdline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_char</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_char_shift</name> <operator>=</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>unputcmdline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>==</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>,
<argument><expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_char</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>put_on_cmdline</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>redraw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbufflen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>realloc_cmdbuff</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ccline</name><operator>.</operator><name>overstrike</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>&amp;&amp;</operator> <name>m</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition>
<incr><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>m</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>arabic_maycombine</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>arabic_combine</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name>
<operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>+=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>msg_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmd_silent</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdline_row</name> <operator>!=</operator> <name>i</name> <operator>||</operator> <name><name>ccline</name><operator>.</operator><name>overstrike</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>KeyTyped</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>Columns</name> <operator>*</operator> <name>Rows</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cmdline_charsize</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>correct_cmdspos</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>+</operator> <name>c</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>redraw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>cmdline_info_T</name></type> <name>prev_ccline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_ccline_used</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>save_cmdline</name><parameter_list>(<parameter><decl><type><name>cmdline_info_T</name> <modifier>*</modifier></type><name>ccp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev_ccline_used</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev_ccline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmdline_info_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_ccline_used</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ccp</name> <operator>=</operator> <name>prev_ccline</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_ccline</name> <operator>=</operator> <name>ccline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>restore_cmdline</name><parameter_list>(<parameter><decl><type><name>cmdline_info_T</name> <modifier>*</modifier></type><name>ccp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>ccline</name> <operator>=</operator> <name>prev_ccline</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_ccline</name> <operator>=</operator> <operator>*</operator><name>ccp</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmdline_paste</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>literally</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>remcr</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allocated</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>!=</operator> <name>Ctrl_F</name> <operator>&amp;&amp;</operator> <name>regname</name> <operator>!=</operator> <name>Ctrl_P</name> <operator>&amp;&amp;</operator> <name>regname</name> <operator>!=</operator> <name>Ctrl_W</name>
<operator>&amp;&amp;</operator> <name>regname</name> <operator>!=</operator> <name>Ctrl_A</name> <operator>&amp;&amp;</operator> <name>regname</name> <operator>!=</operator> <name>Ctrl_L</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_yank_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>regname</name> <operator>=</operator> <call><name>may_get_selection</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><operator>++</operator><name>textlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_spec_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocated</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>textlock</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_is</name> <operator>&amp;&amp;</operator> <name>regname</name> <operator>==</operator> <name>Ctrl_W</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</init> <condition><expr><name>w</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>w</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>w</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>w</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name><operator>)</operator> <operator>-</operator> <name>w</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>p_ic</name></expr> ?</condition><then> <expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> </then><else>: <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cmdline_paste_str</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>literally</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>allocated</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>cmdline_paste_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>literally</name></expr></argument>, <argument><expr><name>remcr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>cmdline_paste_str</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literally</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>cv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>literally</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_on_cmdline</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cv</name> <operator>==</operator> <name>Ctrl_V</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_cptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cv</name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>ESC</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_C</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_L</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>intr_char</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_BSL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmdline_del</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>from</name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>void</name></type>
<name>redrawcmdline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>redrawcmdline_ex</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>redrawcmdline_ex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>do_compute_cmdrow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_compute_cmdrow</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>redrawcmdprompt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdprompt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ccline</name><operator>.</operator><name>cmdprompt</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdattr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdindent</name></name> <operator>=</operator> <name>msg_col</name> <operator>+</operator> <operator>(</operator><name>msg_row</name> <operator>-</operator> <name>cmdline_row</name><operator>)</operator> <operator>*</operator> <name>Columns</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>ccline</name><operator>.</operator><name>cmdindent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdindent</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>redrawcmd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>cmdline_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmdprompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_cmdspos_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>extra_char</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putcmdline</name><argument_list>(<argument><expr><name>extra_char</name></expr></argument>, <argument><expr><name>extra_char_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 



<expr_stmt><expr><name>skip_redraw</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>compute_cmdrow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exmode_active</name> <operator>||</operator> <name>msg_scrolled</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>lastwin</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>lastwin</name><operator>-&gt;</operator><name>w_height</name></name>
<operator>+</operator> <name><name>lastwin</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cursorcmd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name> <operator>+</operator> <operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Columns</name> <operator>-</operator> <operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name> <operator>+</operator> <operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Columns</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_ON_THE_SPOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redrawcmd_preedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mch_update_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gotocmdline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>clr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>clr</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>cmdline_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>ccheck_abbr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>spos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_paste</name> <operator>||</operator> <name>no_abbr</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>



<while>while <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>spos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>spos</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>spos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name>spos</name> <operator>&gt;</operator> <literal type="number">5</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>spos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>spos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>spos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>spos</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>spos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>check_abbr</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name>spos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>vim_strsave_fnameescape</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>shell</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>PATH_ESC_CHARS</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'!'</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>vim_isfilec</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><ternary><condition><expr><name>shell</name></expr> ?</condition><then> <expr><name>SHELL_ESC_CHARS</name></expr> </then><else>: <expr><name>PATH_ESC_CHARS</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shell</name> <operator>&amp;&amp;</operator> <call><name>csh_like_shell</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>



<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>escape_fname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>escape_fname</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>tilde_replace</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>orig_pat</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_files</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>orig_pat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>orig_pat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>home_replace_save</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>cmdline_info_T</name> <modifier>*</modifier></type>
<name>get_cmdline_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>ccline</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>cmdline_info_T</name> <modifier>*</modifier></type>
<name>get_ccline_ptr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>ccline</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_ccline_used</name> <operator>&amp;&amp;</operator> <name><name>prev_ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>prev_ccline</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>get_cmdline_str</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cmdline_info_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_ccline_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_getcmdline</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>get_cmdline_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_getcmdpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cmdline_info_T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_ccline_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>cmdpos</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_cmdline_pos</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cmdline_info_T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_ccline_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_cmdpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_cmdpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_setcmdpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>set_cmdline_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_getcmdtype</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_cmdline_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>int</name></type>
<name>get_cmdline_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cmdline_info_T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_ccline_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NUL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cmdfirstc</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>input_fn</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'@'</literal></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>cmdfirstc</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>int</name></type>
<name>get_cmdline_firstc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>get_list_range</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <call><name>vim_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>str</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>*</operator><name>num2</name> <operator>=</operator> <operator>*</operator><name>num1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>char</name> <modifier>*</modifier></type>
<name>check_cedit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_cedit</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cedit_key</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>string_to_key</name><argument_list>(<argument><expr><name>p_cedit</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e_invarg</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cedit_key</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>open_cmdwin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>old_curbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>histtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>winsizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_restart_edit</name> <init>= <expr><name>restart_edit</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_exmode</name> <init>= <expr><name>exmode_active</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>save_cmdmsg_rl</name> <init>= <expr><name>cmdmsg_rl</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>save_KeyTyped</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>K_IGNORE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_curbuf</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>win_size_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name>winsizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>pum_undisplay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>tab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>noswapfile</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>win_split</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_cwh</name></expr></argument>, <argument><expr><name>WSP_BOT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>winsizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>K_IGNORE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cmdwin_type</name> <operator>=</operator> <call><name>get_cmdline_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_ecmd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ECMD_ONE</name></expr></argument>, <argument><expr><name>ECMD_HIDE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFFILEPRE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setfname</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"[Command Line]"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFFILEPOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bt"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"nofile"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>=</operator> <name>cmdmsg_rl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdmsg_rl</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>RESET_BINDING</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>++</operator><name>curbuf_lock</name></expr>;</expr_stmt>


<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>histtype</name> <operator>=</operator> <call><name>hist_char2type</name><argument_list>(<argument><expr><name>cmdwin_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>histtype</name> <operator>==</operator> <name>HIST_CMD</name> <operator>||</operator> <name>histtype</name> <operator>==</operator> <name>HIST_DEBUG</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_wc</name> <operator>==</operator> <name>TAB</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>add_map</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;buffer&gt; &lt;Tab&gt; &lt;C-X&gt;&lt;C-V&gt;"</literal></expr></argument>, <argument><expr><name>INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_map</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;buffer&gt; &lt;Tab&gt; a&lt;C-X&gt;&lt;C-V&gt;"</literal></expr></argument>, <argument><expr><name>NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ft"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"vim"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>curbuf_lock</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>init_history</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_hislen</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><call><name>get_hisidx</name><argument_list>(<argument><expr><name>histtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <call><name>get_hislen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_histentry</name><argument_list>(<argument><expr><name>histtype</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>hisstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><call><name>get_histentry</name><argument_list>(<argument><expr><name>histtype</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>hisstr</name></expr></argument>,
<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
while <condition>(<expr><name>i</name> <operator>!=</operator> <operator>*</operator><call><name>get_hisidx</name><argument_list>(<argument><expr><name>histtype</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_line_abv_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invalidate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>exmode_active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>trigger_cmd_autocmd</name><argument_list>(<argument><expr><name>cmdwin_type</name></expr></argument>, <argument><expr><name>EVENT_CMDWINENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>K_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>RedrawingDisabled</name></expr>;</expr_stmt>
<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>main_loop</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>save_KeyTyped</name> <operator>=</operator> <name>KeyTyped</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>trigger_cmd_autocmd</name><argument_list>(<argument><expr><name>cmdwin_type</name></expr></argument>, <argument><expr><name>EVENT_CMDWINLEAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>save_KeyTyped</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>cmdwin_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exmode_active</name> <operator>=</operator> <name>save_exmode</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>old_curwin</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_curbuf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E199: Active window or buffer deleted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>cmdwin_result</name> <operator>!=</operator> <name>K_IGNORE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdwin_result</name> <operator>==</operator> <name>K_XF1</name> <operator>||</operator> <name>cmdwin_result</name> <operator>==</operator> <name>K_XF2</name></expr>)</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cmdwin_result</name> <operator>==</operator> <name>K_XF2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"qa"</literal></expr> </then><else>: <expr><literal type="string">"qa!"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>histtype</name> <operator>==</operator> <name>HIST_CMD</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>CAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>cmdwin_result</name> <operator>==</operator> <name>K_XF2</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"qa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>cmdwin_result</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbufflen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbufflen</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdwin_result</name> <operator>==</operator> <name>K_IGNORE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_cmdspos_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>old_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_close</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close_buffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>bufref</name><operator>.</operator><name>br_buf</name></name></expr></argument>, <argument><expr><name>DOBUF_WIPE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>win_size_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>winsizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>winsizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name>save_restart_edit</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cmdmsg_rl</name> <operator>=</operator> <name>save_cmdmsg_rl</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cmdwin_result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 








<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>script_get</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>theline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end_pattern</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dot</name><index>[]</index></name> <init>= <expr><literal type="string">"."</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>getline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_pattern</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>end_pattern</name> <operator>=</operator> <name>dot</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>theline</name> <operator>=</operator> <call><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name><operator>-&gt;</operator><name>cs_looplevel</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>NUL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>theline</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>end_pattern</name></expr></argument>, <argument><expr><name>theline</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>void</name></type>
<name>get_user_input</name><parameter_list>(
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>inputdialog</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>secret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prompt</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmd_silent_save</name> <init>= <expr><name>cmd_silent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>defstr</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xp_type</name> <init>= <expr><name>EXPAND_NOTHING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>xp_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_CONSOLE_INPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>no_console_input</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_not_a_term</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>prompt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strrchr</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>prompt</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prompt</name></expr></argument>, <argument><expr><call><name>get_echo_attr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_starthere</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>defstr</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>defstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stuffReadbuffSpec</name><argument_list>(<argument><expr><name>defstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inputdialog</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>xp_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xp_namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>argt</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xp_name</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xp_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xp_namelen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>xp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_compl_arg</name><argument_list>(<argument><expr><name>xp_name</name></expr></argument>, <argument><expr><name>xp_namelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xp_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argt</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>xp_arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>defstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_ex_normal_busy</name> <init>= <expr><name>ex_normal_busy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ex_normal_busy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator>
<call><name>getcmdline_prompt</name><argument_list>(<argument><expr><ternary><condition><expr><name>secret</name></expr> ?</condition><then> <expr><name>NUL</name></expr> </then><else>: <expr><literal type="char">'@'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>get_echo_attr</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>xp_type</name></expr></argument>, <argument><expr><name>xp_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ex_normal_busy</name> <operator>=</operator> <name>save_ex_normal_busy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inputdialog</name> <operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>
<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>tv_get_string_buf</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>xp_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>cmd_silent_save</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
