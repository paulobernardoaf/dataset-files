<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\ex_cmds2.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>







<function><type><name>int</name></type>
<name>autowrite</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p_aw</name> <operator>||</operator> <name>p_awa</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>p_write</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <call><name>bt_dontwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>forceit</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_ro</name></name><operator>)</operator> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>buf_write_all</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>autowrite_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p_aw</name> <operator>||</operator> <name>p_awa</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>p_write</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ro</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bt_dontwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buf_write_all</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>firstbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>check_changed</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>forceit</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCGD_FORCEIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>forceit</name>
<operator>&amp;&amp;</operator> <call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCGD_MULTWIN</name><operator>)</operator> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCGD_AW</name><operator>)</operator> <operator>||</operator> <call><name>autowrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p_confirm</name> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>confirm</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>p_write</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CCGD_ALLBUF</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf2</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf2</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>browse</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dialog_changed</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CCGD_EXCMD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>no_write_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>no_write_message_nobang</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>browse_save_fname</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>do_browse</name><argument_list>(<argument><expr><name>BROWSE_SAVE</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Save As"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>setfname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>|=</operator> <name>BF_NOTEDITED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>dialog_changed</name><parameter_list>(
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>checkall</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buff</name><index>[<expr><name>DIALOG_MSG_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>exarg_T</name></type> <name>ea</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dialog_msg</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Save changes to \"%s\"?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>checkall</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vim_dialog_yesnoallcancel</name><argument_list>(<argument><expr><name>VIM_QUESTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vim_dialog_yesnocancel</name><argument_list>(<argument><expr><name>VIM_QUESTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ea</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VIM_YES</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>browse_save_fname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>check_overwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buf_write_all</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VIM_NO</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>unchanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VIM_ALL</name></expr>)</condition>
<block>{<block_content>





<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf2</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf2</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>browse</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>buf2</name><operator>-&gt;</operator><name>b_p_ro</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>browse_save_fname</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>buf2</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>check_overwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>,
<argument><expr><name><name>buf2</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name><name>buf2</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buf_write_all</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>firstbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VIM_DISCARDALL</name></expr>)</condition>
<block>{<block_content>



<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf2</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>unchanged</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type>
<name>can_abandon</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator> <call><name>buf_hide</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <call><name>autowrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>
<operator>||</operator> <name>forceit</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_bufnum</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bufnrs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bufnump</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>bufnump</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>bufnrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>nr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>bufnrs</name><index>[<expr><operator>*</operator><name>bufnump</name></expr>]</index></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bufnump</name> <operator>=</operator> <operator>*</operator><name>bufnump</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>check_changed_any</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>hidden</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>unload</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bufnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bufcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>bufnrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>FOR_ALL_BUFFERS</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>
<operator>++</operator><name>bufcount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bufcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bufnrs</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>bufcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bufnrs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>bufnrs</name><index>[<expr><name>bufnum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>


<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_bufnum</name><argument_list>(<argument><expr><name>bufnrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufnum</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>add_bufnum</name><argument_list>(<argument><expr><name>bufnrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufnum</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>add_bufnum</name><argument_list>(<argument><expr><name>bufnrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufnum</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bufnum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>bufnrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>hidden</name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>term_job_running</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>term_try_stop_job</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


if <condition>(<expr><call><name>check_changed</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>p_awa</name></expr> ?</condition><then> <expr><name>CCGD_AW</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <name>CCGD_MULTWIN</name>
<operator>|</operator> <name>CCGD_ALLBUF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>bufnum</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exiting</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p_confirm</name> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>confirm</name></name><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>vgetc_busy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<expr><ternary><condition><expr><call><name>term_job_running</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E947: Job still running in buffer \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>
</then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E162: No write since last change for buffer \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>buf_spname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>buf_spname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>save</name> <operator>=</operator> <name>no_wait_return</name></expr>;</expr_stmt>
<expr_stmt><expr><name>no_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_wait_return</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>goto_tabpage_win</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>buf_found</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<label><name>buf_found</name>:</label>


<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_curbuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>unload</name></expr> ?</condition><then> <expr><name>DOBUF_UNLOAD</name></expr> </then><else>: <expr><name>DOBUF_GOTO</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>theend</name>:</label>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>bufnrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>check_fname</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>buf_write_all</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><call><name>buf_write</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>!=</operator> <name>old_curbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_source</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_W</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Warning: Entered other buffer unexpectedly (check autocommands)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_listdo</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_fnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_ei</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p_shm_save</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>qf_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qf_idx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_cdo</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_ldo</name> <operator>||</operator>
<name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_cfdo</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_lfdo</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ex_ni</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>!=</operator> <name>CMD_windo</name> <operator>&amp;&amp;</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>!=</operator> <name>CMD_tabdo</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>save_ei</name> <operator>=</operator> <call><name>au_event_disable</name><argument_list>(<argument><expr><literal type="string">",Syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BF_SYN_SET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>start_global_changes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_windo</name>
<operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_tabdo</name>
<operator>||</operator> <call><name>buf_hide</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>check_changed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>CCGD_AW</name>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr> ?</condition><then> <expr><name>CCGD_FORCEIT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <name>CCGD_EXCMD</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CMD_windo</name></expr>:</case>
<for>for <control>( <init>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>CMD_tabdo</name></expr>:</case>
<for>for<control>( <init>;</init> <condition><expr><name>tp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>CMD_argdo</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_bufdo</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>buf</name> <operator>=</operator> <name>firstbuf</name></expr>;</init> <condition><expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name> <operator>&lt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name>
<operator>||</operator> <operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bl</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name> <operator>&gt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>goto_buffer</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>DOBUF_FIRST</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_cdo</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_ldo</name>
<operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_cfdo</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_lfdo</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>qf_size</name> <operator>=</operator> <call><name>qf_get_valid_size</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>qf_size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>&gt;</operator> <name>qf_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>ex_cc</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>=</operator> <name>qf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>listcmd_busy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_argdo</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ARGCOUNT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>!=</operator> <name>i</name> <operator>||</operator> <operator>!</operator><call><name>editing_arg_idx</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>p_shm_save</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"shm"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_argfile</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"shm"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>p_shm_save</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_shm_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_windo</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>wp</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_tabdo</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_tabpage</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_bufdo</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>next_fnum</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>buf</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_next</name></name></expr>;</init> <condition><expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>next_fnum</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>,
<argument><expr><name>DOCMD_VERBOSE</name> <operator>+</operator> <name>DOCMD_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_bufdo</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>next_fnum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>next_fnum</name></expr></argument> &gt;</argument_list></name> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name> <operator>==</operator> <name>next_fnum</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>



<expr_stmt><expr><name>p_shm_save</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"shm"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>goto_buffer</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>DOBUF_FIRST</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name>next_fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"shm"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>p_shm_save</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_shm_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name> <operator>!=</operator> <name>next_fnum</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_cdo</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_ldo</name>
<operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_cfdo</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_lfdo</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>qf_size</name> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>qf_idx</name> <operator>=</operator> <call><name>qf_get_cur_idx</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ex_cnext</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>qf_get_cur_idx</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>qf_idx</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_windo</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_check_scrollbind</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_windo</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_tabdo</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_argdo</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>listcmd_busy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>save_ei</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>bnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>au_event_restore</name><argument_list>(<argument><expr><name>save_ei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>buf</name> <operator>=</operator> <name>firstbuf</name></expr>;</init> <condition><expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>buf</name> <operator>=</operator> <name>bnext</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>bnext</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>BF_SYN_SET</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BF_SYN_SET</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_SYNTAX</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_syn</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_SYNTAX</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_syn</name></name></expr></argument>,
<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>bnext</name> <operator>=</operator> <name>firstbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>end_global_changes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>ex_compiler</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_cur_comp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"echo globpath(&amp;rtp, 'compiler/*.vim')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator>
<literal type="string">"command -nargs=* CompilerSet set &lt;args&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>






<expr_stmt><expr><name>old_cur_comp</name> <operator>=</operator> <call><name>get_var_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:current_compiler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_cur_comp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_cur_comp</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>old_cur_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator>
<literal type="string">"command -nargs=* CompilerSet setlocal &lt;args&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:current_compiler"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"b:current_compiler"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"compiler/%s.vim"</literal></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>source_runtime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>DIP_ALL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E666: compiler not supported: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":delcommand CompilerSet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_var_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:current_compiler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_internal_string_var</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"b:current_compiler"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>old_cur_comp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_internal_string_var</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:current_compiler"</literal></expr></argument>,
<argument><expr><name>old_cur_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>old_cur_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:current_compiler"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>init_pyxversion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>python3_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pyx</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>python_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pyx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>requires_py_version</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>requires_py_version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>lines</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lines</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_mls</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_fgets</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>IObuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <name><name>IObuff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"python2"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>requires_py_version</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"python3"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>requires_py_version</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><literal type="string">"#requires python 2.x"</literal></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>requires_py_version</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><literal type="string">"#requires python 3.x"</literal></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>requires_py_version</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>requires_py_version</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>source_pyx_file</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>exarg_T</name></type> <name>ex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>requires_py_version</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>init_pyxversion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>p_pyx</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>eap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <operator>*</operator><name>eap</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>v</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">"pyfile"</literal></expr> </then><else>: <expr><literal type="string">"pyfile3"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ex_pyfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"W20: Required python version 2.x not supported, ignoring file: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ex_py3file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"W21: Required python version 3.x not supported, ignoring file: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_pyxfile</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>source_pyx_file</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_pyx</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>init_pyxversion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ex_python</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ex_py3</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>ex_python</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>ex_py3</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_pyxdo</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>init_pyxversion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ex_pydo</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ex_py3do</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>ex_pydo</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>ex_py3do</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>ex_checktime</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_no_check_timestamps</name> <init>= <expr><name>no_check_timestamps</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>no_check_timestamps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>check_timestamps</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buf_check_timestamp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>no_check_timestamps</name> <operator>=</operator> <name>save_no_check_timestamps</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GET_LOCALE_VAL</name></cpp:macro></cpp:define>
<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>get_locale_val</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>


<expr_stmt><expr><name>loc</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>



<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>loc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>gettext_lang</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>mtable</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{
<expr><literal type="string">"afrikaans"</literal></expr>, <expr><literal type="string">"af"</literal></expr>,
<expr><literal type="string">"czech"</literal></expr>, <expr><literal type="string">"cs"</literal></expr>,
<expr><literal type="string">"dutch"</literal></expr>, <expr><literal type="string">"nl"</literal></expr>,
<expr><literal type="string">"german"</literal></expr>, <expr><literal type="string">"de"</literal></expr>,
<expr><literal type="string">"english_united kingdom"</literal></expr>, <expr><literal type="string">"en_GB"</literal></expr>,
<expr><literal type="string">"spanish"</literal></expr>, <expr><literal type="string">"es"</literal></expr>,
<expr><literal type="string">"french"</literal></expr>, <expr><literal type="string">"fr"</literal></expr>,
<expr><literal type="string">"italian"</literal></expr>, <expr><literal type="string">"it"</literal></expr>,
<expr><literal type="string">"japanese"</literal></expr>, <expr><literal type="string">"ja"</literal></expr>,
<expr><literal type="string">"korean"</literal></expr>, <expr><literal type="string">"ko"</literal></expr>,
<expr><literal type="string">"norwegian"</literal></expr>, <expr><literal type="string">"no"</literal></expr>,
<expr><literal type="string">"polish"</literal></expr>, <expr><literal type="string">"pl"</literal></expr>,
<expr><literal type="string">"russian"</literal></expr>, <expr><literal type="string">"ru"</literal></expr>,
<expr><literal type="string">"slovak"</literal></expr>, <expr><literal type="string">"sk"</literal></expr>,
<expr><literal type="string">"swedish"</literal></expr>, <expr><literal type="string">"sv"</literal></expr>,
<expr><literal type="string">"ukrainian"</literal></expr>, <expr><literal type="string">"uk"</literal></expr>,
<expr><literal type="string">"chinese_china"</literal></expr>, <expr><literal type="string">"zh_CN"</literal></expr>,
<expr><literal type="string">"chinese_taiwan"</literal></expr>, <expr><literal type="string">"zh_TW"</literal></expr>,
<expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>mtable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>mtable</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>mtable</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>mtable</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_valid_mess_lang</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>lang</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>lang</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_mess_lang</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GET_LOCALE_VAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_locale_val</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_locale_val</name><argument_list>(<argument><expr><name>LC_COLLATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LC_ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_mess_lang</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LC_MESSAGES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_mess_lang</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>gettext_lang</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><ternary><condition><expr><call><name>is_valid_mess_lang</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>






<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>get_mess_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LC_ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LC_MESSAGES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GET_LOCALE_VAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_locale_val</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>void</name></type>
<name>set_lang_var</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GET_LOCALE_VAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>get_locale_val</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>loc</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"C"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CTYPE</name></expr></argument>, <argument><expr><name>loc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GET_LOCALE_VAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>get_locale_val</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>get_mess_env</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_LANG</name></expr></argument>, <argument><expr><name>loc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GET_LOCALE_VAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>get_locale_val</name><argument_list>(<argument><expr><name>LC_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_LC_TIME</name></expr></argument>, <argument><expr><name>loc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if> 



<function><type><name>void</name></type>
<name>ex_language</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>what</name> <init>= <expr><name>LC_ALL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>whatstr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIM_LC_MESSAGES</name></cpp:macro> <cpp:value>LC_MESSAGES</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIM_LC_MESSAGES</name></cpp:macro> <cpp:value>6789</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>p</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"messages"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <name>VIM_LC_MESSAGES</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>whatstr</name> <operator>=</operator> <literal type="string">"messages "</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"ctype"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <name>LC_CTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>whatstr</name> <operator>=</operator> <literal type="string">"ctype "</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <name>LC_TIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>whatstr</name> <operator>=</operator> <literal type="string">"time "</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>VIM_LC_MESSAGES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_mess_env</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Unknown"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Current %slanguage: \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>whatstr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>VIM_LC_MESSAGES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E197: Cannot set language to \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NL_MSG_CAT_CNTR</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_nl_msg_cat_cntr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>_nl_msg_cat_cntr</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LC_ALL"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>!=</operator> <name>LC_TIME</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>LC_ALL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LANG"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LANGUAGE"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>!=</operator> <name>LC_CTYPE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mname</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>mname</name> <operator>=</operator> <call><name>gettext_lang</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>mname</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LC_MESSAGES"</literal></expr></argument>, <argument><expr><name>mname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_helplang_default</name><argument_list>(<argument><expr><name>mname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_lang_var</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>locales</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_init_locales</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>find_locales</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>locales_ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>locale_a</name> <init>= <expr><call><name>get_cmd_output</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"locale -a"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SHELL_SILENT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>locale_a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locales_ga</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>loc</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>strtok</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>locale_a</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>loc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locales_ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>locales_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>locales_ga</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>locale_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locales_ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locales_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>locales_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>locales_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>locales_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_locales</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_init_locales</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>did_init_locales</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>locales</name> <operator>=</operator> <call><name>find_locales</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>free_locales</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>locales</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>locales</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>locales</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>locales</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_lang_arg</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"messages"</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ctype"</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"time"</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_locales</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>locales</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>locales</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_locales</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>init_locales</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>locales</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>locales</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
