<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\libvterm\src\encoding.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vterm_internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE_INVALID</name></cpp:macro> <cpp:value>0xFFFD</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>DEBUG</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_PRINT_UTF8</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>UTF8DecoderData</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>bytes_remaining</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>bytes_total</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>this_cp</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_utf8</name><parameter_list>(<parameter><decl><type><name>VTermEncoding</name> <modifier>*</modifier><name>enc</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>UTF8DecoderData</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>data_</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_utf8</name><parameter_list>(<parameter><decl><type><name>VTermEncoding</name> <modifier>*</modifier><name>enc</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name><name>cp</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cplen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>bytes</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>UTF8DecoderData</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>data_</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PRINT_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"BEGIN UTF-8\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>pos</name> <operator>&lt;</operator> <name>bytelen</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cpi</name> <operator>&lt;</operator> <name>cplen</name></expr>;</condition> <incr><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PRINT_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" pos=%zd c=%02x rem=%d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cpi</name> <operator>&gt;=</operator> <name>cplen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PRINT_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" UTF-8 char: U+%04x\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x7f</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>|=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PRINT_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" UTF-8 raw char U+%04x bytelen=%d "</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>bytes_total</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>&lt;</operator> <literal type="number">0x0080</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>&lt;</operator> <literal type="number">0x0800</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>&lt;</operator> <literal type="number">0x200000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>&lt;</operator> <literal type="number">0x4000000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>&gt;=</operator> <literal type="number">0xD800</literal> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>&lt;=</operator> <literal type="number">0xDFFF</literal><operator>)</operator> <operator>||</operator>
<name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>==</operator> <literal type="number">0xFFFE</literal> <operator>||</operator>
<name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PRINT_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" char: U+%04x\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0xe0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_total</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xe0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0xf0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_total</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xf0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0xf8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_total</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xf8</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0xfc</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_total</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xfc</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0xfe</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>this_cp</name></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_total</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bytes_remaining</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>UNICODE_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermEncoding</name></type> <name>encoding_utf8</name> <init>= <expr><block>{
<expr><operator>&amp;</operator><name>init_utf8</name></expr>, 
<expr><operator>&amp;</operator><name>decode_utf8</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_usascii</name><parameter_list>(<parameter><decl><type><name>VTermEncoding</name> <modifier>*</modifier><name>enc</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>data</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name><name>cp</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cplen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>bytes</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_gr</name> <init>= <expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>pos</name> <operator>&lt;</operator> <name>bytelen</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cpi</name> <operator>&lt;</operator> <name>cplen</name></expr>;</condition> <incr><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>^</operator> <name>is_gr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x20</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">0x7f</literal> <operator>||</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermEncoding</name></type> <name>encoding_usascii</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>, 
<expr><operator>&amp;</operator><name>decode_usascii</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>StaticTableEncoding</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>VTermEncoding</name></type> <name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>chars</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_table</name><parameter_list>(<parameter><decl><type><name>VTermEncoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>data</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name><name>cp</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cplen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>bytes</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>StaticTableEncoding</name></name> <modifier>*</modifier></type><name>table</name> <init>= <expr><operator>(</operator>struct <name>StaticTableEncoding</name> <operator>*</operator><operator>)</operator><name>enc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_gr</name> <init>= <expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>pos</name> <operator>&lt;</operator> <name>bytelen</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cpi</name> <operator>&lt;</operator> <name>cplen</name></expr>;</condition> <incr><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>bytes</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>^</operator> <name>is_gr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x20</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">0x7f</literal> <operator>||</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cp</name><index>[<expr><operator>(</operator><operator>*</operator><name>cpi</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoding/DECdrawing.inc"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoding/uk.inc"</cpp:file></cpp:include>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>VTermEncodingType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>designation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermEncoding</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>
}</block>
<decl><name><name>encodings</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ENC_UTF8</name></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><operator>&amp;</operator><name>encoding_utf8</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ENC_SINGLE_94</name></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><operator>(</operator><name>VTermEncoding</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>encoding_DECdrawing</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ENC_SINGLE_94</name></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><operator>(</operator><name>VTermEncoding</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>encoding_uk</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ENC_SINGLE_94</name></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><operator>&amp;</operator><name>encoding_usascii</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>


<function><type><name>VTermEncoding</name> <modifier>*</modifier></type><name>vterm_lookup_encoding</name><parameter_list>(<parameter><decl><type><name>VTermEncodingType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>designation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>encodings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>designation</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>encodings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>encodings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>designation</name> <operator>==</operator> <name>designation</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>encodings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enc</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
