<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\libvterm\src\mouse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vterm_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_mouse</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pressed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modifiers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>modifiers</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mouse_protocol</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MOUSE_X10</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>col</name> <operator>+</operator> <literal type="number">0x21</literal> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0xff</literal> <operator>-</operator> <literal type="number">0x21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>+</operator> <literal type="number">0x21</literal> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0xff</literal> <operator>-</operator> <literal type="number">0x21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pressed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"M%c%c%c"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>code</name> <operator>|</operator> <name>modifiers</name><operator>)</operator> <operator>+</operator> <literal type="number">0x20</literal></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">0x21</literal></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">0x21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MOUSE_UTF8</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>utf8</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pressed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>fill_utf8</name><argument_list>(<argument><expr><operator>(</operator><name>code</name> <operator>|</operator> <name>modifiers</name><operator>)</operator> <operator>+</operator> <literal type="number">0x20</literal></expr></argument>, <argument><expr><name>utf8</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>fill_utf8</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <literal type="number">0x21</literal></expr></argument>, <argument><expr><name>utf8</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>fill_utf8</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">0x21</literal></expr></argument>, <argument><expr><name>utf8</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>utf8</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"M%s"</literal></expr></argument>, <argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>MOUSE_SGR</name></expr>:</case>
<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"&lt;%d;%d;%d%c"</literal></expr></argument>,
<argument><expr><name>code</name> <operator>|</operator> <name>modifiers</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pressed</name></expr> ?</condition><then> <expr><literal type="char">'M'</literal></expr> </then><else>: <expr><literal type="char">'m'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MOUSE_RXVT</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pressed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"%d;%d;%dM"</literal></expr></argument>,
<argument><expr><name>code</name> <operator>|</operator> <name>modifiers</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_mouse_move</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>VTermModifier</name></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>vt</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>col</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_col</name></name> <operator>&amp;&amp;</operator> <name>row</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_row</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>mouse_flags</name></name> <operator>&amp;</operator> <name>MOUSE_WANT_DRAG</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_buttons</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>mouse_flags</name></name> <operator>&amp;</operator> <name>MOUSE_WANT_MOVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>button</name> <init>= <expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_buttons</name></name> <operator>&amp;</operator> <name>MOUSE_BUTTON_LEFT</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:
<expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_buttons</name></name> <operator>&amp;</operator> <name>MOUSE_BUTTON_MIDDLE</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>:
<expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_buttons</name></name> <operator>&amp;</operator> <name>MOUSE_BUTTON_RIGHT</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>output_mouse</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>button</name><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_mouse_button</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pressed</name></decl></parameter>, <parameter><decl><type><name>VTermModifier</name></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>vt</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_buttons</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>mouse_buttons</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>button</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>button</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>pressed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_buttons</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>button</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_buttons</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>button</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mouse_buttons</name></name> <operator>==</operator> <name>old_buttons</name> <operator>&amp;&amp;</operator> <name>button</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>mouse_flags</name></name> <operator>&amp;</operator> <name>MOUSE_WANT_CLICK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>button</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>output_mouse</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>button</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pressed</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_col</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>button</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>output_mouse</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>button</name><operator>-</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0x40</literal></expr></argument>, <argument><expr><name>pressed</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_col</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
