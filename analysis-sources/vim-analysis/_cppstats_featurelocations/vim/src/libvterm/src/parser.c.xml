<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\libvterm\src\parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vterm_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUG_PARSER</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_intermed</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x2f</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_control</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>control</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>control</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>control</name></name>)<argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG_LOG1</name><argument_list>(<argument><expr><literal type="string">"libvterm: Unhandled control 0x%02x\n"</literal></expr></argument>, <argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_csi</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Parsed CSI args as:\n"</literal></expr></argument>, <argument><expr><name>arglen</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" leader: %s\n"</literal></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>argi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>argi</name> <operator>&lt;</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_argi</name></name></expr>;</condition> <incr><expr><name>argi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %lu"</literal></expr></argument>, <argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_args</name><index>[<expr><name>argi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CSI_ARG_HAS_MORE</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_args</name><index>[<expr><name>argi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" intermed: %s\n"</literal></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>csi</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>csi</name></name>)<argument_list>(
<argument><expr><ternary><condition><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_leaderlen</name></name></expr> ?</condition><then> <expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_leader</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_args</name></name></expr></argument>,
<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_argi</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermedlen</name></name></expr> ?</condition><then> <expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermed</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><name>command</name></expr></argument>,
<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG_LOG1</name><argument_list>(<argument><expr><literal type="string">"libvterm: Unhandled CSI %c\n"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_escape</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>seq</name><index>[<expr><name>INTERMED_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermedlen</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermed</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seq</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>escape</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>escape</name></name>)<argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG_LOG1</name><argument_list>(<argument><expr><literal type="string">"libvterm: Unhandled escape ESC 0x%02x\n"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>append_strbuffer</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_len</name></name> <operator>-</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_cur</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_len</name></name> <operator>-</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_cur</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG_LOG1</name><argument_list>(<argument><expr><literal type="string">"Truncating strbuffer preserve to %zu bytes\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer</name></name> <operator>+</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_cur</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_cur</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>start_string</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>VTermParserStringType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>stringtype</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>more_string</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>append_strbuffer</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>done_string</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_cur</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>append_strbuffer</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_cur</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG_LOG</name><argument_list>(<argument><expr><literal type="string">"parser.c: TODO: No strbuffer _and_ no final fragment???\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>stringtype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VTERM_PARSER_OSC</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>osc</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>osc</name></name>)<argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG_LOG2</name><argument_list>(<argument><expr><literal type="string">"libvterm: Unhandled OSC %.*s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>VTERM_PARSER_DCS</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>dcs</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>dcs</name></name>)<argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG_LOG2</name><argument_list>(<argument><expr><literal type="string">"libvterm: Unhandled DCS %.*s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>VTERM_N_PARSER_TYPES</name></expr>:</case>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>vterm_input_write</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>in_backspace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 


<switch>switch<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NORMAL</name></expr>:</case>
<case>case <expr><name>CSI_LEADER</name></expr>:</case>
<case>case <expr><name>CSI_ARGS</name></expr>:</case>
<case>case <expr><name>CSI_INTERMED</name></expr>:</case>
<case>case <expr><name>ESC</name></expr>:</case>
<expr_stmt><expr><name>string_start</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STRING</name></expr>:</case>
<case>case <expr><name>ESC_IN_STRING</name></expr>:</case>
<expr_stmt><expr><name>string_start</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENTER_STRING_STATE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { vt-&gt;parser.state = STRING; string_start = bytes + pos + 1; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENTER_STATE</name><parameter_list>(<parameter><type><name>st</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vt-&gt;parser.state = st; string_start = NULL; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENTER_NORMAL_STATE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ENTER_STATE(NORMAL)</cpp:value></cpp:define>

<for>for<control>( <init>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>bytes</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x00</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name> <operator>&gt;=</operator> <name>STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>more_string</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>string_start</name></expr></argument>, <argument><expr><name>bytes</name> <operator>+</operator> <name>pos</name> <operator>-</operator> <name>string_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_start</name> <operator>=</operator> <name>bytes</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x18</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">0x1a</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>ENTER_NORMAL_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x1b</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermedlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ESC_IN_STRING</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ENTER_STATE</name><argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x07</literal> <operator>&amp;&amp;</operator> 
<name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>STRING</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if<condition>(<expr><call><name>vterm_get_special_pty_type</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x08</literal></expr>)</condition><block type="pseudo"><block_content> 


<if_stmt><if>if<condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>bytes</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name><name>bytes</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x08</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>in_backspace</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name> <operator>&gt;=</operator> <name>STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>more_string</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>string_start</name></expr></argument>, <argument><expr><name>bytes</name> <operator>+</operator> <name>pos</name> <operator>-</operator> <name>string_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>do_control</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name> <operator>&gt;=</operator> <name>STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string_start</name> <operator>=</operator> <name>bytes</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<switch>switch<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ESC_IN_STRING</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x5c</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done_string</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>string_start</name></expr></argument>, <argument><expr><name>bytes</name> <operator>+</operator> <name>pos</name> <operator>-</operator> <name>string_start</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENTER_NORMAL_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>


<case>case <expr><name>ESC</name></expr>:</case>
<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x50</literal></expr>:</case> 
<expr_stmt><expr><call><name>start_string</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>VTERM_PARSER_DCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENTER_STRING_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x5b</literal></expr>:</case> 
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_leaderlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENTER_STATE</name><argument_list>(<argument><expr><name>CSI_LEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x5d</literal></expr>:</case> 
<expr_stmt><expr><call><name>start_string</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>VTERM_PARSER_OSC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENTER_STRING_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if<condition>(<expr><call><name>is_intermed</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermedlen</name></name> <operator>&lt;</operator> <name>INTERMED_MAX</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermed</name><index>[<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermedlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermedlen</name></name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0x60</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_control</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENTER_NORMAL_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x30</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_escape</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENTER_NORMAL_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG_LOG1</name><argument_list>(<argument><expr><literal type="string">"TODO: Unhandled byte %02x in Escape\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CSI_LEADER</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x3c</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x3f</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_leaderlen</name></name> <operator>&lt;</operator> <name>CSI_LEADER_MAX</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_leader</name><index>[<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_leaderlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_leader</name><index>[<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_leaderlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_argi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_MISSING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CSI_ARGS</name></expr>;</expr_stmt>


<case>case <expr><name>CSI_ARGS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_args</name><index>[<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_argi</name></name></expr>]</index></name> <operator>==</operator> <name>CSI_ARG_MISSING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_args</name><index>[<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_argi</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_args</name><index>[<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_argi</name></name></expr>]</index></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_args</name><index>[<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_argi</name></name></expr>]</index></name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_args</name><index>[<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_argi</name></name></expr>]</index></name> <operator>|=</operator> <name>CSI_ARG_FLAG_MORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">';'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_argi</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_args</name><index>[<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_argi</name></name></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_MISSING</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>csi_argi</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermedlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CSI_INTERMED</name></expr>;</expr_stmt>

<case>case <expr><name>CSI_INTERMED</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>is_intermed</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermedlen</name></name> <operator>&lt;</operator> <name>INTERMED_MAX</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermed</name><index>[<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermedlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x1b</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x7e</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermed</name><index>[<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>intermedlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_csi</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ENTER_NORMAL_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STRING</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x07</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0x9c</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vt</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>utf8</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>done_string</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>string_start</name></expr></argument>, <argument><expr><name>bytes</name> <operator>+</operator> <name>pos</name> <operator>-</operator> <name>string_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENTER_NORMAL_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>more_string</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>string_start</name></expr></argument>, <argument><expr><name>bytes</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>string_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NORMAL</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0xa0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vt</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>utf8</name></name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x90</literal></expr>:</case> 
<expr_stmt><expr><call><name>start_string</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>VTERM_PARSER_DCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENTER_STRING_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x9b</literal></expr>:</case> 
<expr_stmt><expr><call><name>ENTER_STATE</name><argument_list>(<argument><expr><name>CSI_LEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x9d</literal></expr>:</case> 
<expr_stmt><expr><call><name>start_string</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>VTERM_PARSER_OSC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENTER_STRING_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>do_control</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>eaten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eaten</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>text</name></name>)<argument_list>(<argument><expr><name>bytes</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>eaten</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG_LOG</name><argument_list>(<argument><expr><literal type="string">"libvterm: Text callback did not consume any input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eaten</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <operator>(</operator><name>eaten</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_parser_set_callbacks</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermParserCallbacks</name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name></name> <operator>=</operator> <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cbdata</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>vterm_parser_get_cbdata</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cbdata</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
