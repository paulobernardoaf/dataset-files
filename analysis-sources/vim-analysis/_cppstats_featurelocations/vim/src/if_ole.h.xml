<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\if_ole.h">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpcndr.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COM_NO_WINDOWS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ole2.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__if_ole_h__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__if_ole_h__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal><block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IVim_FWD_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__IVim_FWD_DEFINED__</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>interface</name> <name>IVim</name></type> <name>IVim</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__Vim_FWD_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__Vim_FWD_DEFINED__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>class</name> <name>Vim</name></type> <name>Vim</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name><name>struct</name> <name>Vim</name></name></type> <name>Vim</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oaidl.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MIDL_user_allocate_free_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MIDL_user_allocate_free_DEFINED__</name></cpp:macro></cpp:define>
<function_decl><type><name>void</name> <name>__RPC_FAR</name> <modifier>*</modifier> <name>__RPC_USER</name></type> <name>MIDL_user_allocate</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>__RPC_USER</name></type> <name>MIDL_user_free</name><parameter_list>( <parameter><decl><type><name>void</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IVim_INTERFACE_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__IVim_INTERFACE_DEFINED__</name></cpp:macro></cpp:define>










<decl_stmt><decl><type><name>EXTERN_C</name> <specifier>const</specifier> <name>IID</name></type> <name>IID_IVim</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>interface</name></type> <name>DECLSPEC_UUID</name><argument_list>(<argument><expr><literal type="string">"0F0BFAE2-4C90-11d1-82D7-0004AC368519"</literal></expr></argument>)</argument_list>
<name>IVim</name> <range>: <expr><name>public</name> <name>IDispatch</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>SendKeys</name><argument_list>(
<argument>BSTR keys</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>Eval</name><argument_list>(
<argument>BSTR expr</argument>,
<argument>BSTR __RPC_FAR *result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <call><name>SetForeground</name><argument_list>( <argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>STDMETHODCALLTYPE</name> <macro><name>GetHwnd</name><argument_list>(
<argument>UINT_PTR __RPC_FAR *result</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<typedef>typedef <type><struct>struct <name>IVimVtbl</name>
<block>{
<function_decl><type><name>BEGIN_INTERFACE</name>

<name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>QueryInterface</name> )<parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,
<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,
<parameter><decl><type><name>void</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>__RPC_FAR</name> <modifier>*</modifier></type><name>ppvObject</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ULONG</name></type> ( <name>STDMETHODCALLTYPE</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>AddRef</name> )<parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ULONG</name></type> ( <name>STDMETHODCALLTYPE</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>Release</name> )<parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>GetTypeInfoCount</name> )<parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,
<parameter><decl><type><name>UINT</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pctinfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>GetTypeInfo</name> )<parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>iTInfo</name></decl></parameter>,
<parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>,
<parameter><decl><type><name>ITypeInfo</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>__RPC_FAR</name> <modifier>*</modifier></type><name>ppTInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>GetIDsOfNames</name> )<parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,
<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,
<parameter><decl><type><name>LPOLESTR</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>rgszNames</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>cNames</name></decl></parameter>,
<parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>,
<parameter><decl><type><name>DISPID</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>rgDispId</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>Invoke</name> )<parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,
<parameter><decl><type><name>DISPID</name></type> <name>dispIdMember</name></decl></parameter>,
<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,
<parameter><decl><type><name>LCID</name></type> <name>lcid</name></decl></parameter>,
<parameter><decl><type><name>WORD</name></type> <name>wFlags</name></decl></parameter>,
<parameter><decl><type><name>DISPPARAMS</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pDispParams</name></decl></parameter>,
<parameter><decl><type><name>VARIANT</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pVarResult</name></decl></parameter>,
<parameter><decl><type><name>EXCEPINFO</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>pExcepInfo</name></decl></parameter>,
<parameter><decl><type><name>UINT</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>puArgErr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>SendKeys</name> )<parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,
<parameter><decl><type><name>BSTR</name></type> <name>keys</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>Eval</name> )<parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,
<parameter><decl><type><name>BSTR</name></type> <name>expr</name></decl></parameter>,
<parameter><decl><type><name>BSTR</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>SetForeground</name> )<parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> ( <name>STDMETHODCALLTYPE</name> <name>__RPC_FAR</name> <modifier>*</modifier><name>GetHwnd</name> )<parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,
<parameter><decl><type><name>UINT_PTR</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>END_INTERFACE</name></expr></expr_stmt>
}</block></struct></type> <name>IVimVtbl</name>;</typedef>

<decl_stmt><decl><type><name>interface</name></type> <name>IVim</name>
<block>{<block_content>
<decl_stmt><decl><type><name>CONST_VTBL</name> <name><name>struct</name> <name>IVimVtbl</name></name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>lpVtbl</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COBJMACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVim_QueryInterface</name><parameter_list>(<parameter><type><name>This</name></type></parameter>,<parameter><type><name>riid</name></type></parameter>,<parameter><type><name>ppvObject</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(This)-&gt;lpVtbl -&gt; QueryInterface(This,riid,ppvObject)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVim_AddRef</name><parameter_list>(<parameter><type><name>This</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(This)-&gt;lpVtbl -&gt; AddRef(This)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVim_Release</name><parameter_list>(<parameter><type><name>This</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(This)-&gt;lpVtbl -&gt; Release(This)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVim_GetTypeInfoCount</name><parameter_list>(<parameter><type><name>This</name></type></parameter>,<parameter><type><name>pctinfo</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(This)-&gt;lpVtbl -&gt; GetTypeInfoCount(This,pctinfo)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVim_GetTypeInfo</name><parameter_list>(<parameter><type><name>This</name></type></parameter>,<parameter><type><name>iTInfo</name></type></parameter>,<parameter><type><name>lcid</name></type></parameter>,<parameter><type><name>ppTInfo</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(This)-&gt;lpVtbl -&gt; GetTypeInfo(This,iTInfo,lcid,ppTInfo)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVim_GetIDsOfNames</name><parameter_list>(<parameter><type><name>This</name></type></parameter>,<parameter><type><name>riid</name></type></parameter>,<parameter><type><name>rgszNames</name></type></parameter>,<parameter><type><name>cNames</name></type></parameter>,<parameter><type><name>lcid</name></type></parameter>,<parameter><type><name>rgDispId</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(This)-&gt;lpVtbl -&gt; GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVim_Invoke</name><parameter_list>(<parameter><type><name>This</name></type></parameter>,<parameter><type><name>dispIdMember</name></type></parameter>,<parameter><type><name>riid</name></type></parameter>,<parameter><type><name>lcid</name></type></parameter>,<parameter><type><name>wFlags</name></type></parameter>,<parameter><type><name>pDispParams</name></type></parameter>,<parameter><type><name>pVarResult</name></type></parameter>,<parameter><type><name>pExcepInfo</name></type></parameter>,<parameter><type><name>puArgErr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(This)-&gt;lpVtbl -&gt; Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVim_SendKeys</name><parameter_list>(<parameter><type><name>This</name></type></parameter>,<parameter><type><name>keys</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(This)-&gt;lpVtbl -&gt; SendKeys(This,keys)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVim_Eval</name><parameter_list>(<parameter><type><name>This</name></type></parameter>,<parameter><type><name>expr</name></type></parameter>,<parameter><type><name>result</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(This)-&gt;lpVtbl -&gt; Eval(This,expr,result)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVim_SetForeground</name><parameter_list>(<parameter><type><name>This</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(This)-&gt;lpVtbl -&gt; SetForeground(This)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVim_GetHwnd</name><parameter_list>(<parameter><type><name>This</name></type></parameter>,<parameter><type><name>result</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(This)-&gt;lpVtbl -&gt; GetHwnd(This,result)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<function_decl><type><name>HRESULT</name> <name>STDMETHODCALLTYPE</name></type> <name>IVim_SendKeys_Proxy</name><parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,
<parameter><decl><type><name>BSTR</name></type> <name>keys</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name> <name>__RPC_STUB</name></type> <name>IVim_SendKeys_Stub</name><parameter_list>(
<parameter><decl><type><name>IRpcStubBuffer</name> <modifier>*</modifier></type><name>This</name></decl></parameter>,
<parameter><decl><type><name>IRpcChannelBuffer</name> <modifier>*</modifier></type><name>_pRpcChannelBuffer</name></decl></parameter>,
<parameter><decl><type><name>PRPC_MESSAGE</name></type> <name>_pRpcMessage</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>_pdwStubPhase</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>HRESULT</name> <name>STDMETHODCALLTYPE</name></type> <name>IVim_Eval_Proxy</name><parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,
<parameter><decl><type><name>BSTR</name></type> <name>expr</name></decl></parameter>,
<parameter><decl><type><name>BSTR</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name> <name>__RPC_STUB</name></type> <name>IVim_Eval_Stub</name><parameter_list>(
<parameter><decl><type><name>IRpcStubBuffer</name> <modifier>*</modifier></type><name>This</name></decl></parameter>,
<parameter><decl><type><name>IRpcChannelBuffer</name> <modifier>*</modifier></type><name>_pRpcChannelBuffer</name></decl></parameter>,
<parameter><decl><type><name>PRPC_MESSAGE</name></type> <name>_pRpcMessage</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>_pdwStubPhase</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>HRESULT</name> <name>STDMETHODCALLTYPE</name></type> <name>IVim_SetForeground_Proxy</name><parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name> <name>__RPC_STUB</name></type> <name>IVim_SetForeground_Stub</name><parameter_list>(
<parameter><decl><type><name>IRpcStubBuffer</name> <modifier>*</modifier></type><name>This</name></decl></parameter>,
<parameter><decl><type><name>IRpcChannelBuffer</name> <modifier>*</modifier></type><name>_pRpcChannelBuffer</name></decl></parameter>,
<parameter><decl><type><name>PRPC_MESSAGE</name></type> <name>_pRpcMessage</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>_pdwStubPhase</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>HRESULT</name> <name>STDMETHODCALLTYPE</name></type> <name>IVim_GetHwnd_Proxy</name><parameter_list>(
<parameter><decl><type><name>IVim</name> <name>__RPC_FAR</name> <modifier>*</modifier></type> <name>This</name></decl></parameter>,
<parameter><decl><type><name>UINT_PTR</name> <name>__RPC_FAR</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name> <name>__RPC_STUB</name></type> <name>IVim_GetHwnd_Stub</name><parameter_list>(
<parameter><decl><type><name>IRpcStubBuffer</name> <modifier>*</modifier></type><name>This</name></decl></parameter>,
<parameter><decl><type><name>IRpcChannelBuffer</name> <modifier>*</modifier></type><name>_pRpcChannelBuffer</name></decl></parameter>,
<parameter><decl><type><name>PRPC_MESSAGE</name></type> <name>_pRpcMessage</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>_pdwStubPhase</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__Vim_LIBRARY_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__Vim_LIBRARY_DEFINED__</name></cpp:macro></cpp:define>










<decl_stmt><decl><type><name>EXTERN_C</name> <specifier>const</specifier> <name>IID</name></type> <name>LIBID_Vim</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN_C</name> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_Vim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DECLSPEC_UUID</name><argument_list>(<argument><expr><literal type="string">"0F0BFAE1-4C90-11d1-82D7-0004AC368519"</literal></expr></argument>)</argument_list>
<name>Vim</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<function_decl><type><name>unsigned</name> <name>long</name> <name>__RPC_USER</name></type> <name>BSTR_UserSize</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>long</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter> , <parameter><decl><type><name>BSTR</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name> <name>__RPC_FAR</name> <modifier>*</modifier> <name>__RPC_USER</name></type> <name>BSTR_UserMarshal</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>long</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>BSTR</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name> <name>__RPC_FAR</name> <modifier>*</modifier> <name>__RPC_USER</name></type> <name>BSTR_UserUnmarshal</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>BSTR</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>__RPC_USER</name></type> <name>BSTR_UserFree</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>long</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>BSTR</name> <name>__RPC_FAR</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
