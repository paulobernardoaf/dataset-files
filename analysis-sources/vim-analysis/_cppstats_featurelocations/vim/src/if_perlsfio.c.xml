<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\if_perlsfio.c">











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_memory_h</name></cpp:macro></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN_PERL_FILE</name></cpp:macro></cpp:define> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SFIO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_SFIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sfio_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sfdisc_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIL</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type)0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sfvimwrite</name><parameter_list>(
<parameter><decl><type><name>Sfio_t</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, 
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, 
<parameter><decl><type><name>Sfdisc_t</name> <modifier>*</modifier></type><name>disc</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_split</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>Sfdisc_t</name> <modifier>*</modifier></type>
<name>sfdcnewvim</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Sfdisc_t</name> <modifier>*</modifier></type><name>disc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>disc</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>Sfdisc_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>disc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>disc</name><operator>-&gt;</operator><name>readf</name></name> <operator>=</operator> <operator>(</operator><name>Sfread_f</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disc</name><operator>-&gt;</operator><name>writef</name></name> <operator>=</operator> <name>sfvimwrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disc</name><operator>-&gt;</operator><name>seekf</name></name> <operator>=</operator> <operator>(</operator><name>Sfseek_f</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disc</name><operator>-&gt;</operator><name>exceptf</name></name> <operator>=</operator> <operator>(</operator><name>Sfexcept_f</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>disc</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
