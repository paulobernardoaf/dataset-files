<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\os_mswin.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>chdir</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlgs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winspool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commdlg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FROM_LEFT_1ST_BUTTON_PRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_LEFT_1ST_BUTTON_PRESSED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RIGHTMOST_BUTTON_PRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHTMOST_BUTTON_PRESSED</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FROM_LEFT_2ND_BUTTON_PRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_LEFT_2ND_BUTTON_PRESSED</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FROM_LEFT_3RD_BUTTON_PRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_LEFT_3RD_BUTTON_PRESSED</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FROM_LEFT_4TH_BUTTON_PRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_LEFT_4TH_BUTTON_PRESSED</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MOUSE_MOVED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_MOVED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DOUBLE_CLICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_CLICK</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINAPI</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINBASEAPI</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>int</name></type> <name>BOOL</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>CALLBACK</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>COLORREF</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>CONSOLE_CURSOR_INFO</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>COORD</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>DWORD</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>ENUMLOGFONTW</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>HANDLE</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>HDC</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>HFONT</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>HICON</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>HWND</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>INPUT_RECORD</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>KEY_EVENT_RECORD</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LOGFONTW</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPARAM</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPBOOL</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPCSTR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPCWSTR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPDWORD</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPSTR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPTSTR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPVOID</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPWSTR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LRESULT</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>MOUSE_EVENT_RECORD</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>NEWTEXTMETRICW</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>PACL</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>PRINTDLGW</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>PSECURITY_DESCRIPTOR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>PSID</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>SECURITY_INFORMATION</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>SHORT</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>SMALL_RECT</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>TEXTMETRIC</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>UINT</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>WCHAR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>WNDENUMPROC</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>WORD</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>WPARAM</name>;</typedef>
<typedef>typedef <type><name>void</name></type> <name>VOID</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fdDump</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>g_szOrigTitle</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>HWND</name></type> <name>s_hwnd</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>HWND</name></type> <name>s_hwnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>WSInitialized</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>_stricoll</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>a_buff</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b_buff</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>strxfrm</name><argument_list>(<argument><expr><name>a_buff</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strxfrm</name><argument_list>(<argument><expr><name>b_buff</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strcoll</name><argument_list>(<argument><expr><name>a_buff</name></expr></argument>, <argument><expr><name>b_buff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>_fullpath</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>toss</name></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>GetFullPathName</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>toss</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:if>
<function><type><name>int</name></type> <name>_chdrive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>drive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><literal type="string">"-:"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>drive</name> <operator>+</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>SetCurrentDirectory</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>SaveInst</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>hInst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>g_hinst</name> <operator>=</operator> <name>hInst</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>void</name></type>
<name>mch_exit_g</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>exiting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_close_all</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_OLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>UninitOLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>WSInitialized</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>WSInitialized</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dyn_libintl_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_exit</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free_all_mem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<function><type><name>void</name></type>
<name>mch_early_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PlatformId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>toupper_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tolower_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>CharUpperBuff</name><argument_list>(<argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>toupper_tab</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CharLowerBuff</name><argument_list>(<argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>tolower_tab</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mch_input_isatty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><name>read_cmd_fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>mch_settitle</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>icon</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_mch_settitle</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetConsoleTitleW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>mch_restore_title</name><parameter_list>(<parameter><decl><type><name>int</name> <name>which</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SetConsoleTitle</name><argument_list>(<argument><expr><name>g_szOrigTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mch_can_restore_title</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mch_can_restore_icon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 









<function><type><name>int</name></type>
<name>mch_FullName</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name> <name>force</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nResult</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wbuf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wname</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>_wfullpath</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>wname</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cname</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><operator>(</operator><name>short_u</name> <operator>*</operator><operator>)</operator><name>wbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cname</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nResult</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FNAME_CASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fname_case</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>slash_adjust</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>nResult</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mch_isFullName</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>char</name></type> <name><name>szName</name><index>[<expr><name>_MAX_PATH</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fname</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>fname</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>fname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>mch_FullName</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>szName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szName</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>pathcmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>szName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>











<function><type><name>void</name></type>
<name>slash_adjust</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>path_with_url</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>psepcN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>psepc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STAT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>stat</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_stat</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_wstat</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_fstat</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stat</name></cpp:macro> <cpp:value>_stat64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_stat</name></cpp:macro> <cpp:value>_stat64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_wstat</name></cpp:macro> <cpp:value>_wstat64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_fstat</name></cpp:macro> <cpp:value>_fstat64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPEN_OH_ARGTYPE</name></cpp:macro> <cpp:value>intptr_t</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPEN_OH_ARGTYPE</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wstat_symlink_aware</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>stat_T</name> <modifier>*</modifier></type><name>stp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1900</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>









<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>is_symlink</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hFind</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>findDataW</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hFind</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>findDataW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hFind</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>findDataW</name><operator>.</operator><name>dwFileAttributes</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>findDataW</name><operator>.</operator><name>dwReserved0</name></name> <operator>==</operator> <name>IO_REPARSE_TAG_SYMLINK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_symlink</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>hFind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_symlink</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>FILE_READ_ATTRIBUTES</name></expr></argument>,
<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OPEN_EXISTING</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator></expr>
?</condition><then> <expr><name>FILE_FLAG_BACKUP_SEMANTICS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>OPEN_OH_ARGTYPE</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><name>_O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>_fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>_stat</name> <operator>*</operator><operator>)</operator><name>stp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stp</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <operator>(</operator><name><name>stp</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>S_IFREG</name><operator>)</operator> <operator>|</operator> <name>S_IFDIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>_wstat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>_stat</name> <operator>*</operator><operator>)</operator><name>stp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>vim_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>stat_T</name> <modifier>*</modifier></type><name>stp</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>_MAX_PATH</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strpbrk</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strpbrk</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>wstat_symlink_aware</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>stp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>mch_settmode</name><parameter_list>(<parameter><decl><type><name>int</name> <name>tmode</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mch_get_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>mch_set_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mch_new_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>mch_suspend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>suspend_shell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MCH_ERRMSG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>display_errors</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>display_errors</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>display_errors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>error_ga</name><operator>.</operator><name>ga_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>error_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gui_mch_dialog</name><argument_list>(
<argument><expr><ternary><condition><expr><name><name>gui</name><operator>.</operator><name>starting</name></name></expr> ?</condition><then> <expr><name>VIM_INFO</name></expr> </then><else>:
<expr><name>VIM_ERROR</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>gui</name><operator>.</operator><name>starting</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Message"</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Ok"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FlushFileBuffers</name><argument_list>(<argument><expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type>
<name>mch_has_exp_wildcard</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"?*["</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mch_has_wildcard</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIM_BACKTICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"?*$[`"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"?*$["</literal></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>mch_chdir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"chdir(%s)"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> 
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>_chdrive</name><argument_list>(<argument><expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>_wchdir</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>mch_char_avail</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>mch_check_messages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LIBCALL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<typedef>typedef <function_decl><type><name>LPTSTR</name></type> (<modifier>*</modifier><name>MYSTRPROCSTR</name>)<parameter_list>(<parameter><decl><type><name>LPTSTR</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>LPTSTR</name></type> (<modifier>*</modifier><name>MYINTPROCSTR</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>MYSTRPROCINT</name>)<parameter_list>(<parameter><decl><type><name>LPTSTR</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>MYINTPROCINT</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>






<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>check_str_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MEMORY_BASIC_INFORMATION</name></type> <name>mbi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>VirtualQuery</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>dwStr</name> <init>= <expr><operator>(</operator><name>long_u</name><operator>)</operator><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>dwBaseAddress</name> <init>= <expr><operator>(</operator><name>long_u</name><operator>)</operator><name><name>mbi</name><operator>.</operator><name>BaseAddress</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>long_u</name></type> <name>strPage</name> <init>= <expr><name>dwStr</name> <operator>-</operator> <operator>(</operator><name>dwStr</name> <operator>-</operator> <name>dwBaseAddress</name><operator>)</operator> <operator>%</operator> <name><name>si</name><operator>.</operator><name>dwPageSize</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>long_u</name></type> <name>pageLength</name> <init>= <expr><name><name>si</name><operator>.</operator><name>dwPageSize</name></name> <operator>-</operator> <operator>(</operator><name>dwStr</name> <operator>-</operator> <name>strPage</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>!</operator><call><name>IsBadReadPtr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>pageLength</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>p</name> <operator>+=</operator> <name>pageLength</name></expr><operator>,</operator> <expr><name>pageLength</name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>dwPageSize</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pageLength</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>length</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>mch_icon_load_cb</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>HANDLE</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>LoadImage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>fname</name></expr></argument>,
<argument><expr><name>IMAGE_ICON</name></expr></argument>,
<argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><name>LR_LOADFROMFILE</name> <operator>|</operator> <name>LR_LOADMAP3DCOLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>mch_icon_load</name><parameter_list>(<parameter><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>iconp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>do_in_runtimepath</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bitmaps/vim.ico"</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mch_icon_load_cb</name></expr></argument>, <argument><expr><name>iconp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mch_libcall</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>argstring</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>argint</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>string_result</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>number_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hinstLib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MYSTRPROCSTR</name></type> <name>ProcAdd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MYINTPROCSTR</name></type> <name>ProcAddI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval_int</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fRunTimeLinkSuccess</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>hinstLib</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>libname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>hinstLib</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TRY_EXCEPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__try</name></macro>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>argstring</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>ProcAdd</name> <operator>=</operator> <operator>(</operator><name>MYSTRPROCSTR</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hinstLib</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fRunTimeLinkSuccess</name> <operator>=</operator> <operator>(</operator><name>ProcAdd</name> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>string_result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval_int</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>MYSTRPROCINT</name><operator>)</operator><name>ProcAdd</name><operator>)</operator><operator>(</operator><operator>(</operator><name>LPSTR</name><operator>)</operator><name>argstring</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retval_str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ProcAdd</name><operator>)</operator><operator>(</operator><operator>(</operator><name>LPSTR</name><operator>)</operator><name>argstring</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>ProcAddI</name> <operator>=</operator> <operator>(</operator><name>MYINTPROCSTR</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hinstLib</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fRunTimeLinkSuccess</name> <operator>=</operator> <operator>(</operator><name>ProcAddI</name> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>string_result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval_int</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>MYINTPROCINT</name><operator>)</operator><name>ProcAddI</name><operator>)</operator><operator>(</operator><name>argint</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retval_str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ProcAddI</name><operator>)</operator><operator>(</operator><name>argint</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>string_result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>number_result</name> <operator>=</operator> <name>retval_int</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>retval_str</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>check_str_len</name><argument_list>(<argument><expr><name>retval_str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>string_result</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>string_result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>*</operator><name>string_result</name></expr></argument>, <argument><expr><name>retval_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TRY_EXCEPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block>
<macro><name>__except</name><argument_list>(<argument>EXCEPTION_EXECUTE_HANDLER</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GetExceptionCode</name><argument_list>()</argument_list></call> <operator>==</operator> <name>EXCEPTION_STACK_OVERFLOW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RESETSTKOFLW</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fRunTimeLinkSuccess</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hinstLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fRunTimeLinkSuccess</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_libcall</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>DumpPutS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>psz</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>psz</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name> <name>__cdecl</name></type>
<name>Trace</name><parameter_list>(
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pszFormat</name></decl></parameter>,
<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CHAR</name></type> <name><name>szBuff</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>pszFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsprintf</name><argument_list>(<argument><expr><name>szBuff</name></expr></argument>, <argument><expr><name>pszFormat</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OutputDebugString</name><argument_list>(<argument><expr><name>szBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>HWND</name></type> <name>g_hWnd</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>GetConsoleHwnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s_hwnd</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>g_hWnd</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s_hwnd</name> <operator>=</operator> <name>g_hWnd</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s_hwnd</name> <operator>=</operator> <call><name>GetConsoleWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>mch_get_winpos</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetConsoleHwnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mch_set_winpos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GetConsoleHwnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOACTIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><specifier>static</specifier> <name>HFONT</name></type> <name><name>prt_font_handles</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRINTDLGW</name></type> <name>prt_dlg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>boldface</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>FW_REGULAR</name></expr>, <expr><name>FW_BOLD</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TEXTMETRIC</name></type> <name>prt_tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_line_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_number_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_left_margin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_right_margin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_top_margin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>szAppName</name><index>[]</index></name> <init>= <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"VIM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HWND</name></type> <name>hDlgPrint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>bUserAbort</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>prt_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDC_BOX1</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDC_PRINTTEXT1</name></cpp:macro> <cpp:value>401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDC_PRINTTEXT2</name></cpp:macro> <cpp:value>402</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDC_PROGRESS</name></cpp:macro> <cpp:value>403</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>BOOL</name></type>
<name>vimSetDlgItemText</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hDlg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nIDDlgItem</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetDlgItemTextW</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>nIDDlgItem</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>COLORREF</name></type>
<name>swap_me</name><parameter_list>(<parameter><decl><type><name>COLORREF</name></type> <name>colorref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>colorref</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>ptr</name> <operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<return>return <expr><name>colorref</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1300</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDP_RETVAL</name></cpp:macro> <cpp:value>BOOL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDP_RETVAL</name></cpp:macro> <cpp:value>INT_PTR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>PDP_RETVAL</name> <name>CALLBACK</name></type>
<name>PrintDlgProc</name><parameter_list>(
<parameter><decl><type><name>HWND</name></type> <name>hDlg</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,
<parameter><decl><type><name>WPARAM</name> <name>wParam</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>LPARAM</name> <name>lParam</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>NONCLIENTMETRICS</name></type> <name>nm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HFONT</name></type> <name>hfont</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>message</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WM_INITDIALOG</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>nm</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NONCLIENTMETRICS</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SystemParametersInfo</name><argument_list>(
<argument><expr><name>SPI_GETNONCLIENTMETRICS</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NONCLIENTMETRICS</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nm</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name>hfont</name> <operator>=</operator> <call><name>CreateFontIndirect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nm</name><operator>.</operator><name>lfMessageFont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>IDC_PRINTTEXT1</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>IDC_PROGRESS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>WM_SETFONT</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>hfont</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetDlgItemText</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vimSetDlgItemText</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDCANCEL</name></expr></argument>,
<argument><expr><name>WM_SETFONT</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>hfont</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetDlgItemText</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>,<argument><expr><name>IDCANCEL</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vimSetDlgItemText</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>,<argument><expr><name>IDCANCEL</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SetWindowText</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>szAppName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prt_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vimSetDlgItemText</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_PRINTTEXT2</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>prt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>prt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EnableMenuItem</name><argument_list>(<argument><expr><call><name>GetSystemMenu</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SC_CLOSE</name></expr></argument>, <argument><expr><name>MF_GRAYED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>BringWindowToTop</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>TRUE</name></expr>;</return>

<case>case <expr><name>WM_COMMAND</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>bUserAbort</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnableWindow</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hDlgPrint</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>hfont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type>
<name>AbortProc</name><parameter_list>(<parameter><decl><type><name>HDC</name> <name>hdcPrn</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>iCode</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><operator>*</operator><name>bUserAbort</name> <operator>&amp;&amp;</operator> <call><name>pPeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hDlgPrint</name> <operator>||</operator> <operator>!</operator><call><name>pIsDialogMessage</name><argument_list>(<argument><expr><name>hDlgPrint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pDispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>!</operator><operator>*</operator><name>bUserAbort</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>UINT_PTR</name> <name>CALLBACK</name></type>
<name>PrintHookProc</name><parameter_list>(
<parameter><decl><type><name>HWND</name></type> <name>hDlg</name></decl></parameter>, 
<parameter><decl><type><name>UINT</name></type> <name>uiMsg</name></decl></parameter>, 
<parameter><decl><type><name>WPARAM</name> <name>wParam</name></type> <name>UNUSED</name></decl></parameter>, 
<parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwndOwner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>rcDlg</name></decl>, <decl><type ref="prev"/><name>rcOwner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRINTDLGW</name> <modifier>*</modifier></type><name>pPD</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uiMsg</name> <operator>==</operator> <name>WM_INITDIALOG</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hwndOwner</name> <operator>=</operator> <call><name>GetParent</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hwndOwner</name> <operator>=</operator> <call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>hwndOwner</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcOwner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcDlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CopyRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcOwner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>OffsetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rcDlg</name></expr></argument>, <argument><expr><operator>-</operator><name><name>rcDlg</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>rcDlg</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OffsetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>-</operator><name><name>rc</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>rc</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OffsetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>-</operator><name><name>rcDlg</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>rcDlg</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>,
<argument><expr><name>HWND_TOP</name></expr></argument>,
<argument><expr><name><name>rcOwner</name><operator>.</operator><name>left</name></name> <operator>+</operator> <operator>(</operator><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,
<argument><expr><name><name>rcOwner</name><operator>.</operator><name>top</name></name> <operator>+</operator> <operator>(</operator><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>SWP_NOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>pPD</name> <operator>=</operator> <operator>(</operator><name>PRINTDLGW</name> <operator>*</operator><operator>)</operator><name>lParam</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pPD</name><operator>-&gt;</operator><name>nCopies</name></name> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator><name><name>pPD</name><operator>-&gt;</operator><name>lCustData</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemInt</name><argument_list>( <argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>edt3</name></expr></argument>, <argument><expr><name><name>pPD</name><operator>-&gt;</operator><name>nCopies</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BringWindowToTop</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>mch_print_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pifItalic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pifBold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pifUnderline</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pifBold</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pifBold</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>pifBold</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>pifItalic</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pifItalic</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>pifItalic</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>pifUnderline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pifUnderline</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>pifUnderline</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name><name>prt_font_handles</name><index>[<expr><name>pifBold</name></expr>]</index><index>[<expr><name>pifItalic</name></expr>]</index><index>[<expr><name>pifUnderline</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>bUserAbort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hDlgPrint</name></expr></argument>, <argument><expr><name>WM_COMMAND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>to_device_units</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>physsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>prt_get_unit</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>PRT_UNIT_NONE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name>PRT_UNIT_PERC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <name>def_number</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <name><name>printer_opts</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>number</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name>u</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PRT_UNIT_PERC</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>physsize</name> <operator>*</operator> <name>nr</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PRT_UNIT_INCH</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>nr</name> <operator>*</operator> <name>dpi</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PRT_UNIT_MM</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>nr</name> <operator>*</operator> <literal type="number">10</literal> <operator>*</operator> <name>dpi</name><operator>)</operator> <operator>/</operator> <literal type="number">254</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PRT_UNIT_POINT</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>nr</name> <operator>*</operator> <literal type="number">10</literal> <operator>*</operator> <name>dpi</name><operator>)</operator> <operator>/</operator> <literal type="number">720</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>ret</name> <operator>-</operator> <name>offset</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>prt_get_cpl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>phyw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dvoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rev_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dpi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTextMetrics</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prt_tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prt_line_height</name> <operator>=</operator> <name><name>prt_tm</name><operator>.</operator><name>tmHeight</name></name> <operator>+</operator> <name><name>prt_tm</name><operator>.</operator><name>tmExternalLeading</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>HORZRES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>phyw</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>PHYSICALWIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dvoff</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>PHYSICALOFFSETX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dpi</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>LOGPIXELSX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rev_offset</name> <operator>=</operator> <name>phyw</name> <operator>-</operator> <operator>(</operator><name>dvoff</name> <operator>+</operator> <name>hr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_left_margin</name> <operator>=</operator> <call><name>to_device_units</name><argument_list>(<argument><expr><name>OPT_PRINT_LEFT</name></expr></argument>, <argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>phyw</name></expr></argument>, <argument><expr><name>dvoff</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>prt_use_number</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prt_number_width</name> <operator>=</operator> <name>PRINT_NUMBER_WIDTH</name> <operator>*</operator> <name><name>prt_tm</name><operator>.</operator><name>tmAveCharWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prt_left_margin</name> <operator>+=</operator> <name>prt_number_width</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prt_number_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prt_right_margin</name> <operator>=</operator> <name>hr</name> <operator>-</operator> <call><name>to_device_units</name><argument_list>(<argument><expr><name>OPT_PRINT_RIGHT</name></expr></argument>, <argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>phyw</name></expr></argument>,
<argument><expr><name>rev_offset</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>prt_right_margin</name> <operator>-</operator> <name>prt_left_margin</name><operator>)</operator> <operator>/</operator> <name><name>prt_tm</name><operator>.</operator><name>tmAveCharWidth</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>prt_get_lpp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>phyw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dvoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rev_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bottom_margin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dpi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vr</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>VERTRES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>phyw</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>PHYSICALHEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dvoff</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>PHYSICALOFFSETY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dpi</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>LOGPIXELSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rev_offset</name> <operator>=</operator> <name>phyw</name> <operator>-</operator> <operator>(</operator><name>dvoff</name> <operator>+</operator> <name>vr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_top_margin</name> <operator>=</operator> <call><name>to_device_units</name><argument_list>(<argument><expr><name>OPT_PRINT_TOP</name></expr></argument>, <argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>phyw</name></expr></argument>, <argument><expr><name>dvoff</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>prt_top_margin</name> <operator>+=</operator> <name>prt_line_height</name> <operator>*</operator> <call><name>prt_header_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom_margin</name> <operator>=</operator> <name>vr</name> <operator>-</operator> <call><name>to_device_units</name><argument_list>(<argument><expr><name>OPT_PRINT_BOT</name></expr></argument>, <argument><expr><name>dpi</name></expr></argument>, <argument><expr><name>phyw</name></expr></argument>,
<argument><expr><name>rev_offset</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>bottom_margin</name> <operator>-</operator> <name>prt_top_margin</name><operator>)</operator> <operator>/</operator> <name>prt_line_height</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mch_print_init</name><parameter_list>(<parameter><decl><type><name>prt_settings_T</name> <modifier>*</modifier></type><name>psettings</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>jobname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>HGLOBAL</name></type> <name>stored_dm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HGLOBAL</name></type> <name>stored_devn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stored_nCopies</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stored_nFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOGFONTW</name></type> <name>fLogFont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pifItalic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pifBold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pifUnderline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DEVMODEW</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DEVNAMES</name> <modifier>*</modifier></type><name>devname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bUserAbort</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>psettings</name><operator>-&gt;</operator><name>user_abort</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_dlg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PRINTDLGW</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>lStructSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PRINTDLGW</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>GetConsoleHwnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>hwndOwner</name></name> <operator>=</operator> <name>s_hwnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>Flags</name></name> <operator>=</operator> <name>PD_NOPAGENUMS</name> <operator>|</operator> <name>PD_NOSELECTION</name> <operator>|</operator> <name>PD_RETURNDC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>forceit</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>hDevMode</name></name> <operator>=</operator> <name>stored_dm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>hDevNames</name></name> <operator>=</operator> <name>stored_devn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>lCustData</name></name> <operator>=</operator> <name>stored_nCopies</name></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>



<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>lpfnPrintHook</name></name> <operator>=</operator> <name>PrintHookProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>Flags</name></name> <operator>|=</operator> <name>PD_ENABLEPRINTHOOK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>Flags</name></name> <operator>|=</operator> <name>stored_nFlags</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>forceit</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>term_console</name><operator>)</operator>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<operator>||</operator> <operator>!</operator><name>term_console</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>Flags</name></name> <operator>|=</operator> <name>PD_RETURNDEFAULT</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_pdev</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name> <operator>=</operator> <call><name>CreateDC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>p_pdev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>prt_dlg</name><operator>.</operator><name>Flags</name></name> <operator>|=</operator> <name>PD_RETURNDEFAULT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>PrintDlgW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_dlg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_fail_dlg</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>PrintDlgW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_dlg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_fail_dlg</name>;</goto></block_content></block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><name>stored_dm</name> <operator>=</operator> <name><name>prt_dlg</name><operator>.</operator><name>hDevMode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stored_devn</name> <operator>=</operator> <name><name>prt_dlg</name><operator>.</operator><name>hDevNames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stored_nFlags</name> <operator>=</operator> <name><name>prt_dlg</name><operator>.</operator><name>Flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stored_nCopies</name> <operator>=</operator> <name><name>prt_dlg</name><operator>.</operator><name>nCopies</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E237: Printer selection failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_print_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>NUMCOLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>has_color</name></name> <operator>=</operator> <operator>(</operator><call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>BITSPIXEL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>PLANES</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SetTextAlign</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>TA_BASELINE</name><operator>|</operator><name>TA_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>mem</name> <operator>=</operator> <operator>(</operator><name>DEVMODEW</name> <operator>*</operator><operator>)</operator><call><name>GlobalLock</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDevMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mem</name><operator>-&gt;</operator><name>dmCopies</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stored_nCopies</name> <operator>=</operator> <name><name>mem</name><operator>-&gt;</operator><name>dmCopies</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mem</name><operator>-&gt;</operator><name>dmFields</name></name> <operator>&amp;</operator> <name>DM_DUPLEX</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mem</name><operator>-&gt;</operator><name>dmDuplex</name></name> <operator>&amp;</operator> <operator>~</operator><name>DMDUP_SIMPLEX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>duplex</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mem</name><operator>-&gt;</operator><name>dmFields</name></name> <operator>&amp;</operator> <name>DM_COLOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mem</name><operator>-&gt;</operator><name>dmColor</name></name> <operator>&amp;</operator> <name>DMCOLOR_COLOR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>has_color</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDevMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>devname</name> <operator>=</operator> <operator>(</operator><name>DEVNAMES</name> <operator>*</operator><operator>)</operator><call><name>GlobalLock</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDevNames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>devname</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wprinter_name</name> <init>= <expr><operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><name>devname</name> <operator>+</operator> <name><name>devname</name><operator>-&gt;</operator><name>wDeviceOffset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wport_name</name> <init>= <expr><operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><name>devname</name> <operator>+</operator> <name><name>devname</name><operator>-&gt;</operator><name>wOutputOffset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"to %s on %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>printer_name</name> <init>= <expr><call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>wprinter_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>port_name</name> <init>= <expr><call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>wport_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>printer_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>port_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prt_name</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>printer_name</name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>port_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prt_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_name</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>,
<argument><expr><name>printer_name</name></expr></argument>, <argument><expr><name>port_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>printer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>port_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDevNames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fLogFont</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fLogFont</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_logfont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fLogFont</name></expr></argument>, <argument><expr><name>p_pfn</name></expr></argument>, <argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E613: Unknown printer font: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_print_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>pifBold</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pifBold</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>pifBold</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>pifItalic</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pifItalic</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>pifItalic</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>pifUnderline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pifUnderline</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>pifUnderline</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>fLogFont</name><operator>.</operator><name>lfWeight</name></name> <operator>=</operator> <name><name>boldface</name><index>[<expr><name>pifBold</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fLogFont</name><operator>.</operator><name>lfItalic</name></name> <operator>=</operator> <name>pifItalic</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fLogFont</name><operator>.</operator><name>lfUnderline</name></name> <operator>=</operator> <name>pifUnderline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prt_font_handles</name><index>[<expr><name>pifBold</name></expr>]</index><index>[<expr><name>pifItalic</name></expr>]</index><index>[<expr><name>pifUnderline</name></expr>]</index></name>
<operator>=</operator> <call><name>CreateFontIndirectW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fLogFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for></block_content></block></for>

<expr_stmt><expr><call><name>SetBkMode</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>OPAQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name><name>prt_font_handles</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>chars_per_line</name></name> <operator>=</operator> <call><name>prt_get_cpl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>lines_per_page</name></name> <operator>=</operator> <call><name>prt_get_lpp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prt_dlg</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>PD_USEDEVMODECOPIESANDCOLLATE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>n_collated_copies</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>prt_dlg</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>PD_COLLATE</name><operator>)</operator></expr>
?</condition><then> <expr><name><name>prt_dlg</name><operator>.</operator><name>nCopies</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>n_uncollated_copies</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>prt_dlg</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>PD_COLLATE</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>prt_dlg</name><operator>.</operator><name>nCopies</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>psettings</name><operator>-&gt;</operator><name>n_collated_copies</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>n_collated_copies</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>psettings</name><operator>-&gt;</operator><name>n_uncollated_copies</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>n_uncollated_copies</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>n_collated_copies</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>n_uncollated_copies</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>jobname</name></name> <operator>=</operator> <name>jobname</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

<label><name>init_fail_dlg</name>:</label>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><call><name>CommDlgExtendedError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> <operator>|</operator>
<name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>
<name>FORMAT_MESSAGE_IGNORE_INSERTS</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPTSTR</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>buf</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E238: Print error: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>buf</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><operator>(</operator><name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>mch_print_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>mch_print_begin</name><parameter_list>(<parameter><decl><type><name>prt_settings_T</name> <modifier>*</modifier></type><name>psettings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>szBuffer</name><index>[<expr><literal type="number">300</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hDlgPrint</name> <operator>=</operator> <call><name>CreateDialog</name><argument_list>(<argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"PrintDlgBox"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hwndOwner</name></name></expr></argument>, <argument><expr><name>PrintDlgProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetAbortProc</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>AbortProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>szBuffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Printing '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>gettail</name><argument_list>(<argument><expr><name><name>psettings</name><operator>-&gt;</operator><name>jobname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vimSetDlgItemText</name><argument_list>(<argument><expr><name>hDlgPrint</name></expr></argument>, <argument><expr><name>IDC_PRINTTEXT1</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>szBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name><name>psettings</name><operator>-&gt;</operator><name>jobname</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>DOCINFOW</name></type> <name>di</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>lpszDocName</name></name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>StartDocW</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SetFocus</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>mch_print_end</name><parameter_list>(<parameter><decl><type><name>prt_settings_T</name> <modifier>*</modifier><name>psettings</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EndDoc</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>bUserAbort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hDlgPrint</name></expr></argument>, <argument><expr><name>WM_COMMAND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mch_print_end_page</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>EndPage</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mch_print_begin_page</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vimSetDlgItemText</name><argument_list>(<argument><expr><name>hDlgPrint</name></expr></argument>, <argument><expr><name>IDC_PROGRESS</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>StartPage</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mch_print_blank_page</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>mch_print_begin_page</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><call><name>mch_print_end_page</name><argument_list>()</argument_list></call><operator>)</operator></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_pos_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_pos_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>mch_print_start_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>margin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>page_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>margin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prt_pos_x</name> <operator>=</operator> <operator>-</operator><name>prt_number_width</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prt_pos_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>prt_pos_y</name> <operator>=</operator> <name>page_line</name> <operator>*</operator> <name>prt_line_height</name>
<operator>+</operator> <name><name>prt_tm</name><operator>.</operator><name>tmAscent</name></name> <operator>+</operator> <name><name>prt_tm</name><operator>.</operator><name>tmExternalLeading</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mch_print_text_out</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SIZE</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wlen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TextOutW</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>prt_pos_x</name> <operator>+</operator> <name>prt_left_margin</name></expr></argument>,
<argument><expr><name>prt_pos_y</name> <operator>+</operator> <name>prt_top_margin</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetTextExtentPoint32W</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prt_pos_x</name> <operator>+=</operator> <operator>(</operator><name><name>sz</name><operator>.</operator><name>cx</name></name> <operator>-</operator> <name><name>prt_tm</name><operator>.</operator><name>tmOverhang</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GetTextExtentPoint32W</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>prt_pos_x</name> <operator>+</operator> <name>prt_left_margin</name> <operator>+</operator> <name><name>sz</name><operator>.</operator><name>cx</name></name> <operator>&gt;</operator> <name>prt_right_margin</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>mch_print_set_font</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iBold</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iItalic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iUnderline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name><name>prt_font_handles</name><index>[<expr><name>iBold</name></expr>]</index><index>[<expr><name>iItalic</name></expr>]</index><index>[<expr><name>iUnderline</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>mch_print_set_bg</name><parameter_list>(<parameter><decl><type><name>long_u</name></type> <name>bgcol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SetBkColor</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><call><name>GetNearestColor</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>,
<argument><expr><call><name>swap_me</name><argument_list>(<argument><expr><operator>(</operator><name>COLORREF</name><operator>)</operator><name>bgcol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>bgcol</name> <operator>==</operator> <literal type="number">0xffffffUL</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetBkMode</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>TRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetBkMode</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><name>OPAQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>mch_print_set_fg</name><parameter_list>(<parameter><decl><type><name>long_u</name></type> <name>fgcol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SetTextColor</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>, <argument><expr><call><name>GetNearestColor</name><argument_list>(<argument><expr><name><name>prt_dlg</name><operator>.</operator><name>hDC</name></name></expr></argument>,
<argument><expr><call><name>swap_me</name><argument_list>(<argument><expr><operator>(</operator><name>COLORREF</name><operator>)</operator><name>fgcol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SHORTCUT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pfnGetFinalPathNameByHandleW</name>)<parameter_list>(
<parameter><decl><type><name>HANDLE</name></type> <name>hFile</name></decl></parameter>,
<parameter><decl><type><name>LPWSTR</name></type> <name>lpszFilePath</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>cchFilePath</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pfnGetFinalPathNameByHandleW</name></type> <name>pGetFinalPathNameByHandleW</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_path_sep</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) == L'\\' || (c) == L'/')</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_reparse_point_included</name><parameter_list>(<parameter><decl><type><name>LPCWSTR</name></type> <name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LPCWSTR</name></type> <name>p</name> <init>= <expr><name>fname</name></expr></init></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>buf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>attr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">':'</literal> <operator>&amp;&amp;</operator> <call><name>is_path_sep</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_path_sep</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_path_sep</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>wcspbrk</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">L"\\/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name> <operator>=</operator> <name>fname</name> <operator>+</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>-</operator> <name>fname</name> <operator>&gt;=</operator> <name>MAX_PATH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wcsncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>q</name> <operator>-</operator> <name>fname</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>INVALID_FILE_ATTRIBUTES</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>resolve_reparse_point</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rfname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>loaded</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pGetFinalPathNameByHandleW</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>hmod</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>loaded</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pGetFinalPathNameByHandleW</name> <operator>=</operator> <operator>(</operator><name>pfnGetFinalPathNameByHandleW</name><operator>)</operator>
<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hmod</name></expr></argument>, <argument><expr><literal type="string">"GetFinalPathNameByHandleW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loaded</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pGetFinalPathNameByHandleW</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_reparse_point_included</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>,
<argument><expr><name>FILE_FLAG_BACKUP_SEMANTICS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>pGetFinalPathNameByHandleW</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buff</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buff</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pGetFinalPathNameByHandleW</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wcsncmp</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">L"\\\\?\\UNC\\"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>buff</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>wcsncmp</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">L"\\\\?\\"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>buff</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>rfname</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buff</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rfname</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>resolve_shortcut</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IShellLink</name> <modifier>*</modifier></type><name>psl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IPersistFile</name> <modifier>*</modifier></type><name>ppf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OLECHAR</name></type> <name><name>wsz</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rfname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IShellLinkW</name> <modifier>*</modifier></type><name>pslw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>ffdw</name></decl>;</decl_stmt> 



<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rfname</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>fname</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".lnk"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rfname</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CoInitialize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>CLSID_ShellLink</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_IShellLinkW</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pslw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>S_OK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pslw</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(
<argument><expr><name>pslw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IPersistFile</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ppf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>shortcut_errorw</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>ppf</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Load</name></name><argument_list>(<argument><expr><name>ppf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>STGM_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>shortcut_errorw</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
hr = pslw-&gt;lpVtbl-&gt;Resolve(pslw, NULL, SLR_NO_UI);
if (hr != S_OK)
goto shortcut_errorw;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><name>wsz</name></expr></argument>, <argument><expr><name>MAX_PATH</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pslw</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetPath</name></name><argument_list>(<argument><expr><name>pslw</name></expr></argument>, <argument><expr><name>wsz</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ffdw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>S_OK</name> <operator>&amp;&amp;</operator> <name><name>wsz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rfname</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>wsz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>shortcut_errorw</name>:</label>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ppf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ppf</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>ppf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>psl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>psl</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>psl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pslw</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>pslw</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>pslw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rfname</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>mch_resolve_path</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reparse_point</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>resolve_shortcut</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>reparse_point</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>resolve_reparse_point</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>win32_set_foreground</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GetConsoleHwnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>s_hwnd</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>












<decl_stmt><decl><type><name>HWND</name></type> <name>message_window</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIM_CLASSNAME</name></cpp:macro> <cpp:value>"VIM_MESSAGES"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIM_CLASSNAME_LEN</name></cpp:macro> <cpp:value>(sizeof(VIM_CLASSNAME) - 1)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYDATA_KEYS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYDATA_REPLY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYDATA_EXPR</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYDATA_RESULT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYDATA_ERROR_RESULT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYDATA_ENCODING</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>


<struct>struct <name>server_id</name>
<block>{
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>client_enc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>serverSendEnc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>COPYDATASTRUCT</name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dwData</name></name> <operator>=</operator> <name>COPYDATA_ENCODING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cbData</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>lpData</name></name> <operator>=</operator> <name>p_enc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SendMessage</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>WM_COPYDATA</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>message_window</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>CleanUpMessaging</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>message_window</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>message_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>message_window</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>save_reply</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>server</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expr</name></decl></parameter>)</parameter_list>;</function_decl>











<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type>
<name>Messaging_WndProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>WM_COPYDATA</name></expr>)</condition>
<block>{<block_content>




















<decl_stmt><decl><type><name>COPYDATASTRUCT</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>COPYDATASTRUCT</name><operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>sender</name> <init>= <expr><operator>(</operator><name>HWND</name><operator>)</operator><name>wParam</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COPYDATASTRUCT</name></type> <name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>dwData</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>COPYDATA_ENCODING</name></expr>:</case>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>client_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>client_enc</name> <operator>=</operator> <call><name>enc_canonize</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>lpData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>COPYDATA_KEYS</name></expr>:</case>

<expr_stmt><expr><name>clientWindow</name> <operator>=</operator> <name>sender</name></expr>;</expr_stmt>



<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>serverConvert</name><argument_list>(<argument><expr><name>client_enc</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>lpData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>server_to_input_buf</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>s_hwnd</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>WM_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>COPYDATA_EXPR</name></expr>:</case>

<expr_stmt><expr><name>clientWindow</name> <operator>=</operator> <name>sender</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>serverConvert</name><argument_list>(<argument><expr><name>client_enc</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>lpData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>eval_client_expr_to_string</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><name>e_invexprmsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s: \"%s\""</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>dwData</name></name> <operator>=</operator> <name>COPYDATA_ERROR_RESULT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>dwData</name></name> <operator>=</operator> <name>COPYDATA_RESULT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>lpData</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>cbData</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverSendEnc</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SendMessage</name><argument_list>(<argument><expr><name>sender</name></expr></argument>, <argument><expr><name>WM_COPYDATA</name></expr></argument>,
<argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>message_window</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>reply</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>

<case>case <expr><name>COPYDATA_REPLY</name></expr>:</case>
<case>case <expr><name>COPYDATA_RESULT</name></expr>:</case>
<case>case <expr><name>COPYDATA_ERROR_RESULT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>lpData</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>serverConvert</name><argument_list>(<argument><expr><name>client_enc</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>lpData</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tofree</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>save_reply</name><argument_list>(<argument><expr><name>sender</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>dwData</name></name> <operator>==</operator> <name>COPYDATA_REPLY</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>dwData</name></name> <operator>==</operator> <name>COPYDATA_RESULT</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:
<expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>dwData</name></name> <operator>==</operator> <name>COPYDATA_REPLY</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>winstr</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>winstr</name></expr></argument>, <argument><expr><name>PRINTF_HEX_LONG_U</name></expr></argument>, <argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_REMOTEREPLY</name></expr></argument>, <argument><expr><name>winstr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>msg</name> <operator>==</operator> <name>WM_ACTIVATE</name> <operator>&amp;&amp;</operator> <name>wParam</name> <operator>==</operator> <name>WA_ACTIVE</name></expr>)</condition>
<block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>GetConsoleHwnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>s_hwnd</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>serverInitMessaging</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WNDCLASS</name></type> <name>wndclass</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>CleanUpMessaging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>wndclass</name><operator>.</operator><name>style</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wndclass</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <name>Messaging_WndProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wndclass</name><operator>.</operator><name>cbClsExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wndclass</name><operator>.</operator><name>cbWndExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wndclass</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <name>g_hinst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wndclass</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wndclass</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wndclass</name><operator>.</operator><name>hbrBackground</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wndclass</name><operator>.</operator><name>lpszMenuName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wndclass</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name>VIM_CLASSNAME</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegisterClass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wndclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>message_window</name> <operator>=</operator> <call><name>CreateWindow</name><argument_list>(<argument><expr><name>VIM_CLASSNAME</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><name>WS_POPUPWINDOW</name> <operator>|</operator> <name>WS_CAPTION</name></expr></argument>,
<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, <argument><expr><name>CW_USEDEFAULT</name></expr></argument>,
<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>altname_buf_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>getVimServerName</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>namelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>VIM_CLASSNAME_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>GetClassName</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>VIM_CLASSNAME_LEN</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>VIM_CLASSNAME</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>GetWindowText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type>
<name>enumWindowsGetServer</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>server_id</name></name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator>struct <name>server_id</name> <operator>*</operator><operator>)</operator><name>lparam</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>server</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getVimServerName</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>=</operator> <name>hwnd</name></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>altname_buf_ptr</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>server</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>altname_buf_ptr</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>altname_buf_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type>
<name>enumWindowsGetNames</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>ga</name> <init>= <expr><operator>(</operator><name>garray_T</name> <operator>*</operator><operator>)</operator><name>lparam</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>server</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getVimServerName</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>enum_windows_s</name>
<block>{
<decl_stmt><decl><type><name>WNDENUMPROC</name></type> <name>lpEnumFunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPARAM</name></type> <name>lParam</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type>
<name>enum_windows_child</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>enum_windows_s</name></name> <modifier>*</modifier></type><name>ew</name> <init>= <expr><operator>(</operator>struct <name>enum_windows_s</name> <operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>ew</name><operator>-&gt;</operator><name>lpEnumFunc</name></name><operator>)</operator><operator>(</operator><name>hwnd</name><operator>,</operator> <name><name>ew</name><operator>-&gt;</operator><name>lParam</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type>
<name>enum_windows_toplevel</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>enum_windows_s</name></name> <modifier>*</modifier></type><name>ew</name> <init>= <expr><operator>(</operator>struct <name>enum_windows_s</name> <operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ew</name><operator>-&gt;</operator><name>lpEnumFunc</name></name><operator>)</operator><operator>(</operator><name>hwnd</name><operator>,</operator> <name><name>ew</name><operator>-&gt;</operator><name>lParam</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>EnumChildWindows</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>enum_windows_child</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>BOOL</name></type>
<name>enum_windows</name><parameter_list>(<parameter><decl><type><name>WNDENUMPROC</name></type> <name>lpEnumFunc</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>enum_windows_s</name></name></type> <name>ew</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ew</name><operator>.</operator><name>lpEnumFunc</name></name> <operator>=</operator> <name>lpEnumFunc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ew</name><operator>.</operator><name>lParam</name></name> <operator>=</operator> <name>lParam</name></expr>;</expr_stmt>
<return>return <expr><call><name>EnumWindows</name><argument_list>(<argument><expr><name>enum_windows_toplevel</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>&amp;</operator><name>ew</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HWND</name></type>
<name>findServer</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>server_id</name></name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>id</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>.</operator><name>hwnd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enum_windows</name><argument_list>(<argument><expr><name>enumWindowsGetServer</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>id</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>id</name><operator>.</operator><name>hwnd</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>serverSetName</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ok_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><name>ok_name</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>ok_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ok_name</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>



<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>findServer</name><argument_list>(<argument><expr><name>ok_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hwnd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>hwnd</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ok_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>serverName</name> <operator>=</operator> <name>ok_name</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_maketitle</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>SetWindowText</name><argument_list>(<argument><expr><name>message_window</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>ok_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_SEND_SERVER</name></expr></argument>, <argument><expr><name>serverName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>serverGetVimNames</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enum_windows</name><argument_list>(<argument><expr><name>enumWindowsGetNames</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>ga</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>serverSendReply</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COPYDATASTRUCT</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>SCANF_HEX_LONG_U</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>(</operator><name>HWND</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsWindow</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dwData</name></name> <operator>=</operator> <name>COPYDATA_REPLY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cbData</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>lpData</name></name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverSendEnc</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>WM_COPYDATA</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>message_window</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>serverSendToVim</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, 
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptarget</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>asExpr</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>silent</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COPYDATASTRUCT</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>altname_buf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>serverName</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>serverName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sendToLocalVim</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>asExpr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>altname_buf_ptr</name> <operator>=</operator> <name>altname_buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>altname_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>findServer</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>altname_buf_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>altname_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>findServer</name><argument_list>(<argument><expr><name>altname_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noserver</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptarget</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>HWND</name> <operator>*</operator><operator>)</operator><name>ptarget</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dwData</name></name> <operator>=</operator> <ternary><condition><expr><name>asExpr</name></expr> ?</condition><then> <expr><name>COPYDATA_EXPR</name></expr> </then><else>: <expr><name>COPYDATA_KEYS</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cbData</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>lpData</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverSendEnc</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>WM_COPYDATA</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>message_window</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>data</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>asExpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>serverGetReply</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retcode</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<return>return <expr><name>retcode</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>serverForeground</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>target</name> <init>= <expr><call><name>findServer</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>








<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>HWND</name></type> <name>server</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>expr_result</name></decl>;</decl_stmt> 
}</block></struct></type> <name>reply_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>reply_list</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply_T</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLY_ITEM</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((reply_T *)(reply_list.ga_data) + (i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLY_COUNT</name></cpp:macro> <cpp:value>(reply_list.ga_len)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reply_received</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_reply</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>server</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>reply_T</name> <modifier>*</modifier></type><name>rep</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reply_list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rep</name> <operator>=</operator> <call><name>REPLY_ITEM</name><argument_list>(<argument><expr><name>REPLY_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>server</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>reply</name></name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>expr_result</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>reply</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>REPLY_COUNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reply_received</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>serverGetReply</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>server</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>expr_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remove</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reply_T</name> <modifier>*</modifier></type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_process</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>


<expr_stmt><expr><name>reply_received</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REPLY_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <call><name>REPLY_ITEM</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>server</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>rep</name><operator>-&gt;</operator><name>expr_result</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>expr_res</name> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>reply</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expr_res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>expr_res</name> <operator>=</operator> <ternary><condition><expr><name><name>rep</name><operator>-&gt;</operator><name>expr_result</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remove</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>rep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>REPLY_COUNT</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>reply_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>REPLY_COUNT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<return>return <expr><name>reply</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wait</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_process</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>did_process</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serverProcessPendingMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>





<while>while <condition>(<expr><name>reply_received</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>check_due_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&gt;=</operator> <name>timeout</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>MsgWaitForMultipleObjects</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>QS_ALLINPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsWindow</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>serverProcessPendingMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>serverProcessPendingMessages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>pPeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pDispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>


<struct>struct <name>charset_pair</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>charset</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>charset_pair</name></name></type>
<name><name>charset_pairs</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="string">"ANSI"</literal></expr>, <expr><name>ANSI_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"CHINESEBIG5"</literal></expr>, <expr><name>CHINESEBIG5_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"DEFAULT"</literal></expr>, <expr><name>DEFAULT_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"HANGEUL"</literal></expr>, <expr><name>HANGEUL_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"OEM"</literal></expr>, <expr><name>OEM_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"SHIFTJIS"</literal></expr>, <expr><name>SHIFTJIS_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"SYMBOL"</literal></expr>, <expr><name>SYMBOL_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ARABIC"</literal></expr>, <expr><name>ARABIC_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"BALTIC"</literal></expr>, <expr><name>BALTIC_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"EASTEUROPE"</literal></expr>, <expr><name>EASTEUROPE_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"GB2312"</literal></expr>, <expr><name>GB2312_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"GREEK"</literal></expr>, <expr><name>GREEK_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"HEBREW"</literal></expr>, <expr><name>HEBREW_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"JOHAB"</literal></expr>, <expr><name>JOHAB_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"MAC"</literal></expr>, <expr><name>MAC_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"RUSSIAN"</literal></expr>, <expr><name>RUSSIAN_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"THAI"</literal></expr>, <expr><name>THAI_CHARSET</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"TURKISH"</literal></expr>, <expr><name>TURKISH_CHARSET</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIETNAMESE_CHARSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"VIETNAMESE"</literal></expr>, <expr><name>VIETNAMESE_CHARSET</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>quality_pair</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>quality</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>quality_pair</name></name></type>
<name><name>quality_pairs</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEARTYPE_QUALITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"CLEARTYPE"</literal></expr>, <expr><name>CLEARTYPE_QUALITY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ANTIALIASED_QUALITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ANTIALIASED"</literal></expr>, <expr><name>ANTIALIASED_QUALITY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NONANTIALIASED_QUALITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"NONANTIALIASED"</literal></expr>, <expr><name>NONANTIALIASED_QUALITY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROOF_QUALITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"PROOF"</literal></expr>, <expr><name>PROOF_QUALITY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRAFT_QUALITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"DRAFT"</literal></expr>, <expr><name>DRAFT_QUALITY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">"DEFAULT"</literal></expr>, <expr><name>DEFAULT_QUALITY</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><name>char</name> <modifier>*</modifier></type>
<name>charset_id2name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>charset_pair</name></name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>charset_pairs</name></expr>;</init> <condition><expr><name><name>cp</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>cp</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>BYTE</name><operator>)</operator><name>id</name> <operator>==</operator> <name><name>cp</name><operator>-&gt;</operator><name>charset</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name><name>cp</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type>
<name>quality_id2name</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>quality_pair</name></name> <modifier>*</modifier></type><name>qp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>qp</name> <operator>=</operator> <name>quality_pairs</name></expr>;</init> <condition><expr><name><name>qp</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>qp</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>qp</name><operator>-&gt;</operator><name>quality</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name><name>qp</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>LOGFONTW</name></type> <name>s_lfDefault</name> <init>=
<expr><block>{
<expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FW_NORMAL</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>DEFAULT_CHARSET</name></expr>,
<expr><name>OUT_DEFAULT_PRECIS</name></expr>, <expr><name>CLIP_DEFAULT_PRECIS</name></expr>,
<expr><name>PROOF_QUALITY</name></expr>, <expr><name>FIXED_PITCH</name> <operator>|</operator> <name>FF_DONTCARE</name></expr>,
<expr><literal type="string">L"Fixedsys"</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>current_font_height</name> <init>= <expr><operator>-</operator><literal type="number">12</literal></expr></init></decl>;</decl_stmt> 








<function><type><specifier>static</specifier> <name>int</name></type>
<name>points_to_pixels</name><parameter_list>(<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertical</name></decl></parameter>, <parameter><decl><type><name>long_i</name></type> <name>pprinter_dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pixels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>points</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>divisor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><operator>(</operator><name>HWND</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>printer_dc</name> <init>= <expr><operator>(</operator><name>HDC</name><operator>)</operator><name>pprinter_dc</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>L</name><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>divisor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>divisor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>points</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>points</name> <operator>+=</operator> <operator>*</operator><name>str</name> <operator>-</operator> <name>L</name><literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>divisor</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>divisor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>divisor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>printer_dc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>GetWindowDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hdc</name> <operator>=</operator> <name>printer_dc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pixels</name> <operator>=</operator> <call><name>MulDiv</name><argument_list>(<argument><expr><name>points</name></expr></argument>,
<argument><expr><call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>vertical</name></expr> ?</condition><then> <expr><name>LOGPIXELSY</name></expr> </then><else>: <expr><name>LOGPIXELSX</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">72</literal> <operator>*</operator> <name>divisor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>printer_dc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<return>return <expr><name>pixels</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>CALLBACK</name></type>
<name>font_enumproc</name><parameter_list>(
<parameter><decl><type><name>ENUMLOGFONTW</name> <modifier>*</modifier></type><name>elf</name></decl></parameter>,
<parameter><decl><type><name>NEWTEXTMETRICW</name> <modifier>*</modifier><name>ntm</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name> <name>type</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>










<decl_stmt><decl><type><name>LOGFONTW</name> <modifier>*</modifier></type><name>lf</name> <init>= <expr><operator>(</operator><name>LOGFONTW</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>lparam</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROPORTIONAL_FONTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ntm</name><operator>-&gt;</operator><name>tmPitchAndFamily</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><operator>*</operator><name>lf</name> <operator>=</operator> <name><name>elf</name><operator>-&gt;</operator><name>elfLogFont</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>-&gt;</operator><name>lfCharSet</name></name> <operator>==</operator> <name>ANSI_CHARSET</name>
<operator>||</operator> <name><name>lf</name><operator>-&gt;</operator><name>lfCharSet</name></name> <operator>==</operator> <name>OEM_CHARSET</name>
<operator>||</operator> <name><name>lf</name><operator>-&gt;</operator><name>lfCharSet</name></name> <operator>==</operator> <name>DEFAULT_CHARSET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_logfont</name><parameter_list>(<parameter><decl><type><name>LOGFONTW</name> <modifier>*</modifier></type><name>lf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name> <init>= <expr><call><name>GetWindowDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>EnumFontFamiliesW</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>,
<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>lfFaceName</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>FONTENUMPROCW</name><operator>)</operator><name>font_enumproc</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfHeight</name></name> <operator>=</operator> <name>current_font_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfItalic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfUnderline</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfStrikeOut</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfWeight</name></name> <operator>=</operator> <name>FW_NORMAL</name></expr>;</expr_stmt>


<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf16ascncmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>get_logfont</name><parameter_list>(
<parameter><decl><type><name>LOGFONTW</name> <modifier>*</modifier></type><name>lf</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>HDC</name></type> <name>printer_dc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LOGFONTW</name> <modifier>*</modifier></type><name>lastlf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wname</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>lf</name> <operator>=</operator> <name>s_lfDefault</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wname</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wcscmp</name><argument_list>(<argument><expr><name>wname</name></expr></argument>, <argument><expr><literal type="string">L"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>CHOOSEFONTW</name></type> <name>cf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cf</name><operator>.</operator><name>lStructSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cf</name><operator>.</operator><name>hwndOwner</name></name> <operator>=</operator> <name>s_hwnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cf</name><operator>.</operator><name>Flags</name></name> <operator>=</operator> <name>CF_SCREENFONTS</name> <operator>|</operator> <name>CF_FIXEDPITCHONLY</name> <operator>|</operator> <name>CF_INITTOLOGFONTSTRUCT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lastlf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lf</name> <operator>=</operator> <operator>*</operator><name>lastlf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cf</name><operator>.</operator><name>lpLogFont</name></name> <operator>=</operator> <name>lf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cf</name><operator>.</operator><name>nFontType</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>ChooseFontW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>wname</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>L</name><literal type="char">':'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>wname</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>LF_FACESIZE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfFaceName</name><index>[<expr><name>p</name> <operator>-</operator> <name>wname</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>wname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfFaceName</name><index>[<expr><name>p</name> <operator>-</operator> <name>wname</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfHeight</name></name> <operator>=</operator> <operator>-</operator><literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfWeight</name></name> <operator>=</operator> <name>FW_NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfItalic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfUnderline</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfStrikeOut</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>init_logfont</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>did_replace</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>lf</name><operator>-&gt;</operator><name>lfFaceName</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>-&gt;</operator><name>lfFaceName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfFaceName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>did_replace</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_replace</name> <operator>||</operator> <call><name>init_logfont</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L</name><literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>L</name><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfHeight</name></name> <operator>=</operator> <operator>-</operator> <call><name>points_to_pixels</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>(</operator><name>long_i</name><operator>)</operator><name>printer_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfWidth</name></name> <operator>=</operator> <call><name>points_to_pixels</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>(</operator><name>long_i</name><operator>)</operator><name>printer_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfWeight</name></name> <operator>=</operator> <call><name>wcstol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfWeight</name></name> <operator>=</operator> <name>FW_BOLD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfItalic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfUnderline</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfStrikeOut</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'c'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>charset_pair</name></name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>charset_pairs</name></expr>;</init> <condition><expr><name><name>cp</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>cp</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>utf16ascncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfCharSet</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>charset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E244: Illegal charset name \"%s\" in font name \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>L</name><literal type="char">'q'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>quality_pair</name></name> <modifier>*</modifier></type><name>qp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>qp</name> <operator>=</operator> <name>quality_pairs</name></expr>;</init> <condition><expr><name><name>qp</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>qp</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>utf16ascncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>qp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>qp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lfQuality</name></name> <operator>=</operator> <name><name>qp</name><operator>-&gt;</operator><name>quality</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>qp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>qp</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E244: Illegal quality name \"%s\" in font name \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E245: Illegal char '%c' in font name \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></switch>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L</name><literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></while>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name>printer_dc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>lastlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lastlf</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>LOGFONTW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lastlf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>lastlf</name></expr></argument>, <argument><expr><name>lf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LOGFONTW</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>channel_init_winsock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wsaerr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>WSInitialized</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wsaerr</name> <operator>=</operator> <call><name>WSAStartup</name><argument_list>(<argument><expr><call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wsaerr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>WSInitialized</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
