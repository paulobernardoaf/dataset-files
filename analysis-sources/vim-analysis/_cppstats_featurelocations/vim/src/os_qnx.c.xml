<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\os_qnx.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>is_photon_available</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>qnx_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PhChannelParms_t</name></type> <name>parms</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>Ph_DYNAMIC_BUFFER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_photon_available</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>PhAttach</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parms</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP_TYPE_VIM</name></cpp:macro> <cpp:value>"VIMTYPE"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP_TYPE_TEXT</name></cpp:macro> <cpp:value>"TEXT"</cpp:value></cpp:define>


<function><type><name>void</name></type> <name>qnx_clip_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_photon_available</name> <operator>==</operator> <name>TRUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_init</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>clip_mch_own_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clip_mch_lose_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clip_mch_request_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>MLINE</name></expr></init></decl>, <decl><type ref="prev"/><name>clip_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_type_set</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhClipHeader</name> <modifier>*</modifier></type><name>clip_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>clip_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cbdata</name> <operator>=</operator> <call><name>PhClipboardPasteStart</name><argument_list>(<argument><expr><call><name>PhInputGroup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cbdata</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>clip_header</name> <operator>=</operator> <call><name>PhClipboardPasteType</name><argument_list>(<argument><expr><name>cbdata</name></expr></argument>, <argument><expr><name>CLIP_TYPE_VIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clip_header</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>clip_header</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<switch>switch<condition>(<expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>clip_header</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition>
<block>{<block_content>
<default>default:</default> 
<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>MBLOCK</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>is_type_set</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>clip_header</name> <operator>=</operator> <call><name>PhClipboardPasteType</name><argument_list>(<argument><expr><name>cbdata</name></expr></argument>, <argument><expr><name>CLIP_TYPE_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clip_header</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>clip_text</name> <operator>=</operator> <name><name>clip_header</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>clip_length</name> <operator>=</operator> <name><name>clip_header</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clip_text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>is_type_set</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>MAUTO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>clip_text</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>clip_length</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_yank_selection</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>clip_text</name></expr></argument>, <argument><expr><name>clip_length</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PhClipboardPasteFinish</name><argument_list>(<argument><expr><name>cbdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clip_mch_set_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text_clip</name></decl>, <decl><type ref="prev"/><name><name>vim_clip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhClipHeader</name></type> <name><name>clip_header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_get_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>clip_convert_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>text_clip</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>text_clip</name> <operator>&amp;&amp;</operator> <name>vim_clip</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>clip_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clip_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name><name>clip_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name>CLIP_TYPE_VIM</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vim_clip</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>vim_clip</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name><name>clip_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name>CLIP_TYPE_TEXT</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>text_clip</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<default>default:</default> 
<case>case <expr><name>MLINE</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>vim_clip</name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>MCHAR</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>vim_clip</name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>MBLOCK</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>vim_clip</name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>text_clip</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vim_clip</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PhClipboardCopy</name><argument_list>(<argument><expr><call><name>PhInputGroup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>clip_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>text_clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
