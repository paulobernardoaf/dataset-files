<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\arabic.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_HAMZA</name></cpp:macro> <cpp:value>0x0621</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ALEF_MADDA</name></cpp:macro> <cpp:value>0x0622</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ALEF_HAMZA_ABOVE</name></cpp:macro> <cpp:value>0x0623</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_WAW_HAMZA</name></cpp:macro> <cpp:value>0x0624</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ALEF_HAMZA_BELOW</name></cpp:macro> <cpp:value>0x0625</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_YEH_HAMZA</name></cpp:macro> <cpp:value>0x0626</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ALEF</name></cpp:macro> <cpp:value>0x0627</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_BEH</name></cpp:macro> <cpp:value>0x0628</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_TEH_MARBUTA</name></cpp:macro> <cpp:value>0x0629</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_TEH</name></cpp:macro> <cpp:value>0x062a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_THEH</name></cpp:macro> <cpp:value>0x062b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_JEEM</name></cpp:macro> <cpp:value>0x062c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_HAH</name></cpp:macro> <cpp:value>0x062d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_KHAH</name></cpp:macro> <cpp:value>0x062e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_DAL</name></cpp:macro> <cpp:value>0x062f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_THAL</name></cpp:macro> <cpp:value>0x0630</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_REH</name></cpp:macro> <cpp:value>0x0631</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ZAIN</name></cpp:macro> <cpp:value>0x0632</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SEEN</name></cpp:macro> <cpp:value>0x0633</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SHEEN</name></cpp:macro> <cpp:value>0x0634</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SAD</name></cpp:macro> <cpp:value>0x0635</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_DAD</name></cpp:macro> <cpp:value>0x0636</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_TAH</name></cpp:macro> <cpp:value>0x0637</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ZAH</name></cpp:macro> <cpp:value>0x0638</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_AIN</name></cpp:macro> <cpp:value>0x0639</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_GHAIN</name></cpp:macro> <cpp:value>0x063a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_TATWEEL</name></cpp:macro> <cpp:value>0x0640</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_FEH</name></cpp:macro> <cpp:value>0x0641</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_QAF</name></cpp:macro> <cpp:value>0x0642</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_KAF</name></cpp:macro> <cpp:value>0x0643</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_LAM</name></cpp:macro> <cpp:value>0x0644</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_MEEM</name></cpp:macro> <cpp:value>0x0645</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_NOON</name></cpp:macro> <cpp:value>0x0646</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_HEH</name></cpp:macro> <cpp:value>0x0647</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_WAW</name></cpp:macro> <cpp:value>0x0648</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ALEF_MAKSURA</name></cpp:macro> <cpp:value>0x0649</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_YEH</name></cpp:macro> <cpp:value>0x064a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_FATHATAN</name></cpp:macro> <cpp:value>0x064b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_DAMMATAN</name></cpp:macro> <cpp:value>0x064c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_KASRATAN</name></cpp:macro> <cpp:value>0x064d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_FATHA</name></cpp:macro> <cpp:value>0x064e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_DAMMA</name></cpp:macro> <cpp:value>0x064f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_KASRA</name></cpp:macro> <cpp:value>0x0650</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SHADDA</name></cpp:macro> <cpp:value>0x0651</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SUKUN</name></cpp:macro> <cpp:value>0x0652</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_MADDA_ABOVE</name></cpp:macro> <cpp:value>0x0653</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_HAMZA_ABOVE</name></cpp:macro> <cpp:value>0x0654</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_HAMZA_BELOW</name></cpp:macro> <cpp:value>0x0655</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_PEH</name></cpp:macro> <cpp:value>0x067e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_TCHEH</name></cpp:macro> <cpp:value>0x0686</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_JEH</name></cpp:macro> <cpp:value>0x0698</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_FKAF</name></cpp:macro> <cpp:value>0x06a9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_GAF</name></cpp:macro> <cpp:value>0x06af</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_FYEH</name></cpp:macro> <cpp:value>0x06cc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_LAM_ALEF_MADDA_ABOVE</name></cpp:macro> <cpp:value>0xfef5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_LAM_ALEF_MADDA_ABOVE</name></cpp:macro> <cpp:value>0xfef6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_LAM_ALEF_HAMZA_ABOVE</name></cpp:macro> <cpp:value>0xfef7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_LAM_ALEF_HAMZA_ABOVE</name></cpp:macro> <cpp:value>0xfef8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_LAM_ALEF_HAMZA_BELOW</name></cpp:macro> <cpp:value>0xfef9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_LAM_ALEF_HAMZA_BELOW</name></cpp:macro> <cpp:value>0xfefa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_LAM_ALEF</name></cpp:macro> <cpp:value>0xfefb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_LAM_ALEF</name></cpp:macro> <cpp:value>0xfefc</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <name>achar</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>isolated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>initial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>medial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>final</name></decl>;</decl_stmt>
}</block> <decl><name><name>achars</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>a_HAMZA</name></expr>, <expr><literal type="number">0xfe80</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_ALEF_MADDA</name></expr>, <expr><literal type="number">0xfe81</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfe82</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_ALEF_HAMZA_ABOVE</name></expr>, <expr><literal type="number">0xfe83</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfe84</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_WAW_HAMZA</name></expr>, <expr><literal type="number">0xfe85</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfe86</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_ALEF_HAMZA_BELOW</name></expr>, <expr><literal type="number">0xfe87</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfe88</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_YEH_HAMZA</name></expr>, <expr><literal type="number">0xfe89</literal></expr>, <expr><literal type="number">0xfe8b</literal></expr>, <expr><literal type="number">0xfe8c</literal></expr>, <expr><literal type="number">0xfe8a</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_ALEF</name></expr>, <expr><literal type="number">0xfe8d</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfe8e</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_BEH</name></expr>, <expr><literal type="number">0xfe8f</literal></expr>, <expr><literal type="number">0xfe91</literal></expr>, <expr><literal type="number">0xfe92</literal></expr>, <expr><literal type="number">0xfe90</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_TEH_MARBUTA</name></expr>, <expr><literal type="number">0xfe93</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfe94</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_TEH</name></expr>, <expr><literal type="number">0xfe95</literal></expr>, <expr><literal type="number">0xfe97</literal></expr>, <expr><literal type="number">0xfe98</literal></expr>, <expr><literal type="number">0xfe96</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_THEH</name></expr>, <expr><literal type="number">0xfe99</literal></expr>, <expr><literal type="number">0xfe9b</literal></expr>, <expr><literal type="number">0xfe9c</literal></expr>, <expr><literal type="number">0xfe9a</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_JEEM</name></expr>, <expr><literal type="number">0xfe9d</literal></expr>, <expr><literal type="number">0xfe9f</literal></expr>, <expr><literal type="number">0xfea0</literal></expr>, <expr><literal type="number">0xfe9e</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_HAH</name></expr>, <expr><literal type="number">0xfea1</literal></expr>, <expr><literal type="number">0xfea3</literal></expr>, <expr><literal type="number">0xfea4</literal></expr>, <expr><literal type="number">0xfea2</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_KHAH</name></expr>, <expr><literal type="number">0xfea5</literal></expr>, <expr><literal type="number">0xfea7</literal></expr>, <expr><literal type="number">0xfea8</literal></expr>, <expr><literal type="number">0xfea6</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_DAL</name></expr>, <expr><literal type="number">0xfea9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfeaa</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_THAL</name></expr>, <expr><literal type="number">0xfeab</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfeac</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_REH</name></expr>, <expr><literal type="number">0xfead</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfeae</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_ZAIN</name></expr>, <expr><literal type="number">0xfeaf</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfeb0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_SEEN</name></expr>, <expr><literal type="number">0xfeb1</literal></expr>, <expr><literal type="number">0xfeb3</literal></expr>, <expr><literal type="number">0xfeb4</literal></expr>, <expr><literal type="number">0xfeb2</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_SHEEN</name></expr>, <expr><literal type="number">0xfeb5</literal></expr>, <expr><literal type="number">0xfeb7</literal></expr>, <expr><literal type="number">0xfeb8</literal></expr>, <expr><literal type="number">0xfeb6</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_SAD</name></expr>, <expr><literal type="number">0xfeb9</literal></expr>, <expr><literal type="number">0xfebb</literal></expr>, <expr><literal type="number">0xfebc</literal></expr>, <expr><literal type="number">0xfeba</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_DAD</name></expr>, <expr><literal type="number">0xfebd</literal></expr>, <expr><literal type="number">0xfebf</literal></expr>, <expr><literal type="number">0xfec0</literal></expr>, <expr><literal type="number">0xfebe</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_TAH</name></expr>, <expr><literal type="number">0xfec1</literal></expr>, <expr><literal type="number">0xfec3</literal></expr>, <expr><literal type="number">0xfec4</literal></expr>, <expr><literal type="number">0xfec2</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_ZAH</name></expr>, <expr><literal type="number">0xfec5</literal></expr>, <expr><literal type="number">0xfec7</literal></expr>, <expr><literal type="number">0xfec8</literal></expr>, <expr><literal type="number">0xfec6</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_AIN</name></expr>, <expr><literal type="number">0xfec9</literal></expr>, <expr><literal type="number">0xfecb</literal></expr>, <expr><literal type="number">0xfecc</literal></expr>, <expr><literal type="number">0xfeca</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_GHAIN</name></expr>, <expr><literal type="number">0xfecd</literal></expr>, <expr><literal type="number">0xfecf</literal></expr>, <expr><literal type="number">0xfed0</literal></expr>, <expr><literal type="number">0xfece</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_TATWEEL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x0640</literal></expr>, <expr><literal type="number">0x0640</literal></expr>, <expr><literal type="number">0x0640</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_FEH</name></expr>, <expr><literal type="number">0xfed1</literal></expr>, <expr><literal type="number">0xfed3</literal></expr>, <expr><literal type="number">0xfed4</literal></expr>, <expr><literal type="number">0xfed2</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_QAF</name></expr>, <expr><literal type="number">0xfed5</literal></expr>, <expr><literal type="number">0xfed7</literal></expr>, <expr><literal type="number">0xfed8</literal></expr>, <expr><literal type="number">0xfed6</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_KAF</name></expr>, <expr><literal type="number">0xfed9</literal></expr>, <expr><literal type="number">0xfedb</literal></expr>, <expr><literal type="number">0xfedc</literal></expr>, <expr><literal type="number">0xfeda</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_LAM</name></expr>, <expr><literal type="number">0xfedd</literal></expr>, <expr><literal type="number">0xfedf</literal></expr>, <expr><literal type="number">0xfee0</literal></expr>, <expr><literal type="number">0xfede</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_MEEM</name></expr>, <expr><literal type="number">0xfee1</literal></expr>, <expr><literal type="number">0xfee3</literal></expr>, <expr><literal type="number">0xfee4</literal></expr>, <expr><literal type="number">0xfee2</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_NOON</name></expr>, <expr><literal type="number">0xfee5</literal></expr>, <expr><literal type="number">0xfee7</literal></expr>, <expr><literal type="number">0xfee8</literal></expr>, <expr><literal type="number">0xfee6</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_HEH</name></expr>, <expr><literal type="number">0xfee9</literal></expr>, <expr><literal type="number">0xfeeb</literal></expr>, <expr><literal type="number">0xfeec</literal></expr>, <expr><literal type="number">0xfeea</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_WAW</name></expr>, <expr><literal type="number">0xfeed</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfeee</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_ALEF_MAKSURA</name></expr>, <expr><literal type="number">0xfeef</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfef0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_YEH</name></expr>, <expr><literal type="number">0xfef1</literal></expr>, <expr><literal type="number">0xfef3</literal></expr>, <expr><literal type="number">0xfef4</literal></expr>, <expr><literal type="number">0xfef2</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_FATHATAN</name></expr>, <expr><literal type="number">0xfe70</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_DAMMATAN</name></expr>, <expr><literal type="number">0xfe72</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_KASRATAN</name></expr>, <expr><literal type="number">0xfe74</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_FATHA</name></expr>, <expr><literal type="number">0xfe76</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfe77</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_DAMMA</name></expr>, <expr><literal type="number">0xfe78</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfe79</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_KASRA</name></expr>, <expr><literal type="number">0xfe7a</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfe7b</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_SHADDA</name></expr>, <expr><literal type="number">0xfe7c</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfe7c</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_SUKUN</name></expr>, <expr><literal type="number">0xfe7e</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfe7f</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_MADDA_ABOVE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_HAMZA_ABOVE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_HAMZA_BELOW</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_PEH</name></expr>, <expr><literal type="number">0xfb56</literal></expr>, <expr><literal type="number">0xfb58</literal></expr>, <expr><literal type="number">0xfb59</literal></expr>, <expr><literal type="number">0xfb57</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_TCHEH</name></expr>, <expr><literal type="number">0xfb7a</literal></expr>, <expr><literal type="number">0xfb7c</literal></expr>, <expr><literal type="number">0xfb7d</literal></expr>, <expr><literal type="number">0xfb7b</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_JEH</name></expr>, <expr><literal type="number">0xfb8a</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xfb8b</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_FKAF</name></expr>, <expr><literal type="number">0xfb8e</literal></expr>, <expr><literal type="number">0xfb90</literal></expr>, <expr><literal type="number">0xfb91</literal></expr>, <expr><literal type="number">0xfb8f</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_GAF</name></expr>, <expr><literal type="number">0xfb92</literal></expr>, <expr><literal type="number">0xfb94</literal></expr>, <expr><literal type="number">0xfb95</literal></expr>, <expr><literal type="number">0xfb93</literal></expr>}</block></expr>,
<expr><block>{<expr><name>a_FYEH</name></expr>, <expr><literal type="number">0xfbfc</literal></expr>, <expr><literal type="number">0xfbfe</literal></expr>, <expr><literal type="number">0xfbff</literal></expr>, <expr><literal type="number">0xfbfd</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_BYTE_ORDER_MARK</name></cpp:macro> <cpp:value>0xfeff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_SIZE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a) / sizeof((a)[0]))</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>achar</name></name> <modifier>*</modifier></type>
<name>find_achar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>


<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>achars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>h</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <name>l</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>achars</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>c</name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>achars</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&lt;</operator> <name><name>achars</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>chg_c_laa2i</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hid_c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tempc</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>hid_c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>a_ALEF_MADDA</name></expr>:</case>
<expr_stmt><expr><name>tempc</name> <operator>=</operator> <name>a_s_LAM_ALEF_MADDA_ABOVE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>a_ALEF_HAMZA_ABOVE</name></expr>:</case>
<expr_stmt><expr><name>tempc</name> <operator>=</operator> <name>a_s_LAM_ALEF_HAMZA_ABOVE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>a_ALEF_HAMZA_BELOW</name></expr>:</case>
<expr_stmt><expr><name>tempc</name> <operator>=</operator> <name>a_s_LAM_ALEF_HAMZA_BELOW</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>a_ALEF</name></expr>:</case>
<expr_stmt><expr><name>tempc</name> <operator>=</operator> <name>a_s_LAM_ALEF</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>tempc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>tempc</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>chg_c_laa2f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hid_c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tempc</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>hid_c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>a_ALEF_MADDA</name></expr>:</case>
<expr_stmt><expr><name>tempc</name> <operator>=</operator> <name>a_f_LAM_ALEF_MADDA_ABOVE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>a_ALEF_HAMZA_ABOVE</name></expr>:</case>
<expr_stmt><expr><name>tempc</name> <operator>=</operator> <name>a_f_LAM_ALEF_HAMZA_ABOVE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>a_ALEF_HAMZA_BELOW</name></expr>:</case>
<expr_stmt><expr><name>tempc</name> <operator>=</operator> <name>a_f_LAM_ALEF_HAMZA_BELOW</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>a_ALEF</name></expr>:</case>
<expr_stmt><expr><name>tempc</name> <operator>=</operator> <name>a_f_LAM_ALEF</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>tempc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>tempc</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>can_join</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>achar</name></name> <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>find_achar</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>achar</name></name> <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>find_achar</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>a1</name> <operator>&amp;&amp;</operator> <name>a2</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a1</name><operator>-&gt;</operator><name>initial</name></name> <operator>||</operator> <name><name>a1</name><operator>-&gt;</operator><name>medial</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a2</name><operator>-&gt;</operator><name>final</name></name> <operator>||</operator> <name><name>a2</name><operator>-&gt;</operator><name>medial</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>arabic_maycombine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>two</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>two</name> <operator>==</operator> <name>a_ALEF_MADDA</name>
<operator>||</operator> <name>two</name> <operator>==</operator> <name>a_ALEF_HAMZA_ABOVE</name>
<operator>||</operator> <name>two</name> <operator>==</operator> <name>a_ALEF_HAMZA_BELOW</name>
<operator>||</operator> <name>two</name> <operator>==</operator> <name>a_ALEF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>arabic_combine</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>one</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>two</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>one</name> <operator>==</operator> <name>a_LAM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>arabic_maycombine</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>A_is_iso</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>find_achar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>A_is_ok</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>A_is_iso</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <name>a_BYTE_ORDER_MARK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>A_is_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>A_is_ok</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>a_HAMZA</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>arabic_shape</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ccp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c1p</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>prev_c</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>prev_c1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>next_c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curr_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curr_laa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_laa</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>A_is_ok</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>curr_laa</name> <operator>=</operator> <call><name>arabic_combine</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>c1p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_laa</name> <operator>=</operator> <call><name>arabic_combine</name><argument_list>(<argument><expr><name>prev_c</name></expr></argument>, <argument><expr><name>prev_c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curr_laa</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>A_is_valid</name><argument_list>(<argument><expr><name>prev_c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>can_join</name><argument_list>(<argument><expr><name>prev_c</name></expr></argument>, <argument><expr><name>a_LAM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>prev_laa</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <call><name>chg_c_laa2f</name><argument_list>(<argument><expr><operator>*</operator><name>c1p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <call><name>chg_c_laa2i</name><argument_list>(<argument><expr><operator>*</operator><name>c1p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><operator>*</operator><name>c1p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>achar</name></name> <modifier>*</modifier></type><name>curr_a</name> <init>= <expr><call><name>find_achar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>backward_combine</name> <init>= <expr><operator>!</operator><name>prev_laa</name> <operator>&amp;&amp;</operator> <call><name>can_join</name><argument_list>(<argument><expr><name>prev_c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>forward_combine</name> <init>= <expr><call><name>can_join</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>next_c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>backward_combine</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>forward_combine</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <name><name>curr_a</name><operator>-&gt;</operator><name>medial</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <name><name>curr_a</name><operator>-&gt;</operator><name>final</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>forward_combine</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <name><name>curr_a</name><operator>-&gt;</operator><name>initial</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <name><name>curr_a</name><operator>-&gt;</operator><name>isolated</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>curr_c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curr_c</name> <operator>!=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>ccp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>curr_c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ccp</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>curr_c</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
