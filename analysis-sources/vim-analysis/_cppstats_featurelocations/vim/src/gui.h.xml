<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\gui.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Xm.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Intrinsic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/StringDefs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Intrinsic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_haiku.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Intrinsic.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Quickdraw.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Fonts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Events.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Menus.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name> <argument_list>(<argument><expr><name>TARGET_API_MAC_CARBON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>TARGET_API_MAC_CARBON</name><operator>)</operator><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Controls.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Dialogs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OSUtils.h&gt;</cpp:file></cpp:include>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Ph.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Pt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"photon/PxProto.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ON_FLY_SCROLL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DROP_FILE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONTSET_ALWAYS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_X</name><parameter_list>(<parameter><type><name>col</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((col) * gui.char_width)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_Y</name><parameter_list>(<parameter><type><name>row</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((row) * gui.char_height + gui.char_ascent)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_X</name><parameter_list>(<parameter><type><name>col</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((col) * gui.char_width)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_Y</name><parameter_list>(<parameter><type><name>row</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((row) * gui.char_height)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_2_COL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) / gui.char_width)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y_2_ROW</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y) / gui.char_height)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_X</name><parameter_list>(<parameter><type><name>col</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((col) * gui.char_width + gui.border_offset)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_X</name><parameter_list>(<parameter><type><name>col</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((col) * gui.char_width + gui.border_offset)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_2_COL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) - gui.border_offset) / gui.char_width)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_Y</name><parameter_list>(<parameter><type><name>row</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((row) * gui.char_height + gui.char_ascent + gui.border_offset)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_Y</name><parameter_list>(<parameter><type><name>row</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((row) * gui.char_height + gui.border_offset)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y_2_ROW</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((y) - gui.border_offset) / gui.char_height)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBAR_NONE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBAR_LEFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBAR_RIGHT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBAR_BOTTOM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBAR_VERT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBAR_HORIZ</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SB_DEFAULT_WIDTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_DEFAULT_HEIGHT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_MON_WRAP_CURSOR</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_MON_INVERT</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_MON_IS_CURSOR</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_MON_TRS_CURSOR</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_MON_NOCLEAR</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_TRANSP</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_BOLD</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_UNDERL</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_UNDERC</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_ITALIC</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_CURSOR</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_STRIKE</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAR_STRING</name></cpp:macro> <cpp:value>"--&gt;Detach"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAR_LEN</name></cpp:macro> <cpp:value>(9)</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOOLBAR_BUTTON_HEIGHT</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOOLBAR_BUTTON_WIDTH</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOOLBAR_BORDER_HEIGHT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLINE_HEIGHT</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLINE_HEIGHT</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_CONSOLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_CONSOLE_INPUT</name></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>GuiScrollbar</name>
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>ident</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>pixval</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>max</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>top</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>status_height</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>Widget</name></type> <name>id</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>handler_id</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HWND</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>scroll_shift</name></decl>;</decl_stmt> 



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FEAT_GUI_HAIKU</name></expr></cpp:if>
<decl_stmt><decl><type><name>VimScrollBar</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ControlHandle</name></type> <name>id</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>scrollbar_T</name>;</typedef>

<typedef>typedef <type><name>long</name></type> <name>guicolor_T</name>;</typedef> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALCOLOR</name></cpp:macro> <cpp:value>(guicolor_T)-11111</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTERMCOLOR</name></cpp:macro> <cpp:value>(guicolor_T)-11110</cpp:value></cpp:define> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>PangoFontDescription</name> <modifier>*</modifier></type><name>GuiFont</name>;</typedef> 
<typedef>typedef <type><name>PangoFontDescription</name> <modifier>*</modifier></type><name>GuiFontset</name>;</typedef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOFONT</name></cpp:macro> <cpp:value>(GuiFont)NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOFONTSET</name></cpp:macro> <cpp:value>(GuiFontset)NULL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>char</name> <modifier>*</modifier></type><name>GuiFont</name>;</typedef>
<typedef>typedef <type><name>char</name> <modifier>*</modifier></type><name>GuiFontset</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOFONT</name></cpp:macro> <cpp:value>(GuiFont)NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOFONTSET</name></cpp:macro> <cpp:value>(GuiFontset)NULL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>XFontStruct</name> <modifier>*</modifier></type><name>GuiFont</name>;</typedef> 
<typedef>typedef <type><name>XFontSet</name></type> <name>GuiFontset</name>;</typedef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOFONT</name></cpp:macro> <cpp:value>(GuiFont)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOFONTSET</name></cpp:macro> <cpp:value>(GuiFontset)0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>long_u</name></type> <name>GuiFont</name>;</typedef> 
<typedef>typedef <type><name>long_u</name></type> <name>GuiFontset</name>;</typedef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOFONT</name></cpp:macro> <cpp:value>(GuiFont)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOFONTSET</name></cpp:macro> <cpp:value>(GuiFontset)0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_MAY_SPAWN</name></cpp:macro></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>Gui</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>in_focus</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>in_use</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>starting</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>shell_created</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dying</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dofork</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GUI_MAY_SPAWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>dospawn</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>dragged_sb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>dragged_wp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pointer_hidden</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cursor_col</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cursor_row</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>cursor_is_valid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num_cols</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num_rows</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>scroll_region_top</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>scroll_region_bot</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>scroll_region_left</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>scroll_region_right</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>highlight_mask</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>scrollbar_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>scrollbar_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>left_sbar_x</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>right_sbar_x</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>menu_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>menu_width</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name></type> <name>menu_is_active</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name>menu_height_fixed</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>scrollbar_T</name></type> <name>bottom_sbar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>which_scrollbars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_wrap</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>char_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>char_height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>char_ascent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>border_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>border_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GuiFont</name></type> <name>norm_font</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GuiFont</name></type> <name>bold_font</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GuiFont</name></type> <name>ital_font</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GuiFont</name></type> <name>boldital_font</name></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>font_can_bold</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GuiFontset</name></type> <name>menu_fontset</name></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>GuiFont</name></type> <name>menu_font</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>GuiFont</name></type> <name>wide_font</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GuiFont</name></type> <name>wide_bold_font</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GuiFont</name></type> <name>wide_ital_font</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GuiFont</name></type> <name>wide_boldital_font</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GuiFontset</name></type> <name>fontset</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>back_pixel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>norm_pixel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>def_back_pixel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>def_norm_pixel</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rsrc_menu_fg_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>menu_fg_pixel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rsrc_menu_bg_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>menu_bg_pixel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rsrc_scroll_fg_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>scroll_fg_pixel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rsrc_scroll_bg_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>scroll_bg_pixel</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>menu_def_fg_pixel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>menu_def_bg_pixel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>scroll_def_fg_pixel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>scroll_def_bg_pixel</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Window</name></type> <name>wid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>visibility</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GC</name></type> <name>text_gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GC</name></type> <name>back_gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GC</name></type> <name>invert_gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cursor</name></type> <name>blank_pointer</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rsrc_font_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rsrc_bold_font_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rsrc_ital_font_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rsrc_boldital_font_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rsrc_menu_font_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Bool</name></type> <name>rsrc_rev_video</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>geom</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Bool</name></type> <name>color_approx</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>visibility</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>GdkCursor</name> <modifier>*</modifier></type><name>blank_pointer</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>geom</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>mainwin</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>formwin</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>drawarea</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>menubar</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>toolbar</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>menubar_h</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>toolbar_h</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GdkRGBA</name> <modifier>*</modifier></type><name>fgcolor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GdkRGBA</name> <modifier>*</modifier></type><name>bgcolor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GdkRGBA</name> <modifier>*</modifier></type><name>spcolor</name></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>GdkColor</name> <modifier>*</modifier></type><name>fgcolor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GdkColor</name> <modifier>*</modifier></type><name>bgcolor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GdkColor</name> <modifier>*</modifier></type><name>spcolor</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>cairo_surface_t</name> <modifier>*</modifier></type><name>surface</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>gboolean</name></type> <name>by_signal</name></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>GdkGC</name> <modifier>*</modifier></type><name>text_gc</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>PangoContext</name> <modifier>*</modifier></type><name>text_context</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PangoFont</name> <modifier>*</modifier></type><name>ascii_font</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PangoGlyphString</name> <modifier>*</modifier></type><name>ascii_glyphs</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>tabline</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>GtkAccelGroup</name> <modifier>*</modifier></type><name>accel_group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>filedlg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>browse_fname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>guint32</name></type> <name>event_time</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>


<decl_stmt><decl><type><name>int</name></type> <name>tabline_height</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>footer_height</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>toolbar_height</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TIP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rsrc_tooltip_font_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rsrc_tooltip_fg_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rsrc_tooltip_bg_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>tooltip_fg_pixel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>tooltip_bg_pixel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>XFontSet</name></type> <name>tooltip_fontset</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GuiFont</name></type> <name>currFont</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>currFgColor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>currBgColor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>currSpColor</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VimApp</name> <modifier>*</modifier></type><name>vimApp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VimWindow</name> <modifier>*</modifier></type><name>vimWindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VimFormView</name> <modifier>*</modifier></type><name>vimForm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VimTextAreaView</name> <modifier>*</modifier></type><name>vimTextArea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vdcmp</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>VimWindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MenuHandle</name></type> <name>MacOSHelpMenu</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>MacOSHelpItems</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>wid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>visibility</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>vimWindow</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>vimTextArea</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>vimContainer</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>vimToolBarGroup</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>vimMenuBar</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>vimToolBar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>toolbar_height</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>PhEvent_t</name> <modifier>*</modifier></type><name>event_buffer</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rsrc_input_method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rsrc_preedit_type_name</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>gui_T</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>gui_T</name></type> <name>gui</name></decl>;</decl_stmt> 


<typedef>typedef <type><enum>enum
<block>{
<decl><name>VW_POS_MOUSE</name></decl>,
<decl><name>VW_POS_CENTER</name></decl>,
<decl><name>VW_POS_TOP_CENTER</name></decl>
}</block></enum></type> <name>gui_win_pos_T</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIND_REPLACE_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRD_FINDNEXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRD_R_FINDNEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRD_REPLACE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRD_REPLACEALL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRD_UNDO</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRD_TYPE_MASK</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRD_WHOLE_WORD</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRD_MATCH_CASE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_TO_UTF8</name><parameter_list>(<parameter><type><name>String</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((output_conv.vc_type == CONV_NONE || (String) == NULL) ? (String) : string_convert(&amp;output_conv, (String), NULL))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_TO_UTF8_FREE</name><parameter_list>(<parameter><type><name>String</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((String) = ((output_conv.vc_type == CONV_NONE) ? (char_u *)NULL : (vim_free(String), (char_u *)NULL)))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_FROM_UTF8</name><parameter_list>(<parameter><type><name>String</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((input_conv.vc_type == CONV_NONE || (String) == NULL) ? (String) : string_convert(&amp;input_conv, (String), NULL))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_FROM_UTF8_FREE</name><parameter_list>(<parameter><type><name>String</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((String) = ((input_conv.vc_type == CONV_NONE) ? (char_u *)NULL : (vim_free(String), (char_u *)NULL)))</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_TO_UTF8</name><parameter_list>(<parameter><type><name>String</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(String)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_TO_UTF8_FREE</name><parameter_list>(<parameter><type><name>String</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((String) = (char_u *)NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_FROM_UTF8</name><parameter_list>(<parameter><type><name>String</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(String)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_FROM_UTF8_FREE</name><parameter_list>(<parameter><type><name>String</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((String) = (char_u *)NULL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC2GENERIC</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void *)(func)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC2GENERIC</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>G_CALLBACK(func)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_MAY_FORK</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
