<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\highlight.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SG_TERM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SG_CTERM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SG_GUI</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SG_LINK</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 





<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>hl_name_table</name><index>[]</index></name><operator>)</operator> <operator>=</operator>
<block>{<expr><literal type="string">"bold"</literal></expr>, <expr><literal type="string">"standout"</literal></expr>, <expr><literal type="string">"underline"</literal></expr>, <expr><literal type="string">"undercurl"</literal></expr>,
<expr><literal type="string">"italic"</literal></expr>, <expr><literal type="string">"reverse"</literal></expr>, <expr><literal type="string">"inverse"</literal></expr>, <expr><literal type="string">"nocombine"</literal></expr>, <expr><literal type="string">"strikethrough"</literal></expr>, <expr><literal type="string">"NONE"</literal></expr>}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>hl_attr_table</name><index>[]</index></name> <init>=
<expr><block>{<expr><name>HL_BOLD</name></expr>, <expr><name>HL_STANDOUT</name></expr>, <expr><name>HL_UNDERLINE</name></expr>, <expr><name>HL_UNDERCURL</name></expr>, <expr><name>HL_ITALIC</name></expr>, <expr><name>HL_INVERSE</name></expr>, <expr><name>HL_INVERSE</name></expr>, <expr><name>HL_NOCOMBINE</name></expr>, <expr><name>HL_STRIKETHROUGH</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_COMBINE</name><parameter_list>(<parameter><type><name>attr_a</name></type></parameter>, <parameter><type><name>attr_b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((attr_b) &amp; HL_NOCOMBINE) ? attr_b : (attr_a)) | (attr_b))</cpp:value></cpp:define>






<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sg_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sg_name_u</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sg_cleared</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sg_term</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sg_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sg_stop</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sg_term_attr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sg_cterm</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sg_cterm_bold</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sg_cterm_fg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sg_cterm_bg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sg_cterm_attr</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>sg_gui_fg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>sg_gui_bg</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>sg_gui_sp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GuiFont</name></type> <name>sg_font</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GuiFontset</name></type> <name>sg_fontset</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sg_font_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sg_gui_attr</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>sg_gui</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sg_gui_fg_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sg_gui_bg_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sg_gui_sp_name</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>sg_link</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sg_set</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>sctx_T</name></type> <name>sg_script_ctx</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>hl_group_T</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>highlight_ga</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HL_TABLE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((hl_group_T *)((highlight_ga.ga_data)))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_OFF</name></cpp:macro> <cpp:value>(HL_ALL + 1)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_unadd_group</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_hl_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>highlight_list_one</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>highlight_list_arg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>didh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iarg</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sarg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_add_group</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>hl_has_settings</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_link</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>highlight_clear</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_do_one_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_tooltip</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_group_colors</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name> <modifier>*</modifier></type><name>fgp</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name> <modifier>*</modifier></type><name>bgp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_norm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_tooltip</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>hl_do_font</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_normal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_tooltip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>free_font</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CENT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>b</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CENT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>highlight_init_both</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"ErrorMsg term=standout ctermbg=DarkRed ctermfg=White"</literal></expr></argument>,
<argument><expr><literal type="string">"ErrorMsg term=standout ctermbg=DarkRed ctermfg=White guibg=Red guifg=White"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"IncSearch term=reverse cterm=reverse"</literal></expr></argument>,
<argument><expr><literal type="string">"IncSearch term=reverse cterm=reverse gui=reverse"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"ModeMsg term=bold cterm=bold"</literal></expr></argument>,
<argument><expr><literal type="string">"ModeMsg term=bold cterm=bold gui=bold"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"NonText term=bold ctermfg=Blue"</literal></expr></argument>,
<argument><expr><literal type="string">"NonText term=bold ctermfg=Blue gui=bold guifg=Blue"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"StatusLine term=reverse,bold cterm=reverse,bold"</literal></expr></argument>,
<argument><expr><literal type="string">"StatusLine term=reverse,bold cterm=reverse,bold gui=reverse,bold"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"StatusLineNC term=reverse cterm=reverse"</literal></expr></argument>,
<argument><expr><literal type="string">"StatusLineNC term=reverse cterm=reverse gui=reverse"</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"default link EndOfBuffer NonText"</literal></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"VertSplit term=reverse cterm=reverse"</literal></expr></argument>,
<argument><expr><literal type="string">"VertSplit term=reverse cterm=reverse gui=reverse"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"VisualNOS term=underline,bold cterm=underline,bold"</literal></expr></argument>,
<argument><expr><literal type="string">"VisualNOS term=underline,bold cterm=underline,bold gui=underline,bold"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"DiffText term=reverse cterm=bold ctermbg=Red"</literal></expr></argument>,
<argument><expr><literal type="string">"DiffText term=reverse cterm=bold ctermbg=Red gui=bold guibg=Red"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"PmenuSbar ctermbg=Grey"</literal></expr></argument>,
<argument><expr><literal type="string">"PmenuSbar ctermbg=Grey guibg=Grey"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"TabLineSel term=bold cterm=bold"</literal></expr></argument>,
<argument><expr><literal type="string">"TabLineSel term=bold cterm=bold gui=bold"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"TabLineFill term=reverse cterm=reverse"</literal></expr></argument>,
<argument><expr><literal type="string">"TabLineFill term=reverse cterm=reverse gui=reverse"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"Cursor guibg=fg guifg=bg"</literal></expr>,
<expr><literal type="string">"lCursor guibg=fg guifg=bg"</literal></expr>, 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">"default link QuickFixLine Search"</literal></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Normal cterm=NONE"</literal></expr></argument>, <argument><expr><literal type="string">"Normal gui=NONE"</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>NULL</name></expr>
}</block></expr>;</expr_stmt>


<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>highlight_init_light</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Directory term=bold ctermfg=DarkBlue"</literal></expr></argument>,
<argument><expr><literal type="string">"Directory term=bold ctermfg=DarkBlue guifg=Blue"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"LineNr term=underline ctermfg=Brown"</literal></expr></argument>,
<argument><expr><literal type="string">"LineNr term=underline ctermfg=Brown guifg=Brown"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"CursorLineNr term=bold cterm=underline ctermfg=Brown"</literal></expr></argument>,
<argument><expr><literal type="string">"CursorLineNr term=bold cterm=underline ctermfg=Brown gui=bold guifg=Brown"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"MoreMsg term=bold ctermfg=DarkGreen"</literal></expr></argument>,
<argument><expr><literal type="string">"MoreMsg term=bold ctermfg=DarkGreen gui=bold guifg=SeaGreen"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Question term=standout ctermfg=DarkGreen"</literal></expr></argument>,
<argument><expr><literal type="string">"Question term=standout ctermfg=DarkGreen gui=bold guifg=SeaGreen"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Search term=reverse ctermbg=Yellow ctermfg=NONE"</literal></expr></argument>,
<argument><expr><literal type="string">"Search term=reverse ctermbg=Yellow ctermfg=NONE guibg=Yellow guifg=NONE"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SpellBad term=reverse ctermbg=LightRed"</literal></expr></argument>,
<argument><expr><literal type="string">"SpellBad term=reverse ctermbg=LightRed guisp=Red gui=undercurl"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SpellCap term=reverse ctermbg=LightBlue"</literal></expr></argument>,
<argument><expr><literal type="string">"SpellCap term=reverse ctermbg=LightBlue guisp=Blue gui=undercurl"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SpellRare term=reverse ctermbg=LightMagenta"</literal></expr></argument>,
<argument><expr><literal type="string">"SpellRare term=reverse ctermbg=LightMagenta guisp=Magenta gui=undercurl"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SpellLocal term=underline ctermbg=Cyan"</literal></expr></argument>,
<argument><expr><literal type="string">"SpellLocal term=underline ctermbg=Cyan guisp=DarkCyan gui=undercurl"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"PmenuThumb ctermbg=Black"</literal></expr></argument>,
<argument><expr><literal type="string">"PmenuThumb ctermbg=Black guibg=Black"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Pmenu ctermbg=LightMagenta ctermfg=Black"</literal></expr></argument>,
<argument><expr><literal type="string">"Pmenu ctermbg=LightMagenta ctermfg=Black guibg=LightMagenta"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"PmenuSel ctermbg=LightGrey ctermfg=Black"</literal></expr></argument>,
<argument><expr><literal type="string">"PmenuSel ctermbg=LightGrey ctermfg=Black guibg=Grey"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SpecialKey term=bold ctermfg=DarkBlue"</literal></expr></argument>,
<argument><expr><literal type="string">"SpecialKey term=bold ctermfg=DarkBlue guifg=Blue"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Title term=bold ctermfg=DarkMagenta"</literal></expr></argument>,
<argument><expr><literal type="string">"Title term=bold ctermfg=DarkMagenta gui=bold guifg=Magenta"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"WarningMsg term=standout ctermfg=DarkRed"</literal></expr></argument>,
<argument><expr><literal type="string">"WarningMsg term=standout ctermfg=DarkRed guifg=Red"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"WildMenu term=standout ctermbg=Yellow ctermfg=Black"</literal></expr></argument>,
<argument><expr><literal type="string">"WildMenu term=standout ctermbg=Yellow ctermfg=Black guibg=Yellow guifg=Black"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Folded term=standout ctermbg=Grey ctermfg=DarkBlue"</literal></expr></argument>,
<argument><expr><literal type="string">"Folded term=standout ctermbg=Grey ctermfg=DarkBlue guibg=LightGrey guifg=DarkBlue"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"FoldColumn term=standout ctermbg=Grey ctermfg=DarkBlue"</literal></expr></argument>,
<argument><expr><literal type="string">"FoldColumn term=standout ctermbg=Grey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SignColumn term=standout ctermbg=Grey ctermfg=DarkBlue"</literal></expr></argument>,
<argument><expr><literal type="string">"SignColumn term=standout ctermbg=Grey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Visual term=reverse"</literal></expr></argument>,
<argument><expr><literal type="string">"Visual term=reverse guibg=LightGrey"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"DiffAdd term=bold ctermbg=LightBlue"</literal></expr></argument>,
<argument><expr><literal type="string">"DiffAdd term=bold ctermbg=LightBlue guibg=LightBlue"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"DiffChange term=bold ctermbg=LightMagenta"</literal></expr></argument>,
<argument><expr><literal type="string">"DiffChange term=bold ctermbg=LightMagenta guibg=LightMagenta"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"DiffDelete term=bold ctermfg=Blue ctermbg=LightCyan"</literal></expr></argument>,
<argument><expr><literal type="string">"DiffDelete term=bold ctermfg=Blue ctermbg=LightCyan gui=bold guifg=Blue guibg=LightCyan"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"TabLine term=underline cterm=underline ctermfg=black ctermbg=LightGrey"</literal></expr></argument>,
<argument><expr><literal type="string">"TabLine term=underline cterm=underline ctermfg=black ctermbg=LightGrey gui=underline guibg=LightGrey"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"CursorColumn term=reverse ctermbg=LightGrey"</literal></expr></argument>,
<argument><expr><literal type="string">"CursorColumn term=reverse ctermbg=LightGrey guibg=Grey90"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"CursorLine term=underline cterm=underline"</literal></expr></argument>,
<argument><expr><literal type="string">"CursorLine term=underline cterm=underline guibg=Grey90"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"ColorColumn term=reverse ctermbg=LightRed"</literal></expr></argument>,
<argument><expr><literal type="string">"ColorColumn term=reverse ctermbg=LightRed guibg=LightRed"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Conceal ctermbg=DarkGrey ctermfg=LightGrey"</literal></expr></argument>,
<argument><expr><literal type="string">"Conceal ctermbg=DarkGrey ctermfg=LightGrey guibg=DarkGrey guifg=LightGrey"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"MatchParen term=reverse ctermbg=Cyan"</literal></expr></argument>,
<argument><expr><literal type="string">"MatchParen term=reverse ctermbg=Cyan guibg=Cyan"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"StatusLineTerm term=reverse,bold cterm=bold ctermfg=White ctermbg=DarkGreen"</literal></expr></argument>,
<argument><expr><literal type="string">"StatusLineTerm term=reverse,bold cterm=bold ctermfg=White ctermbg=DarkGreen gui=bold guifg=bg guibg=DarkGreen"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"StatusLineTermNC term=reverse ctermfg=White ctermbg=DarkGreen"</literal></expr></argument>,
<argument><expr><literal type="string">"StatusLineTermNC term=reverse ctermfg=White ctermbg=DarkGreen guifg=bg guibg=DarkGreen"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"ToolbarLine term=underline ctermbg=LightGrey"</literal></expr></argument>,
<argument><expr><literal type="string">"ToolbarLine term=underline ctermbg=LightGrey guibg=LightGrey"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"ToolbarButton cterm=bold ctermfg=White ctermbg=DarkGrey"</literal></expr></argument>,
<argument><expr><literal type="string">"ToolbarButton cterm=bold ctermfg=White ctermbg=DarkGrey gui=bold guifg=White guibg=Grey40"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>NULL</name></expr>
}</block></expr>;</expr_stmt>


<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>highlight_init_dark</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Directory term=bold ctermfg=LightCyan"</literal></expr></argument>,
<argument><expr><literal type="string">"Directory term=bold ctermfg=LightCyan guifg=Cyan"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"LineNr term=underline ctermfg=Yellow"</literal></expr></argument>,
<argument><expr><literal type="string">"LineNr term=underline ctermfg=Yellow guifg=Yellow"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"CursorLineNr term=bold cterm=underline ctermfg=Yellow"</literal></expr></argument>,
<argument><expr><literal type="string">"CursorLineNr term=bold cterm=underline ctermfg=Yellow gui=bold guifg=Yellow"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"MoreMsg term=bold ctermfg=LightGreen"</literal></expr></argument>,
<argument><expr><literal type="string">"MoreMsg term=bold ctermfg=LightGreen gui=bold guifg=SeaGreen"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Question term=standout ctermfg=LightGreen"</literal></expr></argument>,
<argument><expr><literal type="string">"Question term=standout ctermfg=LightGreen gui=bold guifg=Green"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Search term=reverse ctermbg=Yellow ctermfg=Black"</literal></expr></argument>,
<argument><expr><literal type="string">"Search term=reverse ctermbg=Yellow ctermfg=Black guibg=Yellow guifg=Black"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SpecialKey term=bold ctermfg=LightBlue"</literal></expr></argument>,
<argument><expr><literal type="string">"SpecialKey term=bold ctermfg=LightBlue guifg=Cyan"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SpellBad term=reverse ctermbg=Red"</literal></expr></argument>,
<argument><expr><literal type="string">"SpellBad term=reverse ctermbg=Red guisp=Red gui=undercurl"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SpellCap term=reverse ctermbg=Blue"</literal></expr></argument>,
<argument><expr><literal type="string">"SpellCap term=reverse ctermbg=Blue guisp=Blue gui=undercurl"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SpellRare term=reverse ctermbg=Magenta"</literal></expr></argument>,
<argument><expr><literal type="string">"SpellRare term=reverse ctermbg=Magenta guisp=Magenta gui=undercurl"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SpellLocal term=underline ctermbg=Cyan"</literal></expr></argument>,
<argument><expr><literal type="string">"SpellLocal term=underline ctermbg=Cyan guisp=Cyan gui=undercurl"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"PmenuThumb ctermbg=White"</literal></expr></argument>,
<argument><expr><literal type="string">"PmenuThumb ctermbg=White guibg=White"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Pmenu ctermbg=Magenta ctermfg=Black"</literal></expr></argument>,
<argument><expr><literal type="string">"Pmenu ctermbg=Magenta ctermfg=Black guibg=Magenta"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"PmenuSel ctermbg=Black ctermfg=DarkGrey"</literal></expr></argument>,
<argument><expr><literal type="string">"PmenuSel ctermbg=Black ctermfg=DarkGrey guibg=DarkGrey"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Title term=bold ctermfg=LightMagenta"</literal></expr></argument>,
<argument><expr><literal type="string">"Title term=bold ctermfg=LightMagenta gui=bold guifg=Magenta"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"WarningMsg term=standout ctermfg=LightRed"</literal></expr></argument>,
<argument><expr><literal type="string">"WarningMsg term=standout ctermfg=LightRed guifg=Red"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"WildMenu term=standout ctermbg=Yellow ctermfg=Black"</literal></expr></argument>,
<argument><expr><literal type="string">"WildMenu term=standout ctermbg=Yellow ctermfg=Black guibg=Yellow guifg=Black"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Folded term=standout ctermbg=DarkGrey ctermfg=Cyan"</literal></expr></argument>,
<argument><expr><literal type="string">"Folded term=standout ctermbg=DarkGrey ctermfg=Cyan guibg=DarkGrey guifg=Cyan"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"FoldColumn term=standout ctermbg=DarkGrey ctermfg=Cyan"</literal></expr></argument>,
<argument><expr><literal type="string">"FoldColumn term=standout ctermbg=DarkGrey ctermfg=Cyan guibg=Grey guifg=Cyan"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"SignColumn term=standout ctermbg=DarkGrey ctermfg=Cyan"</literal></expr></argument>,
<argument><expr><literal type="string">"SignColumn term=standout ctermbg=DarkGrey ctermfg=Cyan guibg=Grey guifg=Cyan"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Visual term=reverse"</literal></expr></argument>,
<argument><expr><literal type="string">"Visual term=reverse guibg=DarkGrey"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"DiffAdd term=bold ctermbg=DarkBlue"</literal></expr></argument>,
<argument><expr><literal type="string">"DiffAdd term=bold ctermbg=DarkBlue guibg=DarkBlue"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"DiffChange term=bold ctermbg=DarkMagenta"</literal></expr></argument>,
<argument><expr><literal type="string">"DiffChange term=bold ctermbg=DarkMagenta guibg=DarkMagenta"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"DiffDelete term=bold ctermfg=Blue ctermbg=DarkCyan"</literal></expr></argument>,
<argument><expr><literal type="string">"DiffDelete term=bold ctermfg=Blue ctermbg=DarkCyan gui=bold guifg=Blue guibg=DarkCyan"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"TabLine term=underline cterm=underline ctermfg=white ctermbg=DarkGrey"</literal></expr></argument>,
<argument><expr><literal type="string">"TabLine term=underline cterm=underline ctermfg=white ctermbg=DarkGrey gui=underline guibg=DarkGrey"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"CursorColumn term=reverse ctermbg=DarkGrey"</literal></expr></argument>,
<argument><expr><literal type="string">"CursorColumn term=reverse ctermbg=DarkGrey guibg=Grey40"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"CursorLine term=underline cterm=underline"</literal></expr></argument>,
<argument><expr><literal type="string">"CursorLine term=underline cterm=underline guibg=Grey40"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"ColorColumn term=reverse ctermbg=DarkRed"</literal></expr></argument>,
<argument><expr><literal type="string">"ColorColumn term=reverse ctermbg=DarkRed guibg=DarkRed"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"MatchParen term=reverse ctermbg=DarkCyan"</literal></expr></argument>,
<argument><expr><literal type="string">"MatchParen term=reverse ctermbg=DarkCyan guibg=DarkCyan"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"Conceal ctermbg=DarkGrey ctermfg=LightGrey"</literal></expr></argument>,
<argument><expr><literal type="string">"Conceal ctermbg=DarkGrey ctermfg=LightGrey guibg=DarkGrey guifg=LightGrey"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"StatusLineTerm term=reverse,bold cterm=bold ctermfg=Black ctermbg=LightGreen"</literal></expr></argument>,
<argument><expr><literal type="string">"StatusLineTerm term=reverse,bold cterm=bold ctermfg=Black ctermbg=LightGreen gui=bold guifg=bg guibg=LightGreen"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"StatusLineTermNC term=reverse ctermfg=Black ctermbg=LightGreen"</literal></expr></argument>,
<argument><expr><literal type="string">"StatusLineTermNC term=reverse ctermfg=Black ctermbg=LightGreen guifg=bg guibg=LightGreen"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"ToolbarLine term=underline ctermbg=DarkGrey"</literal></expr></argument>,
<argument><expr><literal type="string">"ToolbarLine term=underline ctermbg=DarkGrey guibg=Grey50"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CENT</name><argument_list>(<argument><expr><literal type="string">"ToolbarButton cterm=bold ctermfg=Black ctermbg=LightGrey"</literal></expr></argument>,
<argument><expr><literal type="string">"ToolbarButton cterm=bold ctermfg=Black ctermbg=LightGrey gui=bold guifg=Black guibg=LightGrey"</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>NULL</name></expr>
}</block></expr>;</expr_stmt>




<function><type><name>int</name></type>
<name>highlight_num_groups</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>highlight_group_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name></expr>]</index><operator>.</operator><name>sg_name</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>highlight_link_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name></expr>]</index><operator>.</operator><name>sg_link</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>init_highlight</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>both</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>reset</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>had_both</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>





<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_var_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:colors_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>copy_p</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>load_colors</name><argument_list>(<argument><expr><name>copy_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>copy_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name>both</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>had_both</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>highlight_init_both</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_highlight</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>had_both</name></expr>)</condition><block type="pseudo"><block_content>



<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>highlight_init_light</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>highlight_init_dark</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_highlight</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>






<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_highlight</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'l'</literal></expr>
?</condition><then> <expr><literal type="string">"Visual cterm=NONE ctermbg=LightGrey"</literal></expr>
</then><else>: <expr><literal type="string">"Visual cterm=NONE ctermbg=DarkGrey"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>do_highlight</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Visual cterm=reverse ctermbg=NONE"</literal></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_highlight</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Search ctermfg=black"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>get_var_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:syntax_on"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recursive</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E679: recursive loop loading syncolor.vim"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>recursive</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>source_runtime</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"syntax/syncolor.vim"</literal></expr></argument>, <argument><expr><name>DIP_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>recursive</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>load_colors</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_COLORSCHEMEPRE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"colors/%s.vim"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>source_runtime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>DIP_START</name> <operator>+</operator> <name>DIP_OPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_COLORSCHEME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>color_names</name><index>[<expr><literal type="number">28</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <block>{
<expr><literal type="string">"Black"</literal></expr>, <expr><literal type="string">"DarkBlue"</literal></expr>, <expr><literal type="string">"DarkGreen"</literal></expr>, <expr><literal type="string">"DarkCyan"</literal></expr>,
<expr><literal type="string">"DarkRed"</literal></expr>, <expr><literal type="string">"DarkMagenta"</literal></expr>, <expr><literal type="string">"Brown"</literal></expr>, <expr><literal type="string">"DarkYellow"</literal></expr>,
<expr><literal type="string">"Gray"</literal></expr>, <expr><literal type="string">"Grey"</literal></expr>, <expr><literal type="string">"LightGray"</literal></expr>, <expr><literal type="string">"LightGrey"</literal></expr>,
<expr><literal type="string">"DarkGray"</literal></expr>, <expr><literal type="string">"DarkGrey"</literal></expr>,
<expr><literal type="string">"Blue"</literal></expr>, <expr><literal type="string">"LightBlue"</literal></expr>, <expr><literal type="string">"Green"</literal></expr>, <expr><literal type="string">"LightGreen"</literal></expr>,
<expr><literal type="string">"Cyan"</literal></expr>, <expr><literal type="string">"LightCyan"</literal></expr>, <expr><literal type="string">"Red"</literal></expr>, <expr><literal type="string">"LightRed"</literal></expr>, <expr><literal type="string">"Magenta"</literal></expr>,
<expr><literal type="string">"LightMagenta"</literal></expr>, <expr><literal type="string">"Yellow"</literal></expr>, <expr><literal type="string">"LightYellow"</literal></expr>, <expr><literal type="string">"White"</literal></expr>, <expr><literal type="string">"NONE"</literal></expr>}</block></expr>;</expr_stmt>








<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>color_numbers_16</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>color_numbers_88</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">72</literal></expr>,
<expr><literal type="number">84</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">82</literal></expr>, <expr><literal type="number">82</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">61</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">13</literal></expr>,
<expr><literal type="number">75</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>color_numbers_256</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">130</literal></expr>,
<expr><literal type="number">248</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">242</literal></expr>, <expr><literal type="number">242</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">121</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">13</literal></expr>,
<expr><literal type="number">225</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>color_numbers_8</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">0</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">8</literal></expr>,
<expr><literal type="number">4</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal></expr>,
<expr><literal type="number">6</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal><operator>+</operator><literal type="number">8</literal></expr>,
<expr><literal type="number">5</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal><operator>+</operator><literal type="number">8</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>







<function><type><name>int</name></type>
<name>lookup_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>foreground</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>boldp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><name><name>color_numbers_16</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__QNXNTO__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>T_NAME</name></expr></argument>, <argument><expr><literal type="string">"qansi"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>color_numbers_16</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>color_numbers_8</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>foreground</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>boldp</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>boldp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>color</name> <operator>&amp;=</operator> <literal type="number">7</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>t_colors</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>t_colors</name> <operator>==</operator> <literal type="number">88</literal>
<operator>||</operator> <name>t_colors</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CAF</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>T_CAF</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>T_CSF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>t_colors</name> <operator>&gt;</operator> <literal type="number">256</literal>
<operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'m'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>==</operator> <literal type="number">88</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>color_numbers_88</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>t_colors</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>color_numbers_256</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>color_numbers_8</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&gt;=</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <name>color</name> <operator>==</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <name>is_mac_terminal</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">231</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>do_highlight</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>init</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>linep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hl_group_T</name></type> <name>item_before</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_change</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dodefault</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>doclear</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dolink</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_normal_group</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>is_terminal_group</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>is_menu_group</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_scrollbar_group</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_tooltip_group</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>do_colors</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_menu_group</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_tooltip_group</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>did_highlight_changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>highlight_list_one</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>name_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><name>name_end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dodefault</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>linep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><name>name_end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>doclear</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>, <argument><expr><name>name_end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dolink</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doclear</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dolink</name> <operator>&amp;&amp;</operator> <call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>linep</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_namen2id</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>name_end</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E411: highlight group not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>highlight_list_one</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>dolink</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from_start</name> <init>= <expr><name>linep</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>from_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>to_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>from_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>from_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to_start</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>from_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>to_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>from_start</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>to_start</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E412: Not enough arguments: \":highlight link %s\""</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>from_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>to_end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E413: Too many arguments: \":highlight link %s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>from_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>from_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>from_start</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>from_end</name> <operator>-</operator> <name>from_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>to_start</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>to_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>to_start</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>to_end</name> <operator>-</operator> <name>to_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from_id</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>init</name> <operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_set</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>to_id</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>forceit</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>init</name>
<operator>&amp;&amp;</operator> <call><name>hl_has_settings</name><argument_list>(<argument><expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dodefault</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SOURCING_NAME</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dodefault</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E414: group has settings, highlight link ignored"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_link</name> <operator>!=</operator> <name>to_id</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name><name>sg_script_ctx</name><operator>.</operator><name>sc_sid</name></name>
<operator>!=</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_cleared</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_LINK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_link</name> <operator>=</operator> <name>to_id</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_script_ctx</name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name><name>sg_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>SOURCING_LNUM</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>from_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_cleared</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>need_highlight_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>doclear</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>line</name> <operator>=</operator> <name>linep</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_init_tooltip_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><call><name>gui_init_menu_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_def_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>gui_mch_new_menu_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_new_scrollbar_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_new_tooltip_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_new_menu_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"colors_name"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>restore_cterm_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>highlight_clear</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>init_highlight</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>USE_24BIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>highlight_gui_started</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>highlight_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>redraw_later_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>name_end</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name>dodefault</name> <operator>&amp;&amp;</operator> <call><name>hl_has_settings</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>item_before</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>, <argument><expr><literal type="string">"NORMAL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_normal_group</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>, <argument><expr><literal type="string">"TERMINAL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_terminal_group</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>, <argument><expr><literal type="string">"MENU"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_menu_group</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>, <argument><expr><literal type="string">"SCROLLBAR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_scrollbar_group</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>, <argument><expr><literal type="string">"TOOLTIP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_tooltip_group</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>doclear</name> <operator>||</operator> <operator>(</operator><name>forceit</name> <operator>&amp;&amp;</operator> <name>init</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>highlight_clear</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doclear</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doclear</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>linep</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>key_start</name> <operator>=</operator> <name>linep</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>linep</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E415: unexpected equal sign: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>





<while>while <condition>(<expr><operator>*</operator><name>linep</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>linep</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>linep</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>linep</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>vim_strnsave_up</name><argument_list>(<argument><expr><name>key_start</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>linep</name> <operator>-</operator> <name>key_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_TERM</name><operator>+</operator><name>SG_CTERM</name><operator>+</operator><name>SG_GUI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>highlight_clear</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>linep</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E416: missing equal sign: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>linep</name></expr>;</expr_stmt>




<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>linep</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>arg_start</name> <operator>=</operator> <operator>++</operator><name>linep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linep</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>arg_start</name> <operator>=</operator> <name>linep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>linep</name> <operator>==</operator> <name>arg_start</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E417: missing argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>arg_start</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>linep</name> <operator>-</operator> <name>arg_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>linep</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>linep</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>( <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"CTERM"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"GUI"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>arg</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hl_attr_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>hl_name_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>hl_name_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name><name>hl_attr_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E418: Illegal value: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_TERM</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_TERM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_term</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_CTERM</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_CTERM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_GUI</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_GUI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"FONT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>shell_created</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>GuiFont</name></type> <name>temp_sg_font</name> <init>= <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GuiFontset</name></type> <name>temp_sg_fontset</name> <init>= <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name> <operator>=</operator> <name>NOFONTSET</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>hl_do_font</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>is_normal_group</name></expr></argument>, <argument><expr><name>is_menu_group</name></expr></argument>,
<argument><expr><name>is_tooltip_group</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>gui_mch_free_fontset</name><argument_list>(<argument><expr><name>temp_sg_fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name> <operator>=</operator> <name>temp_sg_fontset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name>temp_sg_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name> <operator>=</operator> <name>temp_sg_font</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"CTERMFG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"CTERMBG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_CTERM</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_CTERM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal> <operator>&amp;&amp;</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bold</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm</name> <operator>&amp;=</operator> <operator>~</operator><name>HL_BOLD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"fg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name>cterm_normal_fg_color</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E419: FG color unknown"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"bg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cterm_normal_bg_color</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name>cterm_normal_bg_color</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E420: BG color unknown"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bold</name> <init>= <expr><name>MAYBE</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>color_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <name><name>color_names</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <call><name>STRICMP</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>color_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E421: Color name or number not recognized: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>lookup_color</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>bold</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm</name> <operator>|=</operator> <name>HL_BOLD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bold</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>bold</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm</name> <operator>&amp;=</operator> <operator>~</operator><name>HL_BOLD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_fg</name> <operator>=</operator> <name>color</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_normal_group</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cterm_normal_fg_color</name> <operator>=</operator> <name>color</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cterm_normal_fg_bold</name> <operator>=</operator> <operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm</name> <operator>&amp;</operator> <name>HL_BOLD</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>termcap_active</name> <operator>&amp;&amp;</operator> <name>color</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>term_fg_color</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bg</name> <operator>=</operator> <name>color</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_normal_group</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cterm_normal_bg_color</name> <operator>=</operator> <name>color</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dark</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>termcap_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>term_bg_color</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dark</name> <operator>=</operator> <operator>(</operator><name>color</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>color</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>color</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dark</name> <operator>=</operator> <operator>(</operator><name>color</name> <operator>&lt;</operator> <literal type="number">7</literal> <operator>||</operator> <name>color</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>dark</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>dark</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bg"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bg"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>dark</name></expr> ?</condition><then> <expr><literal type="string">"dark"</literal></expr> </then><else>: <expr><literal type="string">"light"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"GUIFG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>namep</name> <init>= <expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg_name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_GUI</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_GUI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>color_name2handle</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>INVALCOLOR</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>USE_24BIT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>namep</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_menu_group</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name> <operator>!=</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_colors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_scrollbar_group</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name> <operator>!=</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_colors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_tooltip_group</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name> <operator>!=</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_colors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"GUIBG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>namep</name> <init>= <expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg_name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_GUI</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_GUI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>color_name2handle</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>INVALCOLOR</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>USE_24BIT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>namep</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_menu_group</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name> <operator>!=</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_colors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_scrollbar_group</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name> <operator>!=</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_colors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_tooltip_group</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name> <operator>!=</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_colors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"GUISP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>namep</name> <init>= <expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_sp_name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_GUI</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_GUI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>color_name2handle</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>INVALCOLOR</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_sp</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>namep</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"START"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"STOP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>|=</operator> <name>SG_TERM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"t_"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>arg</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>arg</name><index>[<expr><name>off</name> <operator>+</operator> <name>len</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>arg</name><index>[<expr><name>off</name> <operator>+</operator> <name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal></expr>;</condition> <incr><expr><operator>++</operator><name>len</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>tname</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_term_code</name><argument_list>(<argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">99</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E422: terminal code too long: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name></expr><operator>,</operator> <expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>off</name> <operator>&lt;</operator> <literal type="number">100</literal> <operator>-</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>trans_special</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_start</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_stop</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E423: Illegal argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cleared</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_LINK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_link</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><name>linep</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>==</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syn_unadd_group</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_normal_group</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_term_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>USE_24BIT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>highlight_gui_started</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_highlight_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>control_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>is_terminal_group</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_terminal_default_colors</name><argument_list>(
<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_fg</name></expr></argument>, <argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>is_menu_group</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name>do_colors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_new_menu_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><name>is_scrollbar_group</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name>do_colors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_new_scrollbar_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hl_attr</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>is_tooltip_group</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name>do_colors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_new_tooltip_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hl_attr</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_script_ctx</name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sg_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>SOURCING_LNUM</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>did_change</name>
<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><operator>&amp;</operator><name>item_before</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>item_before</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name>did_highlight_changed</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>updating_screen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>need_highlight_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>free_highlight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>highlight_clear</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>highlight_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>restore_cterm_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>mch_set_normal_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_set_normal_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>cterm_normal_fg_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cterm_normal_fg_bold</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cterm_normal_bg_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cterm_normal_fg_gui_color</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cterm_normal_bg_gui_color</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>hl_has_settings</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_term_attr</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_attr</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_fg</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bg</name> <operator>!=</operator> <literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_attr</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg_name</name> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg_name</name> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_sp_name</name> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name> <operator>!=</operator> <name>NULL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <operator>(</operator><name>check_link</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_set</name> <operator>&amp;</operator> <name>SG_LINK</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>highlight_clear</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cleared</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_term</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_term_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_fg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_bg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cterm_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_sp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_sp</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_free_fontset</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name> <operator>=</operator> <name>NOFONTSET</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_link</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sg_script_ctx</name><operator>.</operator><name>sc_sid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sg_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>void</name></type>
<name>set_normal_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>set_group_colors</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Normal"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_mch_new_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>set_group_colors</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Menu"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_new_menu_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>set_group_colors</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Tooltip"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_new_tooltip_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>set_group_colors</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Scrollbar"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_new_scrollbar_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Normal"</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_do_one_color</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_gui_color</name> <operator>!=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg</name>
<operator>||</operator> <name>cterm_normal_bg_gui_color</name> <operator>!=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>cterm_normal_fg_gui_color</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cterm_normal_bg_gui_color</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_group_colors</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>guicolor_T</name> <modifier>*</modifier></type><name>fgp</name></decl></parameter>,
<parameter><decl><type><name>guicolor_T</name> <modifier>*</modifier></type><name>bgp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>do_menu</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>use_norm</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>do_tooltip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_do_one_color</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>do_menu</name></expr></argument>, <argument><expr><name>do_tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>fgp</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>use_norm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>fgp</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bgp</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>use_norm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bgp</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>hl_get_font_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Normal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_font_name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>hl_set_font_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Normal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_font_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>hl_set_bg_color_name</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Normal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_bg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_bg_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>hl_set_fg_color_name</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Normal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_fg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_fg_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>GuiFont</name></type>
<name>font_name2handle</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NOFONT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>gui_mch_get_font</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>GuiFontset</name></type>
<name>fontset_name2handle</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fixed_width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NOFONTSET</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>gui_mch_get_fontset</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>fixed_width</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>hl_do_font</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>do_normal</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <name>do_menu</name></type> <name>UNUSED</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <name>do_tooltip</name></type> <name>UNUSED</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>free_font</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_guifontset</name> <operator>!=</operator> <name>NUL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>do_menu</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TIP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <name>do_tooltip</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>free_font</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_free_fontset</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name> <operator>=</operator> <call><name>fontset_name2handle</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>do_menu</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>do_tooltip</name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>do_normal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_init_font</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>do_menu</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_fontset</name></name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_font</name></name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gui_mch_new_menu_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>do_tooltip</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tooltip_fontset</name></name> <operator>=</operator> <operator>(</operator><name>XFontSet</name><operator>)</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_new_tooltip_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>free_font</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name> <operator>=</operator> <call><name>font_name2handle</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>do_normal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_init_font</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>do_menu</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_font</name></name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_new_menu_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>guicolor_T</name></type>
<name>color_name2handle</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>INVALCOLOR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"fg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"foreground"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_gui_color</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cterm_normal_fg_gui_color</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>GUI_GET_COLOR</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'l'</literal></expr> ?</condition><then> <expr><literal type="string">"black"</literal></expr> </then><else>: <expr><literal type="string">"white"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"bg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"background"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cterm_normal_bg_gui_color</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cterm_normal_bg_gui_color</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>GUI_GET_COLOR</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'l'</literal></expr> ?</condition><then> <expr><literal type="string">"white"</literal></expr> </then><else>: <expr><literal type="string">"black"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>GUI_GET_COLOR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>term_attr_table</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_ATTR_ENTRY</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((attrentry_T *)term_attr_table.ga_data)[idx]</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>cterm_attr_table</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTERM_ATTR_ENTRY</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((attrentry_T *)cterm_attr_table.ga_data)[idx]</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>gui_attr_table</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_ATTR_ENTRY</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((attrentry_T *)gui_attr_table.ga_data)[idx]</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_attr_entry</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>attrentry_T</name> <modifier>*</modifier></type><name>aep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attrentry_T</name> <modifier>*</modifier></type><name>taep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>ga_itemsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>attrentry_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>ga_growsize</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>taep</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>attrentry_T</name> <operator>*</operator><operator>)</operator><name><name>table</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_attr</name></name> <operator>==</operator> <name><name>taep</name><operator>-&gt;</operator><name>ae_attr</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><name>table</name> <operator>==</operator> <operator>&amp;</operator><name>gui_attr_table</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name> <operator>==</operator> <name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name>
<operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name>
<operator>==</operator> <name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name>
<operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>sp_color</name></name>
<operator>==</operator> <name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>sp_color</name></name>
<operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>font</name></name> <operator>==</operator> <name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>font</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>==</operator> <name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fontset</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator><operator>)</operator>
<operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>(</operator><name>table</name> <operator>==</operator> <operator>&amp;</operator><name>term_attr_table</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>
<operator>==</operator> <operator>(</operator><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name></expr></argument>,
<argument><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>
<operator>==</operator> <operator>(</operator><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name></expr></argument>,
<argument><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>table</name> <operator>==</operator> <operator>&amp;</operator><name>cterm_attr_table</name>
<operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name>
<operator>==</operator> <name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name>
<operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name>
<operator>==</operator> <name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name>
<operator>==</operator> <name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name>
<operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name>
<operator>==</operator> <name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name> <operator>+</operator> <name>ATTR_OFF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>+</operator> <name>ATTR_OFF</name> <operator>&gt;</operator> <name>MAX_TYPENR</name></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E424: Too many different highlighting attributes in use"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_hl_tables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hl_attr</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>taep</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>attrentry_T</name> <operator>*</operator><operator>)</operator><name><name>table</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>table</name><operator>-&gt;</operator><name>ga_len</name></name></expr>]</index><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>taep</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attrentry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_attr</name></name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_attr</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <operator>&amp;</operator><name>gui_attr_table</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>sp_color</name></name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>sp_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>font</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fontset</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <operator>&amp;</operator><name>term_attr_table</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>table</name> <operator>==</operator> <operator>&amp;</operator><name>cterm_attr_table</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>table</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>ATTR_OFF</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type>
<name>get_cterm_attr_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>attrentry_T</name></type> <name>at_en</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>at_en</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attrentry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>
<return>return <expr><call><name>get_attr_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cterm_attr_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at_en</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type>
<name>get_tgc_attr_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>fg</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>bg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>attrentry_T</name></type> <name>at_en</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>at_en</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attrentry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>==</operator> <name>INVALCOLOR</name> <operator>&amp;&amp;</operator> <name>bg</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>=</operator> <name>CTERMCOLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>=</operator> <name>CTERMCOLOR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>get_attr_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cterm_attr_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at_en</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type>
<name>get_gui_attr_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>fg</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>bg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>attrentry_T</name></type> <name>at_en</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>at_en</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attrentry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>
<return>return <expr><call><name>get_attr_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gui_attr_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at_en</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>clear_hl_tables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attrentry_T</name> <modifier>*</modifier></type><name>taep</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gui_attr_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>term_attr_table</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>taep</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>attrentry_T</name> <operator>*</operator><operator>)</operator><name><name>term_attr_table</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>taep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term_attr_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cterm_attr_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>hl_combine_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>char_attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prim_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>attrentry_T</name> <modifier>*</modifier></type><name>char_aep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attrentry_T</name> <modifier>*</modifier></type><name>spell_aep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attrentry_T</name></type> <name>new_en</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>prim_attr</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>&lt;=</operator> <name>HL_ALL</name> <operator>&amp;&amp;</operator> <name>prim_attr</name> <operator>&lt;=</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ATTR_COMBINE</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><name>prim_attr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_aep</name> <operator>=</operator> <call><name>syn_gui_attr2entry</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>char_aep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_en</name> <operator>=</operator> <operator>*</operator><name>char_aep</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_en</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_en</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>sp_color</name></name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>&lt;=</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prim_attr</name> <operator>&lt;=</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <call><name>ATTR_COMBINE</name><argument_list>(<argument><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name></expr></argument>, <argument><expr><name>prim_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>spell_aep</name> <operator>=</operator> <call><name>syn_gui_attr2entry</name><argument_list>(<argument><expr><name>prim_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spell_aep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <call><name>ATTR_COMBINE</name><argument_list>(<argument><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name></expr></argument>,
<argument><expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>sp_color</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>sp_color</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>sp_color</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>font</name></name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>font</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fontset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>get_attr_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gui_attr_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_en</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>IS_CTERM</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_aep</name> <operator>=</operator> <call><name>syn_cterm_attr2entry</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>char_aep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_en</name> <operator>=</operator> <operator>*</operator><name>char_aep</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_en</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_en</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>&lt;=</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prim_attr</name> <operator>&lt;=</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <call><name>ATTR_COMBINE</name><argument_list>(<argument><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name></expr></argument>, <argument><expr><name>prim_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>spell_aep</name> <operator>=</operator> <call><name>syn_cterm_attr2entry</name><argument_list>(<argument><expr><name>prim_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spell_aep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <call><name>ATTR_COMBINE</name><argument_list>(<argument><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name></expr></argument>,
<argument><expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>COLOR_INVALID</name><argument_list>(<argument><expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>COLOR_INVALID</name><argument_list>(<argument><expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>=</operator> <name>CTERMCOLOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>=</operator> <name>CTERMCOLOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>get_attr_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cterm_attr_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_en</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_aep</name> <operator>=</operator> <call><name>syn_term_attr2entry</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>char_aep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_en</name> <operator>=</operator> <operator>*</operator><name>char_aep</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_en</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_en</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>&lt;=</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prim_attr</name> <operator>&lt;=</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <call><name>ATTR_COMBINE</name><argument_list>(<argument><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name></expr></argument>, <argument><expr><name>prim_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>spell_aep</name> <operator>=</operator> <call><name>syn_term_attr2entry</name><argument_list>(<argument><expr><name>prim_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spell_aep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <call><name>ATTR_COMBINE</name><argument_list>(<argument><expr><name><name>new_en</name><operator>.</operator><name>ae_attr</name></name></expr></argument>, <argument><expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>get_attr_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term_attr_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_en</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>attrentry_T</name> <modifier>*</modifier></type>
<name>syn_gui_attr2entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>-=</operator> <name>ATTR_OFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&gt;=</operator> <name><name>gui_attr_table</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>&amp;</operator><operator>(</operator><call><name>GUI_ATTR_ENTRY</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type>
<name>syn_attr2attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>attrentry_T</name> <modifier>*</modifier></type><name>aep</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aep</name> <operator>=</operator> <call><name>syn_gui_attr2entry</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>IS_CTERM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aep</name> <operator>=</operator> <call><name>syn_cterm_attr2entry</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>aep</name> <operator>=</operator> <call><name>syn_term_attr2entry</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_attr</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>attrentry_T</name> <modifier>*</modifier></type>
<name>syn_term_attr2entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>-=</operator> <name>ATTR_OFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&gt;=</operator> <name><name>term_attr_table</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>&amp;</operator><operator>(</operator><call><name>TERM_ATTR_ENTRY</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>attrentry_T</name> <modifier>*</modifier></type>
<name>syn_cterm_attr2entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>-=</operator> <name>ATTR_OFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&gt;=</operator> <name><name>cterm_attr_table</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>&amp;</operator><operator>(</operator><call><name>CTERM_ATTR_ENTRY</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_ATTR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_STRING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_INT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>highlight_list_one</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hl_group_T</name> <modifier>*</modifier></type><name>sgp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>didh</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sgp</name> <operator>=</operator> <operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>message_filtered</name><argument_list>(<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_ATTR</name></expr></argument>,
<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_term</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_STRING</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_start</name></name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_STRING</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_stop</name></name></expr></argument>, <argument><expr><literal type="string">"stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_ATTR</name></expr></argument>,
<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cterm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_INT</name></expr></argument>,
<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_fg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"ctermfg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_INT</name></expr></argument>,
<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_bg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"ctermbg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_ATTR</name></expr></argument>,
<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"gui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_STRING</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_fg_name</name></name></expr></argument>, <argument><expr><literal type="string">"guifg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_STRING</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_bg_name</name></name></expr></argument>, <argument><expr><literal type="string">"guibg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_STRING</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_sp_name</name></name></expr></argument>, <argument><expr><literal type="string">"guisp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>didh</name> <operator>=</operator> <call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_STRING</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_font_name</name></name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_link</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_list_header</name><argument_list>(<argument><expr><name>didh</name></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"links to"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_link</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>didh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>highlight_list_arg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>didh</name></expr></argument>, <argument><expr><name>LIST_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cleared"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>last_set_msg</name><argument_list>(<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_script_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>highlight_list_arg</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>didh</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>iarg</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sarg</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>LIST_STRING</name></expr> ?</condition><then> <expr><operator>(</operator><name>sarg</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>iarg</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>LIST_INT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>iarg</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>LIST_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <name>sarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hl_attr_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iarg</name> <operator>&amp;</operator> <name><name>hl_attr_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>hl_name_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iarg</name> <operator>&amp;=</operator> <operator>~</operator><name><name>hl_attr_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_list_header</name><argument_list>(<argument><expr><name>didh</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>vim_strsize</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>didh</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>highlight_has_attr</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>modec</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>&gt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_cterm</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_term</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"1"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>highlight_color</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>modec</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>name</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fg</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sp</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>&gt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'o'</literal>
<operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>font</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'b'</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'g'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>font</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_font_name</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>USE_24BIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>what</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>rgb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_fg</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>sp</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_sp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_bg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rgb</name> <operator>=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><call><name>GUI_MCH_GET_RGB</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"#%02x%02x%02x"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>fg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_fg_name</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_sp_name</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_bg_name</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>font</name> <operator>||</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_cterm_fg</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_cterm_bg</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>long_u</name></type>
<name>highlight_gui_color_rgb</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fg</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>color</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>&gt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0L</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_fg</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_gui_bg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0L</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>GUI_MCH_GET_RGB</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type>
<name>syn_list_header</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>did_header</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>outlen</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>endcol</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newline</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_header</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_col</name> <operator>=</operator> <name>msg_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endcol</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>msg_col</name> <operator>+</operator> <name>outlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;=</operator> <name>endcol</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;=</operator> <name>endcol</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name>msg_col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Columns</name> <operator>&lt;=</operator> <name>endcol</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><name>endcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_header</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>endcol</name> <operator>==</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>endcol</name> <operator>&lt;=</operator> <name>name_col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"xxx"</literal></expr></argument>, <argument><expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>newline</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_hl_attr</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>attrentry_T</name></type> <name>at_en</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hl_group_T</name> <modifier>*</modifier></type><name>sgp</name> <init>= <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_name_u</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_name_u</name></name></expr></argument>, <argument><expr><literal type="string">"NORMAL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_fg</name></name> <operator>==</operator> <name>INVALCOLOR</name>
<operator>&amp;&amp;</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_bg</name></name> <operator>==</operator> <name>INVALCOLOR</name>
<operator>&amp;&amp;</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_sp</name></name> <operator>==</operator> <name>INVALCOLOR</name>
<operator>&amp;&amp;</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_font</name></name> <operator>==</operator> <name>NOFONT</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_fontset</name></name> <operator>==</operator> <name>NOFONTSET</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_attr</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_fg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_bg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>sp_color</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_sp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_font</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_fontset</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_attr</name></name> <operator>=</operator> <call><name>get_attr_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gui_attr_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at_en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_start</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_stop</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_term_attr</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_term</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_term</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_stop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_term_attr</name></name> <operator>=</operator> <call><name>get_attr_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term_attr_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at_en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_fg</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_bg</name></name> <operator>==</operator> <literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_fg</name></name> <operator>==</operator> <name>INVALCOLOR</name>
<operator>&amp;&amp;</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_bg</name></name> <operator>==</operator> <name>INVALCOLOR</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_attr</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_attr</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_fg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_bg</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Normal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>syn_id2colors</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_fg</name></name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_fg</name></name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_bg</name></name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_bg</name></name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>=</operator> <call><name>GUI_MCH_GET_RGB2</name><argument_list>(<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_fg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>=</operator> <call><name>GUI_MCH_GET_RGB2</name><argument_list>(<argument><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>==</operator> <name>INVALCOLOR</name>
<operator>&amp;&amp;</operator> <name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>=</operator> <name>CTERMCOLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at_en</name><operator>.</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>=</operator> <name>CTERMCOLOR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_attr</name></name> <operator>=</operator> <call><name>get_attr_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cterm_attr_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at_en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>syn_name2id</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>name_u</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>name_u</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">199</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_strup</name><argument_list>(<argument><expr><name>name_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sg_name_u</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name_u</name></expr></argument>, <argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>syn_name2attr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>highlight_exists</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>syn_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>syn_id2name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>&gt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sg_name</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>int</name></type>
<name>syn_namen2id</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>linep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>syn_check_group</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_add_group</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>syn_add_group</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_up</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E669: Unprintable character in group name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>msg_source</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_W</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"W18: Invalid character in group name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>highlight_ga</name><operator>.</operator><name>ga_itemsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hl_group_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>highlight_ga</name><operator>.</operator><name>ga_growsize</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;=</operator> <name>MAX_HL_ID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E849: Too many highlight and syntax groups"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>highlight_ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name_up</name> <operator>=</operator> <call><name>vim_strsave_up</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name_up</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hl_group_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>sg_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>sg_name_u</name> <operator>=</operator> <name>name_up</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>sg_gui_bg</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>sg_gui_fg</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>sg_gui_sp</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</return> 
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>syn_unadd_group</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>sg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>sg_name_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>syn_id2attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hl_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hl_group_T</name> <modifier>*</modifier></type><name>sgp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hl_id</name> <operator>=</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>hl_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sgp</name> <operator>=</operator> <operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>hl_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_attr</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>IS_CTERM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_attr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_term_attr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type>
<name>syn_id2colors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hl_id</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name> <modifier>*</modifier></type><name>fgp</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name> <modifier>*</modifier></type><name>bgp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hl_group_T</name> <modifier>*</modifier></type><name>sgp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hl_id</name> <operator>=</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>hl_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sgp</name> <operator>=</operator> <operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>hl_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>fgp</name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_fg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bgp</name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_gui_bg</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_gui</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>syn_id2cterm_bg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hl_id</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fgp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bgp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hl_group_T</name> <modifier>*</modifier></type><name>sgp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hl_id</name> <operator>=</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>hl_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sgp</name> <operator>=</operator> <operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>hl_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>fgp</name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_fg</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bgp</name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_cterm_bg</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>int</name></type>
<name>syn_get_final_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hl_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hl_group_T</name> <modifier>*</modifier></type><name>sgp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hl_id</name> <operator>&gt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>||</operator> <name>hl_id</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 





<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">100</literal></expr>;</init> <condition><expr><operator>--</operator><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>sgp</name> <operator>=</operator> <operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>hl_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>sgp</name><operator>-&gt;</operator><name>sg_link</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_link</name></name> <operator>&gt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hl_id</name> <operator>=</operator> <name><name>sgp</name><operator>-&gt;</operator><name>sg_link</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>hl_id</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>void</name></type>
<name>highlight_gui_started</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>USE_24BIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_normal_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_do_one_color</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>highlight_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gui_do_one_color</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>int</name> <name>do_menu</name></type> <name>UNUSED</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <name>do_tooltip</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>didit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>hl_do_font</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font_name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>do_menu</name></expr></argument>,
<argument><expr><name>do_tooltip</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg</name> <operator>=</operator>
<call><name>color_name2handle</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_fg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg</name> <operator>=</operator>
<call><name>color_name2handle</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_bg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_sp_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_sp</name> <operator>=</operator>
<call><name>color_name2handle</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_gui_sp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>didit</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>set_hl_attr</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USER_HIGHLIGHT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>combine_stl_hlt</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>id_S</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>id_alt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>hlcnt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>hlf</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hl_group_T</name> <modifier>*</modifier></type><name>hlt</name> <init>= <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id_alt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hl_group_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_term</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_cterm</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_gui</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>hlt</name><index>[<expr><name>id_alt</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hl_group_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_link</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_term</name> <operator>^=</operator>
<name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_term</name> <operator>^</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_term</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_start</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_start</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_stop</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_stop</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_stop</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_stop</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_cterm</name> <operator>^=</operator>
<name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm</name> <operator>^</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_fg</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_fg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_cterm_fg</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_fg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_bg</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_bg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_cterm_bg</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_cterm_bg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_gui</name> <operator>^=</operator>
<name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui</name> <operator>^</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui_fg</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui_fg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_gui_fg</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui_fg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui_bg</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui_bg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_gui_bg</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui_bg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui_sp</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui_sp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_gui_sp</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_gui_sp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_font</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_font</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_font</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_font</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_fontset</name> <operator>!=</operator> <name><name>hlt</name><index>[<expr><name>id_S</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_fontset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hlt</name><index>[<expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>sg_fontset</name> <operator>=</operator> <name><name>hlt</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sg_fontset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name>hlcnt</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hl_attr</name><argument_list>(<argument><expr><name>hlcnt</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name>hlcnt</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><name>int</name></type>
<name>highlight_changed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hlf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USER_HIGHLIGHT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>userhl</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>id_S</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id_SNC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>id_ST</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id_STNC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>hlcnt</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>hl_flags</name><index>[<expr><name>HLF_COUNT</name></expr>]</index></name> <init>= <expr><name>HL_FLAGS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>need_highlight_changed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>hlf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hlf</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>hlf</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_hl</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_highlight_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<continue>continue;</continue></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>hlf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hlf</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>hlf</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>hl_flags</name><index>[<expr><name>hlf</name></expr>]</index></name> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hlf</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_COUNT</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_BOLD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_ITALIC</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_INVERSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_STANDOUT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_UNDERLINE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_UNDERCURL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_STRIKETHROUGH</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">':'</literal></expr>:</case> <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USER_HIGHLIGHT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hlf</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_SNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id_SNC</name> <operator>=</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>hlf</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_ST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id_ST</name> <operator>=</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>hlf</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_STNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id_STNC</name> <operator>=</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><name>hlf</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_S</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id_S</name> <operator>=</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<default>default:</default> <return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_to_option_part</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></while>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USER_HIGHLIGHT</name></expr></argument>)</argument_list></call></expr></cpp:if>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>highlight_ga</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hlcnt</name> <operator>=</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id_S</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>hlcnt</name> <operator>+</operator> <literal type="number">27</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hl_group_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>hlcnt</name> <operator>+</operator> <literal type="number">18</literal></expr>]</index><operator>.</operator><name>sg_term</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>HLF_S</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>id_S</name> <operator>=</operator> <name>hlcnt</name> <operator>+</operator> <literal type="number">19</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>userhl</name></expr></argument>, <argument><expr><literal type="string">"User%d"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><name>userhl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>highlight_user</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>highlight_stlnc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>highlight_stlterm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>highlight_stltermnc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>highlight_user</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>combine_stl_hlt</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>id_S</name></expr></argument>, <argument><expr><name>id_SNC</name></expr></argument>, <argument><expr><name>hlcnt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>HLF_SNC</name></expr></argument>, <argument><expr><name>highlight_stlnc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>combine_stl_hlt</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>id_S</name></expr></argument>, <argument><expr><name>id_ST</name></expr></argument>, <argument><expr><name>hlcnt</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>HLF_ST</name></expr></argument>, <argument><expr><name>highlight_stlterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>combine_stl_hlt</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>id_S</name></expr></argument>, <argument><expr><name>id_STNC</name></expr></argument>, <argument><expr><name>hlcnt</name> <operator>+</operator> <literal type="number">18</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>HLF_STNC</name></expr></argument>, <argument><expr><name>highlight_stltermnc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name>hlcnt</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>highlight_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>highlight_list_two</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>void</name></type>
<name>set_context_in_highlight_cmd</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_HIGHLIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>include_link</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>include_default</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>include_default</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>include_link</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>highlight_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"link"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>highlight_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">10</literal></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>highlight_list_two</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">40</literal></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>highlight_list_two</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>highlight_list_two</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><literal type="string">"N \bI \b! \b"</literal><index>[<expr><name>cnt</name> <operator>/</operator> <literal type="number">11</literal></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><ternary><condition><expr><name>cnt</name> <operator>==</operator> <literal type="number">99</literal></expr> ?</condition><then> <expr><literal type="number">40L</literal></expr> </then><else>: <expr><operator>(</operator><name>long</name><operator>)</operator><name>cnt</name> <operator>*</operator> <literal type="number">50L</literal></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_highlight_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_highlight_name_ext</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_highlight_name_ext</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip_cleared</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>skip_cleared</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_cleared</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <name>include_none</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"none"</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+</operator> <name>include_none</name> <operator>&amp;&amp;</operator> <name>include_default</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"default"</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+</operator> <name>include_none</name> <operator>+</operator> <name>include_default</name>
<operator>&amp;&amp;</operator> <name>include_link</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"link"</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+</operator> <name>include_none</name> <operator>+</operator> <name>include_default</name> <operator>+</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>include_link</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"clear"</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_name</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>free_highlight_fonts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>highlight_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_font</name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_free_fontset</name><argument_list>(<argument><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HL_TABLE</name><argument_list>()</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sg_fontset</name> <operator>=</operator> <name>NOFONTSET</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_free_fontset</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>fontset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>ital_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>boldital_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEARCH_HL_PRIORITY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>match_add</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>prio</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>pos_list</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>conceal_char</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hlg_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>regprog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtype</name> <init>= <expr><name>SOME_VALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>grp</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name>pat</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pat</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E799: Invalid ID: %d (must be greater than or equal to 1)"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E801: ID already taken: %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hlg_id</name> <operator>=</operator> <call><name>syn_namen2id</name><argument_list>(<argument><expr><name>grp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nogroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>regprog</name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next_match_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next_match_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_next_match_id</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>matchitem_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <name>prio</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <ternary><condition><expr><name>pat</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>hlg_id</name></name> <operator>=</operator> <name>hlg_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>regprog</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>rmm_ic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>rmm_maxcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>conceal_char</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>conceal_char</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>conceal_char</name></name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>conceal_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>pos_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>toplnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>botlnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>pos_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>li</name> <operator>=</operator> <name><name>pos_list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</init> <condition><expr><name>li</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAXPOSMATCH</name></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>subl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>subli</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>subl</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subli</name> <operator>=</operator> <name><name>subl</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subli</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subli</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subli</name> <operator>=</operator> <name><name>subli</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subli</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subli</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subli</name> <operator>=</operator> <name><name>subli</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subli</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subli</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E290: List or number required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>toplnum</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>lnum</name> <operator>&lt;</operator> <name>toplnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>toplnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>botlnum</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>lnum</name> <operator>&gt;=</operator> <name>botlnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>botlnum</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>toplnum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_set</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_top</name></name> <operator>&gt;</operator> <name>toplnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_top</name></name> <operator>=</operator> <name>toplnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_bot</name></name> <operator>&lt;</operator> <name>botlnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_bot</name></name> <operator>=</operator> <name>botlnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_set</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_top</name></name> <operator>=</operator> <name>toplnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_bot</name></name> <operator>=</operator> <name>botlnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>toplnum</name></name> <operator>=</operator> <name>toplnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>botlnum</name></name> <operator>=</operator> <name>botlnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtype</name> <operator>=</operator> <name>VALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>prio</name> <operator>&gt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>priority</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>match_delete</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>cur</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtype</name> <init>= <expr><name>SOME_VALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>perr</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E802: Invalid ID: %d (must be greater than or equal to 1)"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>id</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>perr</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E803: ID not found: %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>toplnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_set</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_top</name></name> <operator>&gt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>toplnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_top</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>toplnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_bot</name></name> <operator>&lt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>botlnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_bot</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>botlnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_set</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_top</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>toplnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_bot</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>botlnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>rtype</name> <operator>=</operator> <name>VALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>clear_matches</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>matchitem_T</name> <modifier>*</modifier></type>
<name>get_match</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>cur</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>init_search_hl</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>match_T</name> <modifier>*</modifier></type><name>search_hl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>



<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>rm</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>match</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>hlg_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>hlg_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>first_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>profile_setlimit</name><argument_list>(<argument><expr><name>p_rdt</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>tm</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>search_hl</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>search_hl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>search_hl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>next_search_hl_pos</name><parameter_list>(
<parameter><decl><type><name>match_T</name> <modifier>*</modifier></type><name>shl</name></decl></parameter>, 
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>posmatch_T</name> <modifier>*</modifier></type><name>posmatch</name></decl></parameter>, 
<parameter><decl><type><name>colnr_T</name></type> <name>mincol</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>posmatch</name><operator>-&gt;</operator><name>cur</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAXPOSMATCH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>llpos_T</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><operator>&amp;</operator><name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name>mincol</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>llpos_T</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>posmatch</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>start</name> <init>= <expr><ternary><condition><expr><name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>end</name> <init>= <expr><ternary><condition><expr><name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name>MAXCOL</name></expr> </then><else>: <expr><name>start</name> <operator>+</operator> <name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>is_addpos</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>posmatch</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>found</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>next_search_hl</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>match_T</name> <modifier>*</modifier></type><name>search_hl</name></decl></parameter>,
<parameter><decl><type><name>match_T</name> <modifier>*</modifier></type><name>shl</name></decl></parameter>, 
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>mincol</name></decl></parameter>, 
<parameter><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>matchcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>nmatched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>called_emsg_before</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><name>search_first_line</name> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name>search_last_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>-</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>&gt;</operator> <name>mincol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>profile_passed_limit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>shl</name><operator>-&gt;</operator><name>tm</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_SEARCH</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>&lt;=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ml</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>shl</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>matchcol</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ml</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>matchcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>matchcol</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>matchcol</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>regprog_is_copy</name> <init>= <expr><operator>(</operator><name>shl</name> <operator>!=</operator> <name>search_hl</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>shl</name> <operator>==</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name>
<operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timed_out</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nmatched</name> <operator>=</operator> <macro><name>vim_regexec_multi</name><argument_list>(<argument>&amp;shl-&gt;rm</argument>, <argument>win</argument>, <argument>shl-&gt;buf</argument>, <argument>lnum</argument>,
<argument>matchcol</argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument>&amp;(shl-&gt;tm)</argument>, <argument>&amp;timed_out
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
NULL</argument>, <argument>NULL</argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regprog_is_copy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>called_emsg</name> <operator>&gt;</operator> <name>called_emsg_before</name> <operator>||</operator> <name>got_int</name> <operator>||</operator> <name>timed_out</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>==</operator> <name>search_hl</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nmatched</name> <operator>=</operator> <call><name>next_search_hl_pos</name><argument_list>(<argument><expr><name>shl</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr></argument>, <argument><expr><name>matchcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nmatched</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nmatched</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>&gt;=</operator> <name>mincol</name>
<operator>||</operator> <name>nmatched</name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>&gt;</operator> <name>mincol</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>prepare_search_hl</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>match_T</name> <modifier>*</modifier></type><name>search_hl</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>match_T</name> <modifier>*</modifier></type><name>shl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>shl_flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pos_inprogress</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>




<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>shl_flag</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shl_flag</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <name>search_hl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>re_multiline</name><argument_list>(<argument><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</init>
<condition><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</condition> <incr><expr><operator>--</operator><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos_inprogress</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>&lt;</operator> <name>lnum</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pos_inprogress</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>next_search_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>search_hl</name></expr></argument>, <argument><expr><name>shl</name></expr></argument>, <argument><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>n</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>shl</name> <operator>==</operator> <name>search_hl</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_inprogress</name> <operator>=</operator> <ternary><condition><expr><name>cur</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>cur</name></name> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>+</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name>
<operator>-</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>!=</operator> <name>search_hl</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>prepare_search_hl_line</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>mincol</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>match_T</name> <modifier>*</modifier></type><name>search_hl</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>search_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>match_T</name> <modifier>*</modifier></type><name>shl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>shl_flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>area_highlighting</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>shl_flag</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shl_flag</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <name>search_hl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>is_addpos</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>next_search_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>search_hl</name></expr></argument>, <argument><expr><name>shl</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>mincol</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>shl</name> <operator>==</operator> <name>search_hl</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;=</operator> <name>lnum</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name>
<operator>-</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>==</operator> <name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>line</name><operator>)</operator><index>[<expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>]</index> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>line</name><operator>)</operator> <operator>+</operator> <name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>&lt;</operator> <name>mincol</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>attr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>search_attr</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>attr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>!=</operator> <name>search_hl</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>area_highlighting</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>update_search_hl</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>match_T</name> <modifier>*</modifier></type><name>search_hl</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><name>has_match_conc</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><name>match_conc</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>did_line_attr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lcs_eol_one</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>match_T</name> <modifier>*</modifier></type><name>shl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>shl_flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pos_inprogress</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>search_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>shl_flag</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shl_flag</name> <operator>==</operator> <name>FALSE</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cur</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>priority</name></name> <operator>&gt;</operator> <name>SEARCH_HL_PRIORITY</name><operator>)</operator>
<operator>||</operator> <name>cur</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <name>search_hl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos_inprogress</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pos_inprogress</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>!=</operator> <name>MAXCOL</name>
<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name>
<operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next_col</name> <init>= <expr><name>col</name> <operator>+</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><operator>*</operator><name>line</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>&lt;</operator> <name>next_col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name>next_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>attr</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>shl</name> <operator>!=</operator> <name>search_hl</name>
<operator>&amp;&amp;</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Conceal"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>cur</name><operator>-&gt;</operator><name>hlg_id</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>has_match_conc</name> <operator>=</operator> <ternary><condition><expr><name>col</name> <operator>==</operator> <name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>match_conc</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>conceal_char</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>has_match_conc</name> <operator>=</operator> <operator>*</operator><name>match_conc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>col</name> <operator>==</operator> <name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>next_search_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>search_hl</name></expr></argument>, <argument><expr><name>shl</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>shl</name> <operator>==</operator> <name>search_hl</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_inprogress</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>cur</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>cur</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>==</operator> <name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><operator>*</operator><name>line</name> <operator>+</operator> <name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>!=</operator> <name>search_hl</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>shl_flag</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shl_flag</name> <operator>==</operator> <name>FALSE</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cur</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>priority</name></name> <operator>&gt;</operator> <name>SEARCH_HL_PRIORITY</name><operator>)</operator>
<operator>||</operator> <name>cur</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <name>search_hl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>search_attr</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>!=</operator> <name>search_hl</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>line</name> <operator>+</operator> <name>col</name><operator>)</operator> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>did_line_attr</name> <operator>&gt;=</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>&amp;&amp;</operator> <name>lcs_eol_one</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>search_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>search_attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>get_prevcol_hl_flag</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>match_T</name> <modifier>*</modifier></type><name>search_hl</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>curcol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>prevcol</name> <init>= <expr><name>curcol</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prevcol_hl_flag</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt> 


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr> ?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr></else></ternary><operator>)</operator> <operator>&gt;</operator> <name>prevcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>prevcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>search_hl</name><operator>-&gt;</operator><name>is_addpos</name></name> <operator>&amp;&amp;</operator> <name>prevcol</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>search_hl</name><operator>-&gt;</operator><name>startcol</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prevcol_hl_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>is_addpos</name></name> <operator>&amp;&amp;</operator> <name>prevcol</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>startcol</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prevcol_hl_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>prevcol_hl_flag</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>get_search_match_hl</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>match_T</name> <modifier>*</modifier></type><name>search_hl</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>char_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>match_T</name> <modifier>*</modifier></type><name>shl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>shl_flag</name></decl>;</decl_stmt> 


<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>shl_flag</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shl_flag</name> <operator>==</operator> <name>FALSE</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cur</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>priority</name></name> <operator>&gt;</operator> <name>SEARCH_HL_PRIORITY</name><operator>)</operator>
<operator>||</operator> <name>cur</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <name>search_hl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>shl</name> <operator>==</operator> <name>search_hl</name> <operator>||</operator> <operator>!</operator><name><name>shl</name><operator>-&gt;</operator><name>is_addpos</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>char_attr</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>attr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>!=</operator> <name>search_hl</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>matchadd_dict_arg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>conceal_char</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"conceal"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>conceal_char</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"conceal"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"window"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>win</name> <operator>=</operator> <call><name>find_win_by_nr_or_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>win</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invalwindow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>f_clearmatches</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>get_optional_window</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_matches</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_getmatches</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>get_optional_window</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <name>win</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAXPOSMATCH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>llpos_T</name> <modifier>*</modifier></type><name>llpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llpos</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>llpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>llpos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>llpos</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>llpos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>llpos</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"pos%d"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"pattern"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>, <argument><expr><call><name>syn_id2name</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>hlg_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"priority"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>conceal_char</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>conceal_char</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"conceal"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>list_append_dict</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_setmatches</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>get_optional_window</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>li</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name>
<operator>||</operator> <operator>(</operator><name>d</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"group"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"pattern"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"pos1"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"priority"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>clear_matches</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>li</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>priority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>conceal</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"pattern"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"pos%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>list_append_tv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lv_refcount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"group"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>priority</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>dict_get_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"priority"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>dict_get_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>conceal</name> <operator>=</operator> <ternary><condition><expr><call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"conceal"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>
?</condition><then> <expr><call><name>dict_get_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"conceal"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>match_add</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>group</name></expr></argument>,
<argument><expr><call><name>dict_get_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"pattern"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>priority</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>conceal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>match_add</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>conceal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_unref</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>conceal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_matchadd</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>grp</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>prio</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>conceal_char</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prio</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>
<operator>&amp;&amp;</operator> <call><name>matchadd_dict_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conceal_char</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>id</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E798: ID is reserved for \":match\": %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>match_add</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>prio</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>conceal_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_matchaddpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prio</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>conceal_char</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listarg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"matchaddpos()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prio</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>
<operator>&amp;&amp;</operator> <call><name>matchadd_dict_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conceal_char</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>id</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E798: ID is reserved for \":match\": %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>match_add</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>prio</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>l</name></expr></argument>,
<argument><expr><name>conceal_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_matcharg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>id</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <operator>(</operator><name>matchitem_T</name> <operator>*</operator><operator>)</operator><call><name>get_match</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,
<argument><expr><call><name>syn_id2name</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>hlg_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_matchdelete</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>get_optional_window</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>match_delete</name><argument_list>(<argument><expr><name>win</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>void</name></type>
<name>ex_match</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invcmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>match_delete</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ends_excmd</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>skip_regexp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <name>e_trailing</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>match_add</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
