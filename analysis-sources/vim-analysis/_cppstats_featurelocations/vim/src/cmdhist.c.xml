<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\cmdhist.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<expr_stmt><expr><specifier>static</specifier> <name>histentry_T</name> <operator>*</operator><operator>(</operator><name><name>history</name><index>[<expr><name>HIST_COUNT</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>hisidx</name><index>[<expr><name>HIST_COUNT</name></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>hisnum</name><index>[<expr><name>HIST_COUNT</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hislen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 




<function><type><name>int</name></type>
<name>get_hislen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>hislen</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>histentry_T</name> <modifier>*</modifier></type>
<name>get_histentry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hist_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>history</name><index>[<expr><name>hist_type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>set_histentry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hist_type</name></decl></parameter>, <parameter><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>hist_type</name></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name> <modifier>*</modifier></type>
<name>get_hisidx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hist_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>hisidx</name><index>[<expr><name>hist_type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <modifier>*</modifier></type>
<name>get_hisnum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hist_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>hisnum</name><index>[<expr><name>hist_type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>hist_char2type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>HIST_CMD</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>HIST_EXPR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>HIST_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>HIST_DEBUG</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>HIST_SEARCH</name></expr>;</return> 
</block_content>}</block></function>







<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>history_names</name><index>[]</index></name><operator>)</operator> <operator>=</operator>
<block>{
<expr><literal type="string">"cmd"</literal></expr>,
<expr><literal type="string">"search"</literal></expr>,
<expr><literal type="string">"expr"</literal></expr>,
<expr><literal type="string">"input"</literal></expr>,
<expr><literal type="string">"debug"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>;</expr_stmt>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_history_arg</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>compl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NUL</name></expr>, <expr><name>NUL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>short_names</name> <init>= <expr><literal type="string">":=@&gt;?/"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>short_names_count</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>short_names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>history_name_count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>history_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>short_names_count</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>compl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name><name>short_names</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>compl</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>short_names_count</name> <operator>+</operator> <name>history_name_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>history_names</name><index>[<expr><name>idx</name> <operator>-</operator> <name>short_names_count</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>short_names_count</name> <operator>+</operator> <name>history_name_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"all"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>init_history</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>newlen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>


<expr_stmt><expr><name>newlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_hi</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>!=</operator> <name>hislen</name></expr>)</condition> 
<block>{<block_content>
<for>for <control>(<init><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <name>HIST_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>type</name></expr></incr>)</control> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>newlen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>histentry_T</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <name>hislen</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>newlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>temp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>newlen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_hist_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>newlen</name> <operator>&gt;</operator> <name>hislen</name></expr>)</condition> 
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>newlen</name> <operator>-</operator> <operator>(</operator><name>hislen</name> <operator>-</operator> <name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_hist_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>( <init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>hislen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>newlen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>newlen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>hislen</name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clear_hist_entry</name><parameter_list>(<parameter><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hisptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>viminfo</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>time_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>in_history</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>move_to_front</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>sep</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>writing</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>writing</name> <operator>&amp;&amp;</operator> <name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>viminfo</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>HIST_SEARCH</name> <operator>||</operator> <name>sep</name> <operator>==</operator> <name><name>p</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>move_to_front</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>last_i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name>hislen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>last_i</name></expr>]</index></name> <operator>=</operator> <name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>=</operator> <operator>++</operator><name><name>hisnum</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>viminfo</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_set</name> <operator>=</operator> <call><name>vim_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_histtype</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>hist_char2type</name><argument_list>(<argument><expr><call><name>get_cmdline_firstc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>history_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>history_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":=@&gt;?/"</literal></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>hist_char2type</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_maptick</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 






<function><type><name>void</name></type>
<name>add_to_history</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_entry</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>in_map</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>sep</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hisptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>keeppatterns</name></name> <operator>&amp;&amp;</operator> <name>histype</name> <operator>==</operator> <name>HIST_SEARCH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>histype</name> <operator>==</operator> <name>HIST_SEARCH</name> <operator>&amp;&amp;</operator> <name>in_map</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>maptick</name> <operator>==</operator> <name>last_maptick</name> <operator>&amp;&amp;</operator> <name><name>hisidx</name><index>[<expr><name>HIST_SEARCH</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>hisptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>history</name><index>[<expr><name>HIST_SEARCH</name></expr>]</index><index>[<expr><name><name>hisidx</name><index>[<expr><name>HIST_SEARCH</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_hist_entry</name><argument_list>(<argument><expr><name>hisptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>hisnum</name><index>[<expr><name>histype</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>hisidx</name><index>[<expr><name>HIST_SEARCH</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>HIST_SEARCH</name></expr>]</index></name> <operator>=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last_maptick</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>in_history</name><argument_list>(<argument><expr><name>histype</name></expr></argument>, <argument><expr><name>new_entry</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>==</operator> <name>hislen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hisptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>new_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>new_entry</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sep</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisnum</name></name> <operator>=</operator> <operator>++</operator><name><name>hisnum</name><index>[<expr><name>histype</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>viminfo</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>time_set</name></name> <operator>=</operator> <call><name>vim_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>histype</name> <operator>==</operator> <name>HIST_SEARCH</name> <operator>&amp;&amp;</operator> <name>in_map</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_maptick</name> <operator>=</operator> <name>maptick</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_history_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>histype</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>histype</name> <operator>&gt;=</operator> <name>HIST_COUNT</name>
<operator>||</operator> <name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>hisnum</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>calc_hist_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wrapped</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>histype</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>histype</name> <operator>&gt;=</operator> <name>HIST_COUNT</name>
<operator>||</operator> <operator>(</operator><name>i</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hist</name> <operator>=</operator> <name><name>history</name><index>[<expr><name>histype</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>&gt;</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wrapped</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>hislen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wrapped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>==</operator> <name>num</name> <operator>&amp;&amp;</operator> <name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>-</operator><name>num</name> <operator>&lt;=</operator> <name>hislen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>num</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>hislen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>get_history_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>calc_hist_idx</name><argument_list>(<argument><expr><name>histype</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>clr_history</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hisptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>histype</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>histype</name> <operator>&lt;</operator> <name>HIST_COUNT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hisptr</name> <operator>=</operator> <name><name>history</name><index>[<expr><name>histype</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>hislen</name></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_hist_entry</name><argument_list>(<argument><expr><name>hisptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hisptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hisnum</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>del_history_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hisptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>histype</name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>histype</name> <operator>&lt;</operator> <name>HIST_COUNT</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>idx</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>RE_MAGIC</name> <operator>+</operator> <name>RE_STRING</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>last</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>hisptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_hist_entry</name><argument_list>(<argument><expr><name>hisptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>last</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>hisptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_hist_entry</name><argument_list>(<argument><expr><name>hisptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>last</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>+=</operator> <name>hislen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>hislen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name> <operator>!=</operator> <name>idx</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>del_history_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>calc_hist_idx</name><argument_list>(<argument><expr><name>histype</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>histype</name> <operator>==</operator> <name>HIST_SEARCH</name> <operator>&amp;&amp;</operator> <name>maptick</name> <operator>==</operator> <name>last_maptick</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_maptick</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>!=</operator> <name>idx</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>hislen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>clear_hist_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>hislen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_histadd</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>histype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>histype</name> <operator>=</operator> <ternary><condition><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>get_histtype</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>histype</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>init_history</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_to_history</name><argument_list>(<argument><expr><name>histype</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_histdel</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>clr_history</name><argument_list>(<argument><expr><call><name>get_histtype</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>del_history_idx</name><argument_list>(<argument><expr><call><name>get_histtype</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>del_history_entry</name><argument_list>(<argument><expr><call><name>get_histtype</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_histget</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>get_histtype</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>get_history_idx</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>get_history_entry</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_histnr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>histname</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>histname</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>HIST_CMD</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><call><name>get_histtype</name><argument_list>(<argument><expr><name>histname</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>HIST_CMD</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>HIST_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_history_idx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>remove_key_from_history</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>HIST_CMD</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>history</name><index>[<expr><name>HIST_CMD</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>ex_history</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>histype1</name> <init>= <expr><name>HIST_CMD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>histype2</name> <init>= <expr><name>HIST_CMD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hisidx1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hisidx2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'history' option is zero"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":=@&gt;/?"</literal></expr></argument>, <argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>histype1</name> <operator>=</operator> <call><name>get_histtype</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>histype1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>histype1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>histype2</name> <operator>=</operator> <name>HIST_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>histype2</name> <operator>=</operator> <name>histype1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_list_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hisidx1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hisidx2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <name>histype1</name> <operator>&lt;=</operator> <name>histype2</name></expr>;</condition> <incr><expr><operator>++</operator><name>histype1</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"\n #"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name><name>history_names</name><index>[<expr><name>histype1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts_title</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>histype1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hist</name> <operator>=</operator> <name><name>history</name><index>[<expr><name>histype1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>hisidx1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>hisidx2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>-</operator><name>j</name> <operator>&gt;</operator> <name>hislen</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>hist</name><index>[<expr><operator>(</operator><name>hislen</name><operator>+</operator><name>j</name><operator>+</operator><name>idx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>hislen</name></expr>]</index></name><operator>.</operator><name>hisnum</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>-</operator><name>k</name> <operator>&gt;</operator> <name>hislen</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>hist</name><index>[<expr><operator>(</operator><name>hislen</name><operator>+</operator><name>k</name><operator>+</operator><name>idx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>hislen</name></expr>]</index></name><operator>.</operator><name>hisnum</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>hislen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>&gt;=</operator> <name>j</name> <operator>&amp;&amp;</operator> <name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"%c%6d "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name>idx</name></expr> ?</condition><then> <expr><literal type="char">'&gt;'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strsize</name><argument_list>(<argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Columns</name> <operator>-</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>trunc_string</name><argument_list>(<argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>, <argument><expr><name>IObuff</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
