<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\xpm\include\xpm.h">











































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XPM_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XPM_h</name></cpp:macro></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmFormat</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmVersion</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmRevision</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmIncludeVersion</name></cpp:macro> <cpp:value>((XpmFormat * 100 + XpmVersion) * 100 + XpmRevision)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XPM_NUMBERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FOR_MSW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSV</name></cpp:macro></cpp:define> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simx.h"</cpp:file></cpp:include> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_STRCASECMP</name></cpp:macro></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amigax.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xutil.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_XtIntrinsic_h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PIXEL_ALREADY_TYPEDEFED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>Pixel</name>;</typedef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_ALREADY_TYPEDEFED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NeedFunctionPrototypes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NeedFunctionPrototypes</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NeedFunctionPrototypes</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmColorError</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmSuccess</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmOpenFailed</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmFileInvalid</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmNoMemory</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmColorFailed</name></cpp:macro> <cpp:value>-4</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Pixel</name></type> <name>pixel</name></decl>;</decl_stmt> 
}</block></struct></type> <name>XpmColorSymbol</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nlines</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>lines</name></decl>;</decl_stmt> 
}</block></struct></type> <name>XpmExtension</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symbolic</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m_color</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>g4_color</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>g_color</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c_color</name></decl>;</decl_stmt> 
}</block></struct></type> <name>XpmColor</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cpp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ncolors</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>XpmColor</name> <modifier>*</modifier></type><name>colorTable</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 
}</block></struct></type> <name>XpmImage</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>valuemask</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hints_cmt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colors_cmt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pixels_cmt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x_hotspot</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>y_hotspot</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nextensions</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>XpmExtension</name> <modifier>*</modifier></type><name>extensions</name></decl>;</decl_stmt> 
}</block></struct></type> <name>XpmInfo</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>XpmAllocColorFunc</name>)<parameter_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NeedFunctionPrototypes</name></expr></cpp:if>
<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter> ,
<parameter><decl><type><name>Colormap</name></type></decl></parameter> ,
<parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter> ,
<parameter><decl><type><name>XColor</name><modifier>*</modifier></type></decl></parameter> ,
<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>XpmFreeColorsFunc</name>)<parameter_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NeedFunctionPrototypes</name></expr></cpp:if>
<parameter><decl><type><name>Display</name><modifier>*</modifier></type></decl></parameter> ,
<parameter><decl><type><name>Colormap</name></type></decl></parameter> ,
<parameter><decl><type><name>Pixel</name><modifier>*</modifier></type></decl></parameter> ,
<parameter><decl><type><name>int</name></type></decl></parameter> ,
<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>valuemask</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>Visual</name> <modifier>*</modifier></type><name>visual</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Colormap</name></type> <name>colormap</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x_hotspot</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>y_hotspot</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cpp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>npixels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>XpmColorSymbol</name> <modifier>*</modifier></type><name>colorsymbols</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>numsymbols</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rgb_fname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nextensions</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>XpmExtension</name> <modifier>*</modifier></type><name>extensions</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ncolors</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>XpmColor</name> <modifier>*</modifier></type><name>colorTable</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hints_cmt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colors_cmt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pixels_cmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask_pixel</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>Bool</name></type> <name>exactColors</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>closeness</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>red_closeness</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>green_closeness</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>blue_closeness</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>color_key</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>alloc_pixels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nalloc_pixels</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>Bool</name></type> <name>alloc_close_colors</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>bitmap_format</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>XpmAllocColorFunc</name></type> <name>alloc_color</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>XpmFreeColorsFunc</name></type> <name>free_colors</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>color_closure</name></decl>;</decl_stmt> 


}</block></struct></type> <name>XpmAttributes</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmVisual</name></cpp:macro> <cpp:value>(1L&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmColormap</name></cpp:macro> <cpp:value>(1L&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmDepth</name></cpp:macro> <cpp:value>(1L&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmSize</name></cpp:macro> <cpp:value>(1L&lt;&lt;3)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmHotspot</name></cpp:macro> <cpp:value>(1L&lt;&lt;4)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmCharsPerPixel</name></cpp:macro> <cpp:value>(1L&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmColorSymbols</name></cpp:macro> <cpp:value>(1L&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmRgbFilename</name></cpp:macro> <cpp:value>(1L&lt;&lt;7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmInfos</name></cpp:macro> <cpp:value>(1L&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmReturnInfos</name></cpp:macro> <cpp:value>XpmInfos</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmReturnPixels</name></cpp:macro> <cpp:value>(1L&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmExtensions</name></cpp:macro> <cpp:value>(1L&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmReturnExtensions</name></cpp:macro> <cpp:value>XpmExtensions</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmExactColors</name></cpp:macro> <cpp:value>(1L&lt;&lt;11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmCloseness</name></cpp:macro> <cpp:value>(1L&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmRGBCloseness</name></cpp:macro> <cpp:value>(1L&lt;&lt;13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmColorKey</name></cpp:macro> <cpp:value>(1L&lt;&lt;14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmColorTable</name></cpp:macro> <cpp:value>(1L&lt;&lt;15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmReturnColorTable</name></cpp:macro> <cpp:value>XpmColorTable</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmReturnAllocPixels</name></cpp:macro> <cpp:value>(1L&lt;&lt;16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmAllocCloseColors</name></cpp:macro> <cpp:value>(1L&lt;&lt;17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmBitmapFormat</name></cpp:macro> <cpp:value>(1L&lt;&lt;18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmAllocColor</name></cpp:macro> <cpp:value>(1L&lt;&lt;19)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmFreeColors</name></cpp:macro> <cpp:value>(1L&lt;&lt;20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmColorClosure</name></cpp:macro> <cpp:value>(1L&lt;&lt;21)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmComments</name></cpp:macro> <cpp:value>XpmInfos</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmReturnComments</name></cpp:macro> <cpp:value>XpmComments</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FOR_MSW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmUndefPixel</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmUndefPixel</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XPM_MONO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XPM_GREY4</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XPM_GRAY4</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XPM_GREY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XPM_GRAY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XPM_COLOR</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NeedFunctionPrototypes</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern t f p</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LFUNC</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static t f p</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern t f()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LFUNC</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static t f()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FOR_MSW</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreatePixmapFromData</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>Drawable</name> <name>d</name><operator>,</operator>
<name>char</name> <operator>*</operator><operator>*</operator><name>data</name><operator>,</operator>
<name>Pixmap</name> <operator>*</operator><name>pixmap_return</name><operator>,</operator>
<name>Pixmap</name> <operator>*</operator><name>shapemask_return</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateDataFromPixmap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>char</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>data_return</name><operator>,</operator>
<name>Pixmap</name> <name>pixmap</name><operator>,</operator>
<name>Pixmap</name> <name>shapemask</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmReadFileToPixmap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>Drawable</name> <name>d</name><operator>,</operator>
<name>char</name> <operator>*</operator><name>filename</name><operator>,</operator>
<name>Pixmap</name> <operator>*</operator><name>pixmap_return</name><operator>,</operator>
<name>Pixmap</name> <operator>*</operator><name>shapemask_return</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmWriteFileFromPixmap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>char</name> <operator>*</operator><name>filename</name><operator>,</operator>
<name>Pixmap</name> <name>pixmap</name><operator>,</operator>
<name>Pixmap</name> <name>shapemask</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateImageFromData</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>char</name> <operator>*</operator><operator>*</operator><name>data</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><operator>*</operator><name>image_return</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><operator>*</operator><name>shapemask_return</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateDataFromImage</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>char</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>data_return</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><name>shapeimage</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmReadFileToImage</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>char</name> <operator>*</operator><name>filename</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><operator>*</operator><name>image_return</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><operator>*</operator><name>shapeimage_return</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmWriteFileFromImage</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>char</name> <operator>*</operator><name>filename</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><name>shapeimage</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateImageFromBuffer</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>char</name> <operator>*</operator><name>buffer</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><operator>*</operator><name>image_return</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><operator>*</operator><name>shapemask_return</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FOR_MSW</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreatePixmapFromBuffer</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>Drawable</name> <name>d</name><operator>,</operator>
<name>char</name> <operator>*</operator><name>buffer</name><operator>,</operator>
<name>Pixmap</name> <operator>*</operator><name>pixmap_return</name><operator>,</operator>
<name>Pixmap</name> <operator>*</operator><name>shapemask_return</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateBufferFromImage</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>char</name> <operator>*</operator><operator>*</operator><name>buffer_return</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><name>shapeimage</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateBufferFromPixmap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>char</name> <operator>*</operator><operator>*</operator><name>buffer_return</name><operator>,</operator>
<name>Pixmap</name> <name>pixmap</name><operator>,</operator>
<name>Pixmap</name> <name>shapemask</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmReadFileToBuffer</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>buffer_return</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmWriteFileFromBuffer</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>,</operator> <name>char</name> <operator>*</operator><name>buffer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmReadFileToData</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>data_return</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmWriteFileFromData</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmAttributesSize</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmFreeAttributes</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><operator>(</operator><name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmFreeExtensions</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><operator>(</operator><name>XpmExtension</name> <operator>*</operator><name>extensions</name><operator>,</operator>
<name>int</name> <name>nextensions</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmFreeXpmImage</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><operator>(</operator><name>XpmImage</name> <operator>*</operator><name>image</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmFreeXpmInfo</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><operator>(</operator><name>XpmInfo</name> <operator>*</operator><name>info</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmGetErrorString</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <name>errcode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmLibraryVersion</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmReadFileToXpmImage</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>,</operator>
<name>XpmImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>XpmInfo</name> <operator>*</operator><name>info</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmWriteFileFromXpmImage</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>,</operator>
<name>XpmImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>XpmInfo</name> <operator>*</operator><name>info</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FOR_MSW</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreatePixmapFromXpmImage</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>Drawable</name> <name>d</name><operator>,</operator>
<name>XpmImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>Pixmap</name> <operator>*</operator><name>pixmap_return</name><operator>,</operator>
<name>Pixmap</name> <operator>*</operator><name>shapemask_return</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateImageFromXpmImage</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>XpmImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><operator>*</operator><name>image_return</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><operator>*</operator><name>shapeimage_return</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateXpmImageFromImage</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>XImage</name> <operator>*</operator><name>shapeimage</name><operator>,</operator>
<name>XpmImage</name> <operator>*</operator><name>xpmimage</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FOR_MSW</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateXpmImageFromPixmap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator>
<name>Pixmap</name> <name>pixmap</name><operator>,</operator>
<name>Pixmap</name> <name>shapemask</name><operator>,</operator>
<name>XpmImage</name> <operator>*</operator><name>xpmimage</name><operator>,</operator>
<name>XpmAttributes</name> <operator>*</operator><name>attributes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateDataFromXpmImage</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>data_return</name><operator>,</operator>
<name>XpmImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>XpmInfo</name> <operator>*</operator><name>info</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateXpmImageFromData</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><name>data</name><operator>,</operator>
<name>XpmImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>XpmInfo</name> <operator>*</operator><name>info</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateXpmImageFromBuffer</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>buffer</name><operator>,</operator>
<name>XpmImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>XpmInfo</name> <operator>*</operator><name>info</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmCreateBufferFromXpmImage</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><name>buffer_return</name><operator>,</operator>
<name>XpmImage</name> <operator>*</operator><name>image</name><operator>,</operator>
<name>XpmInfo</name> <operator>*</operator><name>info</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmGetParseError</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>,</operator>
<name>int</name> <operator>*</operator><name>linenum_return</name><operator>,</operator>
<name>int</name> <operator>*</operator><name>charnum_return</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XpmFree</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmPixmapColorError</name></cpp:macro> <cpp:value>XpmColorError</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmPixmapSuccess</name></cpp:macro> <cpp:value>XpmSuccess</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmPixmapOpenFailed</name></cpp:macro> <cpp:value>XpmOpenFailed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmPixmapFileInvalid</name></cpp:macro> <cpp:value>XpmFileInvalid</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmPixmapNoMemory</name></cpp:macro> <cpp:value>XpmNoMemory</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmPixmapColorFailed</name></cpp:macro> <cpp:value>XpmColorFailed</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmReadPixmapFile</name><parameter_list>(<parameter><type><name>dpy</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>file</name></type></parameter>, <parameter><type><name>pix</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>att</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XpmReadFileToPixmap(dpy, d, file, pix, mask, att)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XpmWritePixmapFile</name><parameter_list>(<parameter><type><name>dpy</name></type></parameter>, <parameter><type><name>file</name></type></parameter>, <parameter><type><name>pix</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>att</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XpmWriteFileFromPixmap(dpy, file, pix, mask, att)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PixmapColorError</name></cpp:macro> <cpp:value>XpmColorError</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PixmapSuccess</name></cpp:macro> <cpp:value>XpmSuccess</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PixmapOpenFailed</name></cpp:macro> <cpp:value>XpmOpenFailed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PixmapFileInvalid</name></cpp:macro> <cpp:value>XpmFileInvalid</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PixmapNoMemory</name></cpp:macro> <cpp:value>XpmNoMemory</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PixmapColorFailed</name></cpp:macro> <cpp:value>XpmColorFailed</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ColorSymbol</name></cpp:macro> <cpp:value>XpmColorSymbol</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XReadPixmapFile</name><parameter_list>(<parameter><type><name>dpy</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>file</name></type></parameter>, <parameter><type><name>pix</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>att</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XpmReadFileToPixmap(dpy, d, file, pix, mask, att)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XWritePixmapFile</name><parameter_list>(<parameter><type><name>dpy</name></type></parameter>, <parameter><type><name>file</name></type></parameter>, <parameter><type><name>pix</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>att</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XpmWriteFileFromPixmap(dpy, file, pix, mask, att)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCreatePixmapFromData</name><parameter_list>(<parameter><type><name>dpy</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>pix</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>att</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XpmCreatePixmapFromData(dpy, d, data, pix, mask, att)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCreateDataFromPixmap</name><parameter_list>(<parameter><type><name>dpy</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>pix</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>att</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XpmCreateDataFromPixmap(dpy, data, pix, mask, att)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
