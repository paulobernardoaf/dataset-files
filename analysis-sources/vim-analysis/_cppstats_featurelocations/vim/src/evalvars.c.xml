<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\evalvars.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>dictitem_T</name></type> <name>globvars_var</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>dict_T</name></type> <name>globvardict</name></decl>;</decl_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>globvarht</name></cpp:macro> <cpp:value>globvardict.dv_hashtab</cpp:value></cpp:define>





<decl_stmt><decl><type><specifier>static</specifier> <name>hashtab_T</name></type> <name>compat_hashtab</name></decl>;</decl_stmt>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VV_COMPAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VV_RO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VV_RO_SBX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VV_NAME</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s, {{t, 0, {0}}, 0, {0}}</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>vimvar</name></name></type> <name>vimvar_T</name>;</typedef>

<struct><specifier>static</specifier> struct <name>vimvar</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vv_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>dictitem16_T</name></type> <name>vv_di</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>vv_flags</name></decl>;</decl_stmt> 
}</block> <decl><name><name>vimvars</name><index>[<expr><name>VV_LEN</name></expr>]</index></name> <init>=
<expr><block>{


<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_COMPAT</name><operator>+</operator><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"count1"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"prevcount"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"errmsg"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_COMPAT</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"warningmsg"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"statusmsg"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"shell_error"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_COMPAT</name><operator>+</operator><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"this_session"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_COMPAT</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_COMPAT</name><operator>+</operator><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"lnum"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO_SBX</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"termresponse"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"fname"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"lang"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"lc_time"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"ctype"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"charconvert_from"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"charconvert_to"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"fname_in"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"fname_out"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"fname_new"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"fname_diff"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"cmdarg"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"foldstart"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO_SBX</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"foldend"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO_SBX</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"folddashes"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO_SBX</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"foldlevel"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO_SBX</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"progname"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"servername"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"dying"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"exception"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"throwpoint"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"register"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"cmdbang"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"insertmode"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"val"</literal></expr></argument>, <argument><expr><name>VAR_UNKNOWN</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><name>VAR_UNKNOWN</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"profiling"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"fcs_reason"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"fcs_choice"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"beval_bufnr"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"beval_winnr"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"beval_winid"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"beval_lnum"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"beval_col"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"beval_text"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"scrollstart"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"swapname"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"swapchoice"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"swapcommand"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"char"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"mouse_win"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"mouse_winid"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"mouse_lnum"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"mouse_col"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"operator"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"searchforward"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"hlsearch"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"oldfiles"</literal></expr></argument>, <argument><expr><name>VAR_LIST</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"windowid"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"progpath"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"completed_item"</literal></expr></argument>, <argument><expr><name>VAR_DICT</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"option_new"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"option_old"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"option_oldlocal"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"option_oldglobal"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"option_command"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"option_type"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>, <argument><expr><name>VAR_LIST</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><name>VAR_BOOL</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name>VAR_BOOL</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>VAR_SPECIAL</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><name>VAR_SPECIAL</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"numbersize"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"vim_did_enter"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"testing"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"t_number"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"t_string"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"t_func"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"t_list"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"t_dict"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"t_float"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"t_bool"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"t_none"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"t_job"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"t_channel"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"t_blob"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"termrfgresp"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"termrbgresp"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"termu7resp"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"termstyleresp"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"termblinkresp"</literal></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"event"</literal></expr></argument>, <argument><expr><name>VAR_DICT</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"versionlong"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"echospace"</literal></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
<expr><block>{<expr><call><name>VV_NAME</name><argument_list>(<argument><expr><literal type="string">"argv"</literal></expr></argument>, <argument><expr><name>VAR_LIST</name></expr></argument>)</argument_list></call></expr>, <expr><name>VV_RO</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_type</name></cpp:macro> <cpp:value>vv_di.di_tv.v_type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_nr</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_number</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_float</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_str</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_string</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_list</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_list</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_dict</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_dict</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_blob</name></cpp:macro> <cpp:value>vv_di.di_tv.vval.v_blob</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv_tv</name></cpp:macro> <cpp:value>vv_di.di_tv</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>dictitem_T</name></type> <name>vimvars_var</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>dict_T</name></type> <name>vimvardict</name></decl>;</decl_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vimvarht</name></cpp:macro> <cpp:value>vimvardict.dv_hashtab</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ex_let_const</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_const</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>skip_var_one</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>include_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>list_glob_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>list_buf_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>list_win_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>list_tab_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>list_arg_vars</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>ex_let_one</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>endchars</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ex_unletlock</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>argstart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_unlet_var</name><parameter_list>(<parameter><decl><type><name>lval_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_lock_var</name><parameter_list>(<parameter><decl><type><name>lval_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>item_lock</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>delete_var</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>list_one_var</name><parameter_list>(<parameter><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>list_one_var_a</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>void</name></type>
<name>evalvars_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vimvar</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_var_dict</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvardict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>globvars_var</name></expr></argument>, <argument><expr><name>VAR_DEF_SCOPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_var_dict</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvardict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vimvars_var</name></expr></argument>, <argument><expr><name>VAR_SCOPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvardict</name><operator>.</operator><name>dv_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compat_hashtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VV_LEN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>DICTITEM16_KEY_LEN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><literal type="string">"INTERNAL: name too long, increase size of dictitem16_T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_key</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_flags</name></name> <operator>&amp;</operator> <name>VV_RO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_RO</name> <operator>|</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_flags</name></name> <operator>&amp;</operator> <name>VV_RO_SBX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_RO_SBX</name> <operator>|</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_type</name></name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_flags</name></name> <operator>&amp;</operator> <name>VV_COMPAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compat_hashtab</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_VERSION</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name>VIM_VERSION_100</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_VERSIONLONG</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name>VIM_VERSION_100</name> <operator>*</operator> <literal type="number">10000</literal> <operator>+</operator> <call><name>highest_patch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_SEARCHFORWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_HLSEARCH</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_dict</name><argument_list>(<argument><expr><name>VV_COMPLETED_ITEM</name></expr></argument>, <argument><expr><call><name>dict_alloc_lock</name><argument_list>(<argument><expr><name>VAR_FIXED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_list</name><argument_list>(<argument><expr><name>VV_ERRORS</name></expr></argument>, <argument><expr><call><name>list_alloc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_dict</name><argument_list>(<argument><expr><name>VV_EVENT</name></expr></argument>, <argument><expr><call><name>dict_alloc_lock</name><argument_list>(<argument><expr><name>VAR_FIXED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_FALSE</name></expr></argument>, <argument><expr><name>VVAL_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TRUE</name></expr></argument>, <argument><expr><name>VVAL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_NONE</name></expr></argument>, <argument><expr><name>VVAL_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_NULL</name></expr></argument>, <argument><expr><name>VVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_NUMBERSIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>varnumber_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_NUMBER</name></expr></argument>, <argument><expr><name>VAR_TYPE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_STRING</name></expr></argument>, <argument><expr><name>VAR_TYPE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_FUNC</name></expr></argument>, <argument><expr><name>VAR_TYPE_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_LIST</name></expr></argument>, <argument><expr><name>VAR_TYPE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_DICT</name></expr></argument>, <argument><expr><name>VAR_TYPE_DICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_FLOAT</name></expr></argument>, <argument><expr><name>VAR_TYPE_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_BOOL</name></expr></argument>, <argument><expr><name>VAR_TYPE_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_NONE</name></expr></argument>, <argument><expr><name>VAR_TYPE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_JOB</name></expr></argument>, <argument><expr><name>VAR_TYPE_JOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_CHANNEL</name></expr></argument>, <argument><expr><name>VAR_TYPE_CHANNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TYPE_BLOB</name></expr></argument>, <argument><expr><name>VAR_TYPE_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_ECHOSPACE</name></expr></argument>, <argument><expr><name>sc_col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_reg_var</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>evalvars_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vimvar</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VV_LEN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>vv_di</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>list_unref</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>vv_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vv_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compat_hashtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vars_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvarht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>script_items</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vars_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SCRIPT_VARS</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>garbage_collect_globvars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>set_ref_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvarht</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>garbage_collect_vimvars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>set_ref_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>garbage_collect_scriptvars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abort</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>script_items</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SCRIPT_VARS</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>abort</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>set_internal_string_var</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tvp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tvp</name> <operator>=</operator> <call><name>alloc_string_tv</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tvp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>tvp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name>tvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>eval_charconvert</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>enc_from</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>enc_to</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_from</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CC_FROM</name></expr></argument>, <argument><expr><name>enc_from</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CC_TO</name></expr></argument>, <argument><expr><name>enc_to</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>fname_from</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>fname_to</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eval_to_bool</name><argument_list>(<argument><expr><name>p_ccv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CC_FROM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CC_TO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>eval_printexpr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CMDARG</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eval_to_bool</name><argument_list>(<argument><expr><name>p_pexpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CMDARG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>eval_diff</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>origfile</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newfile</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>origfile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_NEW</name></expr></argument>, <argument><expr><name>newfile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eval_to_bool</name><argument_list>(<argument><expr><name>p_dex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_NEW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>eval_patch</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>origfile</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>difffile</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>origfile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_DIFF</name></expr></argument>, <argument><expr><name>difffile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eval_to_bool</name><argument_list>(<argument><expr><name>p_pex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_IN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_DIFF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME_OUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>list_T</name> <modifier>*</modifier></type>
<name>eval_spell_expr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>badword</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name>save_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>prepare_vimvar</name><argument_list>(<argument><expr><name>VV_VAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_VAL</name></expr></argument>, <argument><expr><name>badword</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>rettv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><call><name>get_vim_var_tv</name><argument_list>(<argument><expr><name>VV_VAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_vimvar</name><argument_list>(<argument><expr><name>VV_VAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>get_spellword</name><parameter_list>(<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>void</name></type>
<name>prepare_vimvar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>save_tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>save_tv</name> <operator>=</operator> <name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>restore_vimvar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>save_tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_tv</name> <operator>=</operator> <operator>*</operator><name>save_tv</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"restore_vimvar()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hash_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>list_vim_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><literal type="string">"v:"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>list_script_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&lt;=</operator> <name><name>script_items</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SCRIPT_VARS</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"s:"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>















<function><type><name>list_T</name> <modifier>*</modifier></type>
<name>heredoc_get</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>theline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>marker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>marker_indent_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_indent_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text_indent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E991: cannot use =&lt;&lt; here"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"trim"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cmd</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>cmd</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>marker_indent_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>text_indent_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>marker</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_islower</name><argument_list>(<argument><expr><operator>*</operator><name>marker</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E221: Marker cannot start with lower case letter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E172: Missing marker"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ti</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>theline</name> <operator>=</operator> <call><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>theline</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E990: Missing end marker '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>marker_indent_len</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>theline</name></expr></argument>, <argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr></argument>, <argument><expr><name>marker_indent_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mi</name> <operator>=</operator> <name>marker_indent_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name>theline</name> <operator>+</operator> <name>mi</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text_indent_len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>theline</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>theline</name></expr>;</expr_stmt>
<expr_stmt><expr><name>text_indent_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>text_indent_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>text_indent</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>theline</name></expr></argument>, <argument><expr><name>text_indent_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text_indent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>ti</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ti</name> <operator>&lt;</operator> <name>text_indent_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>ti</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>theline</name><index>[<expr><name>ti</name></expr>]</index></name> <operator>!=</operator> <name><name>text_indent</name><index>[<expr><name>ti</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>theline</name> <operator>+</operator> <name>ti</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>text_indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>void</name></type>
<name>ex_let</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ex_let_const</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>ex_const</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ex_let_const</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ex_let_const</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_const</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>var_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>semicolon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>argend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>concat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>is_const</name></expr> ?</condition><then> <expr><name>LET_IS_CONST</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LET_NO_COMMAND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argend</name> <operator>=</operator> <call><name>skip_var_list</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>semicolon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argend</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argend</name> <operator>&gt;</operator> <name>arg</name> <operator>&amp;&amp;</operator> <name><name>argend</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>--</operator><name>argend</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>argend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>concat</name> <operator>=</operator> <name><name>expr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>expr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>expr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>expr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>expr</name> <operator>!=</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+-*/%"</literal></expr></argument>, <argument><expr><operator>*</operator><name>expr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>expr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator> <operator>||</operator> <name>concat</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>expr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E985: .= is not supported with script version 2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>list_arg_vars</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>list_glob_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_buf_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_win_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_tab_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_script_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_func_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_vim_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>expr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name><name>expr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name><name>expr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>heredoc_get</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>expr</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rettv_list_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ex_let_vars</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>semicolon</name></expr></argument>, <argument><expr><name>var_count</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>expr</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+-*/%."</literal></expr></argument>, <argument><expr><operator>*</operator><name>expr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>expr</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>expr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>expr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>expr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>expr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>expr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>eval0</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>, <argument><expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>emsg_skip</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ex_let_vars</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>semicolon</name></expr></argument>, <argument><expr><name>var_count</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>ex_let_vars</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_start</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>semicolon</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>var_count</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>ltv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ex_let_one</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name> <operator>||</operator> <operator>(</operator><name>l</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>list_len</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>semicolon</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>var_count</name> <operator>&lt;</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E687: Less targets than List items"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>var_count</name> <operator>-</operator> <name>semicolon</name> <operator>&gt;</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E688: More targets than List items"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>ex_let_one</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">",;]"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>list_append_tv</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>ltv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ltv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ltv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>lv_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>ex_let_one</name><argument_list>(<argument><expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ltv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"]"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ltv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"ex_let_vars()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>skip_var_list</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>include_type</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>var_count</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>semicolon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skip_var_one</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>p</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>var_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>semicolon</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E452: Double ; in list of variables"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>semicolon</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>skip_var_one</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>include_type</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>skip_var_one</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>include_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>find_name_end</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr> ?</condition><then> <expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>arg</name></expr></else></ternary></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FNE_INCL_BR</name> <operator>|</operator> <name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>include_type</name> <operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_version</name></name> <operator>==</operator> <name>SCRIPT_VERSION_VIM9</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>skip_type</name><argument_list>(<argument><expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>list_hashtable_vars</name><parameter_list>(
<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>empty</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>IOSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>prefix</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_strcat</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>message_filtered</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>empty</name> <operator>||</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_STRING</name>
<operator>||</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>list_one_var</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>list_glob_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvarht</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>list_buf_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="string">"b:"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>list_win_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="string">"w:"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>list_tab_vars</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>list_hashtable_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curtab</name><operator>-&gt;</operator><name>tp_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="string">"t:"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>list_arg_vars</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_subsc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>find_name_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FNE_INCL_BR</name> <operator>|</operator> <name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>emsg_severe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>name_start</name> <operator>=</operator> <name>name</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_name_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>emsg_severe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tofree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>tofree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_var_tv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>arg_subsc</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>handle_subscript</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>arg_subsc</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'g'</literal></expr>:</case> <expr_stmt><expr><call><name>list_glob_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><call><name>list_buf_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> <expr_stmt><expr><call><name>list_win_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><call><name>list_tab_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case> <expr_stmt><expr><call><name>list_vim_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><call><name>list_script_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><call><name>list_func_vars</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E738: Can't list variables for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>numbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>echo_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tf</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_one_var_a</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>arg</name> <operator>==</operator> <name>arg_subsc</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><name>name_start</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name>s</name></expr></else></ternary></expr></argument>,
<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>arg</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>ex_let_one</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, 
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>endchars</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LET_IS_CONST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E996: Cannot lock an environment variable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_env_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+-*/%"</literal></expr></argument>, <argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letwrong</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>endchars</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>endchars</name></expr></argument>, <argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letunexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mustfree</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vim_getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mustfree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tofree</name> <operator>=</operator> <call><name>concat_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mustfree</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_setenv_ext</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>




<if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LET_IS_CONST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_const_option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_option_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>endchars</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>endchars</name></expr></argument>, <argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letunexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>numval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>stringval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>opt_type</name> <operator>=</operator> <call><name>get_option_value</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numval</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>stringval</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_type</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>opt_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letwrong</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> 
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>op</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>numval</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>numval</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>numval</name> <operator>*</operator> <name>n</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'/'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>num_divide</name><argument_list>(<argument><expr><name>numval</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'%'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>num_modulus</name><argument_list>(<argument><expr><name>numval</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>opt_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>stringval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>concat_str</name><argument_list>(<argument><expr><name>stringval</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>stringval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stringval</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>stringval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LET_IS_CONST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E996: Cannot lock a register"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+-*/%"</literal></expr></argument>, <argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letwrong</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>endchars</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>endchars</name></expr></argument>, <argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letunexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>get_reg_contents</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><operator>*</operator><name>arg</name></expr></else></ternary></expr></argument>, <argument><expr><name>GREG_EXPR_SRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ptofree</name> <operator>=</operator> <call><name>concat_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>write_reg_contents</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><operator>*</operator><name>arg</name></expr></else></ternary></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ptofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>




<if type="elseif">else if <condition>(<expr><call><name>eval_isnamec1</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>lval_T</name></type> <name>lv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_lval</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>lv</name><operator>.</operator><name>ll_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>endchars</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>endchars</name></expr></argument>,
<argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>ll_name_end</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letunexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>set_var_lval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>arg_end</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_unlet</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ex_unletlock</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_lockvar</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deep</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>deep</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>vim_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>deep</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ex_unletlock</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>ex_unletlock</name><parameter_list>(
<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>argstart</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>argstart</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lval_T</name></type> <name>lv</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>++</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_env_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_unsetenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>name_end</name> <operator>=</operator> <call><name>get_lval</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>||</operator> <name>error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>name_end</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>name_end</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>name_end</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name_end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>emsg_severe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>||</operator> <name>error</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_unlet</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_unlet_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>name_end</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_lock_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>name_end</name></expr></argument>, <argument><expr><name>deep</name></expr></argument>,
<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_lockvar</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_unlet_var</name><parameter_list>(
<parameter><decl><type><name>lval_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_end</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>*</operator><name>name_end</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>name_end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>do_unlet</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>name_end</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>var_check_lock</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name><operator>-&gt;</operator><name>lv_lock</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>var_check_lock</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name><operator>-&gt;</operator><name>dv_lock</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_range</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>ll_li</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ll_n1</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ll_li</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_empty2</name></name> <operator>||</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name> <operator>&gt;=</operator> <name>ll_n1</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>ll_li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>var_check_lock</name><argument_list>(<argument><expr><name><name>ll_li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_lock</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ll_li</name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ll_n1</name></expr>;</expr_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_empty2</name></name> <operator>||</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name> <operator>&gt;=</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>listitem_remove</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>listitem_remove</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dictitem_remove</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_dict</name></name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>do_unlet</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>find_var_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>varname</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>get_current_funccal_dict</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <operator>&amp;</operator><name>globvarht</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name>globvardict</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ht</name> <operator>==</operator> <operator>&amp;</operator><name>compat_hashtab</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name>vimvardict</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>find_var_in_ht</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>*</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <ternary><condition><expr><name>di</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"do_unlet()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>find_hi_in_scoped_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>var_check_fixed</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>var_check_ro</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>var_check_lock</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>dv_lock</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>delete_var</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>forceit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E108: No such variable: \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_lock_var</name><parameter_list>(
<parameter><decl><type><name>lval_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_end</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>deep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_tv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>*</operator><name>name_end</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>name_end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DI_FLAGS_FIX</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name>
<operator>&amp;&amp;</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E940: Cannot lock or unlock variable %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ll_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DI_FLAGS_LOCK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DI_FLAGS_LOCK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>item_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>name_end</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_range</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name></name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>li</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_empty2</name></name> <operator>||</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n2</name></name> <operator>&gt;=</operator> <name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>item_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_n1</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ll_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>item_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>item_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lp</name><operator>-&gt;</operator><name>ll_di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>item_lock</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recurse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blob_T</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recurse</name> <operator>&gt;=</operator> <name>DICT_MAXNEST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E743: variable nested too deep for (un)lock"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>deep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>recurse</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_lock</name></name> <operator>|=</operator> <name>VAR_LOCKED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_lock</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VAR_LOCKED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case>
<case>case <expr><name>VAR_VOID</name></expr>:</case>
<case>case <expr><name>VAR_NUMBER</name></expr>:</case>
<case>case <expr><name>VAR_BOOL</name></expr>:</case>
<case>case <expr><name>VAR_STRING</name></expr>:</case>
<case>case <expr><name>VAR_FUNC</name></expr>:</case>
<case>case <expr><name>VAR_PARTIAL</name></expr>:</case>
<case>case <expr><name>VAR_FLOAT</name></expr>:</case>
<case>case <expr><name>VAR_SPECIAL</name></expr>:</case>
<case>case <expr><name>VAR_JOB</name></expr>:</case>
<case>case <expr><name>VAR_CHANNEL</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>VAR_BLOB</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_blob</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bv_lock</name></name> <operator>|=</operator> <name>VAR_LOCKED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bv_lock</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VAR_LOCKED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VAR_LIST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>lv_lock</name></name> <operator>|=</operator> <name>VAR_LOCKED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>lv_lock</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VAR_LOCKED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>deep</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>deep</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name> <operator>!=</operator> <operator>&amp;</operator><name>range_list_item</name></expr>)</condition><block type="pseudo"><block_content>

<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>l</argument>, <argument>li</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>item_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><name>deep</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VAR_DICT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>dv_lock</name></name> <operator>|=</operator> <name>VAR_LOCKED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>dv_lock</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VAR_LOCKED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>deep</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>deep</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>item_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_tv</name></expr></argument>, <argument><expr><name>deep</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><operator>--</operator><name>recurse</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>del_menutrans_vars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hash_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvarht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>globvarht</name><operator>.</operator><name>ht_used</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>globvarht</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><call><name>HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_key</name></expr></argument>, <argument><expr><literal type="string">"menutrans_"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delete_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvarht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>hash_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvarht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>varnamebuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>varnamebuflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>cat_prefix_varname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>varnamebuflen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>varnamebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>varnamebuf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>varnamebuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>varnamebuflen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>varnamebuflen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>varnamebuf</name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>varnamebuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>varnamebuf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>varnamebuf</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_user_var_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>gdone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>bdone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>wdone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>tdone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>vidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gdone</name> <operator>=</operator> <name>bdone</name> <operator>=</operator> <name>wdone</name> <operator>=</operator> <name>vidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tdone</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>gdone</name> <operator>&lt;</operator> <name><name>globvarht</name><operator>.</operator><name>ht_used</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gdone</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>globvarht</name><operator>.</operator><name>ht_array</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"g:"</literal></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>cat_prefix_varname</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bdone</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bdone</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><call><name>cat_prefix_varname</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wdone</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wdone</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><call><name>cat_prefix_varname</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>curtab</name><operator>-&gt;</operator><name>tp_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tdone</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tdone</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><call><name>cat_prefix_varname</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>vidx</name> <operator>&lt;</operator> <name>VV_LEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>cat_prefix_varname</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>vimvars</name><index>[<expr><name>vidx</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>vv_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>varnamebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>varnamebuflen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>get_var_special_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>nr</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VVAL_FALSE</name></expr>:</case> <return>return <expr><literal type="string">"v:false"</literal></expr>;</return>
<case>case <expr><name>VVAL_TRUE</name></expr>:</case> <return>return <expr><literal type="string">"v:true"</literal></expr>;</return>
<case>case <expr><name>VVAL_NONE</name></expr>:</case> <return>return <expr><literal type="string">"v:none"</literal></expr>;</return>
<case>case <expr><name>VVAL_NULL</name></expr>:</case> <return>return <expr><literal type="string">"v:null"</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"get_var_special_name()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"42"</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>dict_T</name> <modifier>*</modifier></type>
<name>get_globvar_dict</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>globvardict</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>hashtab_T</name> <modifier>*</modifier></type>
<name>get_globvar_ht</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>globvarht</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>dict_T</name> <modifier>*</modifier></type>
<name>get_vimvar_dict</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>vimvardict</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>find_vim_var</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>find_var_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvarht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vimvar</name></name> <modifier>*</modifier></type><name>vv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vv</name> <operator>=</operator> <operator>(</operator>struct <name>vimvar</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>di</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>vimvar_T</name></expr></argument>, <argument><expr><name>vv_di</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>vv</name> <operator>-</operator> <name>vimvars</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>set_vim_var_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>vartype_T</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>set_vim_var_nr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>varnumber_T</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>get_vim_var_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_name</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>typval_T</name> <modifier>*</modifier></type>
<name>get_vim_var_tv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>set_vim_var_tv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>!=</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1063: type mismatch for v: variable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_tv</name></name> <operator>=</operator> <operator>*</operator><name>tv</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>varnumber_T</name></type>
<name>get_vim_var_nr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_nr</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_vim_var_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_tv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>list_T</name> <modifier>*</modifier></type>
<name>get_vim_var_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_list</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>dict_T</name> <modifier>*</modifier></type>
<name>get_vim_var_dict</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_dict</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>set_vim_var_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CHAR</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>set_vcount</name><parameter_list>(
<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>count1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>set_prevcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>set_prevcount</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_PREVCOUNT</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name><name>vimvars</name><index>[<expr><name>VV_COUNT</name></expr>]</index></name><operator>.</operator><name>vv_nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_COUNT</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_COUNT1</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name>count1</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>save_vimvars</name><parameter_list>(<parameter><decl><type><name>vimvars_save_T</name> <modifier>*</modifier></type><name>vvsave</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>vvsave</name><operator>-&gt;</operator><name>vv_prevcount</name></name> <operator>=</operator> <name><name>vimvars</name><index>[<expr><name>VV_PREVCOUNT</name></expr>]</index></name><operator>.</operator><name>vv_nr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vvsave</name><operator>-&gt;</operator><name>vv_count</name></name> <operator>=</operator> <name><name>vimvars</name><index>[<expr><name>VV_COUNT</name></expr>]</index></name><operator>.</operator><name>vv_nr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vvsave</name><operator>-&gt;</operator><name>vv_count1</name></name> <operator>=</operator> <name><name>vimvars</name><index>[<expr><name>VV_COUNT1</name></expr>]</index></name><operator>.</operator><name>vv_nr</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>restore_vimvars</name><parameter_list>(<parameter><decl><type><name>vimvars_save_T</name> <modifier>*</modifier></type><name>vvsave</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_PREVCOUNT</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name><name>vvsave</name><operator>-&gt;</operator><name>vv_prevcount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_COUNT</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name><name>vvsave</name><operator>-&gt;</operator><name>vv_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_COUNT1</name></expr>]</index></name><operator>.</operator><name>vv_nr</name> <operator>=</operator> <name><name>vvsave</name><operator>-&gt;</operator><name>vv_count1</name></name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>set_vim_var_string</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>set_vim_var_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_list</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>val</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>set_vim_var_dict</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>vv_di</name><operator>.</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_type</name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>vv_dict</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>val</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_set_items_ro</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>set_argv_var</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>list_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>lv_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>mat</name><operator>.</operator><name>lv_last</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>set_vim_var_list</name><argument_list>(<argument><expr><name>VV_ARGV</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>set_reg_var</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name>regname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>regname</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>regname</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vimvars</name><index>[<expr><name>VV_REG</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>vimvars</name><index>[<expr><name>VV_REG</name></expr>]</index></name><operator>.</operator><name><name>vv_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_REG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>v_exception</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>oldval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>vimvars</name><index>[<expr><name>VV_EXCEPTION</name></expr>]</index></name><operator>.</operator><name>vv_str</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_EXCEPTION</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>v_throwpoint</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>oldval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>vimvars</name><index>[<expr><name>VV_THROWPOINT</name></expr>]</index></name><operator>.</operator><name>vv_str</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_THROWPOINT</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>set_cmdarg</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>oldval</name> <operator>=</operator> <name><name>vimvars</name><index>[<expr><name>VV_CMDARG</name></expr>]</index></name><operator>.</operator><name>vv_str</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_CMDARG</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>oldarg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_bin</name></name> <operator>==</operator> <name>FORCE_BIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_bin</name></name> <operator>==</operator> <name>FORCE_NOBIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>read_edit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_ff</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_enc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name> <operator>+</operator> <name><name>eap</name><operator>-&gt;</operator><name>force_enc</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>bad_char</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_bin</name></name> <operator>==</operator> <name>FORCE_BIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name></expr></argument>, <argument><expr><literal type="string">" ++bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_bin</name></name> <operator>==</operator> <name>FORCE_NOBIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name></expr></argument>, <argument><expr><literal type="string">" ++nobin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>newval</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>read_edit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><literal type="string">" ++edit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_ff</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" ++ff=%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>force_ff</name></name> <operator>==</operator> <literal type="char">'u'</literal></expr> ?</condition><then> <expr><literal type="string">"unix"</literal></expr>
</then><else>: <expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>force_ff</name></name> <operator>==</operator> <literal type="char">'d'</literal></expr> ?</condition><then> <expr><literal type="string">"dos"</literal></expr>
</then><else>: <expr><literal type="string">"mac"</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>force_enc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" ++enc=%s"</literal></expr></argument>,
<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name> <operator>+</operator> <name><name>eap</name><operator>-&gt;</operator><name>force_enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>bad_char</name></name> <operator>==</operator> <name>BAD_KEEP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newval</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" ++bad=keep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>bad_char</name></name> <operator>==</operator> <name>BAD_DROP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newval</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" ++bad=drop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>bad_char</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" ++bad=%c"</literal></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>bad_char</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vimvars</name><index>[<expr><name>VV_CMDARG</name></expr>]</index></name><operator>.</operator><name>vv_str</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>
<return>return <expr><name>oldval</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>get_var_tv</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, 
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, 
<parameter><decl><type><name>dictitem_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>dip</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>no_autoload</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>


<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>no_autoload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dip</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_version</name></name> <operator>==</operator> <name>SCRIPT_VERSION_VIM9</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>imported_T</name> <modifier>*</modifier></type><name>import</name> <init>= <expr><call><name>find_imported</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>import</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>import</name><operator>-&gt;</operator><name>imp_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svar_T</name> <modifier>*</modifier></type><name>sv</name> <init>= <expr><operator>(</operator><operator>(</operator><name>svar_T</name> <operator>*</operator><operator>)</operator><name><name>si</name><operator>-&gt;</operator><name>sn_var_vals</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>import</name><operator>-&gt;</operator><name>imp_var_vals_idx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <name><name>sv</name><operator>-&gt;</operator><name>sv_tv</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_undefvar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>check_vars</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eval_lavars_used</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>find_var_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <call><name>get_funccal_local_ht</name><argument_list>()</argument_list></call> <operator>||</operator> <name>ht</name> <operator>==</operator> <call><name>get_funccal_args_ht</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>eval_lavars_used</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>dictitem_T</name> <modifier>*</modifier></type>
<name>find_var</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>htp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>no_autoload</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>find_var_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>htp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>htp</name> <operator>=</operator> <name>ht</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>find_var_in_ht</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>no_autoload</name> <operator>||</operator> <name>htp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>find_var_in_scoped_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>no_autoload</name> <operator>||</operator> <name>htp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>dictitem_T</name> <modifier>*</modifier></type>
<name>find_var_in_ht</name><parameter_list>(
<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>htname</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>no_autoload</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>varname</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<switch>switch <condition>(<expr><name>htname</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <return>return <expr><operator>&amp;</operator><call><name>SCRIPT_SV</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>sv_var</name></expr>;</return>
<case>case <expr><literal type="char">'g'</literal></expr>:</case> <return>return <expr><operator>&amp;</operator><name>globvars_var</name></expr>;</return>
<case>case <expr><literal type="char">'v'</literal></expr>:</case> <return>return <expr><operator>&amp;</operator><name>vimvars_var</name></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_bufvar</name></name></expr>;</return>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_winvar</name></name></expr>;</return>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curtab</name><operator>-&gt;</operator><name>tp_winvar</name></name></expr>;</return>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <return>return <expr><call><name>get_funccal_local_var</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> <return>return <expr><call><name>get_funccal_args_var</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <operator>&amp;</operator><name>globvarht</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_autoload</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>script_autoload</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>hashtab_T</name> <modifier>*</modifier></type>
<name>get_script_local_ht</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scid_T</name></type> <name>sid</name> <init>= <expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sid</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sid</name> <operator>&lt;=</operator> <name><name>script_items</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><call><name>SCRIPT_VARS</name><argument_list>(<argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>lookup_scriptvar</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>cctx_T</name> <modifier>*</modifier><name>dummy</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>get_script_local_ht</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buffer</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>find_imported</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>hashtab_T</name> <modifier>*</modifier></type>
<name>find_var_ht</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>AUTOLOAD_CHAR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>varname</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_version</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compat_hashtab</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>compat_hashtab</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>get_funccal_local_ht</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ht</name></expr>;</return></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_version</name></name> <operator>==</operator> <name>SCRIPT_VERSION_VIM9</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>get_script_local_ht</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ht</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name>globvarht</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>varname</name> <operator>=</operator> <name>name</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>&amp;</operator><name>globvarht</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>AUTOLOAD_CHAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>&amp;</operator><name><name>curtab</name><operator>-&gt;</operator><name>tp_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>&amp;</operator><name>vimvarht</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_current_funccal</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>get_current_funccal</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>func</name><operator>-&gt;</operator><name>uf_dfunc_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><call><name>get_funccal_args_ht</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><call><name>get_funccal_local_ht</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>get_script_local_ht</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ht</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_var_value</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>new_script_vars</name><parameter_list>(<parameter><decl><type><name>scid_T</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scriptvar_T</name> <modifier>*</modifier></type><name>sv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sv</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>scriptvar_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>init_var_dict</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sv</name><operator>-&gt;</operator><name>sv_dict</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sv</name><operator>-&gt;</operator><name>sv_var</name></name></expr></argument>, <argument><expr><name>VAR_SCOPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>sn_vars</name> <operator>=</operator> <name>sv</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>init_var_dict</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>dict_var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_scope</name></name> <operator>=</operator> <name>scope</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_refcount</name></name> <operator>=</operator> <name>DO_NOT_FREE_CNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_copyID</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict_var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <name>dict</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict_var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict_var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <name>VAR_FIXED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict_var</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_RO</name> <operator>|</operator> <name>DI_FLAGS_FIX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dict_var</name><operator>-&gt;</operator><name>di_key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>unref_var_dict</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_refcount</name></name> <operator>-=</operator> <name>DO_NOT_FREE_CNT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>vars_clear</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vars_clear_ext</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>vars_clear_ext</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>free_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hash_lock</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>




<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>free_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DI_FLAGS_ALLOC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>delete_var</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hash_remove</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>list_one_var</name><parameter_list>(<parameter><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>numbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>echo_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><call><name>get_copyID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_one_var_a</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name>s</name></expr></else></ternary></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>list_one_var_a</name><parameter_list>(
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first</name></decl></parameter>)</parameter_list> 
<block>{<block_content>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_FUNC</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>string</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>string</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>string</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>string</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_FUNC</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>first</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>set_var</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<expr_stmt><expr><call><name>set_var_const</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>set_var_const</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>type_T</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_script_local</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>find_var_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>varname</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_illvar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>is_script_local</name> <operator>=</operator> <name>ht</name> <operator>==</operator> <call><name>get_script_local_ht</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>find_var_in_ht</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>find_var_in_scoped_ht</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>var_check_func_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>di</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DI_FLAGS_RELOAD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LET_IS_CONST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_cannot_mod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_check_ro</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>var_check_lock</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LET_NO_COMMAND</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>is_script_local</name>
<operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_version</name></name> <operator>==</operator> <name>SCRIPT_VERSION_VIM9</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1041: Redefining script item %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DI_FLAGS_RELOAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <operator>&amp;</operator><name>vimvarht</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>copy</name> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"searchforward"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_search_direction</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr> ?</condition><then> <expr><literal type="char">'/'</literal></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"hlsearch"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>no_hlsearch</name> <operator>=</operator> <operator>!</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E963: setting %s to value with wrong type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <operator>&amp;</operator><name>vimvarht</name> <operator>||</operator> <name>ht</name> <operator>==</operator> <call><name>get_funccal_args_ht</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_illvar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_varname</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dictitem_T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hash_add</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><call><name>DI2HIKEY</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>=</operator> <name>DI_FLAGS_ALLOC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LET_IS_CONST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DI_FLAGS_LOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_script_local</name> <operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_version</name></name> <operator>==</operator> <name>SCRIPT_VERSION_VIM9</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_var_vals</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>svar_T</name> <modifier>*</modifier></type><name>sv</name> <init>= <expr><operator>(</operator><operator>(</operator><name>svar_T</name> <operator>*</operator><operator>)</operator><name><name>si</name><operator>-&gt;</operator><name>sn_var_vals</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_var_vals</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>sv_name</name></name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>di_key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>sv_tv</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>sv_type</name></name> <operator>=</operator> <ternary><condition><expr><name>type</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>t_any</name></expr> </then><else>: <expr><name>type</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>sv_const</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LET_IS_CONST</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sv</name><operator>-&gt;</operator><name>sv_export</name></name> <operator>=</operator> <name>is_export</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>si</name><operator>-&gt;</operator><name>sn_var_vals</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>is_export</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name> <operator>=</operator> <operator>*</operator><name>tv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LET_IS_CONST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>|=</operator> <name>VAR_LOCKED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>var_check_ro</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_gettext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DI_FLAGS_RO</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_readonlyvar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>use_gettext</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DI_FLAGS_RO_SBX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>sandbox</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_readonlysbx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>use_gettext</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>var_check_fixed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_gettext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DI_FLAGS_FIX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E795: Cannot delete variable %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>use_gettext</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>var_check_func_name</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>new_var</name></decl></parameter>)</parameter_list> 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"wbst"</literal></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ASCII_ISUPPER</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr>
?</condition><then> <expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E704: Funcref variable name must start with a capital: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>new_var</name> <operator>&amp;&amp;</operator> <call><name>function_exists</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E705: Variable name conflicts with existing function: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>var_check_lock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_gettext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lock</name> <operator>&amp;</operator> <name>VAR_LOCKED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E741: Value is locked: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>name</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><ternary><condition><expr><name>use_gettext</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>name</name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lock</name> <operator>&amp;</operator> <name>VAR_FIXED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E742: Cannot change value of %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>name</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><ternary><condition><expr><name>use_gettext</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>name</name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>valid_varname</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>varname</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_isnamec1</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>==</operator> <name>varname</name> <operator>||</operator> <operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>AUTOLOAD_CHAR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_illvar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>getwinvar</name><parameter_list>(
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>oldcurwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>oldtabpage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_switch_win</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>find_win_by_nr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>varname</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>need_switch_win</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>tp</name> <operator>==</operator> <name>curtab</name> <operator>&amp;&amp;</operator> <name>win</name> <operator>==</operator> <name>curwin</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_switch_win</name>
<operator>||</operator> <call><name>switch_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldcurwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtabpage</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>varname</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>varname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>get_winbuf_options</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rettv_dict_set</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>get_option_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>,
<argument><expr><name>varname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_switch_win</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>restore_win</name><argument_list>(<argument><expr><name>oldcurwin</name></expr></argument>, <argument><expr><name>oldtabpage</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>setwinvar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>save_curtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_switch_win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>winvarname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>nbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>find_win_by_nr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>varname</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>need_switch_win</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>tp</name> <operator>==</operator> <name>curtab</name> <operator>&amp;&amp;</operator> <name>win</name> <operator>==</operator> <name>curwin</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_switch_win</name>
<operator>||</operator> <call><name>switch_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>varname</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>numval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>strval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>varname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numval</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>varp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strval</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>varp</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <name>strval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><name>numval</name></expr></argument>, <argument><expr><name>strval</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>winvarname</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>winvarname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>winvarname</name></expr></argument>, <argument><expr><literal type="string">"w:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>winvarname</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_var</name><argument_list>(<argument><expr><name>winvarname</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>winvarname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>need_switch_win</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>restore_win</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>reset_v_option_vars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_NEW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDLOCAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDGLOBAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_COMMAND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>assert_error</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vimvar</name></name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><operator>&amp;</operator><name><name>vimvars</name><index>[<expr><name>VV_ERRORS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vv_type</name></name> <operator>!=</operator> <name>VAR_LIST</name> <operator>||</operator> <name><name>vimvars</name><index>[<expr><name>VV_ERRORS</name></expr>]</index></name><operator>.</operator><name>vv_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_vim_var_list</name><argument_list>(<argument><expr><name>VV_ERRORS</name></expr></argument>, <argument><expr><call><name>list_alloc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>vimvars</name><index>[<expr><name>VV_ERRORS</name></expr>]</index></name><operator>.</operator><name>vv_list</name></expr></argument>, <argument><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>var_exists</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>name</name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_name_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tofree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>tofree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><call><name>get_var_tv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><call><name>handle_subscript</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>var</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>lval_T</name> <modifier>*</modifier></type><name>redir_lval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVALCMD_BUSY</name></cpp:macro> <cpp:value>(redir_lval == (lval_T *)&amp;redir_lval)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>redir_ga</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>redir_endp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>redir_varname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>






<function><type><name>int</name></type>
<name>var_redir_start</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>append</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_emsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_isnamec1</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>redir_varname</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>redir_varname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>redir_lval</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>lval_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>redir_lval</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_redir_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redir_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>redir_endp</name> <operator>=</operator> <call><name>get_lval</name><argument_list>(<argument><expr><name>redir_varname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>redir_lval</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>redir_endp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>redir_lval</name><operator>-&gt;</operator><name>ll_name</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>redir_endp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>redir_endp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>redir_endp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>redir_endp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_redir_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>save_emsg</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>append</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_var_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>, <argument><expr><name>redir_endp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_var_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>, <argument><expr><name>redir_endp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>|=</operator> <name>save_emsg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>redir_endp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_redir_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>void</name></type>
<name>var_redir_str</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>redir_lval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value_len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>value_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redir_ga</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>redir_ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>redir_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redir_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_redir_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>var_redir_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>EVALCMD_BUSY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>redir_lval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redir_lval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>redir_endp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redir_ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name><name>redir_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>redir_endp</name> <operator>=</operator> <call><name>get_lval</name><argument_list>(<argument><expr><name>redir_varname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>redir_lval</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>redir_endp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>redir_lval</name><operator>-&gt;</operator><name>ll_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_var_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>, <argument><expr><name>redir_endp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>redir_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>redir_lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>redir_varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_gettabvar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>oldcurwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldtabpage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>varname</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>switch_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldcurwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtabpage</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>tp</name> <operator>==</operator> <name>curtab</name> <operator>||</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>firstwin</name></expr>
</then><else>: <expr><name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>tp_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>restore_win</name><argument_list>(<argument><expr><name>oldcurwin</name></expr></argument>, <argument><expr><name>oldtabpage</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_gettabwinvar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>getwinvar</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_getwinvar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>getwinvar</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_getbufvar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>varname</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tv_get_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>varname</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>save_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>varname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>get_winbuf_options</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rettv_dict_set</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>get_option_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>save_curbuf</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_var_in_ht</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_settabvar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>save_curtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tabvarname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>varname</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>save_curtab</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tabvarname</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tabvarname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>tabvarname</name></expr></argument>, <argument><expr><literal type="string">"t:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>tabvarname</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_var</name><argument_list>(<argument><expr><name>tabvarname</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tabvarname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>valid_tabpage</name><argument_list>(<argument><expr><name>save_curtab</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_settabwinvar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>setwinvar</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_setwinvar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>setwinvar</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_setbufvar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bufvarname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>nbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>varname</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tv_get_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>varname</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>numval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>strval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>varname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numval</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>varp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strval</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>varp</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <name>strval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><name>numval</name></expr></argument>, <argument><expr><name>strval</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>bufvarname</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bufvarname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>save_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>bufvarname</name></expr></argument>, <argument><expr><literal type="string">"b:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>bufvarname</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_var</name><argument_list>(<argument><expr><name>bufvarname</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>bufvarname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>save_curbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>callback_T</name></type>
<name>get_callback</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>callback_T</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>cb_free_name</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name> <operator>&amp;&amp;</operator> <name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>cb_partial</name></name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>res</name><operator>.</operator><name>cb_partial</name><operator>-&gt;</operator><name>pt_refcount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>cb_name</name></name> <operator>=</operator> <call><name>partial_name</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>cb_partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>cb_partial</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name> <operator>&amp;&amp;</operator> <name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name> <operator>||</operator> <name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>cb_name</name></name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name> <operator>&amp;&amp;</operator> <name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>cb_name</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E921: Invalid callback argument"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>cb_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>put_callback</name><parameter_list>(<parameter><decl><type><name>callback_T</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>cb_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>cb_partial</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_refcount</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FUNC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>set_callback</name><parameter_list>(<parameter><decl><type><name>callback_T</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>callback_T</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>cb_partial</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>cb_name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>cb_free_name</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>cb_name</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>cb_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>cb_free_name</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>cb_partial</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>cb_partial</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>free_callback</name><parameter_list>(<parameter><decl><type><name>callback_T</name> <modifier>*</modifier></type><name>callback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callback</name><operator>-&gt;</operator><name>cb_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>partial_unref</name><argument_list>(<argument><expr><name><name>callback</name><operator>-&gt;</operator><name>cb_partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callback</name><operator>-&gt;</operator><name>cb_partial</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>callback</name><operator>-&gt;</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>func_unref</name><argument_list>(<argument><expr><name><name>callback</name><operator>-&gt;</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>callback</name><operator>-&gt;</operator><name>cb_free_name</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>callback</name><operator>-&gt;</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callback</name><operator>-&gt;</operator><name>cb_free_name</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>callback</name><operator>-&gt;</operator><name>cb_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
