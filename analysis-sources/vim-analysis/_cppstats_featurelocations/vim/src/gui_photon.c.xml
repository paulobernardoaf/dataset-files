<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\gui_photon.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;photon/PxImage.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PgColor_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PhEvent_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PhPoint_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PtWidget_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pg_BLACK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PtCallbackF_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PtCallbackInfo_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PhTile_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PtWidget_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PhImage_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_LENGTH</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a) / sizeof(a[0]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PgRGB(r, g, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_BUFFER_SIZE</name></cpp:macro> <cpp:value>sizeof(PhEvent_t) + 1000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_HIDE</name></cpp:macro> <cpp:value>TRUE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_SHOW</name></cpp:macro> <cpp:value>FALSE</cpp:value></cpp:define>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_PANEL_GROUP</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>empty_title</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>panel_titles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ushort_t</name></type> <name>num_panels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name>pg_margin_left</name></decl>, <decl><type ref="prev"/><name>pg_margin_right</name></decl>, <decl><type ref="prev"/><name>pg_margin_top</name></decl>, <decl><type ref="prev"/><name>pg_margin_bottom</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_PH_MARGIN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_PH_MOUSE_TYPE</name></cpp:macro> <cpp:value>Ph_CURSOR_INSERT</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PgColor_t</name></type> <name>gui_ph_mouse_color</name> <init>= <expr><name>Pg_BLACK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PhPoint_t</name></type> <name>gui_ph_raw_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PtWidget_t</name> <modifier>*</modifier></type><name>gui_ph_timer_cursor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>PtWidget_t</name> <modifier>*</modifier></type><name>gui_ph_timer_timeout</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name>is_timeout</name></decl>;</decl_stmt> 





<decl_stmt><decl><type><specifier>static</specifier> <name>PhPoint_t</name></type> <name>abs_mouse</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>is_ignore_draw</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PxTransCtrl</name></name> <modifier>*</modifier></type><name>charset_translate</name></decl>;</decl_stmt>









<enum><specifier>static</specifier> enum <block>{
<decl><name>BLINK_NONE</name></decl>,
<decl><name>BLINK_OFF</name></decl>,
<decl><name>BLINK_ON</name></decl>
}</block> <decl><name>blink_state</name> <init>= <expr><name>BLINK_NONE</name></expr></init></decl>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_waittime</name> <init>= <expr><literal type="number">700</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_ontime</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_offtime</name> <init>= <expr><literal type="number">250</literal></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>key_sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name>vim_code0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name>vim_code1</name></decl>;</decl_stmt>
}</block> <decl><name><name>special_keys</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><name>Pk_Up</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'u'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_Down</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_Left</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_Right</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'r'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Pk_F1</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F2</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'2'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F3</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F4</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F5</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F6</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F7</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F8</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F9</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F10</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">';'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Pk_F11</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F12</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'2'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F13</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F14</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F15</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F16</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F17</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F18</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F19</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F20</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'A'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Pk_F21</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'B'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F22</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'C'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F23</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F24</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'E'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F25</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'F'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F26</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F27</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'H'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F28</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'I'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F29</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'J'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Pk_F30</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'K'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F31</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'L'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F32</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'M'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F33</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'N'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F34</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'O'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_F35</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Pk_Help</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_BackSpace</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'b'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_Insert</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'I'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_Delete</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_Home</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_End</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_Prior</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_Next</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'N'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_Print</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Pk_KP_Add</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_KP_Subtract</name></expr>,<expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_KP_Divide</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_KP_Multiply</name></expr>,<expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_KP_Enter</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'A'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Pk_KP_0</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><name>KE_KINS</name></expr>}</block></expr>, 
<expr><block>{<expr><name>Pk_KP_Decimal</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><name>KE_KDEL</name></expr>}</block></expr>, 

<expr><block>{<expr><name>Pk_KP_4</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>}</block></expr>, 
<expr><block>{<expr><name>Pk_KP_6</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'r'</literal></expr>}</block></expr>, 
<expr><block>{<expr><name>Pk_KP_8</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'u'</literal></expr>}</block></expr>, 
<expr><block>{<expr><name>Pk_KP_2</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>Pk_KP_7</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>, 
<expr><block>{<expr><name>Pk_KP_1</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>Pk_KP_9</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>, 
<expr><block>{<expr><name>Pk_KP_3</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>Pk_KP_5</name></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>, 


<expr><block>{<expr><name>Pk_Return</name></expr>, <expr><name>CAR</name></expr>, <expr><name>NUL</name></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_space</name></expr>, <expr><literal type="char">' '</literal></expr>, <expr><name>NUL</name></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_Tab</name></expr>, <expr><name>TAB</name></expr>, <expr><name>NUL</name></expr>}</block></expr>,
<expr><block>{<expr><name>Pk_Escape</name></expr>, <expr><name>ESC</name></expr>, <expr><name>NUL</name></expr>}</block></expr>,
<expr><block>{<expr><name>NL</name></expr>, <expr><name>NL</name></expr>, <expr><name>NUL</name></expr>}</block></expr>,
<expr><block>{<expr><name>CAR</name></expr>, <expr><name>CAR</name></expr>, <expr><name>NUL</name></expr>}</block></expr>,


<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>




<decl_stmt><decl><type><specifier>static</specifier> <name>PtCallbackF_t</name></type> <name>gui_ph_handle_timer_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PtCallbackF_t</name></type> <name>gui_ph_handle_timer_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PtCallbackF_t</name></type> <name>gui_ph_handle_window_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PtCallbackF_t</name></type> <name>gui_ph_handle_scrollbar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PtCallbackF_t</name></type> <name>gui_ph_handle_keyboard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PtCallbackF_t</name></type> <name>gui_ph_handle_mouse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PtCallbackF_t</name></type> <name>gui_ph_handle_pulldown_menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PtCallbackF_t</name></type> <name>gui_ph_handle_menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PtCallbackF_t</name></type> <name>gui_ph_handle_focus</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>PtCallbackF_t</name></type> <name>gui_ph_handle_menu_resize</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>PtCallbackF_t</name></type> <name>gui_ph_handle_menu_unrealized</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_ph_get_panelgroup_margins</name><parameter_list>(<parameter><decl><type><name>short</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>short</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_ph_draw_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_ph_draw_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>PtWidget_t</name> <modifier>*</modifier></type> <name>gui_ph_show_tooltip</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>font</name></decl></parameter>,
<parameter><decl><type><name>PgColor_t</name></type> <name>fill_color</name></decl></parameter>,
<parameter><decl><type><name>PgColor_t</name></type> <name>text_color</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><specifier>static</specifier> <name>PtWidget_t</name> <modifier>*</modifier></type> <name>gui_ph_show_tooltip</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>font</name></decl></parameter>,
<parameter><decl><type><name>PgColor_t</name></type> <name>fill_color</name></decl></parameter>,
<parameter><decl><type><name>PgColor_t</name></type> <name>text_color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PtArg_t</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tooltip</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>Pt_ARG_POINTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtGetResources</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>tooltip</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>MENU_INDEX_TIP</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[ <expr><name>index</name></expr> ]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tooltip</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[ <expr><name>index</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>PtInflateBalloon</name><argument_list>(
<argument><expr><name>window</name></expr></argument>,
<argument><expr><name>widget</name></expr></argument>,


<argument><expr><name>Pt_BALLOON_TOP</name></expr></argument>,
<argument><expr><name>tooltip</name></expr></argument>,
<argument><expr><name>font</name></expr></argument>,
<argument><expr><name>fill_color</name></expr></argument>,
<argument><expr><name>text_color</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gui_ph_resize_container</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhArea_t</name></type> <name>area</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PtWidgetArea</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtWidgetPos</name> <argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimContainer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>area</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimContainer</name></name></expr></argument>, <argument><expr><name>Pt_ARG_AREA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_menu_resize</name><parameter_list>(
<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>other</name></decl></parameter>,
<parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PtContainerCallback_t</name> <modifier>*</modifier></type><name>sizes</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>cbdata</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>container</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhPoint_t</name></type> <name>below_menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_u</name></type> <name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>sizes</name><operator>-&gt;</operator><name>new_dim</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>below_menu</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>below_menu</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>container</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>container</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>vimContainer</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>Pt_ARG_POS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>below_menu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_ph_resize_container</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_ph_get_panelgroup_margins</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>pg_margin_top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pg_margin_bottom</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pg_margin_left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pg_margin_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_timer_cursor</name><parameter_list>(
<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>==</operator> <name>BLINK_ON</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_undraw_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name>gui_ph_timer_cursor</name></expr></argument>, <argument><expr><name>Pt_ARG_TIMER_INITIAL</name></expr></argument>,
<argument><expr><name>blink_offtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_ON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name>gui_ph_timer_cursor</name></expr></argument>, <argument><expr><name>Pt_ARG_TIMER_INITIAL</name></expr></argument>,
<argument><expr><name>blink_ontime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_timer_timeout</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>is_timeout</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_window_cb</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhWindowEvent_t</name> <modifier>*</modifier></type><name>we</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>cbdata</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name> <modifier>*</modifier></type><name>width</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>height</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>we</name><operator>-&gt;</operator><name>event_f</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Ph_WM_CLOSE</name></expr>:</case>
<expr_stmt><expr><call><name>gui_shell_closed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Ph_WM_FOCUS</name></expr>:</case>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>MOUSE_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>we</name><operator>-&gt;</operator><name>event_state</name></name> <operator>==</operator> <name>Ph_WM_EVSTATE_FOCUS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_start_blink</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_stop_blink</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>Ph_WM_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>PtGetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>Pt_ARG_WIDTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtGetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>Pt_ARG_HEIGHT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>width</name> <operator>-=</operator> <operator>(</operator><name>pg_margin_left</name> <operator>+</operator> <name>pg_margin_right</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>-=</operator> <operator>(</operator><name>pg_margin_top</name> <operator>+</operator> <name>pg_margin_bottom</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><operator>*</operator><name>width</name></expr></argument>, <argument><expr><operator>*</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_ignore_draw</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtEndFlux</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimContainer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtContainerRelease</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimContainer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_scrollbar</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PtScrollbarCallback_t</name> <modifier>*</modifier></type><name>scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>dragging</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>scroll</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>cbdata</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <operator>(</operator><name>scrollbar_T</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>scroll</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>scroll</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>Pt_SCROLL_DRAGGED</name></expr>:</case>
<expr_stmt><expr><name>dragging</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Pt_SCROLL_SET</name></expr>:</case>

<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>gui_drag_scrollbar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>dragging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_keyboard</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhKeyEvent_t</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>string</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>modifiers</name></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>PhGetData</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>modifiers</name> <operator>=</operator> <name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_mh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>MOUSE_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>key_flags</name></name> <operator>&amp;</operator> <name>Pk_KF_Compose</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>key_flags</name></name> <operator>&amp;</operator> <name>Pk_KF_Cap_Valid</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>PkIsKeyDown</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key_flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>key_mods</name></name> <operator>&amp;</operator> <name>Pk_KM_Alt</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>key_mods</name></name> <operator>&amp;</operator> <name>Pk_KM_Shift</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>key_mods</name></name> <operator>&amp;</operator> <name>Pk_KM_Ctrl</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>gui</name><operator>.</operator><name>menu_is_active</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>p_wak</name> <operator>==</operator> <literal type="char">'y'</literal> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>p_wak</name> <operator>==</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator>
<call><name>gui_is_menu_shortcut</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key_cap</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>

<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>key_cap</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>key_cap</name></name> <operator>&gt;=</operator> <name>Pk_KP_Enter</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>key_cap</name></name> <operator>&lt;=</operator> <name>Pk_KP_9</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>key_mods</name></name> <operator>&amp;</operator> <name>Pk_KM_Num_Lock</name><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>key_cap</name></name> <operator>-</operator> <literal type="number">0xf080</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name></expr></argument>,
<argument><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>key_mods</name></name> <operator>&amp;</operator> <name>Pk_KM_Ctrl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>key_mods</name></name> <operator>&amp;</operator> <name>Pk_KM_Alt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>key_mods</name></name> <operator>&amp;</operator> <name>Pk_KM_Shift</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>PhTo8859_1</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>PhKeyToMb</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_taken</name></decl>, <decl><type ref="prev"/><name>dst_made</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>!=</operator> <name>TRUE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PxTranslateFromUTF</name><argument_list>(
<argument><expr><name>charset_translate</name></expr></argument>,
<argument><expr><name>string</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>src_taken</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>,
<argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dst_made</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dst_made</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>Pt_CONSUME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>key_cap</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0xff</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>modifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_CTRL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator>
<name>ch</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator>
<name>ch</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator>
<name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>Ctrl_chr</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'2'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'6'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0x1e</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_ALT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>Meta</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>modifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_ALT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>simplify_key</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>modifiers</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>string</name><index>[ <expr><name>len</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[ <expr><name>len</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[ <expr><name>len</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>string</name><index>[ <expr><name>len</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[ <expr><name>len</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[ <expr><name>len</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>string</name><index>[ <expr><name>len</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>==</operator> <name>Ctrl_C</name> <operator>&amp;&amp;</operator> <name>ctrl_c_interrupts</name><operator>)</operator>
<operator>||</operator> <name>ch</name> <operator>==</operator> <name>intr_char</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>trash_input_buf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[ <expr><name>len</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[ <expr><name>len</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>KE_CSI</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Pt_CONSUME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_mouse</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhPointerEvent_t</name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhRect_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>button</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>repeated_click</name></decl>, <decl><type ref="prev"/><name>modifiers</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>mouse_x</name></decl>, <decl><type ref="prev"/><name>mouse_y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pointer</name> <operator>=</operator> <call><name>PhGetData</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>PhGetRects</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>MOUSE_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>mouse_x</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_y</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Ph_EV_PTR_MOTION_NOBUTTON</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_mouse_moved</name><argument_list>(<argument><expr><name>mouse_x</name></expr></argument>, <argument><expr><name>mouse_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pointer</name><operator>-&gt;</operator><name>key_mods</name></name> <operator>&amp;</operator> <name>Pk_KM_Shift</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pointer</name><operator>-&gt;</operator><name>key_mods</name></name> <operator>&amp;</operator> <name>Pk_KM_Ctrl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pointer</name><operator>-&gt;</operator><name>key_mods</name></name> <operator>&amp;</operator> <name>Pk_KM_Alt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOUSE_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>pointer</name><operator>-&gt;</operator><name>buttons</name></name> <operator>&amp;</operator> <name>Ph_BUTTON_SELECT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pointer</name><operator>-&gt;</operator><name>buttons</name></name> <operator>&amp;</operator> <name>Ph_BUTTON_MENU</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>abs_mouse</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>pointer</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>abs_mouse</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>pointer</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pointer</name><operator>-&gt;</operator><name>buttons</name></name> <operator>&amp;</operator> <name>Ph_BUTTON_ADJUST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Ph_EV_BUT_RELEASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_RELEASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>Ph_EV_PTR_MOTION_BUTTON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_DRAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (info-&gt;event-&gt;type &amp; Ph_EV_BUT_REPEAT)
button = MOUSE_DRAG;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>button</name> <operator>!=</operator> <name>MOUSE_RELEASE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>event</name><operator>-&gt;</operator><name>subtype</name></name> <operator>==</operator> <name>Ph_EV_RELEASE_REAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>repeated_click</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pointer</name><operator>-&gt;</operator><name>click_count</name></name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>button</name></expr></argument> , <argument><expr><name>mouse_x</name></expr></argument>, <argument><expr><name>mouse_y</name></expr></argument>, <argument><expr><name>repeated_click</name></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_focus</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>reason</name></name> <operator>==</operator> <name>Pt_CB_LOST_FOCUS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtRemoveEventHandler</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>Ph_EV_PTR_MOTION_NOBUTTON</name></expr></argument>,
<argument><expr><name>gui_ph_handle_mouse</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>MOUSE_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>PtAddEventHandler</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>Ph_EV_PTR_MOTION_NOBUTTON</name></expr></argument>,
<argument><expr><name>gui_ph_handle_mouse</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gui_ph_handle_raw_draw</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>PhTile_t</name> <modifier>*</modifier></type><name>damage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhRect_t</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhPoint_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhPoint_t</name></type> <name>translation</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_ignore_draw</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PtSuperClassDraw</name><argument_list>(<argument><expr><name>PtBasic</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>damage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgGetTranslation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>translation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgClearTranslation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>








out_flush();
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>PtWidgetOffset</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PhTranslatePoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><call><name>PtWidgetPos</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>damage</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>damage</name> <operator>=</operator> <name><name>damage</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>damage</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>&amp;</operator><name><name>damage</name><operator>-&gt;</operator><name>rect</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_redraw</name><argument_list>(
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>lr</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>damage</name> <operator>=</operator> <name><name>damage</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>&amp;</operator><name><name>damage</name><operator>-&gt;</operator><name>rect</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_redraw</name><argument_list>(
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>lr</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>PgSetTranslation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>translation</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_pulldown_menu</name><parameter_list>(
<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><operator>(</operator><name>vimmenu_T</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PtPositionMenu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtRealizeWidget</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_menu</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><operator>(</operator><name>vimmenu_T</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gui_menu_cb</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_menu_unrealized</name><parameter_list>(
<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PtGiveFocus</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_window_open</name><parameter_list>(
<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_START</name></cpp:macro> <cpp:value>gui_ph_draw_start()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_END</name></cpp:macro> <cpp:value>gui_ph_draw_end()</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>gui_ph_draw_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhGC_t</name> <modifier>*</modifier></type><name>gc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>PgGetGC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgSetRegion</name><argument_list>(<argument><expr><call><name>PtWidgetRid</name><argument_list>(<argument><expr><call><name>PtFindDisjoint</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgClearClippingsCx</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgClearTranslationCx</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtWidgetOffset</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gui_ph_raw_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PhTranslatePoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gui_ph_raw_offset</name></expr></argument>, <argument><expr><call><name>PtWidgetPos</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PgSetTranslation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gui_ph_raw_offset</name></expr></argument>, <argument><expr><name>Pg_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gui_ph_draw_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>gui_ph_raw_offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name><name>gui_ph_raw_offset</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui_ph_raw_offset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>gui_ph_raw_offset</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgSetTranslation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gui_ph_raw_offset</name></expr></argument>, <argument><expr><name>Pg_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type>
<name>gui_ph_find_buffer_item</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>top_level</name> <init>= <expr><name>root_menu</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>items</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>top_level</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>top_level</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><literal type="string">"Buffers"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top_level</name> <operator>=</operator> <name><name>top_level</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>top_level</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>items</name> <operator>=</operator> <name><name>top_level</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>items</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>items</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>items</name> <operator>=</operator> <name><name>items</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>items</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gui_ph_pg_set_buffer_num</name><parameter_list>(<parameter><decl><type><name>int_u</name></type> <name>buf_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>search</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mark</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf_num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>search</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'('</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ultoa</name><argument_list>(<argument><expr><name>buf_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>search</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>search</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_panels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>STRRCHR</name><argument_list>(<argument><expr><name><name>panel_titles</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mark</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><name>search</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name></expr></argument>, <argument><expr><name>Pt_ARG_PG_CURRENT_INDEX</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_pg_change</name><parameter_list>(
<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PtPanelGroupCallback_t</name> <modifier>*</modifier></type><name>panel</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>event</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>panel</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>cbdata</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>panel</name><operator>-&gt;</operator><name>new_panel</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>gui_ph_find_buffer_item</name><argument_list>(<argument><expr><name><name>panel</name><operator>-&gt;</operator><name>new_panel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>menu</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_menu_cb</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gui_ph_get_panelgroup_margins</name><parameter_list>(
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>bottom</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>left</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>abs_raw_x</name></decl>, <decl><type ref="prev"/><name>abs_raw_y</name></decl>, <decl><type ref="prev"/><name>abs_panel_x</name></decl>, <decl><type ref="prev"/><name>abs_panel_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>margin_top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>margin_bottom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>margin_left</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>margin_right</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PtGetAbsPosition</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs_raw_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs_raw_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtGetAbsPosition</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs_panel_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs_panel_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtGetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name></expr></argument>, <argument><expr><name>Pt_ARG_MARGIN_RIGHT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>margin_right</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtGetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name></expr></argument>, <argument><expr><name>Pt_ARG_MARGIN_BOTTOM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>margin_bottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_raw_x</name> <operator>-=</operator> <name>abs_panel_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>abs_raw_y</name> <operator>-=</operator> <name>abs_panel_y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>top</name> <operator>=</operator> <name>abs_raw_y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bottom</name> <operator>=</operator> <operator>*</operator><name>margin_bottom</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name>abs_raw_x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <operator>*</operator><name>margin_right</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_is_buffer_item</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mark</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><literal type="string">"Buffers"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mark</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mark</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>mark</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mark</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mark</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gui_ph_pg_add_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_titles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>new_titles</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>num_panels</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_titles</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num_panels</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_titles</name></expr></argument>, <argument><expr><name>panel_titles</name></expr></argument>, <argument><expr><name>num_panels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new_titles</name><index>[ <expr><name>num_panels</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name></expr></argument>, <argument><expr><name>Pt_ARG_PG_PANEL_TITLES</name></expr></argument>, <argument><expr><name>new_titles</name></expr></argument>,
<argument><expr><name>num_panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>panel_titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>panel_titles</name> <operator>=</operator> <name>new_titles</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gui_ph_pg_remove_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_titles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>num_panels</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_titles</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>num_panels</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_titles</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name> <init>= <expr><name>new_titles</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_panels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>panel_titles</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name><name>panel_titles</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num_panels</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name></expr></argument>, <argument><expr><name>Pt_ARG_PG_PANEL_TITLES</name></expr></argument>, <argument><expr><name>new_titles</name></expr></argument>,
<argument><expr><name>num_panels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>panel_titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>panel_titles</name> <operator>=</operator> <name>new_titles</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>num_panels</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name></expr></argument>, <argument><expr><name>Pt_ARG_PG_PANEL_TITLES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty_title</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>panel_titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_handle_buffer_remove</name><parameter_list>(
<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>(</operator><name>vimmenu_T</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_ph_pg_remove_buffer</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_pane_resize</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>PtWidgetIsRealized</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>is_ignore_draw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtStartFlux</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimContainer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtContainerHold</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimContainer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>gui_ph_encoding_changed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>new_encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><literal type="string">"latin1"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>charsets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>DBCS_JPN</name></expr>, <expr><literal type="string">"SHIFT_JIS"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DBCS_KOR</name></expr>, <expr><literal type="string">"csEUCKR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DBCS_CHT</name></expr>, <expr><literal type="string">"big5"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DBCS_CHS</name></expr>, <expr><literal type="string">"gb"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_LENGTH</name><argument_list>(<argument><expr><name>charsets</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_encoding</name> <operator>==</operator> <name><name>charsets</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>encoding</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>charset</name> <operator>=</operator> <name><name>charsets</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>charset_translate</name> <operator>=</operator> <call><name>PxTranslateSet</name><argument_list>(<argument><expr><name>charset_translate</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>gui_mch_prepare</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PtInit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gui_mch_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PtArg_t</name></type> <name><name>args</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PhDim_t</name></type> <name>window_size</name> <init>= <expr><block>{<expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PhPoint_t</name></type> <name>pos</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>event_buffer</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>EVENT_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>event_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>charset_translate</name> <operator>=</operator> <call><name>PxTranslateSet</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"latin1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name> <operator>=</operator> <name>GUI_PH_MARGIN</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_WINDOW_MANAGED_FLAGS</name></expr></argument>, <argument><expr><name>Pt_FALSE</name></expr></argument>, <argument><expr><name>Ph_WM_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_WINDOW_NOTIFY_FLAGS</name></expr></argument>, <argument><expr><name>Pt_TRUE</name></expr></argument>,
<argument><expr><name>Ph_WM_CLOSE</name> <operator>|</operator> <name>Ph_WM_RESIZE</name> <operator>|</operator> <name>Ph_WM_FOCUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_DIM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtWindow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>Pt_CB_WINDOW</name></expr></argument>, <argument><expr><name>gui_ph_handle_window_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>Pt_CB_WINDOW_OPENING</name></expr></argument>,
<argument><expr><name>gui_ph_handle_window_open</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_ANCHOR_FLAGS</name></expr></argument>, <argument><expr><name>Pt_ANCHOR_ALL</name></expr></argument>, <argument><expr><name>Pt_IS_ANCHORED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_DIM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_POS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_PG_PANEL_TITLES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty_title</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtPanelGroup</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name></expr></argument>, <argument><expr><name>Pt_CB_PG_PANEL_SWITCHING</name></expr></argument>,
<argument><expr><name>gui_ph_handle_pg_change</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_BASIC_FLAGS</name></expr></argument>, <argument><expr><name>Pt_FALSE</name></expr></argument>, <argument><expr><name>Pt_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_BEVEL_WIDTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_MARGIN_WIDTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_MARGIN_HEIGHT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_CONTAINER_FLAGS</name></expr></argument>, <argument><expr><name>Pt_TRUE</name></expr></argument>, <argument><expr><name>Pt_AUTO_EXTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>vimContainer</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtPane</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>vimContainer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimContainer</name></name></expr></argument>, <argument><expr><name>Pt_CB_RESIZE</name></expr></argument>, <argument><expr><name>gui_ph_pane_resize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_RAW_DRAW_F</name></expr></argument>, <argument><expr><name>gui_ph_handle_raw_draw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_BEVEL_WIDTH</name></expr></argument>, <argument><expr><name>GUI_PH_MARGIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_FLAGS</name></expr></argument>, <argument><expr><name>Pt_TRUE</name></expr></argument>,
<argument><expr><name>Pt_GETS_FOCUS</name> <operator>|</operator> <name>Pt_HIGHLIGHTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_CURSOR_TYPE</name></expr></argument>, <argument><expr><name>GUI_PH_MOUSE_TYPE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_CURSOR_COLOR</name></expr></argument>, <argument><expr><name>gui_ph_mouse_color</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtRaw</name></expr></argument>, <argument><expr><name>Pt_DFLT_PARENT</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>PtAddEventHandler</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>,
<argument><expr><name>Ph_EV_BUT_PRESS</name> <operator>|</operator> <name>Ph_EV_BUT_RELEASE</name> <operator>|</operator> <name>Ph_EV_PTR_MOTION_BUTTON</name></expr></argument>,
<argument><expr><name>gui_ph_handle_mouse</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtAddEventHandler</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>Ph_EV_KEY</name></expr></argument>,
<argument><expr><name>gui_ph_handle_keyboard</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>Pt_CB_GOT_FOCUS</name></expr></argument>,
<argument><expr><name>gui_ph_handle_focus</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>Pt_CB_LOST_FOCUS</name></expr></argument>,
<argument><expr><name>gui_ph_handle_focus</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>gui_ph_timer_cursor</name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtTimer</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gui_ph_timer_cursor</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gui_ph_timer_timeout</name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtTimer</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gui_ph_timer_timeout</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name>gui_ph_timer_cursor</name></expr></argument>, <argument><expr><name>Pt_CB_TIMER_ACTIVATE</name></expr></argument>,
<argument><expr><name>gui_ph_handle_timer_cursor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name>gui_ph_timer_timeout</name></expr></argument>, <argument><expr><name>Pt_CB_TIMER_ACTIVATE</name></expr></argument>,
<argument><expr><name>gui_ph_handle_timer_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_WIDTH</name></expr></argument>, <argument><expr><name><name>window_size</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_ANCHOR_FLAGS</name></expr></argument>, <argument><expr><name>Pt_ANCHOR_LEFT_RIGHT</name></expr></argument>,
<argument><expr><name>Pt_IS_ANCHORED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>vimToolBarGroup</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtToolbarGroup</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>vimToolBarGroup</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimToolBarGroup</name></name></expr></argument>, <argument><expr><name>Pt_CB_RESIZE</name></expr></argument>,
<argument><expr><name>gui_ph_handle_menu_resize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_WIDTH</name></expr></argument>, <argument><expr><name><name>window_size</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_MENUS</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>Pt_DELAY_REALIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_FLAGS</name></expr></argument>, <argument><expr><name>Pt_TRUE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>vimMenuBar</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtMenuBar</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimToolBarGroup</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>vimMenuBar</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_ANCHOR_FLAGS</name></expr></argument>,
<argument><expr><name>Pt_ANCHOR_LEFT_RIGHT</name> <operator>|</operator><name>Pt_TOP_ANCHORED_TOP</name></expr></argument>, <argument><expr><name>Pt_IS_ANCHORED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_RESIZE_FLAGS</name></expr></argument>, <argument><expr><name>Pt_TRUE</name></expr></argument>,
<argument><expr><name>Pt_RESIZE_Y_AS_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_WIDTH</name></expr></argument>, <argument><expr><name><name>window_size</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>Pt_GETS_FOCUS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>Pt_DELAY_REALIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_FLAGS</name></expr></argument>, <argument><expr><name>Pt_DELAY_REALIZE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>vimToolBar</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtToolbar</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimToolBarGroup</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>vimToolBar</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gui_mch_init_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>is_photon_available</name> <operator>==</operator> <name>TRUE</name><operator>)</operator></expr> ?</condition><then> <expr><name>OK</name></expr> </then><else>: <expr><name>FAIL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gui_mch_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>=</operator> <name>Pg_BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>=</operator> <name>Pg_WHITE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_normal_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_check_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>highlight_gui_started</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gui_win_x</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>gui_win_y</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_set_winpos</name><argument_list>(<argument><expr><name>gui_win_x</name></expr></argument>, <argument><expr><name>gui_win_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>PtRealizeWidget</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>OK</name></expr> </then><else>: <expr><name>FAIL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PtDestroyWidget</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PxTranslateSet</name><argument_list>(<argument><expr><name>charset_translate</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>event_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>panel_titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>exit_gui_mch_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>Pt_END</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>working</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PtAppAddWorkProc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>exit_gui_mch_update</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>working</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>working</name> <operator>==</operator> <name>TRUE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_is_input_buf_full</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtProcessEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gui_mch_wait_for_chars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>wtime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>is_timeout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wtime</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name>gui_ph_timer_timeout</name></expr></argument>, <argument><expr><name>Pt_ARG_TIMER_INITIAL</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>wtime</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>wtime</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtProcessEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>input_available</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name>gui_ph_timer_timeout</name></expr></argument>, <argument><expr><name>Pt_ARG_TIMER_INITIAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>is_timeout</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>










<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>gui_mch_browse</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>saving</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>default_name</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>initdir</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PtFileSelectionInfo_t</name></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>default_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>open_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>default_path</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>MAXPATHL</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>NAME_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>default_path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>saving</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>Pt_FSR_NO_FCHECK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>open_text</name> <operator>=</operator> <literal type="string">"&amp;Save"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>initdir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>initdir</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>default_path</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initdir</name> <operator>=</operator> <name>default_path</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>default_path</name></expr></argument>, <argument><expr><name>initdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initdir</name> <operator>=</operator> <name>default_path</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>default_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>default_path</name><index>[ <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>default_path</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>default_path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>default_path</name></expr></argument>, <argument><expr><name>default_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>PtFileSelection</name><argument_list>(
<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>title</name></expr></argument>,
<argument><expr><name>default_path</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>open_text</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>default_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>ret</name></name> <operator>==</operator> <name>Pt_FSDIALOG_BTN1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>PtWidget_t</name> <modifier>*</modifier></type><name>gui_ph_dialog_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_dialog_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PtModalCtrl_t</name> <modifier>*</modifier></type><name>modal_ctrl</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dialog_text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vim_text</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gui_ph_dialog_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtGetResource</name><argument_list>(<argument><expr><name>gui_ph_dialog_text</name></expr></argument>, <argument><expr><name>Pt_ARG_TEXT_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dialog_text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtGetResource</name><argument_list>(<argument><expr><name>gui_ph_dialog_text</name></expr></argument>, <argument><expr><name>Pt_ARG_POINTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vim_text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>vim_text</name></expr></argument>, <argument><expr><name>dialog_text</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PtModalUnblock</name><argument_list>(<argument><expr><name>modal_ctrl</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Pt_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_dialog_text_enter</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>reason_subtype</name></name> <operator>==</operator> <name>Pt_EDIT_ACTIVATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_ph_dialog_close</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>Pt_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_dialog_esc</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PtCallbackInfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhKeyEvent_t</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>PhGetData</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>key_flags</name></name> <operator>&amp;</operator> <name>Pk_KF_Cap_Valid</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>key_cap</name></name> <operator>==</operator> <name>Pk_Escape</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_ph_dialog_close</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Pt_CONSUME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Pt_PROCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gui_mch_dialog</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>default_button</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>textfield</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ex_cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>button_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttons_copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>button_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dialog_result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>button_count</name> <operator>=</operator> <name>len</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buttons</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>buttons</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>button_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>str</name> <operator>=</operator> <name>buttons</name></expr>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr><expr><name>str</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>DLG_BUTTON_SEP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>button_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>title</name> <operator>=</operator> <literal type="string">"Vim"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buttons_copy</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>button_array</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>button_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buttons_copy</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>button_array</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buttons_copy</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>str</name> <operator>=</operator> <name>buttons_copy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>button_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>button_array</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr><expr><name>str</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>DLG_BUTTON_SEP</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>str</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TEXTDIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dialog_result</name> <operator>=</operator> <call><name>PtAlert</name><argument_list>(
<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>title</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>message</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>button_count</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>button_array</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>default_button</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Pt_MODAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PtArg_t</name></type> <name><name>args</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>dialog</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PtModalCtrl_t</name></type> <name>modal_ctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PtDialogInfo_t</name></type> <name>di</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>modal_ctrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>modal_ctrl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_GROUP_ROWS_COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_WIDTH</name></expr></argument>, <argument><expr><literal type="number">350</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_GROUP_ORIENTATION</name></expr></argument>,
<argument><expr><name>Pt_GROUP_VERTICAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_GROUP_FLAGS</name></expr></argument>,
<argument><expr><name>Pt_TRUE</name></expr></argument>, <argument><expr><name>Pt_GROUP_NO_KEYS</name> <operator>|</operator> <name>Pt_GROUP_STRETCH_HORIZONTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_CONTAINER_FLAGS</name></expr></argument>, <argument><expr><name>Pt_FALSE</name></expr></argument>, <argument><expr><name>Pt_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pane</name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtGroup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_TEXT_STRING</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtLabel</name></expr></argument>, <argument><expr><name>pane</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_MAX_LENGTH</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_TEXT_STRING</name></expr></argument>, <argument><expr><name>textfield</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_POINTER</name></expr></argument>, <argument><expr><name>textfield</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gui_ph_dialog_text</name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtText</name></expr></argument>, <argument><expr><name>pane</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name>gui_ph_dialog_text</name></expr></argument>, <argument><expr><name>Pt_CB_ACTIVATE</name></expr></argument>,
<argument><expr><name>gui_ph_dialog_text_enter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modal_ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>di</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>pane</name></name> <operator>=</operator> <name>pane</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>buttons</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>button_array</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>nbtns</name></name> <operator>=</operator> <name>button_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>def_btn</name></name> <operator>=</operator> <name>default_button</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>di</name><operator>.</operator><name>esc_btn</name></name> <operator>=</operator> <name>button_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>gui_ph_dialog_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>modal_ctrl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>PtCreateDialog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtAddFilterCallback</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>Ph_EV_KEY</name></expr></argument>,
<argument><expr><name>gui_ph_dialog_esc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modal_ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gui_ph_dialog_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtGiveFocus</name><argument_list>(<argument><expr><name>gui_ph_dialog_text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>PtRealizeWidget</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtMakeModal</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>Ph_CURSOR_NOINPUT</name></expr></argument>, <argument><expr><name>Ph_CURSOR_DEFAULT_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dialog_result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>PtModalBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>modal_ctrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtDestroyWidget</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gui_ph_dialog_text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>button_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buttons_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dialog_result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><name>int</name></type>
<name>gui_mch_get_winpos</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhPoint_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>PtWidgetPos</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_set_winpos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhPoint_t</name></type> <name>pos</name> <init>= <expr><block>{ <expr><name>x</name></expr>, <expr><name>y</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>Pt_ARG_POS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_set_shellsize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>min_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhDim_t</name></type> <name>window_size</name> <init>= <expr><block>{ <expr><name>width</name></expr>, <expr><name>height</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhDim_t</name></type> <name>min_size</name> <init>= <expr><block>{ <expr><name>min_width</name></expr>, <expr><name>min_height</name></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>window_size</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name>pg_margin_left</name> <operator>+</operator> <name>pg_margin_right</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window_size</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name>pg_margin_top</name> <operator>+</operator> <name>pg_margin_bottom</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>Pt_ARG_MINIMUM_DIM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>Pt_ARG_DIM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>PtWidgetIsRealized</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_ph_resize_container</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>gui_mch_get_screen_dimensions</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhRect_t</name></type> <name>console</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PhWindowQueryVisible</name><argument_list>(<argument><expr><name>Ph_QUERY_WORKSPACE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>PhInputGroup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>console</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_w</name> <operator>=</operator> <name><name>console</name><operator>.</operator><name>lr</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>console</name><operator>.</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>screen_h</name> <operator>=</operator> <name><name>console</name><operator>.</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>console</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_iconify</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhWindowEvent_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>event_f</name></name> <operator>=</operator> <name>Ph_WM_HIDE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>event_state</name></name> <operator>=</operator> <name>Ph_WM_EVSTATE_HIDE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>rid</name></name> <operator>=</operator> <call><name>PtWidgetRid</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtForwardWindowEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>gui_mch_set_foreground</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhWindowEvent_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>event_f</name></name> <operator>=</operator> <name>Ph_WM_TOFRONT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>event_state</name></name> <operator>=</operator> <name>Ph_WM_EVSTATE_FFRONT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>rid</name></name> <operator>=</operator> <call><name>PtWidgetRid</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtForwardWindowEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>gui_mch_settitle</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>icon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_ph_pg_set_buffer_num</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>Pt_ARG_WINDOW_TITLE</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>




<function><type><name>void</name></type>
<name>gui_mch_set_scrollbar_thumb</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PtArg_t</name></type> <name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_MAXIMUM</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_SLIDER_SIZE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_GAUGE_VALUE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetResources</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_set_scrollbar_pos</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhArea_t</name></type> <name>area</name> <init>= <expr><block>{<expr><block>{ <expr><name>x</name></expr>, <expr><name>y</name></expr> }</block></expr>, <expr><block>{ <expr><name>w</name></expr>, <expr><name>h</name></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>Pt_ARG_AREA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_create_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orient</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PtArg_t</name></type> <name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>







<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_FLAGS</name></expr></argument>, <argument><expr><name>Pt_DELAY_REALIZE</name></expr></argument>,
<argument><expr><name>Pt_DELAY_REALIZE</name> <operator>|</operator> <name>Pt_GETS_FOCUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_SCROLLBAR_FLAGS</name></expr></argument>, <argument><expr><name>Pt_SCROLLBAR_SHOW_ARROWS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (orient == SBAR_HORIZ)
{
anchor_flags = Pt_BOTTOM_ANCHORED_BOTTOM |
Pt_LEFT_ANCHORED_LEFT | Pt_RIGHT_ANCHORED_RIGHT;
}
else
{
anchor_flags = Pt_BOTTOM_ANCHORED_BOTTOM | Pt_TOP_ANCHORED_TOP;
if (sb-&gt;wp != NULL)
{
if (sb == &amp;sb-&gt;wp-&gt;w_scrollbars[ SBAR_LEFT ])
anchor_flags |= Pt_LEFT_ANCHORED_LEFT;
else
anchor_flags |= Pt_RIGHT_ANCHORED_RIGHT;
}
}
PtSetArg(&amp;args[ n++ ], Pt_ARG_ANCHOR_FLAGS, anchor_flags, Pt_IS_ANCHORED);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_ORIENTATION</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>orient</name> <operator>==</operator> <name>SBAR_HORIZ</name><operator>)</operator></expr> ?</condition><then> <expr><name>Pt_HORIZONTAL</name></expr> </then><else>: <expr><name>Pt_VERTICAL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtScrollbar</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimPanelGroup</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtScrollbar</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimContainer</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>Pt_CB_SCROLLBAR_MOVE</name></expr></argument>, <argument><expr><name>gui_ph_handle_scrollbar</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_enable_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtRealizeWidget</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtUnrealizeWidget</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_destroy_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PtDestroyWidget</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_shape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>mshape_ids</name><index>[]</index></name> <init>=
<expr><block>{
<expr><name>Ph_CURSOR_POINTER</name></expr>, 
<expr><name>Ph_CURSOR_NONE</name></expr>, 
<expr><name>Ph_CURSOR_INSERT</name></expr>, 
<expr><name>Ph_CURSOR_DRAG_VERTICAL</name></expr>, 
<expr><name>Ph_CURSOR_DRAG_VERTICAL</name></expr>, 
<expr><name>Ph_CURSOR_DRAG_HORIZONTAL</name></expr>, 
<expr><name>Ph_CURSOR_DRAG_HORIZONTAL</name></expr>, 
<expr><name>Ph_CURSOR_WAIT</name></expr>, 
<expr><name>Ph_CURSOR_DONT</name></expr>, 
<expr><name>Ph_CURSOR_CROSSHAIR</name></expr>, 
<expr><name>Ph_CURSOR_FINGER</name></expr>, 
<expr><name>Ph_CURSOR_FINGER</name></expr>, 
<expr><name>Ph_CURSOR_FINGER</name></expr>, 
<expr><name>Ph_CURSOR_QUESTION_POINT</name></expr>, 
<expr><name>Ph_CURSOR_POINTER</name></expr>, 
<expr><name>Ph_CURSOR_POINTER</name></expr>, 
<expr><name>Ph_CURSOR_POINTER</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>mch_set_mouse_shape</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>shape</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>==</operator> <name>MSHAPE_HIDE</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>Pt_ARG_CURSOR_TYPE</name></expr></argument>, <argument><expr><name>Ph_CURSOR_NONE</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>&gt;=</operator> <name>MSHAPE_NUMBERED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>Ph_CURSOR_POINTER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>mshape_ids</name><index>[<expr><name>shape</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>Pt_ARG_CURSOR_TYPE</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>!=</operator> <name>MSHAPE_HIDE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_shape</name> <operator>=</operator> <name>shape</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>gui_mch_mousehide</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hide</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name> <operator>!=</operator> <name>hide</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name> <operator>=</operator> <name>hide</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hide</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>Pt_ARG_CURSOR_TYPE</name></expr></argument>,
<argument><expr><name>Ph_CURSOR_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_set_mouse_shape</name><argument_list>(<argument><expr><name>last_shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>Pt_ARG_CURSOR_TYPE</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>hide</name> <operator>==</operator> <name>MOUSE_SHOW</name><operator>)</operator></expr> ?</condition><then> <expr><name>GUI_PH_MOUSE_TYPE</name></expr> </then><else>: <expr><name>Ph_CURSOR_NONE</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_getmouse</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhCursorInfo_t</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>ix</name></decl>, <decl><type ref="prev"/><name>iy</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>PhQueryCursor</name><argument_list>(<argument><expr><call><name>PhInputGroup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtGetAbsPosition</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument> , <argument><expr><operator>&amp;</operator><name>ix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>pos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>ix</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>pos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>iy</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_setmouse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>abs_x</name></decl>, <decl><type ref="prev"/><name>abs_y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PtGetAbsPosition</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PhMoveCursorAbs</name><argument_list>(<argument><expr><call><name>PhInputGroup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abs_x</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>abs_y</name> <operator>+</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>guicolor_T</name></type>
<name>gui_mch_get_rgb</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>pixel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><operator>(</operator><call><name>PgRGB</name><argument_list>(<argument><expr><call><name>PgRedValue</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>PgGreenValue</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PgBlueValue</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_new_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
short color_diff;





color_diff = gui_get_lightness(gui_ph_mouse_color)
- gui_get_lightness(gui.back_pixel);

if (abs(color_diff) &lt; 64)
{
short r, g, b;

r = PgRedValue(gui_ph_mouse_color) ^ 255;
g = PgGreenValue(gui_ph_mouse_color) ^ 255;
b = PgBlueValue(gui_ph_mouse_color) ^ 255;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
gui_ph_mouse_color = PgRGB(r, g, b);
PtSetResource(gui.vimTextArea, Pt_ARG_CURSOR_COLOR,
gui_ph_mouse_color, 0);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>Pt_ARG_FILL_COLOR</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>guicolor_T</name></type>
<name>gui_mch_get_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>gui_get_color_cmn</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>
<name>gui_mch_get_rgb_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>gui_get_rgb_color_cmn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_set_fg_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PgSetTextColor</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_set_bg_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PgSetFillColor</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_set_sp_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_invert_rectangle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhRect_t</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>lr</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>nc</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>nr</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>lr</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>DRAW_START</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgSetDrawMode</name><argument_list>(<argument><expr><name>Pg_DrawModeDSTINVERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgDrawRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>Pg_DRAW_FILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgSetDrawMode</name><argument_list>(<argument><expr><name>Pg_DrawModeSRCCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DRAW_END</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_clear_block</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhRect_t</name></type> <name>block</name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col1</name></expr></argument>)</argument_list></call></expr>, <macro><name>FILL_Y</name><argument_list>(<argument>row1</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>DRAW_START</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgDrawRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name>Pg_DRAW_FILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DRAW_END</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_clear_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhRect_t</name></type> <name>text_rect</name> <init>= <expr><block>{
<expr><block>{ <expr><name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>, <expr><name><name>gui</name><operator>.</operator><name>border_width</name></name></expr> }</block></expr>,
<expr><block>{ <expr><name>Columns</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ,
<expr><name>Rows</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_ignore_draw</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>DRAW_START</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgDrawRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text_rect</name></expr></argument>, <argument><expr><name>Pg_DRAW_FILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DRAW_END</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_delete_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_lines</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhRect_t</name></type> <name>rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhPoint_t</name></type> <name>delta</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>lr</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtWidgetOffset</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gui_ph_raw_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PhTranslatePoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gui_ph_raw_offset</name></expr></argument>, <argument><expr><call><name>PtWidgetPos</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PhTranslateRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gui_ph_raw_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>delta</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delta</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name>num_lines</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PgFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PhBlit</name><argument_list>(<argument><expr><call><name>PtWidgetRid</name><argument_list>(<argument><expr><call><name>PtFindDisjoint</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(
<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,
<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr></argument>,
<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_insert_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_lines</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhRect_t</name></type> <name>rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhPoint_t</name></type> <name>delta</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>lr</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtWidgetOffset</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gui_ph_raw_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PhTranslatePoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gui_ph_raw_offset</name></expr></argument>, <argument><expr><call><name>PtWidgetPos</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PhTranslateRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gui_ph_raw_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>delta</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delta</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>num_lines</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PgFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PhBlit</name><argument_list>(<argument><expr><call><name>PtWidgetRid</name><argument_list>(<argument><expr><call><name>PtFindDisjoint</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,
<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_draw_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>utf8_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>utf8_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PhPoint_t</name></type> <name>pos</name> <init>= <expr><block>{ <expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>, <macro><name>TEXT_Y</name><argument_list>(<argument>row</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhRect_t</name></type> <name>rect</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_ignore_draw</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>DRAW_START</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DRAW_TRANSP</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PgDrawIRect</name><argument_list>(
<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>Pg_DRAW_FILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PgSetUnderline</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr></argument>, <argument><expr><name>Pg_TRANSPARENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>charset_translate</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>enc_utf8</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>src_taken</name></decl>, <decl><type ref="prev"/><name>dst_made</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>utf8_len</name> <operator>&lt;</operator> <name>len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>utf8_buffer</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>utf8_buffer</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <name>MB_LEN_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PxTranslateToUTF</name><argument_list>(
<argument><expr><name>charset_translate</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>src_taken</name></expr></argument>,
<argument><expr><name>utf8_buffer</name></expr></argument>,
<argument><expr><name>utf8_len</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dst_made</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>utf8_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>dst_made</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PgDrawText</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_BOLD</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>lr</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
pos.x++;

PgSetUserClip(&amp;rect);
PgDrawText(s, len, &amp;pos, 0);
PgSetUserClip(NULL);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <operator>(</operator><name>p_linespace</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PgDrawTextArea</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>Pg_TEXT_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PgSetUnderline</name><argument_list>(<argument><expr><name>Pg_TRANSPARENT</name></expr></argument>, <argument><expr><name>Pg_TRANSPARENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>DRAW_END</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>gui_mch_draw_hollow_cursor</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhRect_t</name></type> <name>r</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>lr</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>DRAW_START</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgSetStrokeColor</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgDrawRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>Pg_DRAW_STROKE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DRAW_END</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_draw_part_cursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhRect_t</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>lr</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>DRAW_START</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgDrawRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>Pg_DRAW_FILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DRAW_END</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gui_mch_is_blinking</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>blink_state</name> <operator>!=</operator> <name>BLINK_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gui_mch_is_blink_off</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>blink_state</name> <operator>==</operator> <name>BLINK_OFF</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_set_blinking</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>on</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>blink_waittime</name> <operator>=</operator> <name>wait</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blink_ontime</name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blink_offtime</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_start_blink</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blink_waittime</name> <operator>&amp;&amp;</operator> <name>blink_ontime</name> <operator>&amp;&amp;</operator> <name>blink_offtime</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name>gui_ph_timer_cursor</name></expr></argument>, <argument><expr><name>Pt_ARG_TIMER_INITIAL</name></expr></argument>,
<argument><expr><name>blink_waittime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_ON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_stop_blink</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>may_call_gui_update_cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name>gui_ph_timer_cursor</name></expr></argument>, <argument><expr><name>Pt_ARG_TIMER_INITIAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>==</operator> <name>BLINK_OFF</name> <operator>&amp;&amp;</operator> <name>may_call_gui_update_cursor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>gui_mch_beep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PtBeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_flash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>msec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PgSetFillXORColor</name><argument_list>(<argument><expr><name>Pg_BLACK</name></expr></argument>, <argument><expr><name>Pg_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgSetDrawMode</name><argument_list>(<argument><expr><name>Pg_DRAWMODE_XOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_clear_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>msec</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_clear_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PgSetDrawMode</name><argument_list>(<argument><expr><name>Pg_DRAWMODE_OPAQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PgFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_set_text_area_pos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PhArea_t</name></type> <name>area</name> <init>= <expr><block>{<expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr>, <expr><block>{<expr><name>w</name></expr>, <expr><name>h</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimTextArea</name></name></expr></argument>, <argument><expr><name>Pt_ARG_AREA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gui_mch_haskey</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name> <operator>&amp;&amp;</operator>
<name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"toolbar.phi"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>PhImage_t</name> <modifier>*</modifier></type><name><name>gui_ph_toolbar_images</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>&amp;</operator><name>tb_new_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_open_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_save_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_undo_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_redo_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_cut_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_copy_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_paste_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_print_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_help_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_find_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_save_all_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_save_session_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_new_session_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_load_session_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_macro_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_replace_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_close_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_maximize_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_minimize_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_split_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_shell_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_find_prev_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_find_next_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_find_help_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_make_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_jump_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_ctags_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_vsplit_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_maxwidth_phi</name></expr>,
<expr><operator>&amp;</operator><name>tb_minwidth_phi</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PhImage_t</name> <modifier>*</modifier></type>
<name>gui_ph_toolbar_load_icon</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>iconfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>PhImage_t</name></type> <name>external_icon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhImage_t</name> <modifier>*</modifier></type><name>temp_phi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>temp_phi</name> <operator>=</operator> <call><name>PxLoadImage</name><argument_list>(<argument><expr><name>iconfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>temp_phi</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>temp_phi</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>Ph_RELEASE_IMAGE_ALL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>external_icon</name></expr></argument>, <argument><expr><name>temp_phi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>external_icon</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>temp_phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_phi</name> <operator>=</operator> <operator>&amp;</operator><name>external_icon</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>temp_phi</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>PhImage_t</name> <modifier>*</modifier></type>
<name>gui_ph_toolbar_find_icon</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>full_pathname</name><index>[ <expr><name>MAXPATHL</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhImage_t</name> <modifier>*</modifier></type><name>icon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>icon_builtin</name></name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name>gui_ph_toolbar_load_icon</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>icon</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><call><name>gui_find_bitmap</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>full_pathname</name></expr></argument>, <argument><expr><literal type="string">"gif"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>gui_find_bitmap</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>full_pathname</name></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name>gui_ph_toolbar_load_icon</name><argument_list>(<argument><expr><name>full_pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>icon</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>icon</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>&lt;</operator> <call><name>ARRAY_LENGTH</name><argument_list>(<argument><expr><name>gui_ph_toolbar_images</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>gui_ph_toolbar_images</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>gui_mch_enable_menu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtRealizeWidget</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimMenuBar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtUnrealizeWidget</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimMenuBar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_set_menu_pos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>gui_ph_position_menu</name><parameter_list>(<parameter><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PtWidget_t</name> <modifier>*</modifier></type><name>traverse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>traverse</name> <operator>=</operator> <call><name>PtWidgetChildBack</name><argument_list>(<argument><expr><call><name>PtWidgetParent</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<while>while <condition>(<expr><name>traverse</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtGetResource</name><argument_list>(<argument><expr><name>traverse</name></expr></argument>, <argument><expr><name>Pt_ARG_POINTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name>priority</name> <operator>&lt;</operator> <name><name>menu</name><operator>-&gt;</operator><name>priority</name></name> <operator>&amp;&amp;</operator>
<name>widget</name> <operator>!=</operator> <name>traverse</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>PtWidgetInsert</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>traverse</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>traverse</name> <operator>=</operator> <call><name>PtWidgetBrotherInFront</name><argument_list>(<argument><expr><name>traverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>gui_mch_add_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>accel_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>mnemonic_str</name><index>[<expr><name>MB_LEN_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PtArg_t</name></type> <name><name>args</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>accel_key</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>accel_key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mnemonic_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>accel_key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mnemonic_str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_TEXT_STRING</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_ACCEL_TEXT</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>accel_key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_ACCEL_KEY</name></expr></argument>, <argument><expr><name>mnemonic_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_POINTER</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_BUTTON_TYPE</name></expr></argument>, <argument><expr><name>Pt_MENU_RIGHT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtMenuButton</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>parent</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>gui</name><operator>.</operator><name>vimMenuBar</name></name></expr> </then><else>: <expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>Pt_CB_ARM</name></expr></argument>, <argument><expr><name>gui_ph_handle_pulldown_menu</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_MENU_FLAGS</name></expr></argument>, <argument><expr><name>Pt_TRUE</name></expr></argument>, <argument><expr><name>Pt_MENU_CHILD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtMenu</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name>Pt_CB_UNREALIZED</name></expr></argument>,
<argument><expr><name>gui_ph_handle_menu_unrealized</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtAddHotkeyHandler</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><call><name>tolower</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Pk_KM_Alt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>menu</name></expr></argument>, <argument><expr><name>gui_ph_handle_pulldown_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_ph_position_menu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtRealizeWidget</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>menu_is_popup</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtMenu</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name>Pt_CB_UNREALIZED</name></expr></argument>,
<argument><expr><name>gui_ph_handle_menu_unrealized</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_add_menu_item</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>accel_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>mnemonic_str</name><index>[<expr><name>MB_LEN_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PtArg_t</name></type> <name><name>args</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_POINTER</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_SEP_FLAGS</name></expr></argument>,
<argument><expr><name>Pt_SEP_VERTICAL</name></expr></argument>, <argument><expr><name>Pt_SEP_ORIENTATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_SEP_TYPE</name></expr></argument>, <argument><expr><name>Pt_ETCHED_IN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_ANCHOR_FLAGS</name></expr></argument>,
<argument><expr><name>Pt_TRUE</name></expr></argument>, <argument><expr><name>Pt_ANCHOR_TOP_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_WIDTH</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtSeparator</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimToolBar</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>p_toolbar</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_BALLOON_POSITION</name></expr></argument>,
<argument><expr><name>Pt_BALLOON_BOTTOM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_TEXT_STRING</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_TEXT_FONT</name></expr></argument>, <argument><expr><literal type="string">"TextFont08"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>p_toolbar</name></expr></argument>, <argument><expr><literal type="string">"icons"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>gui_ph_toolbar_images</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_LABEL_IMAGE</name></expr></argument>,
<argument><expr><call><name>gui_ph_toolbar_find_icon</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_LABEL_TYPE</name></expr></argument>, <argument><expr><name>Pt_TEXT_IMAGE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_TEXT_IMAGE_SPACING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>p_toolbar</name></expr></argument>, <argument><expr><literal type="string">"tooltips"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_LABEL_BALLOON</name></expr></argument>,
<argument><expr><name>gui_ph_show_tooltip</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_LABEL_FLAGS</name></expr></argument>,
<argument><expr><name>Pt_TRUE</name></expr></argument>, <argument><expr><name>Pt_SHOW_BALLOON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_MARGIN_HEIGHT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_MARGIN_WIDTH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_FLAGS</name></expr></argument>, <argument><expr><name>Pt_FALSE</name></expr></argument>,
<argument><expr><name>Pt_HIGHLIGHTED</name> <operator>|</operator> <name>Pt_GETS_FOCUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_FILL_COLOR</name></expr></argument>, <argument><expr><name>Pg_TRANSPARENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtButton</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>vimToolBar</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>Pt_CB_ACTIVATE</name></expr></argument>, <argument><expr><name>gui_ph_handle_menu</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PtWidgetIsRealized</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimToolBar</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtRealizeWidget</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtSeparator</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>accel_key</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>accel_key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mnemonic_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>accel_key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mnemonic_str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_TEXT_STRING</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>accel_key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_ACCEL_KEY</name></expr></argument>, <argument><expr><name>mnemonic_str</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PtSetArg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><index>[ <expr><name>n</name><operator>++</operator></expr> ]</index></name></expr></argument>, <argument><expr><name>Pt_ARG_ACCEL_TEXT</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>PtCreateWidget</name><argument_list>(<argument><expr><name>PtMenuButton</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>Pt_CB_ACTIVATE</name></expr></argument>, <argument><expr><name>gui_ph_handle_menu</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PANEL_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_ph_is_buffer_item</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PtAddCallback</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>Pt_CB_DESTROYED</name></expr></argument>,
<argument><expr><name>gui_ph_handle_buffer_remove</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_ph_pg_add_buffer</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gui_ph_position_menu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_destroy_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtDestroyWidget</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtDestroyWidget</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_menu_grey</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>grey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>, <decl><type ref="prev"/><name>fields</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>PtWidgetFlags</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>PtWidgetIsClass</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>PtMenuButton</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>PtWidgetIsClass</name><argument_list>(<argument><expr><call><name>PtWidgetParent</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PtMenu</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fields</name> <operator>=</operator> <name>Pt_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>Pt_SELECTABLE</name> <operator>|</operator> <name>Pt_HIGHLIGHTED</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>fields</name> <operator>=</operator> <name>Pt_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>Pt_BLOCKED</name> <operator>|</operator> <name>Pt_GHOST</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>grey</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fields</name> <operator>=</operator> <operator>~</operator><name>fields</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>Pt_ARG_FLAGS</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>,
<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_menu_hidden</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hidden</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_draw_menubar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_show_popupmenu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PtSetResource</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name>Pt_ARG_POS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs_mouse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtRealizeWidget</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_toggle_tearoffs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>gui_mch_show_toolbar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>showit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>showit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtRealizeWidget</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimToolBar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PtUnrealizeWidget</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimToolBar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>GuiFont</name></type>
<name>gui_ph_get_font</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_name</name></decl></parameter>,
<parameter><decl><type><name>int_u</name></type> <name>font_flags</name></decl></parameter>,
<parameter><decl><type><name>int_u</name></type> <name>font_size</name></decl></parameter>,


<parameter><decl><type><name>int_u</name></type> <name>enforce</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FontQueryInfo</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_u</name></type> <name>style</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font_tag</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>MAX_FONT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>font_tag</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>PfGenerateFontName</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>font_flags</name></expr></argument>, <argument><expr><name>font_size</name></expr></argument>,
<argument><expr><name>font_tag</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>style</name> <operator>=</operator> <name>PHFONT_INFO_FIXED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enforce</name> <operator>&amp;</operator> <name>PF_STYLE_BOLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>PHFONT_INFO_BOLD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enforce</name> <operator>&amp;</operator> <name>PF_STYLE_ANTIALIAS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>PHFONT_INFO_ALIAS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enforce</name> <operator>&amp;</operator> <name>PF_STYLE_ITALIC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>|=</operator> <name>PHFONT_INFO_ITALIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PfQueryFontInfo</name><argument_list>(<argument><expr><name>font_tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>font_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>font_size</name> <operator>==</operator> <name><name>info</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator>
<name>style</name> <operator>==</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>style</name></name> <operator>&amp;</operator> <name>style</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>GuiFont</name><operator>)</operator><name>font_tag</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>font_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type>
<name>gui_ph_parse_font_name</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>vim_font</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>font_name</name></decl></parameter>,
<parameter><decl><type><name>int_u</name> <modifier>*</modifier></type><name>font_flags</name></decl></parameter>,
<parameter><decl><type><name>int_u</name> <modifier>*</modifier></type><name>font_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_u</name></type> <name>name_len</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>vim_font</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mark</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>vim_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <operator>(</operator><name>int_u</name><operator>)</operator> <operator>(</operator><name>mark</name> <operator>-</operator> <name>vim_font</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>font_name</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>vim_font</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>font_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mark</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>mark</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>mark</name><operator>++</operator> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><name>mark</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>font_flags</name> <operator>|=</operator> <name>PF_STYLE_ANTIALIAS</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>font_flags</name> <operator>|=</operator> <name>PF_STYLE_BOLD</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>font_flags</name> <operator>|=</operator> <name>PF_STYLE_ITALIC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>size</name></expr></argument> &gt;</argument_list></name> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>font_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gui_mch_init_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>vim_font_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_u</name></type> <name>font_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_u</name></type> <name>font_size</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FontQueryInfo</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PhRect_t</name></type> <name>extent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vim_font_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>vim_font_name</name> <operator>=</operator> <literal type="string">"PC Terminal"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>vim_font_name</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>font_tag</name> <operator>=</operator> <call><name>PtFontSelection</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>vimWindow</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"pcterm12"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>PHFONT_FIXED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font_tag</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>=</operator> <name>font_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PfQueryFontInfo</name><argument_list>(<argument><expr><name>font_tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>font_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gui_ph_parse_font_name</name><argument_list>(<argument><expr><name>vim_font_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>font_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>font_flags</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>font_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>font_tag</name> <operator>=</operator> <call><name>gui_ph_get_font</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>font_flags</name></expr></argument>, <argument><expr><name>font_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>font_tag</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>=</operator> <name>font_tag</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name> <operator>=</operator> <call><name>gui_ph_get_font</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>font_flags</name> <operator>|</operator> <name>PF_STYLE_BOLD</name></expr></argument>,
<argument><expr><name>font_size</name></expr></argument>, <argument><expr><name>PF_STYLE_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>ital_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ital_font</name></name> <operator>=</operator> <call><name>gui_ph_get_font</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>font_flags</name> <operator>|</operator> <name>PF_STYLE_ITALIC</name></expr></argument>,
<argument><expr><name>font_size</name></expr></argument>, <argument><expr><name>PF_STYLE_ITALIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>PfExtentText</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>font_tag</name></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>=</operator> <name><name>extent</name><operator>.</operator><name>lr</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>extent</name><operator>.</operator><name>ul</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator> <name><name>extent</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <name><name>extent</name><operator>.</operator><name>lr</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <operator>-</operator> <name><name>extent</name><operator>.</operator><name>ul</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>gui_mch_adjust_charheight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FontQueryInfo</name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PfQueryFontInfo</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <operator>-</operator> <name><name>info</name><operator>.</operator><name>ascender</name></name> <operator>+</operator> <name><name>info</name><operator>.</operator><name>descender</name></name> <operator>+</operator> <name>p_linespace</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <operator>-</operator> <name><name>info</name><operator>.</operator><name>ascender</name></name> <operator>+</operator> <name>p_linespace</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GuiFont</name></type>
<name>gui_mch_get_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>vim_font_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>report_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_u</name></type> <name>font_size</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_u</name></type> <name>font_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_ph_parse_font_name</name><argument_list>(<argument><expr><name>vim_font_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>font_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>font_flags</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>font_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>font_tag</name> <operator>=</operator> <call><name>gui_ph_get_font</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>font_flags</name></expr></argument>, <argument><expr><name>font_size</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font_tag</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>GuiFont</name><operator>)</operator><name>font_tag</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>report_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><name>e_font</name></expr></argument>, <argument><expr><name>vim_font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>gui_mch_get_fontname</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>gui_mch_set_font</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PgSetFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_free_font</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
