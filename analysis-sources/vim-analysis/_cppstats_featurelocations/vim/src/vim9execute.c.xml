<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\vim9execute.c">












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USING_FLOAT_STUFF</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim9.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>tcd_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tcd_catch_idx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tcd_finally_idx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tcd_caught</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tcd_return</name></decl>;</decl_stmt> 
}</block></struct></type> <name>trycmd_T</name>;</typedef>
























<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>garray_T</name></type> <name>ec_stack</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ec_frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>garray_T</name></type> <name>ec_trystack</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ec_in_catch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ec_dfunc_idx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>isn_T</name> <modifier>*</modifier></type><name>ec_instr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ec_iidx</name></decl>;</decl_stmt> 
}</block></struct></type> <name>ectx_T</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_TV_BOT</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((typval_T *)ectx-&gt;ec_stack.ga_data) + ectx-&gt;ec_stack.ga_len + idx)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>ufunc_argcount</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>ufunc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_args</name><operator>.</operator><name>ga_len</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_va_name</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_instr_idx</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>ufunc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>ectx_T</name> <modifier>*</modifier></type><name>ectx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_def_args</name><operator>.</operator><name>ga_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_iidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>defcount</name> <init>= <expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_args</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <name>argcount</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>defcount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>defcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_iidx</name></name> <operator>=</operator> <name><name>ufunc</name><operator>-&gt;</operator><name>uf_def_arg_idx</name><index>[
<expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_def_args</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <name>defcount</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_dfunc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cdf_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>ectx_T</name> <modifier>*</modifier></type><name>ectx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dfunc_T</name> <modifier>*</modifier></type><name>dfunc</name> <init>= <expr><operator>(</operator><operator>(</operator><name>dfunc_T</name> <operator>*</operator><operator>)</operator><name><name>def_functions</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name>cdf_idx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>ufunc</name> <init>= <expr><name><name>dfunc</name><operator>-&gt;</operator><name>df_ufunc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optcount</name> <init>= <expr><call><name>ufunc_argcount</name><argument_list>(<argument><expr><name>ufunc</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>argcount</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dfunc</name><operator>-&gt;</operator><name>df_deleted</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><name>e_func_deleted</name></expr></argument>, <argument><expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>-&gt;</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><name>optcount</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dfunc</name><operator>-&gt;</operator><name>df_varcount</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>optcount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><literal type="string">"argument count wrong?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>optcount</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>ectx</name><operator>-&gt;</operator><name>ec_dfunc_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>ectx</name><operator>-&gt;</operator><name>ec_iidx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>ectx</name><operator>-&gt;</operator><name>ec_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_frame</name></name> <operator>=</operator> <name><name>ectx</name><operator>-&gt;</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>dfunc</name><operator>-&gt;</operator><name>df_varcount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><name>STACK_FRAME_SIZE</name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>STACK_FRAME_SIZE</name> <operator>+</operator> <name><name>dfunc</name><operator>-&gt;</operator><name>df_varcount</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_dfunc_idx</name></name> <operator>=</operator> <name>cdf_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_instr</name></name> <operator>=</operator> <name><name>dfunc</name><operator>-&gt;</operator><name>df_instr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>estack_push_ufunc</name><argument_list>(<argument><expr><name>ETYPE_UFUNC</name></expr></argument>, <argument><expr><name><name>dfunc</name><operator>-&gt;</operator><name>df_ufunc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>init_instr_idx</name><argument_list>(<argument><expr><name>ufunc</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_TV</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((typval_T *)ectx-&gt;ec_stack.ga_data) + idx)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>func_return</name><parameter_list>(<parameter><decl><type><name>ectx_T</name> <modifier>*</modifier></type><name>ectx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dfunc_T</name> <modifier>*</modifier></type><name>dfunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>estack_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>ectx</name><operator>-&gt;</operator><name>ec_frame</name></name> <operator>+</operator> <name>STACK_FRAME_SIZE</name></expr>;</init>
<condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>ectx</name><operator>-&gt;</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><call><name>STACK_TV</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>dfunc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dfunc_T</name> <operator>*</operator><operator>)</operator><name><name>def_functions</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>ectx</name><operator>-&gt;</operator><name>ec_dfunc_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>ectx</name><operator>-&gt;</operator><name>ec_frame</name></name> <operator>-</operator> <call><name>ufunc_argcount</name><argument_list>(<argument><expr><name><name>dfunc</name><operator>-&gt;</operator><name>df_ufunc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name>top</name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>ectx</name><operator>-&gt;</operator><name>ec_frame</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><call><name>STACK_TV</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_dfunc_idx</name></name> <operator>=</operator> <call><name>STACK_TV</name><argument_list>(<argument><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_frame</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_iidx</name></name> <operator>=</operator> <call><name>STACK_TV</name><argument_list>(<argument><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_frame</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_frame</name></name> <operator>=</operator> <call><name>STACK_TV</name><argument_list>(<argument><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_frame</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dfunc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dfunc_T</name> <operator>*</operator><operator>)</operator><name><name>def_functions</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>ectx</name><operator>-&gt;</operator><name>ec_dfunc_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_instr</name></name> <operator>=</operator> <name><name>dfunc</name><operator>-&gt;</operator><name>df_instr</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>ectx</name><operator>-&gt;</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name>top</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>*</operator><call><name>STACK_TV</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STACK_TV</name></cpp:undef>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_prepare</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>ectx_T</name> <modifier>*</modifier></type><name>ectx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argvars</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <name>argcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>argvars</name><index>[<expr><name>argcount</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <name>argcount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>-&gt;</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>-&gt;</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_bfunc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>func_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>ectx_T</name> <modifier>*</modifier></type><name>ectx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argvars</name><index>[<expr><name>MAX_FUNC_ARGS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>call_prepare</name><argument_list>(<argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>ectx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>call_internal_func_by_idx</name><argument_list>(<argument><expr><name>func_idx</name></expr></argument>, <argument><expr><name>argvars</name></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_ufunc</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>ufunc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>ectx_T</name> <modifier>*</modifier></type><name>ectx</name></decl></parameter>, <parameter><decl><type><name>isn_T</name> <modifier>*</modifier></type><name>iptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argvars</name><index>[<expr><name>MAX_FUNC_ARGS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>funcexe_T</name></type> <name>funcexe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_dfunc_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>iptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>delete_instr</name><argument_list>(<argument><expr><name>iptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_type</name></name> <operator>=</operator> <name>ISN_DCALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>dfunc</name><operator>.</operator><name>cdf_idx</name></name> <operator>=</operator> <name><name>ufunc</name><operator>-&gt;</operator><name>uf_dfunc_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>dfunc</name><operator>.</operator><name>cdf_argcount</name></name> <operator>=</operator> <name>argcount</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>call_dfunc</name><argument_list>(<argument><expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_dfunc_idx</name></name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>ectx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>call_prepare</name><argument_list>(<argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>ectx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funcexe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>funcexe</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>funcexe</name><operator>.</operator><name>evaluate</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>call_user_func_check</name><argument_list>(<argument><expr><name>ufunc</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>argvars</name></expr></argument>,
<argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcexe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>FCERR_NONE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>user_func_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_by_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>ectx_T</name> <modifier>*</modifier></type><name>ectx</name></decl></parameter>, <parameter><decl><type><name>isn_T</name> <modifier>*</modifier></type><name>iptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>ufunc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>builtin_function</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>func_idx</name> <init>= <expr><call><name>find_internal_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>func_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_internal_func</name><argument_list>(<argument><expr><name>func_idx</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>call_bfunc</name><argument_list>(<argument><expr><name>func_idx</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>ectx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ufunc</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ufunc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>call_ufunc</name><argument_list>(<argument><expr><name>ufunc</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>ectx</name></expr></argument>, <argument><expr><name>iptr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_partial</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>ectx_T</name> <modifier>*</modifier></type><name>ectx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>called_emsg_before</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>call_ufunc</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>ectx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>call_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>ectx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>called_emsg</name> <operator>==</operator> <name>called_emsg_before</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_unknownfunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>store_var</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>funccal_entry_T</name></type> <name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>save_funccal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_var_const</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_funccal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_eval_func</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>ectx_T</name> <modifier>*</modifier></type><name>ectx</name></decl></parameter>, <parameter><decl><type><name>isn_T</name> <modifier>*</modifier></type><name>iptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>called_emsg_before</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>call_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>ectx</name></expr></argument>, <argument><expr><name>iptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>&amp;&amp;</operator> <name>called_emsg</name> <operator>==</operator> <name>called_emsg_before</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><literal type="string">"call_eval_func(partial) not implemented yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>call_def_function</name><parameter_list>(
<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>ufunc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, 
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, 
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>ectx_T</name></type> <name>ectx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>initial_frame_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>defcount</name> <init>= <expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_args</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <name>argc</name></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_TV</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((typval_T *)ectx.ec_stack.ga_data) + idx)</cpp:value></cpp:define>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STACK_TV_BOT</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_TV_BOT</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((typval_T *)ectx.ec_stack.ga_data) + ectx.ec_stack.ga_len + idx)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_TV_VAR</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((typval_T *)ectx.ec_stack.ga_data) + ectx.ec_frame + STACK_FRAME_SIZE + idx)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ectx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ectx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>typval_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_dfunc_idx</name></name> <operator>=</operator> <name><name>ufunc</name><operator>-&gt;</operator><name>uf_dfunc_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_trystack</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>trycmd_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>defcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>defcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_frame</name></name> <operator>=</operator> <name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>initial_frame_ptr</name> <operator>=</operator> <name><name>ectx</name><operator>.</operator><name>ec_frame</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>STACK_FRAME_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>STACK_TV</name><argument_list>(<argument><expr><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><name>dfunc_T</name> <modifier>*</modifier></type><name>dfunc</name> <init>= <expr><operator>(</operator><operator>(</operator><name>dfunc_T</name> <operator>*</operator><operator>)</operator><name><name>def_functions</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>ufunc</name><operator>-&gt;</operator><name>uf_dfunc_idx</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>dfunc</name><operator>-&gt;</operator><name>df_varcount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STACK_TV_VAR</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name><name>dfunc</name><operator>-&gt;</operator><name>df_varcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_instr</name></name> <operator>=</operator> <name><name>dfunc</name><operator>-&gt;</operator><name>df_instr</name></name></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>init_instr_idx</name><argument_list>(<argument><expr><name>ufunc</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>isn_T</name> <modifier>*</modifier></type><name>iptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>veryfast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>throw_exception</name><argument_list>(<argument><expr><literal type="string">"Vim:Interrupt"</literal></expr></argument>, <argument><expr><name>ET_INTERRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>did_throw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_throw</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ectx</name><operator>.</operator><name>ec_in_catch</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>trystack</name> <init>= <expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_trystack</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>trycmd_T</name> <modifier>*</modifier></type><name>trycmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>trystack</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trycmd</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>trycmd_T</name> <operator>*</operator><operator>)</operator><name><name>trystack</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>trystack</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>trycmd</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>trycmd</name><operator>-&gt;</operator><name>tcd_frame</name></name> <operator>==</operator> <name><name>ectx</name><operator>.</operator><name>ec_frame</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_in_catch</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_iidx</name></name> <operator>=</operator> <name><name>trycmd</name><operator>-&gt;</operator><name>tcd_catch_idx</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ectx</name><operator>.</operator><name>ec_frame</name></name> <operator>==</operator> <name>initial_frame_ptr</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>need_rethrow</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>func_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>iptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_instr</name><index>[<expr><name><name>ectx</name><operator>.</operator><name>ec_iidx</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_type</name></name></expr>)</condition>
<block>{<block_content>

<case>case <expr><name>ISN_EXEC</name></expr>:</case>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_ECHO</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>echo</name><operator>.</operator><name>echo_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>atstart</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needclr</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>echo_one</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>echo</name><operator>.</operator><name>echo_with_white</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>atstart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>needclr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>needclr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_EXECUTE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_CHANNEL</name> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_JOB</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_inval_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>failed</name> <operator>&amp;&amp;</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_LOAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><call><name>STACK_TV_VAR</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_LOADV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><call><name>get_vim_var_tv</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_LOADSCRIPT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name> <init>=
<expr><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>script</name><operator>.</operator><name>script_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svar_T</name> <modifier>*</modifier></type><name>sv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sv</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>svar_T</name> <operator>*</operator><operator>)</operator><name><name>si</name><operator>-&gt;</operator><name>sn_var_vals</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>script</name><operator>.</operator><name>script_idx</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>sv_tv</name></name></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_LOADS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><operator>&amp;</operator><call><name>SCRIPT_VARS</name><argument_list>(
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>loadstore</name><operator>.</operator><name>ls_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>loadstore</name><operator>.</operator><name>ls_name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>find_var_in_ht</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_undefvar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_LOADG</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>find_var_in_ht</name><argument_list>(<argument><expr><call><name>get_globvar_ht</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E121: Undefined variable: g:%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_LOADOPT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name>optval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_option_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>optval</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_LOADENV</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name>optval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>get_env_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>optval</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_LOADREG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>get_reg_contents</name><argument_list>(
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></argument>, <argument><expr><name>GREG_EXPR_SRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_STORE</name></expr>:</case>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_VAR</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tv</name> <operator>=</operator> <operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_STORES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><operator>&amp;</operator><call><name>SCRIPT_VARS</name><argument_list>(
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>loadstore</name><operator>.</operator><name>ls_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>loadstore</name><operator>.</operator><name>ls_name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>find_var_in_ht</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>store_var</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name> <operator>=</operator> <operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_STORESCRIPT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>SCRIPT_ITEM</name><argument_list>(
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>script</name><operator>.</operator><name>script_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svar_T</name> <modifier>*</modifier></type><name>sv</name> <init>= <expr><operator>(</operator><operator>(</operator><name>svar_T</name> <operator>*</operator><operator>)</operator><name><name>si</name><operator>-&gt;</operator><name>sn_var_vals</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>script</name><operator>.</operator><name>script_idx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>sv_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>sv</name><operator>-&gt;</operator><name>sv_tv</name></name> <operator>=</operator> <operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_STOREOPT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1051: Expected string or number"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>set_option_value</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>storeopt</name><operator>.</operator><name>so_name</name></name></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>storeopt</name><operator>.</operator><name>so_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_STOREENV</name></expr>:</case>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_setenv_ext</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_STOREREG</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_reg_contents</name><argument_list>(<argument><expr><ternary><condition><expr><name>reg</name> <operator>==</operator> <literal type="char">'@'</literal></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><name>reg</name></expr></else></ternary></expr></argument>,
<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_STOREV</name></expr>:</case>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_vim_var_tv</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>ISN_STOREG</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>find_var_in_ht</name><argument_list>(<argument><expr><call><name>get_globvar_ht</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>store_var</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name> <operator>=</operator> <operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_STORENR</name></expr>:</case>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_VAR</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>storenr</name><operator>.</operator><name>stnr_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>storenr</name><operator>.</operator><name>stnr_val</name></name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_PUSHNR</name></expr>:</case>
<case>case <expr><name>ISN_PUSHBOOL</name></expr>:</case>
<case>case <expr><name>ISN_PUSHSPEC</name></expr>:</case>
<case>case <expr><name>ISN_PUSHF</name></expr>:</case>
<case>case <expr><name>ISN_PUSHS</name></expr>:</case>
<case>case <expr><name>ISN_PUSHBLOB</name></expr>:</case>
<case>case <expr><name>ISN_PUSHFUNC</name></expr>:</case>
<case>case <expr><name>ISN_PUSHPARTIAL</name></expr>:</case>
<case>case <expr><name>ISN_PUSHCHANNEL</name></expr>:</case>
<case>case <expr><name>ISN_PUSHJOB</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>ISN_PUSHNR</name></expr>:</case>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_PUSHBOOL</name></expr>:</case>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_BOOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_PUSHSPEC</name></expr>:</case>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ISN_PUSHF</name></expr>:</case>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>fnumber</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ISN_PUSHBLOB</name></expr>:</case>
<expr_stmt><expr><call><name>blob_copy</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>blob</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_PUSHFUNC</name></expr>:</case>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FUNC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator>
<call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>ISN_PUSHPARTIAL</name></expr>:</case>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>partial</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ISN_PUSHCHANNEL</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_CHANNEL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_channel</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>channel</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_channel</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_channel</name><operator>-&gt;</operator><name>ch_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>ISN_PUSHJOB</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_JOB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>job</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name><operator>-&gt;</operator><name>jv_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(
<argument><expr><ternary><condition><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name> <operator>==</operator> <name>NULL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>



<case>case <expr><name>ISN_NEWLIST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>list_alloc_with_items</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>list_set_item</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>list</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_NEWDICT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><call><name>dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>idx</name> <operator>-</operator> <name>count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>dictitem_alloc</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>di_tv</name></name> <operator>=</operator> <operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>idx</name> <operator>-</operator> <name>count</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dict_add</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <name>dict</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_DCALL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>call_dfunc</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>dfunc</name><operator>.</operator><name>cdf_idx</name></name></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>dfunc</name><operator>.</operator><name>cdf_argcount</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ectx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>ISN_BCALL</name></expr>:</case>
<expr_stmt><expr><name>SOURCING_LNUM</name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_lnum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>call_bfunc</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>bfunc</name><operator>.</operator><name>cbf_idx</name></name></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>bfunc</name><operator>.</operator><name>cbf_argcount</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ectx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>ISN_PCALL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>cpfunc_T</name> <modifier>*</modifier></type><name>pfunc</name> <init>= <expr><operator>&amp;</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>pfunc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>partial</name></decl>;</decl_stmt>

<expr_stmt><expr><name>SOURCING_LNUM</name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_lnum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfunc</name><operator>-&gt;</operator><name>cpf_top</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><name><name>pfunc</name><operator>-&gt;</operator><name>cpf_argcount</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>partial</name> <operator>=</operator> <operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <operator>&amp;</operator><name>partial</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>call_partial</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>pfunc</name><operator>-&gt;</operator><name>cpf_argcount</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <operator>&amp;</operator><name>partial</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>partial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_PCALL_END</name></expr>:</case>



<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>*</operator><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_UCALL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>cufunc_T</name> <modifier>*</modifier></type><name>cufunc</name> <init>= <expr><operator>&amp;</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>ufunc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>SOURCING_LNUM</name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_lnum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>call_eval_func</name><argument_list>(<argument><expr><name><name>cufunc</name><operator>-&gt;</operator><name>cuf_name</name></name></expr></argument>,
<argument><expr><name><name>cufunc</name><operator>-&gt;</operator><name>cuf_argcount</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ectx</name></expr></argument>, <argument><expr><name>iptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_RETURN</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>trystack</name> <init>= <expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_trystack</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>trycmd_T</name> <modifier>*</modifier></type><name>trycmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trystack</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trycmd</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>trycmd_T</name> <operator>*</operator><operator>)</operator><name><name>trystack</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>trystack</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>trycmd</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>trycmd</name><operator>-&gt;</operator><name>tcd_frame</name></name> <operator>==</operator> <name><name>ectx</name><operator>.</operator><name>ec_frame</name></name>
<operator>&amp;&amp;</operator> <name><name>trycmd</name><operator>-&gt;</operator><name>tcd_finally_idx</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_iidx</name></name> <operator>=</operator> <name><name>trycmd</name><operator>-&gt;</operator><name>tcd_finally_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trycmd</name><operator>-&gt;</operator><name>tcd_return</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>ectx</name><operator>.</operator><name>ec_frame</name></name> <operator>==</operator> <name>initial_frame_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>func_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_FUNCREF</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dfunc_T</name> <modifier>*</modifier></type><name>dfunc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>partial_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dfunc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dfunc_T</name> <operator>*</operator><operator>)</operator><name><name>def_functions</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>=</operator> <name><name>dfunc</name><operator>-&gt;</operator><name>df_ufunc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>dfunc</name><operator>-&gt;</operator><name>df_ufunc</name><operator>-&gt;</operator><name>uf_refcount</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_JUMP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>jumpwhen_T</name></type> <name>when</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>jump</name><operator>.</operator><name>jump_when</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jump</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>when</name> <operator>!=</operator> <name>JUMP_ALWAYS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jump</name> <operator>=</operator> <call><name>tv2bool</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>when</name> <operator>==</operator> <name>JUMP_IF_FALSE</name>
<operator>||</operator> <name>when</name> <operator>==</operator> <name>JUMP_AND_KEEP_IF_FALSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>!</operator><name>jump</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>when</name> <operator>==</operator> <name>JUMP_IF_FALSE</name> <operator>||</operator> <operator>!</operator><name>jump</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jump</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_iidx</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>jump</name><operator>.</operator><name>jump_where</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_FOR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>idxtv</name> <init>=
<expr><call><name>STACK_TV_VAR</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>forloop</name><operator>.</operator><name>for_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>idxtv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>ec_iidx</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>forloop</name><operator>.</operator><name>for_end</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>lv_first</name></name> <operator>==</operator> <operator>&amp;</operator><name>range_list_item</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>list_find_nr</name><argument_list>(
<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>idxtv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>list_find</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>idxtv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_TRY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>trycmd_T</name> <modifier>*</modifier></type><name>trycmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_trystack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>trycmd</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>trycmd_T</name> <operator>*</operator><operator>)</operator><name><name>ectx</name><operator>.</operator><name>ec_trystack</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>ectx</name><operator>.</operator><name>ec_trystack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_trystack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>trylevel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trycmd</name><operator>-&gt;</operator><name>tcd_frame</name></name> <operator>=</operator> <name><name>ectx</name><operator>.</operator><name>ec_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trycmd</name><operator>-&gt;</operator><name>tcd_catch_idx</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>try</name><operator>.</operator><name>try_catch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trycmd</name><operator>-&gt;</operator><name>tcd_finally_idx</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>try</name><operator>.</operator><name>try_finally</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trycmd</name><operator>-&gt;</operator><name>tcd_caught</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_PUSHEXC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>current_exception</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><literal type="string">"Evaluating catch while current_exception is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>current_exception</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ISN_CATCH</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>trystack</name> <init>= <expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_trystack</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trystack</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>trycmd_T</name> <modifier>*</modifier></type><name>trycmd</name> <init>= <expr><operator>(</operator><operator>(</operator><name>trycmd_T</name> <operator>*</operator><operator>)</operator><name><name>trystack</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>trystack</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>trycmd</name><operator>-&gt;</operator><name>tcd_caught</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>got_int</name> <operator>=</operator> <name>did_throw</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>catch_exception</name><argument_list>(<argument><expr><name>current_exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_ENDTRY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>trystack</name> <init>= <expr><operator>&amp;</operator><name><name>ectx</name><operator>.</operator><name>ec_trystack</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trystack</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>trycmd_T</name> <modifier>*</modifier></type><name>trycmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>--</operator><name><name>trystack</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>trylevel</name></expr>;</expr_stmt>
<expr_stmt><expr><name>trycmd</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>trycmd_T</name> <operator>*</operator><operator>)</operator><name><name>trystack</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>trystack</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trycmd</name><operator>-&gt;</operator><name>tcd_caught</name></name> <operator>&amp;&amp;</operator> <name>current_exception</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>caught_stack</name> <operator>==</operator> <name>current_exception</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>caught_stack</name> <operator>=</operator> <name><name>caught_stack</name><operator>-&gt;</operator><name>caught</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>discard_current_exception</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trycmd</name><operator>-&gt;</operator><name>tcd_return</name></name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>ectx</name><operator>.</operator><name>ec_frame</name></name> <operator>==</operator> <name>initial_frame_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>func_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_THROW</name></expr>:</case>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>throw_exception</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>, <argument><expr><name>ET_USER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>did_throw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_COMPAREBOOL</name></expr>:</case>
<case>case <expr><name>ISN_COMPARESPECIAL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv1</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv2</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>arg1</name> <init>= <expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>arg2</name> <init>= <expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXPR_EQUAL</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>==</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_NEQUAL</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>!=</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_BOOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><name>VVAL_TRUE</name></expr> </then><else>: <expr><name>VVAL_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_OPNR</name></expr>:</case>
<case>case <expr><name>ISN_COMPARENR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv1</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv2</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>arg1</name> <init>= <expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>arg2</name> <init>= <expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>res</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXPR_MULT</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>*</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_DIV</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>/</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_REM</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>%</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_SUB</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>-</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_ADD</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>+</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>EXPR_EQUAL</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>==</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_NEQUAL</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>!=</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_GREATER</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>&gt;</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_GEQUAL</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>&gt;=</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_SMALLER</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>&lt;</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_SEQUAL</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>&lt;=</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_type</name></name> <operator>==</operator> <name>ISN_COMPARENR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_BOOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><name>VVAL_TRUE</name></expr> </then><else>: <expr><name>VVAL_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_OPFLOAT</name></expr>:</case>
<case>case <expr><name>ISN_COMPAREFLOAT</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv1</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv2</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float_T</name></type> <name>arg1</name> <init>= <expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float_T</name></type> <name>arg2</name> <init>= <expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float_T</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXPR_MULT</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>*</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_DIV</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>/</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_SUB</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>-</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_ADD</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>arg1</name> <operator>+</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>EXPR_EQUAL</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>arg1</name> <operator>==</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_NEQUAL</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>arg1</name> <operator>!=</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_GREATER</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>arg1</name> <operator>&gt;</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_GEQUAL</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>arg1</name> <operator>&gt;=</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_SMALLER</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>arg1</name> <operator>&lt;</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_SEQUAL</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>arg1</name> <operator>&lt;=</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_type</name></name> <operator>==</operator> <name>ISN_COMPAREFLOAT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_BOOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>cmp</name></expr> ?</condition><then> <expr><name>VVAL_TRUE</name></expr> </then><else>: <expr><name>VVAL_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>ISN_COMPARELIST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv1</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv2</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>arg1</name> <init>= <expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>arg2</name> <init>= <expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ic</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_ic</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXPR_EQUAL</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator>
<call><name>list_equal</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_NEQUAL</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator>
<operator>!</operator><call><name>list_equal</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_IS</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>arg1</name> <operator>==</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_ISNOT</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>arg1</name> <operator>!=</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_BOOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>cmp</name></expr> ?</condition><then> <expr><name>VVAL_TRUE</name></expr> </then><else>: <expr><name>VVAL_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_COMPAREBLOB</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv1</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv2</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blob_T</name> <modifier>*</modifier></type><name>arg1</name> <init>= <expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_blob</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blob_T</name> <modifier>*</modifier></type><name>arg2</name> <init>= <expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_blob</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXPR_EQUAL</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>blob_equal</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_NEQUAL</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <operator>!</operator><call><name>blob_equal</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_IS</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>arg1</name> <operator>==</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_ISNOT</name></expr>:</case> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>arg1</name> <operator>!=</operator> <name>arg2</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_BOOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>cmp</name></expr> ?</condition><then> <expr><name>VVAL_TRUE</name></expr> </then><else>: <expr><name>VVAL_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_COMPARESTRING</name></expr>:</case>
<case>case <expr><name>ISN_COMPAREDICT</name></expr>:</case>
<case>case <expr><name>ISN_COMPAREFUNC</name></expr>:</case>
<case>case <expr><name>ISN_COMPAREPARTIAL</name></expr>:</case>
<case>case <expr><name>ISN_COMPAREANY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv1</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv2</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>exptype_T</name></type> <name>exptype</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ic</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_ic</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>typval_compare</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>, <argument><expr><name>tv2</name></expr></argument>, <argument><expr><name>exptype</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_BOOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>
?</condition><then> <expr><name>VVAL_TRUE</name></expr> </then><else>: <expr><name>VVAL_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_ADDLIST</name></expr>:</case>
<case>case <expr><name>ISN_ADDBLOB</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv1</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv2</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_type</name></name> <operator>==</operator> <name>ISN_ADDLIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>eval_addlist</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>, <argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>eval_addblob</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>, <argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_OPANY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv1</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv2</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float_T</name></type> <name>f1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_type</name></name> <operator>==</operator> <name>EXPR_ADD</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name> <operator>&amp;&amp;</operator> <name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>eval_addlist</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>, <argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_BLOB</name>
<operator>&amp;&amp;</operator> <name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_BLOB</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>eval_addblob</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>, <argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f1</name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name> <operator>||</operator> <name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXPR_MULT</name></expr>:</case> <expr_stmt><expr><name>f1</name> <operator>=</operator> <name>f1</name> <operator>*</operator> <name>f2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_DIV</name></expr>:</case> <expr_stmt><expr><name>f1</name> <operator>=</operator> <name>f1</name> <operator>/</operator> <name>f2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_SUB</name></expr>:</case> <expr_stmt><expr><name>f1</name> <operator>=</operator> <name>f1</name> <operator>-</operator> <name>f2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_ADD</name></expr>:</case> <expr_stmt><expr><name>f1</name> <operator>=</operator> <name>f1</name> <operator>+</operator> <name>f2</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modulus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>failed</name>;</goto>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXPR_MULT</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <name>n1</name> <operator>*</operator> <name>n2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_DIV</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>num_divide</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_SUB</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <name>n1</name> <operator>-</operator> <name>n2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_ADD</name></expr>:</case> <expr_stmt><expr><name>n1</name> <operator>=</operator> <name>n1</name> <operator>+</operator> <name>n2</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>num_modulus</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_CONCAT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str1</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str2</name> <init>= <expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>concat_str</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_INDEX</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>


<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_NUMBER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_number_exp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>li</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listidx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>


<case>case <expr><name>ISN_MEMBER</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictkey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_NEGATENR</name></expr>:</case>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_NUMBER</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_FLOAT</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_number_exp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <operator>-</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>ISN_CHECKNR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_not_string</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_CHECKTYPE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>checktype_T</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><operator>&amp;</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>ct_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name><name>ct</name><operator>-&gt;</operator><name>ct_type</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1029: Expected %s but got %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vartype_name</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>ct_type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vartype_name</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_2BOOL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tv2bool</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>!</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_BOOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>n</name></expr> ?</condition><then> <expr><name>VVAL_TRUE</name></expr> </then><else>: <expr><name>VVAL_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_2STRING</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>typval_tostring</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_DROP</name></expr>:</case>
<expr_stmt><expr><operator>--</operator><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<label><name>done</name>:</label>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>STACK_TV_BOT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rettv</name> <operator>=</operator> <operator>*</operator><name>tv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<label><name>failed</name>:</label>

<while>while <condition>(<expr><name><name>ectx</name><operator>.</operator><name>ec_frame</name></name> <operator>!=</operator> <name>initial_frame_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>func_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><call><name>STACK_TV</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ectx</name><operator>.</operator><name>ec_stack</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ectx</name><operator>.</operator><name>ec_trystack</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>ex_disassemble</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>ufunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dfunc_T</name> <modifier>*</modifier></type><name>dfunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>isn_T</name> <modifier>*</modifier></type><name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_current</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>trans_function_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>TFN_INT</name> <operator>|</operator> <name>TFN_QUIET</name> <operator>|</operator> <name>TFN_NO_AUTOLOAD</name> <operator>|</operator> <name>TFN_NO_DEREF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ufunc</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ufunc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1061: Cannot find function %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_dfunc_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1062: Function %s is not compiled"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ufunc</name><operator>-&gt;</operator><name>uf_name_exp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ufunc</name><operator>-&gt;</operator><name>uf_name_exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ufunc</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>dfunc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dfunc_T</name> <operator>*</operator><operator>)</operator><name><name>def_functions</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>ufunc</name><operator>-&gt;</operator><name>uf_dfunc_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <name><name>dfunc</name><operator>-&gt;</operator><name>df_instr</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>current</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>current</name> <operator>&lt;</operator> <name><name>dfunc</name><operator>-&gt;</operator><name>df_instr_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>current</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>isn_T</name> <modifier>*</modifier></type><name>iptr</name> <init>= <expr><operator>&amp;</operator><name><name>instr</name><index>[<expr><name>current</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>line_idx</name> <operator>&lt;</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_lnum</name></name> <operator>&amp;&amp;</operator> <name>line_idx</name> <operator>&lt;</operator> <name><name>ufunc</name><operator>-&gt;</operator><name>uf_lines</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>current</name> <operator>&gt;</operator> <name>prev_current</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_current</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ufunc</name><operator>-&gt;</operator><name>uf_lines</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>line_idx</name><operator>++</operator></expr>]</index></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>ISN_EXEC</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d EXEC %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_ECHO</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>echo_T</name> <modifier>*</modifier></type><name>echo</name> <init>= <expr><operator>&amp;</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>echo</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d %s %d"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>echo</name><operator>-&gt;</operator><name>echo_with_white</name></name></expr> ?</condition><then> <expr><literal type="string">"ECHO"</literal></expr> </then><else>: <expr><literal type="string">"ECHON"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>echo</name><operator>-&gt;</operator><name>echo_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_EXECUTE</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d EXECUTE %lld"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_LOAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d LOAD arg[%lld]"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name> <operator>+</operator> <name>STACK_FRAME_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d LOAD $%lld"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>ISN_LOADV</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d LOADV v:%s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><call><name>get_vim_var_name</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_LOADSCRIPT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name> <init>=
<expr><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>script</name><operator>.</operator><name>script_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svar_T</name> <modifier>*</modifier></type><name>sv</name> <init>= <expr><operator>(</operator><operator>(</operator><name>svar_T</name> <operator>*</operator><operator>)</operator><name><name>si</name><operator>-&gt;</operator><name>sn_var_vals</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>script</name><operator>.</operator><name>script_idx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d LOADSCRIPT %s from %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>sv_name</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_LOADS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>SCRIPT_ITEM</name><argument_list>(
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>loadstore</name><operator>.</operator><name>ls_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d LOADS s:%s from %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_LOADG</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d LOADG g:%s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_LOADOPT</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d LOADOPT %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_LOADENV</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d LOADENV %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_LOADREG</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d LOADREG @%c"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ISN_STORE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d STORE arg[%lld]"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name> <operator>+</operator> <name>STACK_FRAME_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d STORE $%lld"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>ISN_STOREV</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d STOREV v:%s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><call><name>get_vim_var_name</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_STOREG</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d STOREG %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_STORES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>SCRIPT_ITEM</name><argument_list>(
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>loadstore</name><operator>.</operator><name>ls_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d STORES %s in %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_STORESCRIPT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name> <init>=
<expr><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>script</name><operator>.</operator><name>script_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svar_T</name> <modifier>*</modifier></type><name>sv</name> <init>= <expr><operator>(</operator><operator>(</operator><name>svar_T</name> <operator>*</operator><operator>)</operator><name><name>si</name><operator>-&gt;</operator><name>sn_var_vals</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>script</name><operator>.</operator><name>script_idx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d STORESCRIPT %s in %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name><name>sv</name><operator>-&gt;</operator><name>sv_name</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_STOREOPT</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d STOREOPT &amp;%s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>storeopt</name><operator>.</operator><name>so_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_STOREENV</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d STOREENV $%s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_STOREREG</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d STOREREG @%c"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_STORENR</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d STORE %lld in $%d"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>storenr</name><operator>.</operator><name>stnr_val</name></name></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>storenr</name><operator>.</operator><name>stnr_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_PUSHNR</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PUSHNR %lld"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_PUSHBOOL</name></expr>:</case>
<case>case <expr><name>ISN_PUSHSPEC</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PUSH %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><call><name>get_var_special_name</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_PUSHF</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PUSHF %g"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>fnumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>ISN_PUSHS</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PUSHS \"%s\""</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_PUSHBLOB</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>numbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>blob2string</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>blob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PUSHBLOB %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_PUSHFUNC</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PUSHFUNC \"%s\""</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>name</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"[none]"</literal></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_PUSHPARTIAL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>partial</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PUSHPARTIAL \"%s\""</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>part</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"[none]"</literal></expr> </then><else>: <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>partial_name</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_PUSHCHANNEL</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>channel</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PUSHCHANNEL %d"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>channel</name><operator>-&gt;</operator><name>ch_id</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>ISN_PUSHJOB</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_JOB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>=</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>job</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PUSHJOB \"%s\""</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>ISN_PUSHEXC</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PUSH v:exception"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_NEWLIST</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d NEWLIST size %lld"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_NEWDICT</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d NEWDICT size %lld"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_BCALL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>cbfunc_T</name> <modifier>*</modifier></type><name>cbfunc</name> <init>= <expr><operator>&amp;</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>bfunc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d BCALL %s(argc %d)"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><call><name>internal_func_name</name><argument_list>(<argument><expr><name><name>cbfunc</name><operator>-&gt;</operator><name>cbf_idx</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cbfunc</name><operator>-&gt;</operator><name>cbf_argcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_DCALL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>cdfunc_T</name> <modifier>*</modifier></type><name>cdfunc</name> <init>= <expr><operator>&amp;</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>dfunc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dfunc_T</name> <modifier>*</modifier></type><name>df</name> <init>= <expr><operator>(</operator><operator>(</operator><name>dfunc_T</name> <operator>*</operator><operator>)</operator><name><name>def_functions</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>cdfunc</name><operator>-&gt;</operator><name>cdf_idx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d DCALL %s(argc %d)"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>df</name><operator>-&gt;</operator><name>df_ufunc</name><operator>-&gt;</operator><name>uf_name_exp</name></name> <operator>!=</operator> <name>NULL</name></expr>
?</condition><then> <expr><name><name>df</name><operator>-&gt;</operator><name>df_ufunc</name><operator>-&gt;</operator><name>uf_name_exp</name></name></expr>
</then><else>: <expr><name><name>df</name><operator>-&gt;</operator><name>df_ufunc</name><operator>-&gt;</operator><name>uf_name</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>cdfunc</name><operator>-&gt;</operator><name>cdf_argcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_UCALL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>cufunc_T</name> <modifier>*</modifier></type><name>cufunc</name> <init>= <expr><operator>&amp;</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>ufunc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d UCALL %s(argc %d)"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name><name>cufunc</name><operator>-&gt;</operator><name>cuf_name</name></name></expr></argument>, <argument><expr><name><name>cufunc</name><operator>-&gt;</operator><name>cuf_argcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_PCALL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>cpfunc_T</name> <modifier>*</modifier></type><name>cpfunc</name> <init>= <expr><operator>&amp;</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>pfunc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PCALL%s (argc %d)"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>cpfunc</name><operator>-&gt;</operator><name>cpf_top</name></name></expr> ?</condition><then> <expr><literal type="string">" top"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>cpfunc</name><operator>-&gt;</operator><name>cpf_argcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_PCALL_END</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d PCALL end"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_RETURN</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d RETURN"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_FUNCREF</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>dfunc_T</name> <modifier>*</modifier></type><name>df</name> <init>= <expr><operator>(</operator><operator>(</operator><name>dfunc_T</name> <operator>*</operator><operator>)</operator><name><name>def_functions</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>
<operator>+</operator> <name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d FUNCREF %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>df</name><operator>-&gt;</operator><name>df_ufunc</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_JUMP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>when</name> <init>= <expr><literal type="string">"?"</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>jump</name><operator>.</operator><name>jump_when</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>JUMP_ALWAYS</name></expr>:</case>
<expr_stmt><expr><name>when</name> <operator>=</operator> <literal type="string">"JUMP"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>JUMP_AND_KEEP_IF_TRUE</name></expr>:</case>
<expr_stmt><expr><name>when</name> <operator>=</operator> <literal type="string">"JUMP_AND_KEEP_IF_TRUE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>JUMP_IF_FALSE</name></expr>:</case>
<expr_stmt><expr><name>when</name> <operator>=</operator> <literal type="string">"JUMP_IF_FALSE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>JUMP_AND_KEEP_IF_FALSE</name></expr>:</case>
<expr_stmt><expr><name>when</name> <operator>=</operator> <literal type="string">"JUMP_AND_KEEP_IF_FALSE"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d %s -&gt; %d"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>when</name></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>jump</name><operator>.</operator><name>jump_where</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_FOR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>forloop_T</name> <modifier>*</modifier></type><name>forloop</name> <init>= <expr><operator>&amp;</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>forloop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d FOR $%d -&gt; %d"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name><name>forloop</name><operator>-&gt;</operator><name>for_idx</name></name></expr></argument>, <argument><expr><name><name>forloop</name><operator>-&gt;</operator><name>for_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_TRY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>try_T</name> <modifier>*</modifier></type><name>try</name> <init>= <expr><operator>&amp;</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>try</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d TRY catch -&gt; %d, finally -&gt; %d"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name><name>try</name><operator>-&gt;</operator><name>try_catch</name></name></expr></argument>, <argument><expr><name><name>try</name><operator>-&gt;</operator><name>try_finally</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ISN_CATCH</name></expr>:</case>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d CATCH"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_ENDTRY</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d ENDTRY"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_THROW</name></expr>:</case>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d THROW"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>ISN_OPNR</name></expr>:</case>
<case>case <expr><name>ISN_OPFLOAT</name></expr>:</case>
<case>case <expr><name>ISN_OPANY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>what</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXPR_MULT</name></expr>:</case> <expr_stmt><expr><name>what</name> <operator>=</operator> <literal type="string">"*"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_DIV</name></expr>:</case> <expr_stmt><expr><name>what</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_REM</name></expr>:</case> <expr_stmt><expr><name>what</name> <operator>=</operator> <literal type="string">"%"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_SUB</name></expr>:</case> <expr_stmt><expr><name>what</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_ADD</name></expr>:</case> <expr_stmt><expr><name>what</name> <operator>=</operator> <literal type="string">"+"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>what</name> <operator>=</operator> <literal type="string">"???"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>ISN_OPNR</name></expr>:</case> <expr_stmt><expr><name>ins</name> <operator>=</operator> <literal type="string">"OPNR"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_OPFLOAT</name></expr>:</case> <expr_stmt><expr><name>ins</name> <operator>=</operator> <literal type="string">"OPFLOAT"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_OPANY</name></expr>:</case> <expr_stmt><expr><name>ins</name> <operator>=</operator> <literal type="string">"OPANY"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>ins</name> <operator>=</operator> <literal type="string">"???"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d %s %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_COMPAREBOOL</name></expr>:</case>
<case>case <expr><name>ISN_COMPARESPECIAL</name></expr>:</case>
<case>case <expr><name>ISN_COMPARENR</name></expr>:</case>
<case>case <expr><name>ISN_COMPAREFLOAT</name></expr>:</case>
<case>case <expr><name>ISN_COMPARESTRING</name></expr>:</case>
<case>case <expr><name>ISN_COMPAREBLOB</name></expr>:</case>
<case>case <expr><name>ISN_COMPARELIST</name></expr>:</case>
<case>case <expr><name>ISN_COMPAREDICT</name></expr>:</case>
<case>case <expr><name>ISN_COMPAREFUNC</name></expr>:</case>
<case>case <expr><name>ISN_COMPAREPARTIAL</name></expr>:</case>
<case>case <expr><name>ISN_COMPAREANY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EXPR_EQUAL</name></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"=="</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_NEQUAL</name></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"!="</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_GREATER</name></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"&gt;"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_GEQUAL</name></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"&gt;="</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_SMALLER</name></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"&lt;"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_SEQUAL</name></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"&lt;="</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_MATCH</name></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"=~"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_IS</name></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"is"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_ISNOT</name></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"isnot"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>EXPR_NOMATCH</name></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"!~"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"???"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>op</name><operator>.</operator><name>op_ic</name></name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch<condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>ISN_COMPAREBOOL</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"COMPAREBOOL"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_COMPARESPECIAL</name></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"COMPARESPECIAL"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_COMPARENR</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"COMPARENR"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_COMPAREFLOAT</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"COMPAREFLOAT"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_COMPARESTRING</name></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"COMPARESTRING"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_COMPAREBLOB</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"COMPAREBLOB"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_COMPARELIST</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"COMPARELIST"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_COMPAREDICT</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"COMPAREDICT"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_COMPAREFUNC</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"COMPAREFUNC"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_COMPAREPARTIAL</name></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"COMPAREPARTIAL"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_COMPAREANY</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"COMPAREANY"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"???"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d %s %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ISN_ADDLIST</name></expr>:</case> <expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d ADDLIST"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_ADDBLOB</name></expr>:</case> <expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d ADDBLOB"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>


<case>case <expr><name>ISN_CONCAT</name></expr>:</case> <expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d CONCAT"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_INDEX</name></expr>:</case> <expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d INDEX"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_MEMBER</name></expr>:</case> <expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d MEMBER %s"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_NEGATENR</name></expr>:</case> <expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d NEGATENR"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ISN_CHECKNR</name></expr>:</case> <expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d CHECKNR"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ISN_CHECKTYPE</name></expr>:</case> <expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d CHECKTYPE %s stack[%d]"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><call><name>vartype_name</name><argument_list>(<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>type</name><operator>.</operator><name>ct_type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>type</name><operator>.</operator><name>ct_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ISN_2BOOL</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d INVERT (!val)"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d 2BOOL (!!val)"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>ISN_2STRING</name></expr>:</case> <expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d 2STRING stack[%lld]"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>iptr</name><operator>-&gt;</operator><name>isn_arg</name><operator>.</operator><name>number</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ISN_DROP</name></expr>:</case> <expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%4d DROP"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>tv2bool</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VAR_NUMBER</name></expr>:</case>
<return>return <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>VAR_FLOAT</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>VAR_PARTIAL</name></expr>:</case>
<return>return <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
<case>case <expr><name>VAR_FUNC</name></expr>:</case>
<case>case <expr><name>VAR_STRING</name></expr>:</case>
<return>return <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NUL</name></expr>;</return>
<case>case <expr><name>VAR_LIST</name></expr>:</case>
<return>return <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>VAR_DICT</name></expr>:</case>
<return>return <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>VAR_BOOL</name></expr>:</case>
<case>case <expr><name>VAR_SPECIAL</name></expr>:</case>
<return>return <expr><ternary><condition><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <name>VVAL_TRUE</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
<case>case <expr><name>VAR_JOB</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>VAR_CHANNEL</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_channel</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>VAR_BLOB</name></expr>:</case>
<return>return <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_blob</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_blob</name><operator>-&gt;</operator><name>bv_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case>
<case>case <expr><name>VAR_VOID</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>check_not_string</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1030: Using a String as a Number"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
