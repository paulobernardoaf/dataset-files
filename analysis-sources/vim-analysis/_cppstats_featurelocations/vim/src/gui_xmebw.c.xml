<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\gui_xmebw.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/XmP.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/DrawP.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XM_TRAITP_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XM_MANAGER_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XM_UNHIGHLIGHTT_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XM_XPMP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/TraitP.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Manager.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/UnhighlightT.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/XpmP.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNHIGHLIGHTT</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X11_XPM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xpm.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/xpm.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/ManagerP.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Display.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/DisplayP.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Shell.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/ShellP.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_xmebwp.h"</cpp:file></cpp:include>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>XmVersion</name> <operator>&lt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Lab_IsMenupane</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Lab_IsMenupane</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(Lab_MenuType(w) == (int)XmMENU_POPUP || Lab_MenuType(w) == (int)XmMENU_PULLDOWN)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XmeClearBorder</name></cpp:macro> <cpp:value>_XmClearBorder</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XmeDrawShadows</name></cpp:macro> <cpp:value>_XmDrawShadows</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XmeDrawHighlight</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_XmDrawHighlight(a, b, c, d, e, f, g, h, LineSolid)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XmFOCUS_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XmFOCUS_IGNORE</name></cpp:macro> <cpp:value>1&lt;&lt;1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>Boolean</name></type> <name>_XmGetInDragMode</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>widget</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_XmPrimitiveEnter</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>wid</name></decl></parameter>,
<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type> <name>event</name></decl></parameter>,
<parameter><decl><type><name>String</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type> <name>num_params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_XmPrimitiveLeave</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>wid</name></decl></parameter>,
<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type> <name>event</name></decl></parameter>,
<parameter><decl><type><name>String</name> <modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type> <name>num_params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_XmSetFocusFlag</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_XmCalcLabelDimensions</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>wid</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>rq</name></decl></parameter>, <parameter><decl><type><name>Widget</name></type> <name>eb</name></decl></parameter>, <parameter><decl><type><name>ArgList</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Boolean</name></type> <name>SetValues</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><name>Widget</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>Widget</name></type> <name>new</name></decl></parameter>, <parameter><decl><type><name>ArgList</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Redisplay</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Region</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Enter</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Leave</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BorderHighlight</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BorderUnhighlight</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stipple_width</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stipple_height</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>stipple_bits</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x05</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STIPPLE_BITMAP</name></cpp:macro> <cpp:value>xmEnhancedButtonClassRec.enhancedbutton_class.stipple_bitmap</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <name>XtActionsRec</name></type> <name><name>actionsList</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="string">"Enter"</literal></expr>, <expr><name>Enter</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"Leave"</literal></expr>, <expr><name>Leave</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtResource</name></type> <name><name>resources</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{
<expr><name>XmNpixmapData</name></expr>, <expr><name>XmCPixmap</name></expr>, <expr><name>XmRString</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>String</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>XmEnhancedButtonRec</name></expr></argument>, <argument><expr><name><name>enhancedbutton</name><operator>.</operator><name>pixmap_data</name></name></expr></argument>)</argument_list></call></expr>,
<expr><name>XmRImmediate</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr>
}</block></expr>, <expr><block>{
<expr><name>XmNpixmapFile</name></expr>, <expr><name>XmCPixmap</name></expr>, <expr><name>XmRString</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>String</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>XmEnhancedButtonRec</name></expr></argument>, <argument><expr><name><name>enhancedbutton</name><operator>.</operator><name>pixmap_file</name></name></expr></argument>)</argument_list></call></expr>,
<expr><name>XmRImmediate</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr>
}</block></expr>, <expr><block>{
<expr><name>XmNspacing</name></expr>, <expr><name>XmCSpacing</name></expr>, <expr><name>XmRHorizontalDimension</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dimension</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>XmEnhancedButtonRec</name></expr></argument>, <argument><expr><name><name>enhancedbutton</name><operator>.</operator><name>spacing</name></name></expr></argument>)</argument_list></call></expr>,
<expr><name>XmRImmediate</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <literal type="number">2</literal></expr>
}</block></expr>,
<expr><block>{
<expr><name>XmNlabelLocation</name></expr>, <expr><name>XmCLocation</name></expr>, <expr><name>XmRInt</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>XmEnhancedButtonRec</name></expr></argument>, <argument><expr><name><name>enhancedbutton</name><operator>.</operator><name>label_location</name></name></expr></argument>)</argument_list></call></expr>,
<expr><name>XtRImmediate</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>XmRIGHT</name></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>XmPrimitiveClassExtRec</name></type> <name>xmEnhancedButtonPrimClassExtRec</name> <init>=
<expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>NULLQUARK</name></expr>,
<expr><name>XmPrimitiveClassExtVersion</name></expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>XmPrimitiveClassExtRec</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><name>XmInheritBaselineProc</name></expr>,
<expr><name>XmInheritDisplayRectProc</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmEnhancedButtonClassRec</name></type> <name>xmEnhancedButtonClassRec</name> <init>=
<expr><block>{
<expr><block>{

<expr><operator>(</operator><name>WidgetClass</name><operator>)</operator> <operator>&amp;</operator> <name>xmPushButtonClassRec</name></expr>,
<expr><literal type="string">"XmEnhancedButton"</literal></expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>XmEnhancedButtonRec</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>False</name></expr>,
<expr><name>Initialize</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>XtInheritRealize</name></expr>,
<expr><name>actionsList</name></expr>,
<expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>actionsList</name></expr></argument>)</argument_list></call></expr>,
<expr><name>resources</name></expr>,
<expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>resources</name></expr></argument>)</argument_list></call></expr>,
<expr><name>NULLQUARK</name></expr>,
<expr><name>True</name></expr>,
<expr><name>XtExposeCompressMaximal</name></expr>,
<expr><name>True</name></expr>,
<expr><name>False</name></expr>,
<expr><name>Destroy</name></expr>,
<expr><name>XtInheritResize</name></expr>,
<expr><name>Redisplay</name></expr>,
<expr><name>SetValues</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>XtInheritSetValuesAlmost</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>XtInheritAcceptFocus</name></expr>,
<expr><name>XtVersion</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>XtInheritDisplayAccelerator</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr>,


<expr><block>{
<expr><name>BorderHighlight</name></expr>,
<expr><name>BorderUnhighlight</name></expr>,
<expr><name>XtInheritTranslations</name></expr>,
<expr><name>XmInheritArmAndActivate</name></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name>xmEnhancedButtonPrimClassExtRec</name></expr>,
}</block></expr>,


<expr><block>{
<expr><name>XmInheritSetOverrideCallback</name></expr>,
<expr><name>XmInheritMenuProc</name></expr>,
<expr><name>XtInheritTranslations</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr>,


<expr><block>{
<expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr>,
}</block></expr>,


<expr><block>{
<expr><name>None</name></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>WidgetClass</name></type> <name>xmEnhancedButtonWidgetClass</name> <init>=
<expr><operator>(</operator><name>WidgetClass</name><operator>)</operator><operator>&amp;</operator><name>xmEnhancedButtonClassRec</name></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type>
<name>bump_color</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>value</name> <operator>-</operator> <literal type="number">65535</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">65535</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>alloc_color</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>Colormap</name></type> <name>colormap</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>colorname</name></decl></parameter>,
<parameter><decl><type><name>XColor</name> <modifier>*</modifier></type><name>xcolor</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><name>closure</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>colorname</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XParseColor</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>colormap</name></expr></argument>, <argument><expr><name>colorname</name></expr></argument>, <argument><expr><name>xcolor</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xcolor</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <call><name>bump_color</name><argument_list>(<argument><expr><name><name>xcolor</name><operator>-&gt;</operator><name>red</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xcolor</name><operator>-&gt;</operator><name>green</name></name> <operator>=</operator> <call><name>bump_color</name><argument_list>(<argument><expr><name><name>xcolor</name><operator>-&gt;</operator><name>green</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xcolor</name><operator>-&gt;</operator><name>blue</name></name> <operator>=</operator> <call><name>bump_color</name><argument_list>(<argument><expr><name><name>xcolor</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>XAllocColor</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>colormap</name></expr></argument>, <argument><expr><name>xcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>blank_xpm</name><index>[]</index></name> <init>=
<expr><block>{

<expr><literal type="string">"12 12 4 1 0 0"</literal></expr>,

<expr><literal type="string">" s iconColor1 m black c #000000"</literal></expr>,
<expr><literal type="string">". s none m none c none"</literal></expr>,
<expr><literal type="string">"X s topShadowColor m none c #DCDEE5"</literal></expr>,
<expr><literal type="string">"o s bottomShadowColor m black c #5D6069"</literal></expr>,

<expr><literal type="string">" .."</literal></expr>,
<expr><literal type="string">" XXXXXXXX .."</literal></expr>,
<expr><literal type="string">" X....... o."</literal></expr>,
<expr><literal type="string">" X....... o."</literal></expr>,
<expr><literal type="string">" X....... o."</literal></expr>,
<expr><literal type="string">" X....... o."</literal></expr>,
<expr><literal type="string">" X....... o."</literal></expr>,
<expr><literal type="string">" X....... o."</literal></expr>,
<expr><literal type="string">" X....... o."</literal></expr>,
<expr><literal type="string">" o."</literal></expr>,
<expr><literal type="string">"..ooooooooo."</literal></expr>,
<expr><literal type="string">"............"</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_pixmap</name><parameter_list>(<parameter><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>XPMATTRIBUTES_TYPE</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pixmap</name></type> <name>sen_pix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>XpmColorSymbol</name></type> <name><name>color</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"none"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"None"</literal></expr>, <expr><literal type="string">"none"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"background"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"foreground"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"bottomShadowColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"topShadowColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"highlightColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"armColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name> <init>= <expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>border</name></decl>, <decl><type ref="prev"/><name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pixmap</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pixmap</name></type> <name>pix</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pixmap</name></type> <name>arm_pix</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pixmap</name></type> <name>ins_pix</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pixmap</name></type> <name>high_pix</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GC</name></type> <name>gc</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>XtGetGC</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator><name>eb</name></expr></argument>, <argument><expr><operator>(</operator><name>XtGCMask</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scr</name> <operator>=</operator> <call><name>DefaultScreen</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>RootWindow</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>pixmap</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>normal_pixmap</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>armed_pixmap</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>highlight_pixmap</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>insensitive_pixmap</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>motif_get_toolbar_colors</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>foreground</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>bottom_shadow_color</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_color</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pixel</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pixel</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pixel</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pixel</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>foreground</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>pixel</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>pixel</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>pixel</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>pixel</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>arm_color</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>valuemask</name></name> <operator>=</operator> <name>XpmColorSymbols</name> <operator>|</operator> <name>XpmCloseness</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>closeness</name></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>colorsymbols</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>numsymbols</name></name> <operator>=</operator> <call><name>XtNumber</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>XpmReadFileToPixmap</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fname</name> <operator>||</operator> <name>status</name> <operator>!=</operator> <name>XpmSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>XpmCreatePixmapFromData</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>XpmSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>XpmCreatePixmapFromData</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>blank_xpm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pix</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XpmFreeAttributes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XGetGeometry</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>border</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sen_pix</name> <operator>=</operator> <call><name>XCreatePixmap</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>sen_pix</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipMask</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipOrigin</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCopyArea</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><name>sen_pix</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>pixel</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>bottom_shadow_color</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XpmAllocColor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>valuemask</name></name> <operator>=</operator> <name>XpmColorSymbols</name> <operator>|</operator> <name>XpmCloseness</name> <operator>|</operator> <name>XpmAllocColor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>alloc_color</name></name> <operator>=</operator> <name>alloc_color</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>valuemask</name></name> <operator>=</operator> <name>XpmColorSymbols</name> <operator>|</operator> <name>XpmCloseness</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>closeness</name></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>colorsymbols</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>numsymbols</name></name> <operator>=</operator> <call><name>XtNumber</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>XpmCreatePixmapFromData</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pix</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XpmFreeAttributes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>high_pix</name> <operator>=</operator> <call><name>XCreatePixmap</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>XSetClipMask</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>high_pix</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipMask</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipOrigin</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCopyArea</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><name>high_pix</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arm_pix</name> <operator>=</operator> <call><name>XCreatePixmap</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>fill_on_arm</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>arm_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>XSetClipOrigin</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipMask</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>arm_pix</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipMask</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipOrigin</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>shift</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCopyArea</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><name>arm_pix</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>shift</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>valuemask</name></name> <operator>=</operator> <name>XpmColorSymbols</name> <operator>|</operator> <name>XpmCloseness</name> <operator>|</operator> <name>XpmColorKey</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>closeness</name></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>colorsymbols</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>numsymbols</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>color_key</name></name> <operator>=</operator> <name>XPM_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>XpmCreatePixmapFromData</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>ins_pix</name> <operator>=</operator> <call><name>XCreatePixmap</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipOrigin</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipMask</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>ins_pix</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipMask</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipOrigin</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>shift</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>ins_pix</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>shift</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>shift</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>bottom_shadow_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetClipOrigin</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>ins_pix</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtReleaseGC</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XpmFreeAttributes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>normal_pixmap</name></name> <operator>=</operator> <name>sen_pix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>highlight_pixmap</name></name> <operator>=</operator> <name>high_pix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>insensitive_pixmap</name></name> <operator>=</operator> <name>ins_pix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>armed_pixmap</name></name> <operator>=</operator> <name>arm_pix</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>doing_setvalues</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>doing_setvalues</name></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTON_MASK</name></cpp:macro> <cpp:value>( Button1Mask | Button2Mask | Button3Mask | Button4Mask | Button5Mask )</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>draw_shadows</name><parameter_list>(<parameter><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GC</name></type> <name>top_gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GC</name></type> <name>bottom_gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>etched_in</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XmVersion</name> <operator>&gt;</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>XmDisplay</name></type> <name>dpy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dpy</name> <operator>=</operator> <operator>(</operator><name>XmDisplay</name><operator>)</operator> <call><name>XmGetXmDisplay</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>etched_in</name> <operator>=</operator> <name><name>dpy</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>enable_etched_in_menu</name></name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>etched_in</name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>etched_in</name> <operator>^</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>top_gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_GC</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bottom_gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>bottom_shadow_GC</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>top_gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>bottom_shadow_GC</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bottom_gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_GC</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XmeDrawShadows</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>top_gc</name></expr></argument>,
<argument><expr><name>bottom_gc</name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>etched_in</name></expr> ?</condition><then> <expr><name>XmSHADOW_IN</name></expr> </then><else>: <expr><name>XmSHADOW_OUT</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>draw_highlight</name><parameter_list>(<parameter><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlighted</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_drawn</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XtWidth</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>XtHeight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XmeDrawHighlight</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_GC</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>XtWidth</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtHeight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>draw_unhighlight</name><parameter_list>(<parameter><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GC</name></type> <name>manager_background_GC</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlighted</name></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_drawn</name></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XtWidth</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>XtHeight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XmIsManager</name><argument_list>(<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNHIGHLIGHTT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>XmSpecifyUnhighlightTrait</name></type> <name>UnhighlightT</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>UnhighlightT</name> <operator>=</operator> <operator>(</operator><name>XmSpecifyUnhighlightTrait</name><operator>)</operator> <call><name>XmeTraitGet</name><argument_list>(<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator>
<call><name>XtClass</name><argument_list>(<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>XmQTspecifyUnhighlight</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>UnhighlightT</name><operator>-&gt;</operator><name>getUnhighlightGC</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>manager_background_GC</name> <operator>=</operator>
<call><name><name>UnhighlightT</name><operator>-&gt;</operator><name>getUnhighlightGC</name></name><argument_list>(<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>manager_background_GC</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>XmManagerWidget</name><operator>)</operator>
<operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>parent</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>manager</name><operator>.</operator><name>background_GC</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>manager_background_GC</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>XmManagerWidget</name><operator>)</operator>
<operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>parent</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>manager</name><operator>.</operator><name>background_GC</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>XmeDrawHighlight</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>manager_background_GC</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>XtWidth</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtHeight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name> <operator>&amp;&amp;</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XmeClearBorder</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XmeClearBorder</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>XtWidth</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>XtHeight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>draw_pixmap</name><parameter_list>(<parameter><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name></decl></parameter>,
<parameter><decl><type><name>XEvent</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>Region</name> <name>region</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Pixmap</name></type> <name>pix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GC</name></type> <name>gc</name> <init>= <expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>normal_GC</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cardinal</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cardinal</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cardinal</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Cardinal</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XtIsSensitive</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>insensitive_pixmap</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlighted</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>highlight_pixmap</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>armed_pixmap</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>normal_pixmap</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pix</name> <operator>==</operator> <name>None</name> <operator>||</operator> <operator>!</operator><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>normal_GC</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name>
<operator>+</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name>
<operator>+</operator> <name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>margin_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name>
<operator>+</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name>
<operator>+</operator> <name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>margin_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>depth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XCopyArea</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XCopyPlane</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>draw_label</name><parameter_list>(<parameter><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>Region</name></type> <name>region</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GC</name></type> <name>tmp_gc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>replaceGC</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>deadjusted</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XmVersion</name> <operator>&gt;</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>XmDisplay</name></type> <name>dpy</name> <init>= <expr><operator>(</operator><name>XmDisplay</name><operator>)</operator><call><name>XmGetXmDisplay</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>etched_in</name> <init>= <expr><name><name>dpy</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>enable_etched_in_menu</name></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>Boolean</name></type> <name>etched_in</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>!</operator><call><name>Lab_IsMenupane</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>fill_on_arm</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><call><name>Lab_IsMenupane</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>etched_in</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>label_type</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmSTRING</name>
<operator>&amp;&amp;</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>arm_color</name></name> <operator>==</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>foreground</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmp_gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>normal_GC</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>normal_GC</name></name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>background_gc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>replaceGC</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>label_type</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmPIXMAP</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>arm_pixmap</name></name> <operator>!=</operator> <name>XmUNSPECIFIED_PIXMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>pixmap</name></name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>arm_pixmap</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>pixmap</name></name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>unarm_pixmap</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>pixmap</name></name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>unarm_pixmap</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>default_button_shadow_thickness</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>deadjusted</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lab_MarginLeft</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>Xm3D_ENHANCE_PIXEL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lab_MarginRight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>Xm3D_ENHANCE_PIXEL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lab_MarginTop</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>Xm3D_ENHANCE_PIXEL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lab_MarginBottom</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>Xm3D_ENHANCE_PIXEL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>XtExposeProc</name></type> <name>expose</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtProcessLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expose</name> <operator>=</operator> <name><name>xmLabelClassRec</name><operator>.</operator><name>core_class</name><operator>.</operator><name>expose</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtProcessUnlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>expose</name>)<argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>deadjusted</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Lab_MarginLeft</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>Xm3D_ENHANCE_PIXEL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lab_MarginRight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>Xm3D_ENHANCE_PIXEL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lab_MarginTop</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>Xm3D_ENHANCE_PIXEL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lab_MarginBottom</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>Xm3D_ENHANCE_PIXEL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>replaceGC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>normal_GC</name></name> <operator>=</operator> <name>tmp_gc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Enter</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>wid</name></decl></parameter>,
<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>String</name> <modifier>*</modifier><name>params</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_params</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name> <init>= <expr><operator>(</operator><name>XmEnhancedButtonWidget</name><operator>)</operator> <name>wid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XmPushButtonCallbackStruct</name></type> <name>call_value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Lab_IsMenupane</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ShellWidget</name><operator>)</operator> <call><name>XtParent</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>shell</name><operator>.</operator><name>popped_up</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>_XmGetInDragMode</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XmVersion</name> <operator>&gt;</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>XmDisplay</name></type> <name>dpy</name> <init>= <expr><operator>(</operator><name>XmDisplay</name><operator>)</operator> <call><name>XmGetXmDisplay</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>etched_in</name> <init>= <expr><name><name>dpy</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>enable_etched_in_menu</name></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>Boolean</name></type> <name>etched_in</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>_XmSetFocusFlag</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>XmFOCUS_IGNORE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtSetKeyboardFocus</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_XmSetFocusFlag</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>XmFOCUS_IGNORE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>XmManagerWidget</name><operator>)</operator> <call><name>XtParent</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>manager</name><operator>.</operator><name>active_child</name></name> <operator>=</operator> <name>wid</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>etched_in</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>XmIsTearOffButton</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>fill_gc</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_label</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_pixmap</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator>
<literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XmeDrawShadows</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_GC</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>bottom_shadow_GC</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>etched_in</name></expr> ?</condition><then> <expr><name>XmSHADOW_IN</name></expr> </then><else>: <expr><name>XmSHADOW_OUT</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>arm_callback</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>call_value</name><operator>.</operator><name>reason</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmCR_ARM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>call_value</name><operator>.</operator><name>event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtCallCallbackList</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>arm_callback</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>call_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>XtExposeProc</name></type> <name>expose</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_XmPrimitiveEnter</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name> <operator>==</operator> <name>TRUE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XtProcessLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expose</name> <operator>=</operator> <call><name>XtClass</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>core_class</name><operator>.</operator><name>expose</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtProcessUnlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>expose</name>) <argument_list>(<argument><expr><name>wid</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><operator>(</operator><name>Region</name><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>draw_highlight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_shadows</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_pixmap</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Leave</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>wid</name></decl></parameter>,
<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>String</name> <modifier>*</modifier><name>params</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_params</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name> <init>= <expr><operator>(</operator><name>XmEnhancedButtonWidget</name><operator>)</operator><name>wid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XmPushButtonCallbackStruct</name></type> <name>call_value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Lab_IsMenupane</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XmVersion</name> <operator>&gt;</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>XmDisplay</name></type> <name>dpy</name> <init>= <expr><operator>(</operator><name>XmDisplay</name><operator>)</operator> <call><name>XmGetXmDisplay</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>etched_in</name> <init>= <expr><name><name>dpy</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>enable_etched_in_menu</name></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>Boolean</name></type> <name>etched_in</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>_XmGetInDragMode</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator><name>eb</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator> 
<name><name>event</name><operator>-&gt;</operator><name>xcrossing</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>NotifyNormal</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>XmManagerWidget</name><operator>)</operator> <call><name>XtParent</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>manager</name><operator>.</operator><name>active_child</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>etched_in</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>XmIsTearOffButton</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>background_gc</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_label</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_pixmap</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XmeClearBorder</name>
<argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>-</operator>
<literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>-</operator>
<literal type="number">2</literal> <operator>*</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>disarm_callback</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>call_value</name><operator>.</operator><name>reason</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmCR_DISARM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>call_value</name><operator>.</operator><name>event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtCallCallbackList</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name></expr></argument>,
<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>disarm_callback</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>call_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_XmPrimitiveLeave</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name> <operator>==</operator> <name>TRUE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>XtExposeProc</name></type> <name>expose</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtProcessLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expose</name> <operator>=</operator> <call><name>XtClass</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>core_class</name><operator>.</operator><name>expose</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtProcessUnlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>expose</name>) <argument_list>(<argument><expr><name>wid</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><operator>(</operator><name>Region</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_unhighlight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_pixmap</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>draw_unhighlight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_pixmap</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsNull</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p) == XmUNSPECIFIED_PIXMAP)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_size</name><parameter_list>(<parameter><decl><type><name>XmEnhancedButtonWidget</name></type> <name>newtb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_XmCalcLabelDimensions</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>newtb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>newtb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_data</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsNull</name><argument_list>(<argument><expr><name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>pixmap</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsNull</name><argument_list>(<argument><expr><name><name>newtb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>normal_pixmap</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>newtb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>newtb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>Lab_IsMenupane</name><argument_list>(<argument><expr><name>newtb</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>margin_left</name></name> <operator>=</operator> <name>w</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>newtb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name>
<operator>+</operator> <name><name>newtb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name><operator>)</operator>
<operator>+</operator> <name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>margin_width</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>margin_left</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newtb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>w</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>newtb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name>
<operator>+</operator> <name><name>newtb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name>
<operator>+</operator> <name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>margin_width</name></name><operator>)</operator>
<operator>+</operator> <name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>TextRect</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>TextRect</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>margin_left</name></name> <operator>+=</operator> <name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>margin_width</name></name>
<operator>+</operator> <name><name>newtb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newtb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>+=</operator> <name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>margin_width</name></name>
<operator>+</operator> <name><name>newtb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>TextRect</name><operator>.</operator><name>height</name></name> <operator>&lt;</operator> <name>h</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>newtb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>h</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>newtb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name>
<operator>+</operator> <name><name>newtb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name>
<operator>+</operator> <name><name>newtb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>margin_height</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
printf("%d %d %d %d %d %d - %d %d\n", newtb-&gt;enhancedbutton.normal_pixmap,
h, newtb-&gt;core.height,
newtb-&gt;primitive.shadow_thickness,
newtb-&gt;primitive.highlight_thickness,
newtb-&gt;label.margin_height,
newtb-&gt;core.width,
newtb-&gt;core.height);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<block>{<block_content>
<decl_stmt><decl><type><name>XtWidgetProc</name></type> <name>resize</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>XtProcessLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resize</name> <operator>=</operator> <name><name>xmLabelClassRec</name><operator>.</operator><name>core_class</name><operator>.</operator><name>resize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtProcessUnlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier> <name>resize</name>) <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>newtb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Initialize</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>rq</name></decl></parameter>, <parameter><decl><type><name>Widget</name></type> <name>ebw</name></decl></parameter>, <parameter><decl><type><name>ArgList</name> <name>args</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>n</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XmEnhancedButtonWidget</name></type> <name>request</name> <init>= <expr><operator>(</operator><name>XmEnhancedButtonWidget</name><operator>)</operator><name>rq</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name> <init>= <expr><operator>(</operator><name>XmEnhancedButtonWidget</name><operator>)</operator><name>ebw</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XtWidgetProc</name></type> <name>resize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtProcessLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resize</name> <operator>=</operator> <name><name>xmLabelClassRec</name><operator>.</operator><name>core_class</name><operator>.</operator><name>resize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtProcessUnlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>STIPPLE_BITMAP</name> <operator>==</operator> <name>None</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name> <init>= <expr><call><name>XtDisplay</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>rootW</name> <init>= <expr><call><name>DefaultRootWindow</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>STIPPLE_BITMAP</name> <operator>=</operator> <call><name>XCreateBitmapFromData</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>rootW</name></expr></argument>, <argument><expr><name>stipple_bits</name></expr></argument>,
<argument><expr><name>stipple_width</name></expr></argument>, <argument><expr><name>stipple_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>doing_setvalues</name></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>pixmap_data</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>XmString</name></type> <name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_pixmap</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>pixmap</name></name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>normal_pixmap</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_size</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier> <name>resize</name>)<argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_pixmaps</name><parameter_list>(<parameter><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>Pixmap</name></type> <name>norm_pix</name> <init>= <expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>normal_pixmap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pixmap</name></type> <name>arm_pix</name> <init>= <expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>armed_pixmap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pixmap</name></type> <name>insen_pix</name> <init>= <expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>insensitive_pixmap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pixmap</name></type> <name>high_pix</name> <init>= <expr><name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>highlight_pixmap</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>norm_pix</name> <operator>!=</operator> <name>None</name> <operator>&amp;&amp;</operator> <name>norm_pix</name> <operator>!=</operator> <name>XmUNSPECIFIED_PIXMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>norm_pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arm_pix</name> <operator>!=</operator> <name>None</name> <operator>&amp;&amp;</operator> <name>arm_pix</name> <operator>!=</operator> <name>XmUNSPECIFIED_PIXMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arm_pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>insen_pix</name> <operator>!=</operator> <name>None</name> <operator>&amp;&amp;</operator> <name>insen_pix</name> <operator>!=</operator> <name>XmUNSPECIFIED_PIXMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insen_pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>high_pix</name> <operator>!=</operator> <name>None</name> <operator>&amp;&amp;</operator> <name>high_pix</name> <operator>!=</operator> <name>XmUNSPECIFIED_PIXMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>high_pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Destroy</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XmIsEnhancedButton</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_pixmaps</name><argument_list>(<argument><expr><operator>(</operator><name>XmEnhancedButtonWidget</name><operator>)</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type>
<name>SetValues</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>current</name></decl></parameter>,
<parameter><decl><type><name>Widget</name> <name>request</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>Widget</name></type> <name>new</name></decl></parameter>,
<parameter><decl><type><name>ArgList</name> <name>args</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>n</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XmEnhancedButtonWidget</name></type> <name>cur</name> <init>= <expr><operator>(</operator><name>XmEnhancedButtonWidget</name><operator>)</operator> <name>current</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name> <init>= <expr><operator>(</operator><name>XmEnhancedButtonWidget</name><operator>)</operator> <name>new</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>redraw</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>change</name> <init>= <expr><name>True</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name> <init>= <expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_EQUAL</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cur-&gt;field != eb-&gt;field)</cpp:value></cpp:define>




<if_stmt><if>if <condition>(<expr><call><name>NOT_EQUAL</name><argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>sensitive</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Lab_IsMenupane</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>sensitive</name></name> <operator>==</operator> <name>True</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>draw_unhighlight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r_border</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>root_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>root_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>win_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>win_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>root_q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>





<expr_stmt><expr><call><name>XGetGeometry</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_width</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>r_height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_border</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XQueryPointer</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>root_q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>root_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <name>root_q</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>win_x</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>win_y</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>win_x</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>r_width</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>win_y</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>r_height</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>draw_highlight</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_shadows</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>True</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>NOT_EQUAL</name><argument_list>(<argument><expr><name><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

<expr_stmt><expr><name>change</name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NOT_EQUAL</name><argument_list>(<argument><expr><name><name>primitive</name><operator>.</operator><name>foreground</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NOT_EQUAL</name><argument_list>(<argument><expr><name><name>core</name><operator>.</operator><name>background_pixel</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NOT_EQUAL</name><argument_list>(<argument><expr><name><name>pushbutton</name><operator>.</operator><name>fill_on_arm</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NOT_EQUAL</name><argument_list>(<argument><expr><name><name>enhancedbutton</name><operator>.</operator><name>spacing</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NOT_EQUAL</name><argument_list>(<argument><expr><name><name>enhancedbutton</name><operator>.</operator><name>label_location</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NOT_EQUAL</name><argument_list>(<argument><expr><name><name>label</name><operator>.</operator><name>_label</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_size</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>==</operator> <name>True</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>change</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_pixmap</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlighted</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>pixmap</name></name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>highlight_pixmap</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>pixmap</name></name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>enhancedbutton</name><operator>.</operator><name>normal_pixmap</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>change</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_size</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>redraw</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Redisplay</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>Region</name></type> <name>region</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name> <init>= <expr><operator>(</operator><name>XmEnhancedButtonWidget</name><operator>)</operator> <name>w</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XmVersion</name> <operator>&gt;</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>XmDisplay</name></type> <name>dpy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XtEnum</name></type> <name>default_button_emphasis</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>XRectangle</name></type> <name>box</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>adjust</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fill</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XtIsRealized</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XmVersion</name> <operator>&gt;</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><name>dpy</name> <operator>=</operator> <operator>(</operator><name>XmDisplay</name><operator>)</operator><call><name>XmGetXmDisplay</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>default_button_emphasis</name> <operator>=</operator> <name><name>dpy</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>default_button_emphasis</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>arm_color</name></name> <operator>==</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_color</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>arm_color</name></name> <operator>==</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>bottom_shadow_color</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fill</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>compatible</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>adjust</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>show_as_default</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>adjust</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>default_button_shadow_thickness</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>adjust</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>adjust</name> <operator>=</operator> <name>adjust</name> <operator>+</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>adjust</name> <operator>=</operator> <operator>(</operator><name>adjust</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name> <operator>+</operator> <name>adjust</name> <operator>+</operator> <name>fill</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name>
<operator>+</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>shadow_thickness</name></name> <operator>+</operator> <name>fill</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>box</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>box</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>adjust</name> <operator>=</operator> <operator>(</operator><name>dx</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>box</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>adjust</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>box</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>adjust</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Lab_IsMenupane</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GC</name></type> <name>gc</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name> <operator>&amp;&amp;</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>fill_on_arm</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>label_type</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmPIXMAP</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>arm_pixmap</name></name> <operator>!=</operator> <name>XmUNSPECIFIED_PIXMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>fill_gc</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>background_gc</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>fill_gc</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>background_gc</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc</name></expr></argument>,
<argument><expr><name><name>box</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>box</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>box</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>box</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>draw_label</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Lab_IsMenupane</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>armed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>XmPushButtonWidgetClass</name><operator>)</operator><call><name>XtClass</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>-&gt;</operator><name><name>primitive_class</name><operator>.</operator><name>border_highlight</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>w</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>draw_pixmap</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>adjust</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XmVersion</name> <operator>&gt;</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>





<switch>switch <condition>(<expr><name>default_button_emphasis</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>XmEXTERNAL_HIGHLIGHT</name></expr>:</case>
<expr_stmt><expr><name>adjust</name> <operator>=</operator> <operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name> <operator>-</operator>
<operator>(</operator><ternary><condition><expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>default_button_shadow_thickness</name></name></expr>
?</condition><then> <expr><name>Xm3D_ENHANCE_PIXEL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XmINTERNAL_HIGHLIGHT</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<if_stmt><if>if <condition>(<expr><name><name>box</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name>adjust</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>borderwidth</name> <init>=<expr><name><name>box</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>adjust</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rectwidth</name> <init>= <expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>adjust</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rectheight</name> <init>= <expr><name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>adjust</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XmIsManager</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XmeDrawHighlight</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>XmParentBackgroundGC</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>adjust</name></expr></argument>, <argument><expr><name>adjust</name></expr></argument>, <argument><expr><name>rectwidth</name></expr></argument>, <argument><expr><name>rectheight</name></expr></argument>, <argument><expr><name>borderwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>XmeClearBorder</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>adjust</name></expr></argument>, <argument><expr><name>adjust</name></expr></argument>, <argument><expr><name>rectwidth</name></expr></argument>, <argument><expr><name>rectheight</name></expr></argument>, <argument><expr><name>borderwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XmVersion</name> <operator>&gt;</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>
<switch>switch <condition>(<expr><name>default_button_emphasis</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>XmINTERNAL_HIGHLIGHT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_drawn</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>XmPushButtonWidgetClass</name><operator>)</operator> <call><name>XtClass</name> <argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>-&gt;</operator><name><name>primitive_class</name><operator>.</operator><name>border_highlight</name></name><operator>)</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>Widget</name><operator>)</operator> <name>eb</name><operator>)</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>default_button_shadow_thickness</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>show_as_default</name></name></expr>)</condition>
<block>{<block_content>











<decl_stmt><decl><type><name>GC</name></type> <name>top_gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GC</name></type> <name>bottom_gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>default_button_shadow_thickness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Widget</name></type> <name>parent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>compatible</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>show_as_default</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>compatible</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>default_button_shadow_thickness</name></name>
<operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>XtParent</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XmIsManager</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>bottom_gc</name> <operator>=</operator> <call><name>XmParentTopShadowGC</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top_gc</name> <operator>=</operator> <call><name>XmParentBottomShadowGC</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>bottom_gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_GC</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>top_gc</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>bottom_shadow_GC</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bottom_gc</name> <operator>==</operator> <name>None</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>top_gc</name> <operator>==</operator> <name>None</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>compatible</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>default_button_shadow_thickness</name> <operator>=</operator>
<name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>show_as_default</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>default_button_shadow_thickness</name> <operator>=</operator>
<name><name>eb</name><operator>-&gt;</operator><name>pushbutton</name><operator>.</operator><name>default_button_shadow_thickness</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XmVersion</name> <operator>&gt;</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>




<switch>switch <condition>(<expr><name>default_button_emphasis</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>XmEXTERNAL_HIGHLIGHT</name></expr>:</case>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_thickness</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XmINTERNAL_HIGHLIGHT</name></expr>:</case>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>Xm3D_ENHANCE_PIXEL</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>eb</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XmeDrawShadows</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>top_gc</name></expr></argument>, <argument><expr><name>bottom_gc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name>default_button_shadow_thickness</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>XmSHADOW_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eb</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>highlight_drawn</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_shadows</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>draw_pixmap</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>BorderHighlight</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name> <init>= <expr><operator>(</operator><name>XmEnhancedButtonWidget</name><operator>)</operator><name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name><name>xmPushButtonClassRec</name><operator>.</operator><name>primitive_class</name><operator>.</operator><name>border_highlight</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>w</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_pixmap</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>BorderUnhighlight</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XmEnhancedButtonWidget</name></type> <name>eb</name> <init>= <expr><operator>(</operator><name>XmEnhancedButtonWidget</name><operator>)</operator><name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name><name>xmPushButtonClassRec</name><operator>.</operator><name>primitive_class</name><operator>.</operator><name>border_unhighlight</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>w</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_pixmap</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
