<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\mbyte.c">














































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_LEAN_AND_MEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xwindows.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINBYTE</name></cpp:macro> <cpp:value>wBYTE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINBYTE</name></cpp:macro> <cpp:value>BYTE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WIN32</name></cpp:undef> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINBYTE</name></cpp:macro> <cpp:value>BYTE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32UNIX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winnls.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Intrinsic.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlocale.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MBLEN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>mblen</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mblen</name></cpp:macro> <cpp:value>_Xmblen</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkkeysyms-compat.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkkeysyms.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkwin32.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkx.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_ISO_10646__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_WCHAR_FUNCTIONS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dbcs_char2len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dbcs_char2bytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dbcs_ptr2len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dbcs_ptr2len_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>utf_ptr2cells_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dbcs_char2cells</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dbcs_ptr2cells_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dbcs_ptr2char</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dbcs_head_off</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>







<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>utf8len_tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>utf8len_tab_zero</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XIM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>xim_log</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>arglist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><literal type="string">"xim.log"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><literal type="string">"Cannot open xim.log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<struct><specifier>static</specifier> struct
<block>{ <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>prop</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>codepage</name></decl>;</decl_stmt>}</block>
<decl><name><name>enc_canon_table</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_LATIN_1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"latin1"</literal></expr>, <expr><name>ENC_8BIT</name> <operator>+</operator> <name>ENC_LATIN1</name></expr>, <expr><literal type="number">1252</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-2"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_3</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-3"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_4</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-4"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_5</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-5"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_6</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-6"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_7</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-7"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_8</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-8"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_9</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-9"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_10</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-10"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_11</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-11"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_13</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-13"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_14</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-14"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_15</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-15"</literal></expr>, <expr><name>ENC_8BIT</name> <operator>+</operator> <name>ENC_LATIN9</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_KOI8_R</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"koi8-r"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_KOI8_U</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"koi8-u"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UTF8</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"utf-8"</literal></expr>, <expr><name>ENC_UNICODE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UCS2</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"ucs-2"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_B</name> <operator>+</operator> <name>ENC_2BYTE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UCS2LE</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"ucs-2le"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_L</name> <operator>+</operator> <name>ENC_2BYTE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UTF16</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"utf-16"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_B</name> <operator>+</operator> <name>ENC_2WORD</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UTF16LE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"utf-16le"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_L</name> <operator>+</operator> <name>ENC_2WORD</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UCS4</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"ucs-4"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_B</name> <operator>+</operator> <name>ENC_4BYTE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UCS4LE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"ucs-4le"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_L</name> <operator>+</operator> <name>ENC_4BYTE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_DEBUG</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"debug"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_DEBUG</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_EUC_JP</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"euc-jp"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_JPNU</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_SJIS</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"sjis"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_JPN</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_EUC_KR</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"euc-kr"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_KORU</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_EUC_CN</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"euc-cn"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_CHSU</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_EUC_TW</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"euc-tw"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_CHTU</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_BIG5</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"big5"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_CHT</name></expr>}</block></expr>,




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP437</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp437"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">437</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP737</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp737"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">737</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP775</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp775"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">775</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP850</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp850"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">850</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP852</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp852"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">852</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP855</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp855"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">855</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP857</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp857"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">857</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP860</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp860"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">860</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP861</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp861"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">861</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP862</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp862"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">862</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP863</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp863"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">863</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP865</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp865"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">865</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP866</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp866"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">866</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP869</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp869"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">869</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP874</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp874"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">874</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP932</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp932"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_JPN</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP936</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp936"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_CHS</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP949</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp949"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_KOR</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP950</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp950"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_CHT</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1250</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1250"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1250</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1251</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1251"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1251</literal></expr>}</block></expr>, 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1253</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1253"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1253</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1254</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1254"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1254</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1255</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1255"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1255</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1256</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1256"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1256</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1257</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1257"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1257</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1258</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1258"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1258</literal></expr>}</block></expr>, 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_MACROMAN</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"macroman"</literal></expr>, <expr><name>ENC_8BIT</name> <operator>+</operator> <name>ENC_MACROMAN</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_DECMCS</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"dec-mcs"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_HPROMAN8</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"hp-roman8"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_COUNT</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
}</block></expr></init></decl>;</struct>




<struct><specifier>static</specifier> struct
<block>{ <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>canon</name></decl>;</decl_stmt>}</block>
<decl><name><name>enc_alias_table</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="string">"ansi"</literal></expr>, <expr><name>IDX_LATIN_1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"iso-8859-1"</literal></expr>, <expr><name>IDX_LATIN_1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"latin2"</literal></expr>, <expr><name>IDX_ISO_2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"latin3"</literal></expr>, <expr><name>IDX_ISO_3</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"latin4"</literal></expr>, <expr><name>IDX_ISO_4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cyrillic"</literal></expr>, <expr><name>IDX_ISO_5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"arabic"</literal></expr>, <expr><name>IDX_ISO_6</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"greek"</literal></expr>, <expr><name>IDX_ISO_7</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"hebrew"</literal></expr>, <expr><name>IDX_CP1255</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"hebrew"</literal></expr>, <expr><name>IDX_ISO_8</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">"latin5"</literal></expr>, <expr><name>IDX_ISO_9</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"turkish"</literal></expr>, <expr><name>IDX_ISO_9</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"latin6"</literal></expr>, <expr><name>IDX_ISO_10</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"nordic"</literal></expr>, <expr><name>IDX_ISO_10</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"thai"</literal></expr>, <expr><name>IDX_ISO_11</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"latin7"</literal></expr>, <expr><name>IDX_ISO_13</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"latin8"</literal></expr>, <expr><name>IDX_ISO_14</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"latin9"</literal></expr>, <expr><name>IDX_ISO_15</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"utf8"</literal></expr>, <expr><name>IDX_UTF8</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"unicode"</literal></expr>, <expr><name>IDX_UCS2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ucs2"</literal></expr>, <expr><name>IDX_UCS2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ucs2be"</literal></expr>, <expr><name>IDX_UCS2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ucs-2be"</literal></expr>, <expr><name>IDX_UCS2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ucs2le"</literal></expr>, <expr><name>IDX_UCS2LE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"utf16"</literal></expr>, <expr><name>IDX_UTF16</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"utf16be"</literal></expr>, <expr><name>IDX_UTF16</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"utf-16be"</literal></expr>, <expr><name>IDX_UTF16</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"utf16le"</literal></expr>, <expr><name>IDX_UTF16LE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ucs4"</literal></expr>, <expr><name>IDX_UCS4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ucs4be"</literal></expr>, <expr><name>IDX_UCS4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ucs-4be"</literal></expr>, <expr><name>IDX_UCS4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ucs4le"</literal></expr>, <expr><name>IDX_UCS4LE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"utf32"</literal></expr>, <expr><name>IDX_UCS4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"utf-32"</literal></expr>, <expr><name>IDX_UCS4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"utf32be"</literal></expr>, <expr><name>IDX_UCS4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"utf-32be"</literal></expr>, <expr><name>IDX_UCS4</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"utf32le"</literal></expr>, <expr><name>IDX_UCS4LE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"utf-32le"</literal></expr>, <expr><name>IDX_UCS4LE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"932"</literal></expr>, <expr><name>IDX_CP932</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"949"</literal></expr>, <expr><name>IDX_CP949</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"936"</literal></expr>, <expr><name>IDX_CP936</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"gbk"</literal></expr>, <expr><name>IDX_CP936</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"950"</literal></expr>, <expr><name>IDX_CP950</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"eucjp"</literal></expr>, <expr><name>IDX_EUC_JP</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"unix-jis"</literal></expr>, <expr><name>IDX_EUC_JP</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ujis"</literal></expr>, <expr><name>IDX_EUC_JP</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"shift-jis"</literal></expr>, <expr><name>IDX_SJIS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pck"</literal></expr>, <expr><name>IDX_SJIS</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"euckr"</literal></expr>, <expr><name>IDX_EUC_KR</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"5601"</literal></expr>, <expr><name>IDX_EUC_KR</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"euccn"</literal></expr>, <expr><name>IDX_EUC_CN</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"gb2312"</literal></expr>, <expr><name>IDX_EUC_CN</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"euctw"</literal></expr>, <expr><name>IDX_EUC_TW</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"japan"</literal></expr>, <expr><name>IDX_CP932</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"korea"</literal></expr>, <expr><name>IDX_CP949</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"prc"</literal></expr>, <expr><name>IDX_CP936</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"chinese"</literal></expr>, <expr><name>IDX_CP936</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"taiwan"</literal></expr>, <expr><name>IDX_CP950</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"big5"</literal></expr>, <expr><name>IDX_CP950</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"japan"</literal></expr>, <expr><name>IDX_EUC_JP</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"korea"</literal></expr>, <expr><name>IDX_EUC_KR</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"prc"</literal></expr>, <expr><name>IDX_EUC_CN</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"chinese"</literal></expr>, <expr><name>IDX_EUC_CN</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"taiwan"</literal></expr>, <expr><name>IDX_EUC_TW</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cp950"</literal></expr>, <expr><name>IDX_BIG5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"950"</literal></expr>, <expr><name>IDX_BIG5</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">"mac"</literal></expr>, <expr><name>IDX_MACROMAN</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mac-roman"</literal></expr>, <expr><name>IDX_MACROMAN</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_UTF8</name></cpp:macro> <cpp:value>65001</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>enc_canon_search</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IDX_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>enc_canon_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>enc_canon_props</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>enc_canon_search</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>enc_canon_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prop</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CPINFO</name></type> <name>cpinfo</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>GetCPInfo</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpinfo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cpinfo</name><operator>.</operator><name>MaxCharSize</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>ENC_8BIT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cpinfo</name><operator>.</operator><name>MaxCharSize</name></name> <operator>==</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cpinfo</name><operator>.</operator><name>LeadByte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cpinfo</name><operator>.</operator><name>LeadByte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ENC_DBCS</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"2byte-"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENC_DBCS</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"8bit-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"iso-8859-"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENC_8BIT</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>













<function><type><name>char</name> <modifier>*</modifier></type>
<name>mb_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enc_dbcs_new</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ICONV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN_FROM_CONV</name></cpp:macro></cpp:define>
<decl_stmt><decl><type><name>vimconv_T</name></type> <name>vimconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p_enc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mb_bytelen_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input_conv</name><operator>.</operator><name>vc_factor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>p_enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <name><name>p_enc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>p_enc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CPINFO</name></type> <name>cpinfo</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>GetCPInfo</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_enc</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpinfo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cpinfo</name><operator>.</operator><name>MaxCharSize</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>enc_unicode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>enc_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>cpinfo</name><operator>.</operator><name>MaxCharSize</name></name> <operator>==</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cpinfo</name><operator>.</operator><name>LeadByte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cpinfo</name><operator>.</operator><name>LeadByte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>enc_dbcs_new</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_enc</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>codepage_invalid</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_INVALID_PARAMETER</name></expr>)</condition>
<block>{<block_content>
<label><name>codepage_invalid</name>:</label>
<return>return <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E543: Not a valid codepage"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"8bit-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"iso-8859-"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>enc_unicode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>enc_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"2byte-"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>p_enc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'c'</literal> <operator>||</operator> <name><name>p_enc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'p'</literal>
<operator>||</operator> <operator>(</operator><name>enc_dbcs_new</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_enc</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e_invarg</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>enc_dbcs_new</name> <operator>=</operator> <name>DBCS_2BYTE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>enc_canon_search</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>enc_canon_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>prop</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <name>ENC_UNICODE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>enc_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <operator>(</operator><name>ENC_2BYTE</name> <operator>|</operator> <name>ENC_2WORD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>enc_unicode</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&amp;</operator> <name>ENC_4BYTE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>enc_unicode</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>enc_unicode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&amp;</operator> <name>ENC_DBCS</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>enc_dbcs_new</name> <operator>=</operator> <name><name>enc_canon_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>codepage</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>enc_unicode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>enc_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> 
<return>return <expr><name>e_invarg</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs_new</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidCodePage</name><argument_list>(<argument><expr><name>enc_dbcs_new</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>codepage_invalid</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>enc_unicode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>enc_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>enc_dbcs</name> <operator>=</operator> <name>enc_dbcs_new</name></expr>;</expr_stmt>
<expr_stmt><expr><name>has_mbyte</name> <operator>=</operator> <operator>(</operator><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>enc_utf8</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CYGWIN_WIN32_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>enc_codepage</name> <operator>=</operator> <call><name>encname2codepage</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enc_latin9</name> <operator>=</operator> <operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"iso-8859-15"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>enc_latin1like</name> <operator>=</operator> <operator>(</operator><name>enc_utf8</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"latin1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"iso-8859-15"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_ptr2len</name> <operator>=</operator> <name>utfc_ptr2len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2len_len</name> <operator>=</operator> <name>utfc_ptr2len_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_char2len</name> <operator>=</operator> <name>utf_char2len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_char2bytes</name> <operator>=</operator> <name>utf_char2bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2cells</name> <operator>=</operator> <name>utf_ptr2cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2cells_len</name> <operator>=</operator> <name>utf_ptr2cells_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_char2cells</name> <operator>=</operator> <name>utf_char2cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_off2cells</name> <operator>=</operator> <name>utf_off2cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2char</name> <operator>=</operator> <name>utf_ptr2char</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_head_off</name> <operator>=</operator> <name>utf_head_off</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_ptr2len</name> <operator>=</operator> <name>dbcs_ptr2len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2len_len</name> <operator>=</operator> <name>dbcs_ptr2len_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_char2len</name> <operator>=</operator> <name>dbcs_char2len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_char2bytes</name> <operator>=</operator> <name>dbcs_char2bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2cells</name> <operator>=</operator> <name>dbcs_ptr2cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2cells_len</name> <operator>=</operator> <name>dbcs_ptr2cells_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_char2cells</name> <operator>=</operator> <name>dbcs_char2cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_off2cells</name> <operator>=</operator> <name>dbcs_off2cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2char</name> <operator>=</operator> <name>dbcs_ptr2char</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_head_off</name> <operator>=</operator> <name>dbcs_head_off</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>mb_ptr2len</name> <operator>=</operator> <name>latin_ptr2len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2len_len</name> <operator>=</operator> <name>latin_ptr2len_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_char2len</name> <operator>=</operator> <name>latin_char2len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_char2bytes</name> <operator>=</operator> <name>latin_char2bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2cells</name> <operator>=</operator> <name>latin_ptr2cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2cells_len</name> <operator>=</operator> <name>latin_ptr2cells_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_char2cells</name> <operator>=</operator> <name>latin_char2cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_off2cells</name> <operator>=</operator> <name>latin_off2cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_ptr2char</name> <operator>=</operator> <name>latin_ptr2char</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_head_off</name> <operator>=</operator> <name>latin_head_off</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LEN_FROM_CONV</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name><name>vimconv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_locale</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimconv</name><operator>.</operator><name>vc_fail</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>utf8len_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><call><name>IsDBCSLeadByteEx</name><argument_list>(<argument><expr><name>enc_dbcs</name></expr></argument>, <argument><expr><operator>(</operator><name>WINBYTE</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__amigaos4__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MBLEN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>






<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LEN_FROM_CONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>vimconv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>






<expr_stmt><expr><name>vim_ignored</name> <operator>=</operator> <call><name>mblen</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>mblen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mb_bytelen_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LEN_FROM_CONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>init_chartab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>screenalloc</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"fencs"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"fencs"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ucs-bom,utf-8,default,latin1"</literal></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BIND_TEXTDOMAIN_CODESET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>bind_textdomain_codeset</name><argument_list>(<argument><expr><name>VIMPACKAGE</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>enc_utf8</name></expr> ?</condition><then> <expr><literal type="string">"utf-8"</literal></expr> </then><else>: <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_enc</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fix_arg_enc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_ENCODINGCHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>spell_reload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>bomb_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bomb</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_unicode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>enc_unicode</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>, <argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>, <argument><expr><literal type="string">"ucs-2"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>, <argument><expr><literal type="string">"utf-16"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>, <argument><expr><literal type="string">"ucs-4"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>remove_bom</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>vim_strbyte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0xef</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xbb</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xbf</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>int</name></type>
<name>mb_get_class</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mb_get_class_buf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mb_get_class_buf</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>dbcs_class</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>utf_class_buf</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>dbcs_class</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>lead</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>trail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>enc_dbcs</name></expr>)</condition>
<block>{<block_content>


<case>case <expr><name>DBCS_JPNU</name></expr>:</case> 
<case>case <expr><name>DBCS_JPN</name></expr>:</case>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>lb</name> <init>= <expr><name>lead</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tb</name> <init>= <expr><name>trail</name></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&lt;=</operator> <literal type="number">0x9f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lb</name> <operator>=</operator> <operator>(</operator><name>lb</name> <operator>-</operator> <literal type="number">0x81</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0x21</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>lb</name> <operator>=</operator> <operator>(</operator><name>lb</name> <operator>-</operator> <literal type="number">0xc1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0x21</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tb</name> <operator>&lt;=</operator> <literal type="number">0x7e</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tb</name> <operator>-=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>tb</name> <operator>&lt;=</operator> <literal type="number">0x9e</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tb</name> <operator>-=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>tb</name> <operator>-=</operator> <literal type="number">0x7e</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lb</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>










<expr_stmt><expr><name>lb</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tb</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>lb</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>tb</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x2121</literal></expr>:</case> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">0x2122</literal></expr>:</case> 
<case>case <expr><literal type="number">0x2123</literal></expr>:</case> 
<case>case <expr><literal type="number">0x2124</literal></expr>:</case> 
<case>case <expr><literal type="number">0x2125</literal></expr>:</case> 
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">0x213c</literal></expr>:</case> 
<return>return <expr><literal type="number">13</literal></expr>;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>lb</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x21</literal></expr>:</case>
<case>case <expr><literal type="number">0x22</literal></expr>:</case>

<return>return <expr><literal type="number">10</literal></expr>;</return>
<case>case <expr><literal type="number">0x23</literal></expr>:</case>

<return>return <expr><literal type="number">11</literal></expr>;</return>
<case>case <expr><literal type="number">0x24</literal></expr>:</case>

<return>return <expr><literal type="number">12</literal></expr>;</return>
<case>case <expr><literal type="number">0x25</literal></expr>:</case>

<return>return <expr><literal type="number">13</literal></expr>;</return>
<case>case <expr><literal type="number">0x26</literal></expr>:</case>

<return>return <expr><literal type="number">14</literal></expr>;</return>
<case>case <expr><literal type="number">0x27</literal></expr>:</case>

<return>return <expr><literal type="number">15</literal></expr>;</return>
<case>case <expr><literal type="number">0x28</literal></expr>:</case>

<return>return <expr><literal type="number">16</literal></expr>;</return>
<default>default:</default>

<return>return <expr><literal type="number">17</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block>

<case>case <expr><name>DBCS_KORU</name></expr>:</case> 
<case>case <expr><name>DBCS_KOR</name></expr>:</case>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name> <init>= <expr><name>lead</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c2</name> <init>= <expr><name>trail</name></expr></init></decl>;</decl_stmt>















<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="number">0xB0</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xC8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">20</literal></expr>;</return></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&lt;=</operator> <literal type="number">0xA0</literal> <operator>||</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0xA0</literal></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><literal type="number">20</literal></expr>;</return></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="number">0xCA</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xFD</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">21</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <switch>switch <condition>(<expr><name>c1</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0xA1</literal></expr>:</case>
<case>case <expr><literal type="number">0xA2</literal></expr>:</case>

<return>return <expr><literal type="number">22</literal></expr>;</return>
<case>case <expr><literal type="number">0xA3</literal></expr>:</case>

<return>return <expr><literal type="number">23</literal></expr>;</return>
<case>case <expr><literal type="number">0xA4</literal></expr>:</case>

<return>return <expr><literal type="number">24</literal></expr>;</return>
<case>case <expr><literal type="number">0xA5</literal></expr>:</case>

<return>return <expr><literal type="number">25</literal></expr>;</return>
<case>case <expr><literal type="number">0xA6</literal></expr>:</case>

<return>return <expr><literal type="number">26</literal></expr>;</return>
<case>case <expr><literal type="number">0xA7</literal></expr>:</case>

<return>return <expr><literal type="number">27</literal></expr>;</return>
<case>case <expr><literal type="number">0xA8</literal></expr>:</case>
<case>case <expr><literal type="number">0xA9</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;=</operator> <literal type="number">0xAF</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">25</literal></expr>;</return></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>&gt;=</operator> <literal type="number">0xF6</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">22</literal></expr>;</return></block_content></block></if> 
<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">28</literal></expr>;</return></block_content></block></else></if_stmt>
<case>case <expr><literal type="number">0xAA</literal></expr>:</case>
<case>case <expr><literal type="number">0xAB</literal></expr>:</case>

<return>return <expr><literal type="number">29</literal></expr>;</return>
<case>case <expr><literal type="number">0xAC</literal></expr>:</case>

<return>return <expr><literal type="number">30</literal></expr>;</return>
</block_content>}</block></switch></block_content></block></else></if_stmt>
</block_content>}</block>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>latin_char2len</name><parameter_list>(<parameter><decl><type><name>int</name> <name>c</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbcs_char2len</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>latin_char2bytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbcs_char2bytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>latin_ptr2len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbcs_ptr2len</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>latin_ptr2len_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbcs_ptr2len_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>interval</name>
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>last</name></decl>;</decl_stmt>
}</block>;</struct>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>intable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>interval</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mid</name></decl>, <decl><type ref="prev"/><name>bot</name></decl>, <decl><type ref="prev"/><name>top</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>bot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>interval</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>top</name> <operator>&gt;=</operator> <name>bot</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>bot</name> <operator>+</operator> <name>top</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>table</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>interval</name></name></type> <name><name>ambiguous</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x00a1</literal></expr>, <expr><literal type="number">0x00a1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00a4</literal></expr>, <expr><literal type="number">0x00a4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00a7</literal></expr>, <expr><literal type="number">0x00a8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00aa</literal></expr>, <expr><literal type="number">0x00aa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00ad</literal></expr>, <expr><literal type="number">0x00ae</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00b0</literal></expr>, <expr><literal type="number">0x00b4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00b6</literal></expr>, <expr><literal type="number">0x00ba</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00bc</literal></expr>, <expr><literal type="number">0x00bf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00c6</literal></expr>, <expr><literal type="number">0x00c6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00d0</literal></expr>, <expr><literal type="number">0x00d0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00d7</literal></expr>, <expr><literal type="number">0x00d8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00de</literal></expr>, <expr><literal type="number">0x00e1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00e6</literal></expr>, <expr><literal type="number">0x00e6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00e8</literal></expr>, <expr><literal type="number">0x00ea</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00ec</literal></expr>, <expr><literal type="number">0x00ed</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00f0</literal></expr>, <expr><literal type="number">0x00f0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00f2</literal></expr>, <expr><literal type="number">0x00f3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00f7</literal></expr>, <expr><literal type="number">0x00fa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00fc</literal></expr>, <expr><literal type="number">0x00fc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00fe</literal></expr>, <expr><literal type="number">0x00fe</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0101</literal></expr>, <expr><literal type="number">0x0101</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0111</literal></expr>, <expr><literal type="number">0x0111</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0113</literal></expr>, <expr><literal type="number">0x0113</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x011b</literal></expr>, <expr><literal type="number">0x011b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0126</literal></expr>, <expr><literal type="number">0x0127</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x012b</literal></expr>, <expr><literal type="number">0x012b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0131</literal></expr>, <expr><literal type="number">0x0133</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0138</literal></expr>, <expr><literal type="number">0x0138</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x013f</literal></expr>, <expr><literal type="number">0x0142</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0144</literal></expr>, <expr><literal type="number">0x0144</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0148</literal></expr>, <expr><literal type="number">0x014b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x014d</literal></expr>, <expr><literal type="number">0x014d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0152</literal></expr>, <expr><literal type="number">0x0153</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0166</literal></expr>, <expr><literal type="number">0x0167</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x016b</literal></expr>, <expr><literal type="number">0x016b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x01ce</literal></expr>, <expr><literal type="number">0x01ce</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x01d0</literal></expr>, <expr><literal type="number">0x01d0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x01d2</literal></expr>, <expr><literal type="number">0x01d2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x01d4</literal></expr>, <expr><literal type="number">0x01d4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x01d6</literal></expr>, <expr><literal type="number">0x01d6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x01d8</literal></expr>, <expr><literal type="number">0x01d8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x01da</literal></expr>, <expr><literal type="number">0x01da</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x01dc</literal></expr>, <expr><literal type="number">0x01dc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0251</literal></expr>, <expr><literal type="number">0x0251</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0261</literal></expr>, <expr><literal type="number">0x0261</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x02c4</literal></expr>, <expr><literal type="number">0x02c4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x02c7</literal></expr>, <expr><literal type="number">0x02c7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x02c9</literal></expr>, <expr><literal type="number">0x02cb</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x02cd</literal></expr>, <expr><literal type="number">0x02cd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x02d0</literal></expr>, <expr><literal type="number">0x02d0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x02d8</literal></expr>, <expr><literal type="number">0x02db</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x02dd</literal></expr>, <expr><literal type="number">0x02dd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x02df</literal></expr>, <expr><literal type="number">0x02df</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0300</literal></expr>, <expr><literal type="number">0x036f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0391</literal></expr>, <expr><literal type="number">0x03a1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x03a3</literal></expr>, <expr><literal type="number">0x03a9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x03b1</literal></expr>, <expr><literal type="number">0x03c1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x03c3</literal></expr>, <expr><literal type="number">0x03c9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0401</literal></expr>, <expr><literal type="number">0x0401</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0410</literal></expr>, <expr><literal type="number">0x044f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0451</literal></expr>, <expr><literal type="number">0x0451</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2010</literal></expr>, <expr><literal type="number">0x2010</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2013</literal></expr>, <expr><literal type="number">0x2016</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2018</literal></expr>, <expr><literal type="number">0x2019</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x201c</literal></expr>, <expr><literal type="number">0x201d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2020</literal></expr>, <expr><literal type="number">0x2022</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2024</literal></expr>, <expr><literal type="number">0x2027</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2030</literal></expr>, <expr><literal type="number">0x2030</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2032</literal></expr>, <expr><literal type="number">0x2033</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2035</literal></expr>, <expr><literal type="number">0x2035</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x203b</literal></expr>, <expr><literal type="number">0x203b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x203e</literal></expr>, <expr><literal type="number">0x203e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2074</literal></expr>, <expr><literal type="number">0x2074</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x207f</literal></expr>, <expr><literal type="number">0x207f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2081</literal></expr>, <expr><literal type="number">0x2084</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x20ac</literal></expr>, <expr><literal type="number">0x20ac</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2103</literal></expr>, <expr><literal type="number">0x2103</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2105</literal></expr>, <expr><literal type="number">0x2105</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2109</literal></expr>, <expr><literal type="number">0x2109</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2113</literal></expr>, <expr><literal type="number">0x2113</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2116</literal></expr>, <expr><literal type="number">0x2116</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2121</literal></expr>, <expr><literal type="number">0x2122</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2126</literal></expr>, <expr><literal type="number">0x2126</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x212b</literal></expr>, <expr><literal type="number">0x212b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2153</literal></expr>, <expr><literal type="number">0x2154</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x215b</literal></expr>, <expr><literal type="number">0x215e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2160</literal></expr>, <expr><literal type="number">0x216b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2170</literal></expr>, <expr><literal type="number">0x2179</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2189</literal></expr>, <expr><literal type="number">0x2189</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2190</literal></expr>, <expr><literal type="number">0x2199</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x21b8</literal></expr>, <expr><literal type="number">0x21b9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x21d2</literal></expr>, <expr><literal type="number">0x21d2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x21d4</literal></expr>, <expr><literal type="number">0x21d4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x21e7</literal></expr>, <expr><literal type="number">0x21e7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2200</literal></expr>, <expr><literal type="number">0x2200</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2202</literal></expr>, <expr><literal type="number">0x2203</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2207</literal></expr>, <expr><literal type="number">0x2208</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x220b</literal></expr>, <expr><literal type="number">0x220b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x220f</literal></expr>, <expr><literal type="number">0x220f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2211</literal></expr>, <expr><literal type="number">0x2211</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2215</literal></expr>, <expr><literal type="number">0x2215</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x221a</literal></expr>, <expr><literal type="number">0x221a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x221d</literal></expr>, <expr><literal type="number">0x2220</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2223</literal></expr>, <expr><literal type="number">0x2223</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2225</literal></expr>, <expr><literal type="number">0x2225</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2227</literal></expr>, <expr><literal type="number">0x222c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x222e</literal></expr>, <expr><literal type="number">0x222e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2234</literal></expr>, <expr><literal type="number">0x2237</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x223c</literal></expr>, <expr><literal type="number">0x223d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2248</literal></expr>, <expr><literal type="number">0x2248</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x224c</literal></expr>, <expr><literal type="number">0x224c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2252</literal></expr>, <expr><literal type="number">0x2252</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2260</literal></expr>, <expr><literal type="number">0x2261</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2264</literal></expr>, <expr><literal type="number">0x2267</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x226a</literal></expr>, <expr><literal type="number">0x226b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x226e</literal></expr>, <expr><literal type="number">0x226f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2282</literal></expr>, <expr><literal type="number">0x2283</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2286</literal></expr>, <expr><literal type="number">0x2287</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2295</literal></expr>, <expr><literal type="number">0x2295</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2299</literal></expr>, <expr><literal type="number">0x2299</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x22a5</literal></expr>, <expr><literal type="number">0x22a5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x22bf</literal></expr>, <expr><literal type="number">0x22bf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2312</literal></expr>, <expr><literal type="number">0x2312</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2460</literal></expr>, <expr><literal type="number">0x24e9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x24eb</literal></expr>, <expr><literal type="number">0x254b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2550</literal></expr>, <expr><literal type="number">0x2573</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2580</literal></expr>, <expr><literal type="number">0x258f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2592</literal></expr>, <expr><literal type="number">0x2595</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25a0</literal></expr>, <expr><literal type="number">0x25a1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25a3</literal></expr>, <expr><literal type="number">0x25a9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25b2</literal></expr>, <expr><literal type="number">0x25b3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25b6</literal></expr>, <expr><literal type="number">0x25b7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25bc</literal></expr>, <expr><literal type="number">0x25bd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25c0</literal></expr>, <expr><literal type="number">0x25c1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25c6</literal></expr>, <expr><literal type="number">0x25c8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25cb</literal></expr>, <expr><literal type="number">0x25cb</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25ce</literal></expr>, <expr><literal type="number">0x25d1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25e2</literal></expr>, <expr><literal type="number">0x25e5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25ef</literal></expr>, <expr><literal type="number">0x25ef</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2605</literal></expr>, <expr><literal type="number">0x2606</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2609</literal></expr>, <expr><literal type="number">0x2609</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x260e</literal></expr>, <expr><literal type="number">0x260f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x261c</literal></expr>, <expr><literal type="number">0x261c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x261e</literal></expr>, <expr><literal type="number">0x261e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2640</literal></expr>, <expr><literal type="number">0x2640</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2642</literal></expr>, <expr><literal type="number">0x2642</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2660</literal></expr>, <expr><literal type="number">0x2661</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2663</literal></expr>, <expr><literal type="number">0x2665</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2667</literal></expr>, <expr><literal type="number">0x266a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x266c</literal></expr>, <expr><literal type="number">0x266d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x266f</literal></expr>, <expr><literal type="number">0x266f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x269e</literal></expr>, <expr><literal type="number">0x269f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26bf</literal></expr>, <expr><literal type="number">0x26bf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26c6</literal></expr>, <expr><literal type="number">0x26cd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26cf</literal></expr>, <expr><literal type="number">0x26d3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26d5</literal></expr>, <expr><literal type="number">0x26e1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26e3</literal></expr>, <expr><literal type="number">0x26e3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26e8</literal></expr>, <expr><literal type="number">0x26e9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26eb</literal></expr>, <expr><literal type="number">0x26f1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26f4</literal></expr>, <expr><literal type="number">0x26f4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26f6</literal></expr>, <expr><literal type="number">0x26f9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26fb</literal></expr>, <expr><literal type="number">0x26fc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26fe</literal></expr>, <expr><literal type="number">0x26ff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x273d</literal></expr>, <expr><literal type="number">0x273d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2776</literal></expr>, <expr><literal type="number">0x277f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2b56</literal></expr>, <expr><literal type="number">0x2b59</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3248</literal></expr>, <expr><literal type="number">0x324f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe000</literal></expr>, <expr><literal type="number">0xf8ff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfe00</literal></expr>, <expr><literal type="number">0xfe0f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfffd</literal></expr>, <expr><literal type="number">0xfffd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f100</literal></expr>, <expr><literal type="number">0x1f10a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f110</literal></expr>, <expr><literal type="number">0x1f12d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f130</literal></expr>, <expr><literal type="number">0x1f169</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f170</literal></expr>, <expr><literal type="number">0x1f18d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f18f</literal></expr>, <expr><literal type="number">0x1f190</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f19b</literal></expr>, <expr><literal type="number">0x1f1ac</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe0100</literal></expr>, <expr><literal type="number">0xe01ef</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xf0000</literal></expr>, <expr><literal type="number">0xffffd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x100000</literal></expr>, <expr><literal type="number">0x10fffd</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>utf_uint2cells</name><parameter_list>(<parameter><decl><type><name>UINT32_T</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>utf_char2cells</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>int</name></type>
<name>utf_char2cells</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>interval</name></name></type> <name><name>doublewidth</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x1100</literal></expr>, <expr><literal type="number">0x115f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x231a</literal></expr>, <expr><literal type="number">0x231b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2329</literal></expr>, <expr><literal type="number">0x232a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23e9</literal></expr>, <expr><literal type="number">0x23ec</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23f0</literal></expr>, <expr><literal type="number">0x23f0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23f3</literal></expr>, <expr><literal type="number">0x23f3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25fd</literal></expr>, <expr><literal type="number">0x25fe</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2614</literal></expr>, <expr><literal type="number">0x2615</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2648</literal></expr>, <expr><literal type="number">0x2653</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x267f</literal></expr>, <expr><literal type="number">0x267f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2693</literal></expr>, <expr><literal type="number">0x2693</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26a1</literal></expr>, <expr><literal type="number">0x26a1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26aa</literal></expr>, <expr><literal type="number">0x26ab</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26bd</literal></expr>, <expr><literal type="number">0x26be</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26c4</literal></expr>, <expr><literal type="number">0x26c5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26ce</literal></expr>, <expr><literal type="number">0x26ce</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26d4</literal></expr>, <expr><literal type="number">0x26d4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26ea</literal></expr>, <expr><literal type="number">0x26ea</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26f2</literal></expr>, <expr><literal type="number">0x26f3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26f5</literal></expr>, <expr><literal type="number">0x26f5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26fa</literal></expr>, <expr><literal type="number">0x26fa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26fd</literal></expr>, <expr><literal type="number">0x26fd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2705</literal></expr>, <expr><literal type="number">0x2705</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x270a</literal></expr>, <expr><literal type="number">0x270b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2728</literal></expr>, <expr><literal type="number">0x2728</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x274c</literal></expr>, <expr><literal type="number">0x274c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x274e</literal></expr>, <expr><literal type="number">0x274e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2753</literal></expr>, <expr><literal type="number">0x2755</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2757</literal></expr>, <expr><literal type="number">0x2757</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2795</literal></expr>, <expr><literal type="number">0x2797</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x27b0</literal></expr>, <expr><literal type="number">0x27b0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x27bf</literal></expr>, <expr><literal type="number">0x27bf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2b1b</literal></expr>, <expr><literal type="number">0x2b1c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2b50</literal></expr>, <expr><literal type="number">0x2b50</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2b55</literal></expr>, <expr><literal type="number">0x2b55</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2e80</literal></expr>, <expr><literal type="number">0x2e99</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2e9b</literal></expr>, <expr><literal type="number">0x2ef3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2f00</literal></expr>, <expr><literal type="number">0x2fd5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2ff0</literal></expr>, <expr><literal type="number">0x2ffb</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3000</literal></expr>, <expr><literal type="number">0x303e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3041</literal></expr>, <expr><literal type="number">0x3096</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3099</literal></expr>, <expr><literal type="number">0x30ff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3105</literal></expr>, <expr><literal type="number">0x312f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3131</literal></expr>, <expr><literal type="number">0x318e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3190</literal></expr>, <expr><literal type="number">0x31ba</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x31c0</literal></expr>, <expr><literal type="number">0x31e3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x31f0</literal></expr>, <expr><literal type="number">0x321e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3220</literal></expr>, <expr><literal type="number">0x3247</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3250</literal></expr>, <expr><literal type="number">0x4dbf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4e00</literal></expr>, <expr><literal type="number">0xa48c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa490</literal></expr>, <expr><literal type="number">0xa4c6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa960</literal></expr>, <expr><literal type="number">0xa97c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xac00</literal></expr>, <expr><literal type="number">0xd7a3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xf900</literal></expr>, <expr><literal type="number">0xfaff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfe10</literal></expr>, <expr><literal type="number">0xfe19</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfe30</literal></expr>, <expr><literal type="number">0xfe52</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfe54</literal></expr>, <expr><literal type="number">0xfe66</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfe68</literal></expr>, <expr><literal type="number">0xfe6b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xff01</literal></expr>, <expr><literal type="number">0xff60</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xffe0</literal></expr>, <expr><literal type="number">0xffe6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x16fe0</literal></expr>, <expr><literal type="number">0x16fe3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x17000</literal></expr>, <expr><literal type="number">0x187f7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x18800</literal></expr>, <expr><literal type="number">0x18af2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b000</literal></expr>, <expr><literal type="number">0x1b11e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b150</literal></expr>, <expr><literal type="number">0x1b152</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b164</literal></expr>, <expr><literal type="number">0x1b167</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b170</literal></expr>, <expr><literal type="number">0x1b2fb</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f004</literal></expr>, <expr><literal type="number">0x1f004</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f0cf</literal></expr>, <expr><literal type="number">0x1f0cf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f18e</literal></expr>, <expr><literal type="number">0x1f18e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f191</literal></expr>, <expr><literal type="number">0x1f19a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f200</literal></expr>, <expr><literal type="number">0x1f202</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f210</literal></expr>, <expr><literal type="number">0x1f23b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f240</literal></expr>, <expr><literal type="number">0x1f248</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f250</literal></expr>, <expr><literal type="number">0x1f251</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f260</literal></expr>, <expr><literal type="number">0x1f265</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f300</literal></expr>, <expr><literal type="number">0x1f320</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f32d</literal></expr>, <expr><literal type="number">0x1f335</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f337</literal></expr>, <expr><literal type="number">0x1f37c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f37e</literal></expr>, <expr><literal type="number">0x1f393</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3a0</literal></expr>, <expr><literal type="number">0x1f3ca</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3cf</literal></expr>, <expr><literal type="number">0x1f3d3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3e0</literal></expr>, <expr><literal type="number">0x1f3f0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3f4</literal></expr>, <expr><literal type="number">0x1f3f4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3f8</literal></expr>, <expr><literal type="number">0x1f43e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f440</literal></expr>, <expr><literal type="number">0x1f440</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f442</literal></expr>, <expr><literal type="number">0x1f4fc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f4ff</literal></expr>, <expr><literal type="number">0x1f53d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f54b</literal></expr>, <expr><literal type="number">0x1f54e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f550</literal></expr>, <expr><literal type="number">0x1f567</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f57a</literal></expr>, <expr><literal type="number">0x1f57a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f595</literal></expr>, <expr><literal type="number">0x1f596</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5a4</literal></expr>, <expr><literal type="number">0x1f5a4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5fb</literal></expr>, <expr><literal type="number">0x1f64f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f680</literal></expr>, <expr><literal type="number">0x1f6c5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6cc</literal></expr>, <expr><literal type="number">0x1f6cc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6d0</literal></expr>, <expr><literal type="number">0x1f6d2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6d5</literal></expr>, <expr><literal type="number">0x1f6d5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6eb</literal></expr>, <expr><literal type="number">0x1f6ec</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6f4</literal></expr>, <expr><literal type="number">0x1f6fa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f7e0</literal></expr>, <expr><literal type="number">0x1f7eb</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f90d</literal></expr>, <expr><literal type="number">0x1f971</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f973</literal></expr>, <expr><literal type="number">0x1f976</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f97a</literal></expr>, <expr><literal type="number">0x1f9a2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f9a5</literal></expr>, <expr><literal type="number">0x1f9aa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f9ae</literal></expr>, <expr><literal type="number">0x1f9ca</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f9cd</literal></expr>, <expr><literal type="number">0x1f9ff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fa70</literal></expr>, <expr><literal type="number">0x1fa73</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fa78</literal></expr>, <expr><literal type="number">0x1fa7a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fa80</literal></expr>, <expr><literal type="number">0x1fa82</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fa90</literal></expr>, <expr><literal type="number">0x1fa95</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x20000</literal></expr>, <expr><literal type="number">0x2fffd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x30000</literal></expr>, <expr><literal type="number">0x3fffd</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>interval</name></name></type> <name><name>emoji_width</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x1f1e6</literal></expr>, <expr><literal type="number">0x1f1ff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f321</literal></expr>, <expr><literal type="number">0x1f321</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f324</literal></expr>, <expr><literal type="number">0x1f32c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f336</literal></expr>, <expr><literal type="number">0x1f336</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f37d</literal></expr>, <expr><literal type="number">0x1f37d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f396</literal></expr>, <expr><literal type="number">0x1f397</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f399</literal></expr>, <expr><literal type="number">0x1f39b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f39e</literal></expr>, <expr><literal type="number">0x1f39f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3cb</literal></expr>, <expr><literal type="number">0x1f3ce</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3d4</literal></expr>, <expr><literal type="number">0x1f3df</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3f3</literal></expr>, <expr><literal type="number">0x1f3f5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3f7</literal></expr>, <expr><literal type="number">0x1f3f7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f43f</literal></expr>, <expr><literal type="number">0x1f43f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f441</literal></expr>, <expr><literal type="number">0x1f441</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f4fd</literal></expr>, <expr><literal type="number">0x1f4fd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f549</literal></expr>, <expr><literal type="number">0x1f54a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f56f</literal></expr>, <expr><literal type="number">0x1f570</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f573</literal></expr>, <expr><literal type="number">0x1f579</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f587</literal></expr>, <expr><literal type="number">0x1f587</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f58a</literal></expr>, <expr><literal type="number">0x1f58d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f590</literal></expr>, <expr><literal type="number">0x1f590</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5a5</literal></expr>, <expr><literal type="number">0x1f5a5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5a8</literal></expr>, <expr><literal type="number">0x1f5a8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5b1</literal></expr>, <expr><literal type="number">0x1f5b2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5bc</literal></expr>, <expr><literal type="number">0x1f5bc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5c2</literal></expr>, <expr><literal type="number">0x1f5c4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5d1</literal></expr>, <expr><literal type="number">0x1f5d3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5dc</literal></expr>, <expr><literal type="number">0x1f5de</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5e1</literal></expr>, <expr><literal type="number">0x1f5e1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5e3</literal></expr>, <expr><literal type="number">0x1f5e3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5e8</literal></expr>, <expr><literal type="number">0x1f5e8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5ef</literal></expr>, <expr><literal type="number">0x1f5ef</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5f3</literal></expr>, <expr><literal type="number">0x1f5f3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5fa</literal></expr>, <expr><literal type="number">0x1f5fa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6cb</literal></expr>, <expr><literal type="number">0x1f6cf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6e0</literal></expr>, <expr><literal type="number">0x1f6e5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6e9</literal></expr>, <expr><literal type="number">0x1f6e9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6f0</literal></expr>, <expr><literal type="number">0x1f6f0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6f3</literal></expr>, <expr><literal type="number">0x1f6f3</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WCHAR_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>wcwidth</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>utf_printable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>intable</name><argument_list>(<argument><expr><name>doublewidth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>doublewidth</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>p_emoji</name> <operator>&amp;&amp;</operator> <call><name>intable</name><argument_list>(<argument><expr><name>emoji_width</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>emoji_width</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_ambw</name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <call><name>intable</name><argument_list>(<argument><expr><name>ambiguous</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ambiguous</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>latin_ptr2cells</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>p</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>utf_ptr2cells</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>utf_char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dbcs_ptr2cells</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>latin_ptr2cells_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>p</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>size</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf_ptr2cells_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>utf8len_tab</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>utf_char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbcs_ptr2cells_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x8e</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>latin_char2cells</name><parameter_list>(<parameter><decl><type><name>int</name> <name>c</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbcs_char2cells</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mb_string2cells</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name>len</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>clen</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>latin_off2cells</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>off</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>max_off</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dbcs_off2cells</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_off</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name>max_off</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>utf_off2cells</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>off</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>max_off</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>latin_ptr2char</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbcs_ptr2char</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>*</operator><name>p</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>utf_ptr2char</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>utf8len_tab_zero</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf_safe_read_char_adv</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>utf8len_tab_zero</name><index>[<expr><operator>*</operator><operator>*</operator><name>s</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>n</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>k</name> <operator>&lt;=</operator> <operator>*</operator><name>n</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>*</operator><name>s</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0xC3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="number">0x83</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>n</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mb_ptr2char_adv</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mb_cptr2char_adv</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>utf_composinglike</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>arabic_maycombine</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>arabic_combine</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type>
<name>utfc_ptr2char</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pcc</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">0x80</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x80</literal>
<operator>&amp;&amp;</operator> <call><name>UTF_COMPOSINGLIKE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pcc</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>MAX_MCO</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>||</operator> <operator>!</operator><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>cc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>MAX_MCO</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>pcc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>utfc_ptr2char_len</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pcc</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">0x80</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <name>maxlen</name>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x80</literal>
<operator>&amp;&amp;</operator> <call><name>UTF_COMPOSINGLIKE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pcc</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>MAX_MCO</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxlen</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>maxlen</name>
<operator>||</operator> <name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal>
<operator>||</operator> <operator>!</operator><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>cc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>MAX_MCO</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>pcc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>utfc_char2bytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Screen_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>utf_ptr2len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>utf8len_tab</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>utf_byte2len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>utf8len_tab</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>utf_ptr2len_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>utf8len_tab</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>utfc_ptr2len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b0</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>prevlen</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b0</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>prevlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>||</operator> <operator>!</operator><call><name>UTF_COMPOSINGLIKE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>prevlen</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>prevlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>utfc_ptr2len_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>prevlen</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>prevlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len_next_char</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>





<expr_stmt><expr><name>len_next_char</name> <operator>=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len_next_char</name> <operator>&gt;</operator> <name>size</name> <operator>-</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UTF_COMPOSINGLIKE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>prevlen</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>prevlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>len_next_char</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>utf_char2len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x200000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x4000000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">6</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>utf_char2bytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x200000</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x4000000</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf8</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xfc</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">6</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>utf_iscomposing_uint</name><parameter_list>(<parameter><decl><type><name>UINT32_T</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type>
<name>utf_iscomposing</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>interval</name></name></type> <name><name>combining</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x0300</literal></expr>, <expr><literal type="number">0x036f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0483</literal></expr>, <expr><literal type="number">0x0489</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0591</literal></expr>, <expr><literal type="number">0x05bd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x05bf</literal></expr>, <expr><literal type="number">0x05bf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x05c1</literal></expr>, <expr><literal type="number">0x05c2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x05c4</literal></expr>, <expr><literal type="number">0x05c5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x05c7</literal></expr>, <expr><literal type="number">0x05c7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0610</literal></expr>, <expr><literal type="number">0x061a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x064b</literal></expr>, <expr><literal type="number">0x065f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0670</literal></expr>, <expr><literal type="number">0x0670</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x06d6</literal></expr>, <expr><literal type="number">0x06dc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x06df</literal></expr>, <expr><literal type="number">0x06e4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x06e7</literal></expr>, <expr><literal type="number">0x06e8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x06ea</literal></expr>, <expr><literal type="number">0x06ed</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0711</literal></expr>, <expr><literal type="number">0x0711</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0730</literal></expr>, <expr><literal type="number">0x074a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x07a6</literal></expr>, <expr><literal type="number">0x07b0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x07eb</literal></expr>, <expr><literal type="number">0x07f3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x07fd</literal></expr>, <expr><literal type="number">0x07fd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0816</literal></expr>, <expr><literal type="number">0x0819</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x081b</literal></expr>, <expr><literal type="number">0x0823</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0825</literal></expr>, <expr><literal type="number">0x0827</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0829</literal></expr>, <expr><literal type="number">0x082d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0859</literal></expr>, <expr><literal type="number">0x085b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x08d3</literal></expr>, <expr><literal type="number">0x08e1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x08e3</literal></expr>, <expr><literal type="number">0x0903</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x093a</literal></expr>, <expr><literal type="number">0x093c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x093e</literal></expr>, <expr><literal type="number">0x094f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0951</literal></expr>, <expr><literal type="number">0x0957</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0962</literal></expr>, <expr><literal type="number">0x0963</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0981</literal></expr>, <expr><literal type="number">0x0983</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x09bc</literal></expr>, <expr><literal type="number">0x09bc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x09be</literal></expr>, <expr><literal type="number">0x09c4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x09c7</literal></expr>, <expr><literal type="number">0x09c8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x09cb</literal></expr>, <expr><literal type="number">0x09cd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x09d7</literal></expr>, <expr><literal type="number">0x09d7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x09e2</literal></expr>, <expr><literal type="number">0x09e3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x09fe</literal></expr>, <expr><literal type="number">0x09fe</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0a01</literal></expr>, <expr><literal type="number">0x0a03</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0a3c</literal></expr>, <expr><literal type="number">0x0a3c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0a3e</literal></expr>, <expr><literal type="number">0x0a42</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0a47</literal></expr>, <expr><literal type="number">0x0a48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0a4b</literal></expr>, <expr><literal type="number">0x0a4d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0a51</literal></expr>, <expr><literal type="number">0x0a51</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0a70</literal></expr>, <expr><literal type="number">0x0a71</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0a75</literal></expr>, <expr><literal type="number">0x0a75</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0a81</literal></expr>, <expr><literal type="number">0x0a83</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0abc</literal></expr>, <expr><literal type="number">0x0abc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0abe</literal></expr>, <expr><literal type="number">0x0ac5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0ac7</literal></expr>, <expr><literal type="number">0x0ac9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0acb</literal></expr>, <expr><literal type="number">0x0acd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0ae2</literal></expr>, <expr><literal type="number">0x0ae3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0afa</literal></expr>, <expr><literal type="number">0x0aff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0b01</literal></expr>, <expr><literal type="number">0x0b03</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0b3c</literal></expr>, <expr><literal type="number">0x0b3c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0b3e</literal></expr>, <expr><literal type="number">0x0b44</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0b47</literal></expr>, <expr><literal type="number">0x0b48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0b4b</literal></expr>, <expr><literal type="number">0x0b4d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0b56</literal></expr>, <expr><literal type="number">0x0b57</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0b62</literal></expr>, <expr><literal type="number">0x0b63</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0b82</literal></expr>, <expr><literal type="number">0x0b82</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0bbe</literal></expr>, <expr><literal type="number">0x0bc2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0bc6</literal></expr>, <expr><literal type="number">0x0bc8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0bca</literal></expr>, <expr><literal type="number">0x0bcd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0bd7</literal></expr>, <expr><literal type="number">0x0bd7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0c00</literal></expr>, <expr><literal type="number">0x0c04</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0c3e</literal></expr>, <expr><literal type="number">0x0c44</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0c46</literal></expr>, <expr><literal type="number">0x0c48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0c4a</literal></expr>, <expr><literal type="number">0x0c4d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0c55</literal></expr>, <expr><literal type="number">0x0c56</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0c62</literal></expr>, <expr><literal type="number">0x0c63</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0c81</literal></expr>, <expr><literal type="number">0x0c83</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0cbc</literal></expr>, <expr><literal type="number">0x0cbc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0cbe</literal></expr>, <expr><literal type="number">0x0cc4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0cc6</literal></expr>, <expr><literal type="number">0x0cc8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0cca</literal></expr>, <expr><literal type="number">0x0ccd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0cd5</literal></expr>, <expr><literal type="number">0x0cd6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0ce2</literal></expr>, <expr><literal type="number">0x0ce3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0d00</literal></expr>, <expr><literal type="number">0x0d03</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0d3b</literal></expr>, <expr><literal type="number">0x0d3c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0d3e</literal></expr>, <expr><literal type="number">0x0d44</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0d46</literal></expr>, <expr><literal type="number">0x0d48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0d4a</literal></expr>, <expr><literal type="number">0x0d4d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0d57</literal></expr>, <expr><literal type="number">0x0d57</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0d62</literal></expr>, <expr><literal type="number">0x0d63</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0d82</literal></expr>, <expr><literal type="number">0x0d83</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0dca</literal></expr>, <expr><literal type="number">0x0dca</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0dcf</literal></expr>, <expr><literal type="number">0x0dd4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0dd6</literal></expr>, <expr><literal type="number">0x0dd6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0dd8</literal></expr>, <expr><literal type="number">0x0ddf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0df2</literal></expr>, <expr><literal type="number">0x0df3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0e31</literal></expr>, <expr><literal type="number">0x0e31</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0e34</literal></expr>, <expr><literal type="number">0x0e3a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0e47</literal></expr>, <expr><literal type="number">0x0e4e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0eb1</literal></expr>, <expr><literal type="number">0x0eb1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0eb4</literal></expr>, <expr><literal type="number">0x0ebc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0ec8</literal></expr>, <expr><literal type="number">0x0ecd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f18</literal></expr>, <expr><literal type="number">0x0f19</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f35</literal></expr>, <expr><literal type="number">0x0f35</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f37</literal></expr>, <expr><literal type="number">0x0f37</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f39</literal></expr>, <expr><literal type="number">0x0f39</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f3e</literal></expr>, <expr><literal type="number">0x0f3f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f71</literal></expr>, <expr><literal type="number">0x0f84</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f86</literal></expr>, <expr><literal type="number">0x0f87</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f8d</literal></expr>, <expr><literal type="number">0x0f97</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f99</literal></expr>, <expr><literal type="number">0x0fbc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0fc6</literal></expr>, <expr><literal type="number">0x0fc6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x102b</literal></expr>, <expr><literal type="number">0x103e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1056</literal></expr>, <expr><literal type="number">0x1059</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x105e</literal></expr>, <expr><literal type="number">0x1060</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1062</literal></expr>, <expr><literal type="number">0x1064</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1067</literal></expr>, <expr><literal type="number">0x106d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1071</literal></expr>, <expr><literal type="number">0x1074</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1082</literal></expr>, <expr><literal type="number">0x108d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x108f</literal></expr>, <expr><literal type="number">0x108f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x109a</literal></expr>, <expr><literal type="number">0x109d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x135d</literal></expr>, <expr><literal type="number">0x135f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1712</literal></expr>, <expr><literal type="number">0x1714</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1732</literal></expr>, <expr><literal type="number">0x1734</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1752</literal></expr>, <expr><literal type="number">0x1753</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1772</literal></expr>, <expr><literal type="number">0x1773</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x17b4</literal></expr>, <expr><literal type="number">0x17d3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x17dd</literal></expr>, <expr><literal type="number">0x17dd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x180b</literal></expr>, <expr><literal type="number">0x180d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1885</literal></expr>, <expr><literal type="number">0x1886</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x18a9</literal></expr>, <expr><literal type="number">0x18a9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1920</literal></expr>, <expr><literal type="number">0x192b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1930</literal></expr>, <expr><literal type="number">0x193b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a17</literal></expr>, <expr><literal type="number">0x1a1b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a55</literal></expr>, <expr><literal type="number">0x1a5e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a60</literal></expr>, <expr><literal type="number">0x1a7c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a7f</literal></expr>, <expr><literal type="number">0x1a7f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ab0</literal></expr>, <expr><literal type="number">0x1abe</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b00</literal></expr>, <expr><literal type="number">0x1b04</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b34</literal></expr>, <expr><literal type="number">0x1b44</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b6b</literal></expr>, <expr><literal type="number">0x1b73</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b80</literal></expr>, <expr><literal type="number">0x1b82</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ba1</literal></expr>, <expr><literal type="number">0x1bad</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1be6</literal></expr>, <expr><literal type="number">0x1bf3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c24</literal></expr>, <expr><literal type="number">0x1c37</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1cd0</literal></expr>, <expr><literal type="number">0x1cd2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1cd4</literal></expr>, <expr><literal type="number">0x1ce8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ced</literal></expr>, <expr><literal type="number">0x1ced</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1cf4</literal></expr>, <expr><literal type="number">0x1cf4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1cf7</literal></expr>, <expr><literal type="number">0x1cf9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1dc0</literal></expr>, <expr><literal type="number">0x1df9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1dfb</literal></expr>, <expr><literal type="number">0x1dff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x20d0</literal></expr>, <expr><literal type="number">0x20f0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2cef</literal></expr>, <expr><literal type="number">0x2cf1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2d7f</literal></expr>, <expr><literal type="number">0x2d7f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2de0</literal></expr>, <expr><literal type="number">0x2dff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x302a</literal></expr>, <expr><literal type="number">0x302f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3099</literal></expr>, <expr><literal type="number">0x309a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa66f</literal></expr>, <expr><literal type="number">0xa672</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa674</literal></expr>, <expr><literal type="number">0xa67d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa69e</literal></expr>, <expr><literal type="number">0xa69f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa6f0</literal></expr>, <expr><literal type="number">0xa6f1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa802</literal></expr>, <expr><literal type="number">0xa802</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa806</literal></expr>, <expr><literal type="number">0xa806</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa80b</literal></expr>, <expr><literal type="number">0xa80b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa823</literal></expr>, <expr><literal type="number">0xa827</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa880</literal></expr>, <expr><literal type="number">0xa881</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa8b4</literal></expr>, <expr><literal type="number">0xa8c5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa8e0</literal></expr>, <expr><literal type="number">0xa8f1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa8ff</literal></expr>, <expr><literal type="number">0xa8ff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa926</literal></expr>, <expr><literal type="number">0xa92d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa947</literal></expr>, <expr><literal type="number">0xa953</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa980</literal></expr>, <expr><literal type="number">0xa983</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa9b3</literal></expr>, <expr><literal type="number">0xa9c0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa9e5</literal></expr>, <expr><literal type="number">0xa9e5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xaa29</literal></expr>, <expr><literal type="number">0xaa36</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xaa43</literal></expr>, <expr><literal type="number">0xaa43</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xaa4c</literal></expr>, <expr><literal type="number">0xaa4d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xaa7b</literal></expr>, <expr><literal type="number">0xaa7d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xaab0</literal></expr>, <expr><literal type="number">0xaab0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xaab2</literal></expr>, <expr><literal type="number">0xaab4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xaab7</literal></expr>, <expr><literal type="number">0xaab8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xaabe</literal></expr>, <expr><literal type="number">0xaabf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xaac1</literal></expr>, <expr><literal type="number">0xaac1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xaaeb</literal></expr>, <expr><literal type="number">0xaaef</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xaaf5</literal></expr>, <expr><literal type="number">0xaaf6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xabe3</literal></expr>, <expr><literal type="number">0xabea</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xabec</literal></expr>, <expr><literal type="number">0xabed</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfb1e</literal></expr>, <expr><literal type="number">0xfb1e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfe00</literal></expr>, <expr><literal type="number">0xfe0f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfe20</literal></expr>, <expr><literal type="number">0xfe2f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x101fd</literal></expr>, <expr><literal type="number">0x101fd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x102e0</literal></expr>, <expr><literal type="number">0x102e0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10376</literal></expr>, <expr><literal type="number">0x1037a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10a01</literal></expr>, <expr><literal type="number">0x10a03</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10a05</literal></expr>, <expr><literal type="number">0x10a06</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10a0c</literal></expr>, <expr><literal type="number">0x10a0f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10a38</literal></expr>, <expr><literal type="number">0x10a3a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10a3f</literal></expr>, <expr><literal type="number">0x10a3f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10ae5</literal></expr>, <expr><literal type="number">0x10ae6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10d24</literal></expr>, <expr><literal type="number">0x10d27</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10f46</literal></expr>, <expr><literal type="number">0x10f50</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11000</literal></expr>, <expr><literal type="number">0x11002</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11038</literal></expr>, <expr><literal type="number">0x11046</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1107f</literal></expr>, <expr><literal type="number">0x11082</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x110b0</literal></expr>, <expr><literal type="number">0x110ba</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11100</literal></expr>, <expr><literal type="number">0x11102</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11127</literal></expr>, <expr><literal type="number">0x11134</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11145</literal></expr>, <expr><literal type="number">0x11146</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11173</literal></expr>, <expr><literal type="number">0x11173</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11180</literal></expr>, <expr><literal type="number">0x11182</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x111b3</literal></expr>, <expr><literal type="number">0x111c0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x111c9</literal></expr>, <expr><literal type="number">0x111cc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1122c</literal></expr>, <expr><literal type="number">0x11237</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1123e</literal></expr>, <expr><literal type="number">0x1123e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x112df</literal></expr>, <expr><literal type="number">0x112ea</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11300</literal></expr>, <expr><literal type="number">0x11303</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1133b</literal></expr>, <expr><literal type="number">0x1133c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1133e</literal></expr>, <expr><literal type="number">0x11344</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11347</literal></expr>, <expr><literal type="number">0x11348</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1134b</literal></expr>, <expr><literal type="number">0x1134d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11357</literal></expr>, <expr><literal type="number">0x11357</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11362</literal></expr>, <expr><literal type="number">0x11363</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11366</literal></expr>, <expr><literal type="number">0x1136c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11370</literal></expr>, <expr><literal type="number">0x11374</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11435</literal></expr>, <expr><literal type="number">0x11446</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1145e</literal></expr>, <expr><literal type="number">0x1145e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x114b0</literal></expr>, <expr><literal type="number">0x114c3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x115af</literal></expr>, <expr><literal type="number">0x115b5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x115b8</literal></expr>, <expr><literal type="number">0x115c0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x115dc</literal></expr>, <expr><literal type="number">0x115dd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11630</literal></expr>, <expr><literal type="number">0x11640</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x116ab</literal></expr>, <expr><literal type="number">0x116b7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1171d</literal></expr>, <expr><literal type="number">0x1172b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1182c</literal></expr>, <expr><literal type="number">0x1183a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x119d1</literal></expr>, <expr><literal type="number">0x119d7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x119da</literal></expr>, <expr><literal type="number">0x119e0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x119e4</literal></expr>, <expr><literal type="number">0x119e4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11a01</literal></expr>, <expr><literal type="number">0x11a0a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11a33</literal></expr>, <expr><literal type="number">0x11a39</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11a3b</literal></expr>, <expr><literal type="number">0x11a3e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11a47</literal></expr>, <expr><literal type="number">0x11a47</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11a51</literal></expr>, <expr><literal type="number">0x11a5b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11a8a</literal></expr>, <expr><literal type="number">0x11a99</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11c2f</literal></expr>, <expr><literal type="number">0x11c36</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11c38</literal></expr>, <expr><literal type="number">0x11c3f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11c92</literal></expr>, <expr><literal type="number">0x11ca7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11ca9</literal></expr>, <expr><literal type="number">0x11cb6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11d31</literal></expr>, <expr><literal type="number">0x11d36</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11d3a</literal></expr>, <expr><literal type="number">0x11d3a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11d3c</literal></expr>, <expr><literal type="number">0x11d3d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11d3f</literal></expr>, <expr><literal type="number">0x11d45</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11d47</literal></expr>, <expr><literal type="number">0x11d47</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11d8a</literal></expr>, <expr><literal type="number">0x11d8e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11d90</literal></expr>, <expr><literal type="number">0x11d91</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11d93</literal></expr>, <expr><literal type="number">0x11d97</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x11ef3</literal></expr>, <expr><literal type="number">0x11ef6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x16af0</literal></expr>, <expr><literal type="number">0x16af4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x16b30</literal></expr>, <expr><literal type="number">0x16b36</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x16f4f</literal></expr>, <expr><literal type="number">0x16f4f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x16f51</literal></expr>, <expr><literal type="number">0x16f87</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x16f8f</literal></expr>, <expr><literal type="number">0x16f92</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1bc9d</literal></expr>, <expr><literal type="number">0x1bc9e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1d165</literal></expr>, <expr><literal type="number">0x1d169</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1d16d</literal></expr>, <expr><literal type="number">0x1d172</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1d17b</literal></expr>, <expr><literal type="number">0x1d182</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1d185</literal></expr>, <expr><literal type="number">0x1d18b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1d1aa</literal></expr>, <expr><literal type="number">0x1d1ad</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1d242</literal></expr>, <expr><literal type="number">0x1d244</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1da00</literal></expr>, <expr><literal type="number">0x1da36</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1da3b</literal></expr>, <expr><literal type="number">0x1da6c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1da75</literal></expr>, <expr><literal type="number">0x1da75</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1da84</literal></expr>, <expr><literal type="number">0x1da84</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1da9b</literal></expr>, <expr><literal type="number">0x1da9f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1daa1</literal></expr>, <expr><literal type="number">0x1daaf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e000</literal></expr>, <expr><literal type="number">0x1e006</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e008</literal></expr>, <expr><literal type="number">0x1e018</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e01b</literal></expr>, <expr><literal type="number">0x1e021</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e023</literal></expr>, <expr><literal type="number">0x1e024</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e026</literal></expr>, <expr><literal type="number">0x1e02a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e130</literal></expr>, <expr><literal type="number">0x1e136</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e2ec</literal></expr>, <expr><literal type="number">0x1e2ef</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e8d0</literal></expr>, <expr><literal type="number">0x1e8d6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e944</literal></expr>, <expr><literal type="number">0x1e94a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe0100</literal></expr>, <expr><literal type="number">0xe01ef</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>intable</name><argument_list>(<argument><expr><name>combining</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>combining</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>utf_printable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WCHAR_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>



<return>return <expr><call><name>iswprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>interval</name></name></type> <name><name>nonprint</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x070f</literal></expr>, <expr><literal type="number">0x070f</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x180b</literal></expr>, <expr><literal type="number">0x180e</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x200b</literal></expr>, <expr><literal type="number">0x200f</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x202a</literal></expr>, <expr><literal type="number">0x202e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x206a</literal></expr>, <expr><literal type="number">0x206f</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdfff</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0xfeff</literal></expr>, <expr><literal type="number">0xfeff</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0xfff9</literal></expr>, <expr><literal type="number">0xfffb</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfffe</literal></expr>, <expr><literal type="number">0xffff</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>!</operator><call><name>intable</name><argument_list>(<argument><expr><name>nonprint</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nonprint</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>interval</name></name></type> <name><name>emoji_all</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x203c</literal></expr>, <expr><literal type="number">0x203c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2049</literal></expr>, <expr><literal type="number">0x2049</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2122</literal></expr>, <expr><literal type="number">0x2122</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2139</literal></expr>, <expr><literal type="number">0x2139</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2194</literal></expr>, <expr><literal type="number">0x2199</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x21a9</literal></expr>, <expr><literal type="number">0x21aa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x231a</literal></expr>, <expr><literal type="number">0x231b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2328</literal></expr>, <expr><literal type="number">0x2328</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23cf</literal></expr>, <expr><literal type="number">0x23cf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23e9</literal></expr>, <expr><literal type="number">0x23f3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23f8</literal></expr>, <expr><literal type="number">0x23fa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x24c2</literal></expr>, <expr><literal type="number">0x24c2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25aa</literal></expr>, <expr><literal type="number">0x25ab</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25b6</literal></expr>, <expr><literal type="number">0x25b6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25c0</literal></expr>, <expr><literal type="number">0x25c0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25fb</literal></expr>, <expr><literal type="number">0x25fe</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2600</literal></expr>, <expr><literal type="number">0x2604</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x260e</literal></expr>, <expr><literal type="number">0x260e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2611</literal></expr>, <expr><literal type="number">0x2611</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2614</literal></expr>, <expr><literal type="number">0x2615</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2618</literal></expr>, <expr><literal type="number">0x2618</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x261d</literal></expr>, <expr><literal type="number">0x261d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2620</literal></expr>, <expr><literal type="number">0x2620</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2622</literal></expr>, <expr><literal type="number">0x2623</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2626</literal></expr>, <expr><literal type="number">0x2626</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x262a</literal></expr>, <expr><literal type="number">0x262a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x262e</literal></expr>, <expr><literal type="number">0x262f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2638</literal></expr>, <expr><literal type="number">0x263a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2640</literal></expr>, <expr><literal type="number">0x2640</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2642</literal></expr>, <expr><literal type="number">0x2642</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2648</literal></expr>, <expr><literal type="number">0x2653</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x265f</literal></expr>, <expr><literal type="number">0x2660</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2663</literal></expr>, <expr><literal type="number">0x2663</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2665</literal></expr>, <expr><literal type="number">0x2666</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2668</literal></expr>, <expr><literal type="number">0x2668</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x267b</literal></expr>, <expr><literal type="number">0x267b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x267e</literal></expr>, <expr><literal type="number">0x267f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2692</literal></expr>, <expr><literal type="number">0x2697</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2699</literal></expr>, <expr><literal type="number">0x2699</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x269b</literal></expr>, <expr><literal type="number">0x269c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26a0</literal></expr>, <expr><literal type="number">0x26a1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26aa</literal></expr>, <expr><literal type="number">0x26ab</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26b0</literal></expr>, <expr><literal type="number">0x26b1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26bd</literal></expr>, <expr><literal type="number">0x26be</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26c4</literal></expr>, <expr><literal type="number">0x26c5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26c8</literal></expr>, <expr><literal type="number">0x26c8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26ce</literal></expr>, <expr><literal type="number">0x26cf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26d1</literal></expr>, <expr><literal type="number">0x26d1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26d3</literal></expr>, <expr><literal type="number">0x26d4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26e9</literal></expr>, <expr><literal type="number">0x26ea</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26f0</literal></expr>, <expr><literal type="number">0x26f5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26f7</literal></expr>, <expr><literal type="number">0x26fa</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26fd</literal></expr>, <expr><literal type="number">0x26fd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2702</literal></expr>, <expr><literal type="number">0x2702</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2705</literal></expr>, <expr><literal type="number">0x2705</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2708</literal></expr>, <expr><literal type="number">0x270d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x270f</literal></expr>, <expr><literal type="number">0x270f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2712</literal></expr>, <expr><literal type="number">0x2712</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2714</literal></expr>, <expr><literal type="number">0x2714</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2716</literal></expr>, <expr><literal type="number">0x2716</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x271d</literal></expr>, <expr><literal type="number">0x271d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2721</literal></expr>, <expr><literal type="number">0x2721</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2728</literal></expr>, <expr><literal type="number">0x2728</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2733</literal></expr>, <expr><literal type="number">0x2734</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2744</literal></expr>, <expr><literal type="number">0x2744</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2747</literal></expr>, <expr><literal type="number">0x2747</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x274c</literal></expr>, <expr><literal type="number">0x274c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x274e</literal></expr>, <expr><literal type="number">0x274e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2753</literal></expr>, <expr><literal type="number">0x2755</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2757</literal></expr>, <expr><literal type="number">0x2757</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2763</literal></expr>, <expr><literal type="number">0x2764</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2795</literal></expr>, <expr><literal type="number">0x2797</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x27a1</literal></expr>, <expr><literal type="number">0x27a1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x27b0</literal></expr>, <expr><literal type="number">0x27b0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x27bf</literal></expr>, <expr><literal type="number">0x27bf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2934</literal></expr>, <expr><literal type="number">0x2935</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2b05</literal></expr>, <expr><literal type="number">0x2b07</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2b1b</literal></expr>, <expr><literal type="number">0x2b1c</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2b50</literal></expr>, <expr><literal type="number">0x2b50</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2b55</literal></expr>, <expr><literal type="number">0x2b55</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3030</literal></expr>, <expr><literal type="number">0x3030</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x303d</literal></expr>, <expr><literal type="number">0x303d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3297</literal></expr>, <expr><literal type="number">0x3297</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3299</literal></expr>, <expr><literal type="number">0x3299</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f004</literal></expr>, <expr><literal type="number">0x1f004</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f0cf</literal></expr>, <expr><literal type="number">0x1f0cf</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f170</literal></expr>, <expr><literal type="number">0x1f171</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f17e</literal></expr>, <expr><literal type="number">0x1f17f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f18e</literal></expr>, <expr><literal type="number">0x1f18e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f191</literal></expr>, <expr><literal type="number">0x1f19a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f1e6</literal></expr>, <expr><literal type="number">0x1f1ff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f201</literal></expr>, <expr><literal type="number">0x1f202</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f21a</literal></expr>, <expr><literal type="number">0x1f21a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f22f</literal></expr>, <expr><literal type="number">0x1f22f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f232</literal></expr>, <expr><literal type="number">0x1f23a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f250</literal></expr>, <expr><literal type="number">0x1f251</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f300</literal></expr>, <expr><literal type="number">0x1f321</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f324</literal></expr>, <expr><literal type="number">0x1f393</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f396</literal></expr>, <expr><literal type="number">0x1f397</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f399</literal></expr>, <expr><literal type="number">0x1f39b</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f39e</literal></expr>, <expr><literal type="number">0x1f3f0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3f3</literal></expr>, <expr><literal type="number">0x1f3f5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3f7</literal></expr>, <expr><literal type="number">0x1f4fd</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f4ff</literal></expr>, <expr><literal type="number">0x1f53d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f549</literal></expr>, <expr><literal type="number">0x1f54e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f550</literal></expr>, <expr><literal type="number">0x1f567</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f56f</literal></expr>, <expr><literal type="number">0x1f570</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f573</literal></expr>, <expr><literal type="number">0x1f57a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f587</literal></expr>, <expr><literal type="number">0x1f587</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f58a</literal></expr>, <expr><literal type="number">0x1f58d</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f590</literal></expr>, <expr><literal type="number">0x1f590</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f595</literal></expr>, <expr><literal type="number">0x1f596</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5a4</literal></expr>, <expr><literal type="number">0x1f5a5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5a8</literal></expr>, <expr><literal type="number">0x1f5a8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5b1</literal></expr>, <expr><literal type="number">0x1f5b2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5bc</literal></expr>, <expr><literal type="number">0x1f5bc</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5c2</literal></expr>, <expr><literal type="number">0x1f5c4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5d1</literal></expr>, <expr><literal type="number">0x1f5d3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5dc</literal></expr>, <expr><literal type="number">0x1f5de</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5e1</literal></expr>, <expr><literal type="number">0x1f5e1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5e3</literal></expr>, <expr><literal type="number">0x1f5e3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5e8</literal></expr>, <expr><literal type="number">0x1f5e8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5ef</literal></expr>, <expr><literal type="number">0x1f5ef</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5f3</literal></expr>, <expr><literal type="number">0x1f5f3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5fa</literal></expr>, <expr><literal type="number">0x1f64f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f680</literal></expr>, <expr><literal type="number">0x1f6c5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6cb</literal></expr>, <expr><literal type="number">0x1f6d2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6e0</literal></expr>, <expr><literal type="number">0x1f6e5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6e9</literal></expr>, <expr><literal type="number">0x1f6e9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6eb</literal></expr>, <expr><literal type="number">0x1f6ec</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6f0</literal></expr>, <expr><literal type="number">0x1f6f0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6f3</literal></expr>, <expr><literal type="number">0x1f6f9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f910</literal></expr>, <expr><literal type="number">0x1f93a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f93c</literal></expr>, <expr><literal type="number">0x1f93e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f940</literal></expr>, <expr><literal type="number">0x1f945</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f947</literal></expr>, <expr><literal type="number">0x1f970</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f973</literal></expr>, <expr><literal type="number">0x1f976</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f97a</literal></expr>, <expr><literal type="number">0x1f97a</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f97c</literal></expr>, <expr><literal type="number">0x1f9a2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f9b0</literal></expr>, <expr><literal type="number">0x1f9b9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f9c0</literal></expr>, <expr><literal type="number">0x1f9c2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f9d0</literal></expr>, <expr><literal type="number">0x1f9ff</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>







<function><type><name>int</name></type>
<name>utf_class</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>utf_class_buf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>utf_class_buf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<struct><specifier>static</specifier> struct <name>clinterval</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>class</name></decl>;</decl_stmt>
}</block> <decl><name><name>classes</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x037e</literal></expr>, <expr><literal type="number">0x037e</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x0387</literal></expr>, <expr><literal type="number">0x0387</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x055a</literal></expr>, <expr><literal type="number">0x055f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x0589</literal></expr>, <expr><literal type="number">0x0589</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x05be</literal></expr>, <expr><literal type="number">0x05be</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x05c0</literal></expr>, <expr><literal type="number">0x05c0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x05c3</literal></expr>, <expr><literal type="number">0x05c3</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x05f3</literal></expr>, <expr><literal type="number">0x05f4</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x060c</literal></expr>, <expr><literal type="number">0x060c</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x061b</literal></expr>, <expr><literal type="number">0x061b</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x061f</literal></expr>, <expr><literal type="number">0x061f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x066a</literal></expr>, <expr><literal type="number">0x066d</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x06d4</literal></expr>, <expr><literal type="number">0x06d4</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0700</literal></expr>, <expr><literal type="number">0x070d</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x0964</literal></expr>, <expr><literal type="number">0x0965</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0970</literal></expr>, <expr><literal type="number">0x0970</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0df4</literal></expr>, <expr><literal type="number">0x0df4</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0e4f</literal></expr>, <expr><literal type="number">0x0e4f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0e5a</literal></expr>, <expr><literal type="number">0x0e5b</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f04</literal></expr>, <expr><literal type="number">0x0f12</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f3a</literal></expr>, <expr><literal type="number">0x0f3d</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0f85</literal></expr>, <expr><literal type="number">0x0f85</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x104a</literal></expr>, <expr><literal type="number">0x104f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x10fb</literal></expr>, <expr><literal type="number">0x10fb</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x1361</literal></expr>, <expr><literal type="number">0x1368</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x166d</literal></expr>, <expr><literal type="number">0x166e</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x1680</literal></expr>, <expr><literal type="number">0x1680</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x169b</literal></expr>, <expr><literal type="number">0x169c</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x16eb</literal></expr>, <expr><literal type="number">0x16ed</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1735</literal></expr>, <expr><literal type="number">0x1736</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x17d4</literal></expr>, <expr><literal type="number">0x17dc</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x1800</literal></expr>, <expr><literal type="number">0x180a</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x2000</literal></expr>, <expr><literal type="number">0x200b</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x200c</literal></expr>, <expr><literal type="number">0x2027</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x2028</literal></expr>, <expr><literal type="number">0x2029</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x202a</literal></expr>, <expr><literal type="number">0x202e</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x202f</literal></expr>, <expr><literal type="number">0x202f</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2030</literal></expr>, <expr><literal type="number">0x205e</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x205f</literal></expr>, <expr><literal type="number">0x205f</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2060</literal></expr>, <expr><literal type="number">0x27ff</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x2070</literal></expr>, <expr><literal type="number">0x207f</literal></expr>, <expr><literal type="number">0x2070</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x2080</literal></expr>, <expr><literal type="number">0x2094</literal></expr>, <expr><literal type="number">0x2080</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x20a0</literal></expr>, <expr><literal type="number">0x27ff</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x2800</literal></expr>, <expr><literal type="number">0x28ff</literal></expr>, <expr><literal type="number">0x2800</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x2900</literal></expr>, <expr><literal type="number">0x2998</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x29d8</literal></expr>, <expr><literal type="number">0x29db</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x29fc</literal></expr>, <expr><literal type="number">0x29fd</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2e00</literal></expr>, <expr><literal type="number">0x2e7f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x3000</literal></expr>, <expr><literal type="number">0x3000</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x3001</literal></expr>, <expr><literal type="number">0x3020</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x3030</literal></expr>, <expr><literal type="number">0x3030</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x303d</literal></expr>, <expr><literal type="number">0x303d</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3040</literal></expr>, <expr><literal type="number">0x309f</literal></expr>, <expr><literal type="number">0x3040</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x30a0</literal></expr>, <expr><literal type="number">0x30ff</literal></expr>, <expr><literal type="number">0x30a0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x3300</literal></expr>, <expr><literal type="number">0x9fff</literal></expr>, <expr><literal type="number">0x4e00</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xac00</literal></expr>, <expr><literal type="number">0xd7a3</literal></expr>, <expr><literal type="number">0xac00</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xf900</literal></expr>, <expr><literal type="number">0xfaff</literal></expr>, <expr><literal type="number">0x4e00</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xfd3e</literal></expr>, <expr><literal type="number">0xfd3f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfe30</literal></expr>, <expr><literal type="number">0xfe6b</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xff00</literal></expr>, <expr><literal type="number">0xff0f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xff1a</literal></expr>, <expr><literal type="number">0xff20</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xff3b</literal></expr>, <expr><literal type="number">0xff40</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xff5b</literal></expr>, <expr><literal type="number">0xff65</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x1d000</literal></expr>, <expr><literal type="number">0x1d24f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x1d400</literal></expr>, <expr><literal type="number">0x1d7ff</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x1f000</literal></expr>, <expr><literal type="number">0x1f2ff</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x1f300</literal></expr>, <expr><literal type="number">0x1f9ff</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x20000</literal></expr>, <expr><literal type="number">0x2a6df</literal></expr>, <expr><literal type="number">0x4e00</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x2a700</literal></expr>, <expr><literal type="number">0x2b73f</literal></expr>, <expr><literal type="number">0x4e00</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x2b740</literal></expr>, <expr><literal type="number">0x2b81f</literal></expr>, <expr><literal type="number">0x4e00</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x2f800</literal></expr>, <expr><literal type="number">0x2fa1f</literal></expr>, <expr><literal type="number">0x4e00</literal></expr>}</block></expr>, 
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>bot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>classes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>clinterval</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mid</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x100</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">0xa0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>top</name> <operator>&gt;=</operator> <name>bot</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>bot</name> <operator>+</operator> <name>top</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>classes</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>classes</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>classes</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>class</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><call><name>intable</name><argument_list>(<argument><expr><name>emoji_all</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>emoji_all</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>utf_ambiguous_width</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>intable</name><argument_list>(<argument><expr><name>ambiguous</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ambiguous</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>intable</name><argument_list>(<argument><expr><name>emoji_all</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>emoji_all</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>















<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>rangeStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rangeEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>convertStruct</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>convertStruct</name></type> <name><name>foldCase</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x5a</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xb5</literal></expr>,<expr><literal type="number">0xb5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">775</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xc0</literal></expr>,<expr><literal type="number">0xd6</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xd8</literal></expr>,<expr><literal type="number">0xde</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x100</literal></expr>,<expr><literal type="number">0x12e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x132</literal></expr>,<expr><literal type="number">0x136</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x139</literal></expr>,<expr><literal type="number">0x147</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x14a</literal></expr>,<expr><literal type="number">0x176</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x178</literal></expr>,<expr><literal type="number">0x178</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">121</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x179</literal></expr>,<expr><literal type="number">0x17d</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x17f</literal></expr>,<expr><literal type="number">0x17f</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">268</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x181</literal></expr>,<expr><literal type="number">0x181</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">210</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x182</literal></expr>,<expr><literal type="number">0x184</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x186</literal></expr>,<expr><literal type="number">0x186</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">206</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x187</literal></expr>,<expr><literal type="number">0x187</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x189</literal></expr>,<expr><literal type="number">0x18a</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">205</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x18b</literal></expr>,<expr><literal type="number">0x18b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x18e</literal></expr>,<expr><literal type="number">0x18e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">79</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x18f</literal></expr>,<expr><literal type="number">0x18f</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">202</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x190</literal></expr>,<expr><literal type="number">0x190</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">203</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x191</literal></expr>,<expr><literal type="number">0x191</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x193</literal></expr>,<expr><literal type="number">0x193</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">205</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x194</literal></expr>,<expr><literal type="number">0x194</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">207</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x196</literal></expr>,<expr><literal type="number">0x196</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">211</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x197</literal></expr>,<expr><literal type="number">0x197</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">209</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x198</literal></expr>,<expr><literal type="number">0x198</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x19c</literal></expr>,<expr><literal type="number">0x19c</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">211</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x19d</literal></expr>,<expr><literal type="number">0x19d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">213</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x19f</literal></expr>,<expr><literal type="number">0x19f</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">214</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a0</literal></expr>,<expr><literal type="number">0x1a4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a6</literal></expr>,<expr><literal type="number">0x1a6</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">218</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a7</literal></expr>,<expr><literal type="number">0x1a7</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a9</literal></expr>,<expr><literal type="number">0x1a9</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">218</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ac</literal></expr>,<expr><literal type="number">0x1ac</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ae</literal></expr>,<expr><literal type="number">0x1ae</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">218</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1af</literal></expr>,<expr><literal type="number">0x1af</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b1</literal></expr>,<expr><literal type="number">0x1b2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">217</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b3</literal></expr>,<expr><literal type="number">0x1b5</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b7</literal></expr>,<expr><literal type="number">0x1b7</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">219</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b8</literal></expr>,<expr><literal type="number">0x1bc</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c4</literal></expr>,<expr><literal type="number">0x1c4</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c5</literal></expr>,<expr><literal type="number">0x1c5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c7</literal></expr>,<expr><literal type="number">0x1c7</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c8</literal></expr>,<expr><literal type="number">0x1c8</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ca</literal></expr>,<expr><literal type="number">0x1ca</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1cb</literal></expr>,<expr><literal type="number">0x1db</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1de</literal></expr>,<expr><literal type="number">0x1ee</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f1</literal></expr>,<expr><literal type="number">0x1f1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f2</literal></expr>,<expr><literal type="number">0x1f4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6</literal></expr>,<expr><literal type="number">0x1f6</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">97</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f7</literal></expr>,<expr><literal type="number">0x1f7</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">56</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f8</literal></expr>,<expr><literal type="number">0x21e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x220</literal></expr>,<expr><literal type="number">0x220</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">130</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x222</literal></expr>,<expr><literal type="number">0x232</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23a</literal></expr>,<expr><literal type="number">0x23a</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10795</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23b</literal></expr>,<expr><literal type="number">0x23b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23d</literal></expr>,<expr><literal type="number">0x23d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">163</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23e</literal></expr>,<expr><literal type="number">0x23e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10792</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x241</literal></expr>,<expr><literal type="number">0x241</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x243</literal></expr>,<expr><literal type="number">0x243</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">195</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x244</literal></expr>,<expr><literal type="number">0x244</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">69</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x245</literal></expr>,<expr><literal type="number">0x245</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">71</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x246</literal></expr>,<expr><literal type="number">0x24e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x345</literal></expr>,<expr><literal type="number">0x345</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">116</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x370</literal></expr>,<expr><literal type="number">0x372</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x376</literal></expr>,<expr><literal type="number">0x376</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x37f</literal></expr>,<expr><literal type="number">0x37f</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">116</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x386</literal></expr>,<expr><literal type="number">0x386</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">38</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x388</literal></expr>,<expr><literal type="number">0x38a</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">37</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x38c</literal></expr>,<expr><literal type="number">0x38c</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">64</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x38e</literal></expr>,<expr><literal type="number">0x38f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">63</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x391</literal></expr>,<expr><literal type="number">0x3a1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3a3</literal></expr>,<expr><literal type="number">0x3ab</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3c2</literal></expr>,<expr><literal type="number">0x3c2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3cf</literal></expr>,<expr><literal type="number">0x3cf</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d0</literal></expr>,<expr><literal type="number">0x3d0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">30</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d1</literal></expr>,<expr><literal type="number">0x3d1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">25</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d5</literal></expr>,<expr><literal type="number">0x3d5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d6</literal></expr>,<expr><literal type="number">0x3d6</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">22</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d8</literal></expr>,<expr><literal type="number">0x3ee</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f0</literal></expr>,<expr><literal type="number">0x3f0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">54</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f1</literal></expr>,<expr><literal type="number">0x3f1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f4</literal></expr>,<expr><literal type="number">0x3f4</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">60</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f5</literal></expr>,<expr><literal type="number">0x3f5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">64</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f7</literal></expr>,<expr><literal type="number">0x3f7</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f9</literal></expr>,<expr><literal type="number">0x3f9</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3fa</literal></expr>,<expr><literal type="number">0x3fa</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3fd</literal></expr>,<expr><literal type="number">0x3ff</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">130</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x400</literal></expr>,<expr><literal type="number">0x40f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">80</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x410</literal></expr>,<expr><literal type="number">0x42f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x460</literal></expr>,<expr><literal type="number">0x480</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x48a</literal></expr>,<expr><literal type="number">0x4be</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4c0</literal></expr>,<expr><literal type="number">0x4c0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4c1</literal></expr>,<expr><literal type="number">0x4cd</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4d0</literal></expr>,<expr><literal type="number">0x52e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x531</literal></expr>,<expr><literal type="number">0x556</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10a0</literal></expr>,<expr><literal type="number">0x10c5</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">7264</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10c7</literal></expr>,<expr><literal type="number">0x10cd</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7264</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x13f8</literal></expr>,<expr><literal type="number">0x13fd</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c80</literal></expr>,<expr><literal type="number">0x1c80</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6222</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c81</literal></expr>,<expr><literal type="number">0x1c81</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6221</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c82</literal></expr>,<expr><literal type="number">0x1c82</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6212</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c83</literal></expr>,<expr><literal type="number">0x1c84</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6210</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c85</literal></expr>,<expr><literal type="number">0x1c85</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6211</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c86</literal></expr>,<expr><literal type="number">0x1c86</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6204</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c87</literal></expr>,<expr><literal type="number">0x1c87</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6180</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c88</literal></expr>,<expr><literal type="number">0x1c88</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">35267</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c90</literal></expr>,<expr><literal type="number">0x1cba</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">3008</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1cbd</literal></expr>,<expr><literal type="number">0x1cbf</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">3008</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e00</literal></expr>,<expr><literal type="number">0x1e94</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e9b</literal></expr>,<expr><literal type="number">0x1e9b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">58</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e9e</literal></expr>,<expr><literal type="number">0x1e9e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">7615</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ea0</literal></expr>,<expr><literal type="number">0x1efe</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f08</literal></expr>,<expr><literal type="number">0x1f0f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f18</literal></expr>,<expr><literal type="number">0x1f1d</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f28</literal></expr>,<expr><literal type="number">0x1f2f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f38</literal></expr>,<expr><literal type="number">0x1f3f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f48</literal></expr>,<expr><literal type="number">0x1f4d</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f59</literal></expr>,<expr><literal type="number">0x1f5f</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f68</literal></expr>,<expr><literal type="number">0x1f6f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f88</literal></expr>,<expr><literal type="number">0x1f8f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f98</literal></expr>,<expr><literal type="number">0x1f9f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fa8</literal></expr>,<expr><literal type="number">0x1faf</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fb8</literal></expr>,<expr><literal type="number">0x1fb9</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fba</literal></expr>,<expr><literal type="number">0x1fbb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">74</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fbc</literal></expr>,<expr><literal type="number">0x1fbc</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fbe</literal></expr>,<expr><literal type="number">0x1fbe</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">7173</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fc8</literal></expr>,<expr><literal type="number">0x1fcb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">86</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fcc</literal></expr>,<expr><literal type="number">0x1fcc</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fd8</literal></expr>,<expr><literal type="number">0x1fd9</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fda</literal></expr>,<expr><literal type="number">0x1fdb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">100</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fe8</literal></expr>,<expr><literal type="number">0x1fe9</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fea</literal></expr>,<expr><literal type="number">0x1feb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">112</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fec</literal></expr>,<expr><literal type="number">0x1fec</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ff8</literal></expr>,<expr><literal type="number">0x1ff9</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">128</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ffa</literal></expr>,<expr><literal type="number">0x1ffb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">126</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ffc</literal></expr>,<expr><literal type="number">0x1ffc</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2126</literal></expr>,<expr><literal type="number">0x2126</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">7517</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x212a</literal></expr>,<expr><literal type="number">0x212a</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8383</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x212b</literal></expr>,<expr><literal type="number">0x212b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8262</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2132</literal></expr>,<expr><literal type="number">0x2132</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">28</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2160</literal></expr>,<expr><literal type="number">0x216f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2183</literal></expr>,<expr><literal type="number">0x2183</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x24b6</literal></expr>,<expr><literal type="number">0x24cf</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">26</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c00</literal></expr>,<expr><literal type="number">0x2c2e</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c60</literal></expr>,<expr><literal type="number">0x2c60</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c62</literal></expr>,<expr><literal type="number">0x2c62</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10743</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c63</literal></expr>,<expr><literal type="number">0x2c63</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">3814</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c64</literal></expr>,<expr><literal type="number">0x2c64</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10727</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c67</literal></expr>,<expr><literal type="number">0x2c6b</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c6d</literal></expr>,<expr><literal type="number">0x2c6d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10780</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c6e</literal></expr>,<expr><literal type="number">0x2c6e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10749</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c6f</literal></expr>,<expr><literal type="number">0x2c6f</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10783</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c70</literal></expr>,<expr><literal type="number">0x2c70</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10782</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c72</literal></expr>,<expr><literal type="number">0x2c75</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c7e</literal></expr>,<expr><literal type="number">0x2c7f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10815</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c80</literal></expr>,<expr><literal type="number">0x2ce2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2ceb</literal></expr>,<expr><literal type="number">0x2ced</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2cf2</literal></expr>,<expr><literal type="number">0xa640</literal></expr>,<expr><literal type="number">31054</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa642</literal></expr>,<expr><literal type="number">0xa66c</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa680</literal></expr>,<expr><literal type="number">0xa69a</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa722</literal></expr>,<expr><literal type="number">0xa72e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa732</literal></expr>,<expr><literal type="number">0xa76e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa779</literal></expr>,<expr><literal type="number">0xa77b</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa77d</literal></expr>,<expr><literal type="number">0xa77d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">35332</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa77e</literal></expr>,<expr><literal type="number">0xa786</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa78b</literal></expr>,<expr><literal type="number">0xa78b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa78d</literal></expr>,<expr><literal type="number">0xa78d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42280</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa790</literal></expr>,<expr><literal type="number">0xa792</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa796</literal></expr>,<expr><literal type="number">0xa7a8</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7aa</literal></expr>,<expr><literal type="number">0xa7aa</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42308</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7ab</literal></expr>,<expr><literal type="number">0xa7ab</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42319</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7ac</literal></expr>,<expr><literal type="number">0xa7ac</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42315</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7ad</literal></expr>,<expr><literal type="number">0xa7ad</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42305</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7ae</literal></expr>,<expr><literal type="number">0xa7ae</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42308</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7b0</literal></expr>,<expr><literal type="number">0xa7b0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42258</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7b1</literal></expr>,<expr><literal type="number">0xa7b1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42282</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7b2</literal></expr>,<expr><literal type="number">0xa7b2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42261</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7b3</literal></expr>,<expr><literal type="number">0xa7b3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">928</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7b4</literal></expr>,<expr><literal type="number">0xa7be</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7c2</literal></expr>,<expr><literal type="number">0xa7c2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7c4</literal></expr>,<expr><literal type="number">0xa7c4</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7c5</literal></expr>,<expr><literal type="number">0xa7c5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42307</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7c6</literal></expr>,<expr><literal type="number">0xa7c6</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">35384</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xab70</literal></expr>,<expr><literal type="number">0xabbf</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">38864</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xff21</literal></expr>,<expr><literal type="number">0xff3a</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10400</literal></expr>,<expr><literal type="number">0x10427</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">40</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x104b0</literal></expr>,<expr><literal type="number">0x104d3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">40</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10c80</literal></expr>,<expr><literal type="number">0x10cb2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">64</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x118a0</literal></expr>,<expr><literal type="number">0x118bf</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x16e40</literal></expr>,<expr><literal type="number">0x16e5f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e900</literal></expr>,<expr><literal type="number">0x1e921</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">34</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf_convert</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name>convertStruct</name></type> <name><name>table</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tableSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>entries</name> <init>= <expr><name>tableSize</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>convertStruct</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>+</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>rangeEnd</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>entries</name>
<operator>&amp;&amp;</operator> <name><name>table</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>rangeStart</name> <operator>&lt;=</operator> <name>a</name>
<operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name><name>table</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>rangeEnd</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name><name>table</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>rangeStart</name><operator>)</operator> <operator>%</operator> <name><name>table</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>step</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <name><name>table</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>utf_fold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;=</operator> <literal type="number">0x41</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <literal type="number">0x5a</literal></expr> ?</condition><then> <expr><name>a</name> <operator>+</operator> <literal type="number">32</literal></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>utf_convert</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>foldCase</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>foldCase</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>convertStruct</name></type> <name><name>toLower</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x5a</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xc0</literal></expr>,<expr><literal type="number">0xd6</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xd8</literal></expr>,<expr><literal type="number">0xde</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x100</literal></expr>,<expr><literal type="number">0x12e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x130</literal></expr>,<expr><literal type="number">0x130</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">199</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x132</literal></expr>,<expr><literal type="number">0x136</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x139</literal></expr>,<expr><literal type="number">0x147</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x14a</literal></expr>,<expr><literal type="number">0x176</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x178</literal></expr>,<expr><literal type="number">0x178</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">121</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x179</literal></expr>,<expr><literal type="number">0x17d</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x181</literal></expr>,<expr><literal type="number">0x181</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">210</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x182</literal></expr>,<expr><literal type="number">0x184</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x186</literal></expr>,<expr><literal type="number">0x186</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">206</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x187</literal></expr>,<expr><literal type="number">0x187</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x189</literal></expr>,<expr><literal type="number">0x18a</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">205</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x18b</literal></expr>,<expr><literal type="number">0x18b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x18e</literal></expr>,<expr><literal type="number">0x18e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">79</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x18f</literal></expr>,<expr><literal type="number">0x18f</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">202</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x190</literal></expr>,<expr><literal type="number">0x190</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">203</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x191</literal></expr>,<expr><literal type="number">0x191</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x193</literal></expr>,<expr><literal type="number">0x193</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">205</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x194</literal></expr>,<expr><literal type="number">0x194</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">207</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x196</literal></expr>,<expr><literal type="number">0x196</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">211</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x197</literal></expr>,<expr><literal type="number">0x197</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">209</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x198</literal></expr>,<expr><literal type="number">0x198</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x19c</literal></expr>,<expr><literal type="number">0x19c</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">211</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x19d</literal></expr>,<expr><literal type="number">0x19d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">213</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x19f</literal></expr>,<expr><literal type="number">0x19f</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">214</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a0</literal></expr>,<expr><literal type="number">0x1a4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a6</literal></expr>,<expr><literal type="number">0x1a6</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">218</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a7</literal></expr>,<expr><literal type="number">0x1a7</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a9</literal></expr>,<expr><literal type="number">0x1a9</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">218</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ac</literal></expr>,<expr><literal type="number">0x1ac</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ae</literal></expr>,<expr><literal type="number">0x1ae</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">218</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1af</literal></expr>,<expr><literal type="number">0x1af</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b1</literal></expr>,<expr><literal type="number">0x1b2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">217</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b3</literal></expr>,<expr><literal type="number">0x1b5</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b7</literal></expr>,<expr><literal type="number">0x1b7</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">219</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b8</literal></expr>,<expr><literal type="number">0x1bc</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c4</literal></expr>,<expr><literal type="number">0x1c4</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c5</literal></expr>,<expr><literal type="number">0x1c5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c7</literal></expr>,<expr><literal type="number">0x1c7</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c8</literal></expr>,<expr><literal type="number">0x1c8</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ca</literal></expr>,<expr><literal type="number">0x1ca</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1cb</literal></expr>,<expr><literal type="number">0x1db</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1de</literal></expr>,<expr><literal type="number">0x1ee</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f1</literal></expr>,<expr><literal type="number">0x1f1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f2</literal></expr>,<expr><literal type="number">0x1f4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f6</literal></expr>,<expr><literal type="number">0x1f6</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">97</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f7</literal></expr>,<expr><literal type="number">0x1f7</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">56</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f8</literal></expr>,<expr><literal type="number">0x21e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x220</literal></expr>,<expr><literal type="number">0x220</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">130</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x222</literal></expr>,<expr><literal type="number">0x232</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23a</literal></expr>,<expr><literal type="number">0x23a</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10795</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23b</literal></expr>,<expr><literal type="number">0x23b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23d</literal></expr>,<expr><literal type="number">0x23d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">163</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23e</literal></expr>,<expr><literal type="number">0x23e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10792</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x241</literal></expr>,<expr><literal type="number">0x241</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x243</literal></expr>,<expr><literal type="number">0x243</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">195</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x244</literal></expr>,<expr><literal type="number">0x244</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">69</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x245</literal></expr>,<expr><literal type="number">0x245</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">71</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x246</literal></expr>,<expr><literal type="number">0x24e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x370</literal></expr>,<expr><literal type="number">0x372</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x376</literal></expr>,<expr><literal type="number">0x376</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x37f</literal></expr>,<expr><literal type="number">0x37f</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">116</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x386</literal></expr>,<expr><literal type="number">0x386</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">38</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x388</literal></expr>,<expr><literal type="number">0x38a</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">37</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x38c</literal></expr>,<expr><literal type="number">0x38c</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">64</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x38e</literal></expr>,<expr><literal type="number">0x38f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">63</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x391</literal></expr>,<expr><literal type="number">0x3a1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3a3</literal></expr>,<expr><literal type="number">0x3ab</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3cf</literal></expr>,<expr><literal type="number">0x3cf</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d8</literal></expr>,<expr><literal type="number">0x3ee</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f4</literal></expr>,<expr><literal type="number">0x3f4</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">60</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f7</literal></expr>,<expr><literal type="number">0x3f7</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f9</literal></expr>,<expr><literal type="number">0x3f9</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3fa</literal></expr>,<expr><literal type="number">0x3fa</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3fd</literal></expr>,<expr><literal type="number">0x3ff</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">130</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x400</literal></expr>,<expr><literal type="number">0x40f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">80</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x410</literal></expr>,<expr><literal type="number">0x42f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x460</literal></expr>,<expr><literal type="number">0x480</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x48a</literal></expr>,<expr><literal type="number">0x4be</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4c0</literal></expr>,<expr><literal type="number">0x4c0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4c1</literal></expr>,<expr><literal type="number">0x4cd</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4d0</literal></expr>,<expr><literal type="number">0x52e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x531</literal></expr>,<expr><literal type="number">0x556</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10a0</literal></expr>,<expr><literal type="number">0x10c5</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">7264</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10c7</literal></expr>,<expr><literal type="number">0x10cd</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7264</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x13a0</literal></expr>,<expr><literal type="number">0x13ef</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">38864</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x13f0</literal></expr>,<expr><literal type="number">0x13f5</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c90</literal></expr>,<expr><literal type="number">0x1cba</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">3008</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1cbd</literal></expr>,<expr><literal type="number">0x1cbf</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">3008</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e00</literal></expr>,<expr><literal type="number">0x1e94</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e9e</literal></expr>,<expr><literal type="number">0x1e9e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">7615</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ea0</literal></expr>,<expr><literal type="number">0x1efe</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f08</literal></expr>,<expr><literal type="number">0x1f0f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f18</literal></expr>,<expr><literal type="number">0x1f1d</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f28</literal></expr>,<expr><literal type="number">0x1f2f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f38</literal></expr>,<expr><literal type="number">0x1f3f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f48</literal></expr>,<expr><literal type="number">0x1f4d</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f59</literal></expr>,<expr><literal type="number">0x1f5f</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f68</literal></expr>,<expr><literal type="number">0x1f6f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f88</literal></expr>,<expr><literal type="number">0x1f8f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f98</literal></expr>,<expr><literal type="number">0x1f9f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fa8</literal></expr>,<expr><literal type="number">0x1faf</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fb8</literal></expr>,<expr><literal type="number">0x1fb9</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fba</literal></expr>,<expr><literal type="number">0x1fbb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">74</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fbc</literal></expr>,<expr><literal type="number">0x1fbc</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fc8</literal></expr>,<expr><literal type="number">0x1fcb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">86</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fcc</literal></expr>,<expr><literal type="number">0x1fcc</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fd8</literal></expr>,<expr><literal type="number">0x1fd9</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fda</literal></expr>,<expr><literal type="number">0x1fdb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">100</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fe8</literal></expr>,<expr><literal type="number">0x1fe9</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fea</literal></expr>,<expr><literal type="number">0x1feb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">112</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fec</literal></expr>,<expr><literal type="number">0x1fec</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ff8</literal></expr>,<expr><literal type="number">0x1ff9</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">128</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ffa</literal></expr>,<expr><literal type="number">0x1ffb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">126</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ffc</literal></expr>,<expr><literal type="number">0x1ffc</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2126</literal></expr>,<expr><literal type="number">0x2126</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">7517</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x212a</literal></expr>,<expr><literal type="number">0x212a</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8383</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x212b</literal></expr>,<expr><literal type="number">0x212b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8262</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2132</literal></expr>,<expr><literal type="number">0x2132</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">28</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2160</literal></expr>,<expr><literal type="number">0x216f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2183</literal></expr>,<expr><literal type="number">0x2183</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x24b6</literal></expr>,<expr><literal type="number">0x24cf</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">26</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c00</literal></expr>,<expr><literal type="number">0x2c2e</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c60</literal></expr>,<expr><literal type="number">0x2c60</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c62</literal></expr>,<expr><literal type="number">0x2c62</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10743</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c63</literal></expr>,<expr><literal type="number">0x2c63</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">3814</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c64</literal></expr>,<expr><literal type="number">0x2c64</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10727</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c67</literal></expr>,<expr><literal type="number">0x2c6b</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c6d</literal></expr>,<expr><literal type="number">0x2c6d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10780</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c6e</literal></expr>,<expr><literal type="number">0x2c6e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10749</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c6f</literal></expr>,<expr><literal type="number">0x2c6f</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10783</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c70</literal></expr>,<expr><literal type="number">0x2c70</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10782</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c72</literal></expr>,<expr><literal type="number">0x2c75</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c7e</literal></expr>,<expr><literal type="number">0x2c7f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10815</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c80</literal></expr>,<expr><literal type="number">0x2ce2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2ceb</literal></expr>,<expr><literal type="number">0x2ced</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2cf2</literal></expr>,<expr><literal type="number">0xa640</literal></expr>,<expr><literal type="number">31054</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa642</literal></expr>,<expr><literal type="number">0xa66c</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa680</literal></expr>,<expr><literal type="number">0xa69a</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa722</literal></expr>,<expr><literal type="number">0xa72e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa732</literal></expr>,<expr><literal type="number">0xa76e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa779</literal></expr>,<expr><literal type="number">0xa77b</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa77d</literal></expr>,<expr><literal type="number">0xa77d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">35332</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa77e</literal></expr>,<expr><literal type="number">0xa786</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa78b</literal></expr>,<expr><literal type="number">0xa78b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa78d</literal></expr>,<expr><literal type="number">0xa78d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42280</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa790</literal></expr>,<expr><literal type="number">0xa792</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa796</literal></expr>,<expr><literal type="number">0xa7a8</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7aa</literal></expr>,<expr><literal type="number">0xa7aa</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42308</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7ab</literal></expr>,<expr><literal type="number">0xa7ab</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42319</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7ac</literal></expr>,<expr><literal type="number">0xa7ac</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42315</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7ad</literal></expr>,<expr><literal type="number">0xa7ad</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42305</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7ae</literal></expr>,<expr><literal type="number">0xa7ae</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42308</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7b0</literal></expr>,<expr><literal type="number">0xa7b0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42258</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7b1</literal></expr>,<expr><literal type="number">0xa7b1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42282</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7b2</literal></expr>,<expr><literal type="number">0xa7b2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42261</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7b3</literal></expr>,<expr><literal type="number">0xa7b3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">928</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7b4</literal></expr>,<expr><literal type="number">0xa7be</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7c2</literal></expr>,<expr><literal type="number">0xa7c2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7c4</literal></expr>,<expr><literal type="number">0xa7c4</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7c5</literal></expr>,<expr><literal type="number">0xa7c5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">42307</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7c6</literal></expr>,<expr><literal type="number">0xa7c6</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">35384</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xff21</literal></expr>,<expr><literal type="number">0xff3a</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10400</literal></expr>,<expr><literal type="number">0x10427</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">40</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x104b0</literal></expr>,<expr><literal type="number">0x104d3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">40</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10c80</literal></expr>,<expr><literal type="number">0x10cb2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">64</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x118a0</literal></expr>,<expr><literal type="number">0x118bf</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x16e40</literal></expr>,<expr><literal type="number">0x16e5f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e900</literal></expr>,<expr><literal type="number">0x1e921</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">34</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>convertStruct</name></type> <name><name>toUpper</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x7a</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xb5</literal></expr>,<expr><literal type="number">0xb5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">743</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe0</literal></expr>,<expr><literal type="number">0xf6</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xf8</literal></expr>,<expr><literal type="number">0xfe</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">121</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x101</literal></expr>,<expr><literal type="number">0x12f</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x131</literal></expr>,<expr><literal type="number">0x131</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">232</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x133</literal></expr>,<expr><literal type="number">0x137</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x13a</literal></expr>,<expr><literal type="number">0x148</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x14b</literal></expr>,<expr><literal type="number">0x177</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x17a</literal></expr>,<expr><literal type="number">0x17e</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x17f</literal></expr>,<expr><literal type="number">0x17f</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">300</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x180</literal></expr>,<expr><literal type="number">0x180</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">195</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x183</literal></expr>,<expr><literal type="number">0x185</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x188</literal></expr>,<expr><literal type="number">0x18c</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x192</literal></expr>,<expr><literal type="number">0x192</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x195</literal></expr>,<expr><literal type="number">0x195</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">97</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x199</literal></expr>,<expr><literal type="number">0x199</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x19a</literal></expr>,<expr><literal type="number">0x19a</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">163</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x19e</literal></expr>,<expr><literal type="number">0x19e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">130</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a1</literal></expr>,<expr><literal type="number">0x1a5</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1a8</literal></expr>,<expr><literal type="number">0x1ad</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b0</literal></expr>,<expr><literal type="number">0x1b4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1b6</literal></expr>,<expr><literal type="number">0x1b9</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1bd</literal></expr>,<expr><literal type="number">0x1bd</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1bf</literal></expr>,<expr><literal type="number">0x1bf</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">56</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c5</literal></expr>,<expr><literal type="number">0x1c5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c6</literal></expr>,<expr><literal type="number">0x1c6</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c8</literal></expr>,<expr><literal type="number">0x1c8</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c9</literal></expr>,<expr><literal type="number">0x1c9</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1cb</literal></expr>,<expr><literal type="number">0x1cb</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1cc</literal></expr>,<expr><literal type="number">0x1cc</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ce</literal></expr>,<expr><literal type="number">0x1dc</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1dd</literal></expr>,<expr><literal type="number">0x1dd</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">79</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1df</literal></expr>,<expr><literal type="number">0x1ef</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f2</literal></expr>,<expr><literal type="number">0x1f2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f3</literal></expr>,<expr><literal type="number">0x1f3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f5</literal></expr>,<expr><literal type="number">0x1f9</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fb</literal></expr>,<expr><literal type="number">0x21f</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x223</literal></expr>,<expr><literal type="number">0x233</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23c</literal></expr>,<expr><literal type="number">0x23c</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x23f</literal></expr>,<expr><literal type="number">0x240</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">10815</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x242</literal></expr>,<expr><literal type="number">0x247</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x249</literal></expr>,<expr><literal type="number">0x24f</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x250</literal></expr>,<expr><literal type="number">0x250</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10783</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x251</literal></expr>,<expr><literal type="number">0x251</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10780</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x252</literal></expr>,<expr><literal type="number">0x252</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10782</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x253</literal></expr>,<expr><literal type="number">0x253</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">210</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x254</literal></expr>,<expr><literal type="number">0x254</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">206</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x256</literal></expr>,<expr><literal type="number">0x257</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">205</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x259</literal></expr>,<expr><literal type="number">0x259</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">202</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25b</literal></expr>,<expr><literal type="number">0x25b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">203</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x25c</literal></expr>,<expr><literal type="number">0x25c</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">42319</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x260</literal></expr>,<expr><literal type="number">0x260</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">205</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x261</literal></expr>,<expr><literal type="number">0x261</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">42315</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x263</literal></expr>,<expr><literal type="number">0x263</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">207</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x265</literal></expr>,<expr><literal type="number">0x265</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">42280</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x266</literal></expr>,<expr><literal type="number">0x266</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">42308</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x268</literal></expr>,<expr><literal type="number">0x268</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">209</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x269</literal></expr>,<expr><literal type="number">0x269</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">211</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26a</literal></expr>,<expr><literal type="number">0x26a</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">42308</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26b</literal></expr>,<expr><literal type="number">0x26b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10743</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26c</literal></expr>,<expr><literal type="number">0x26c</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">42305</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26f</literal></expr>,<expr><literal type="number">0x26f</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">211</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x271</literal></expr>,<expr><literal type="number">0x271</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10749</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x272</literal></expr>,<expr><literal type="number">0x272</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">213</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x275</literal></expr>,<expr><literal type="number">0x275</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">214</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x27d</literal></expr>,<expr><literal type="number">0x27d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10727</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x280</literal></expr>,<expr><literal type="number">0x280</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">218</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x282</literal></expr>,<expr><literal type="number">0x282</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">42307</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x283</literal></expr>,<expr><literal type="number">0x283</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">218</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x287</literal></expr>,<expr><literal type="number">0x287</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">42282</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x288</literal></expr>,<expr><literal type="number">0x288</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">218</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x289</literal></expr>,<expr><literal type="number">0x289</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">69</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x28a</literal></expr>,<expr><literal type="number">0x28b</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">217</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x28c</literal></expr>,<expr><literal type="number">0x28c</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">71</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x292</literal></expr>,<expr><literal type="number">0x292</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">219</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x29d</literal></expr>,<expr><literal type="number">0x29d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">42261</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x29e</literal></expr>,<expr><literal type="number">0x29e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">42258</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x345</literal></expr>,<expr><literal type="number">0x345</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">84</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x371</literal></expr>,<expr><literal type="number">0x373</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x377</literal></expr>,<expr><literal type="number">0x377</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x37b</literal></expr>,<expr><literal type="number">0x37d</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">130</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3ac</literal></expr>,<expr><literal type="number">0x3ac</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">38</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3ad</literal></expr>,<expr><literal type="number">0x3af</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">37</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3b1</literal></expr>,<expr><literal type="number">0x3c1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3c2</literal></expr>,<expr><literal type="number">0x3c2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">31</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3c3</literal></expr>,<expr><literal type="number">0x3cb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3cc</literal></expr>,<expr><literal type="number">0x3cc</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">64</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3cd</literal></expr>,<expr><literal type="number">0x3ce</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">63</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d0</literal></expr>,<expr><literal type="number">0x3d0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">62</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d1</literal></expr>,<expr><literal type="number">0x3d1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">57</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d5</literal></expr>,<expr><literal type="number">0x3d5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">47</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d6</literal></expr>,<expr><literal type="number">0x3d6</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">54</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d7</literal></expr>,<expr><literal type="number">0x3d7</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3d9</literal></expr>,<expr><literal type="number">0x3ef</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f0</literal></expr>,<expr><literal type="number">0x3f0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">86</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f1</literal></expr>,<expr><literal type="number">0x3f1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">80</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f2</literal></expr>,<expr><literal type="number">0x3f2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f3</literal></expr>,<expr><literal type="number">0x3f3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">116</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f5</literal></expr>,<expr><literal type="number">0x3f5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">96</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x3f8</literal></expr>,<expr><literal type="number">0x3fb</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x430</literal></expr>,<expr><literal type="number">0x44f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x450</literal></expr>,<expr><literal type="number">0x45f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">80</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x461</literal></expr>,<expr><literal type="number">0x481</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x48b</literal></expr>,<expr><literal type="number">0x4bf</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4c2</literal></expr>,<expr><literal type="number">0x4ce</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4cf</literal></expr>,<expr><literal type="number">0x4cf</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">15</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4d1</literal></expr>,<expr><literal type="number">0x52f</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x561</literal></expr>,<expr><literal type="number">0x586</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10d0</literal></expr>,<expr><literal type="number">0x10fa</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3008</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10fd</literal></expr>,<expr><literal type="number">0x10ff</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3008</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x13f8</literal></expr>,<expr><literal type="number">0x13fd</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c80</literal></expr>,<expr><literal type="number">0x1c80</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6254</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c81</literal></expr>,<expr><literal type="number">0x1c81</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6253</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c82</literal></expr>,<expr><literal type="number">0x1c82</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6244</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c83</literal></expr>,<expr><literal type="number">0x1c84</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6242</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c85</literal></expr>,<expr><literal type="number">0x1c85</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6243</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c86</literal></expr>,<expr><literal type="number">0x1c86</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6236</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c87</literal></expr>,<expr><literal type="number">0x1c87</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">6181</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1c88</literal></expr>,<expr><literal type="number">0x1c88</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">35266</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1d79</literal></expr>,<expr><literal type="number">0x1d79</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">35332</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1d7d</literal></expr>,<expr><literal type="number">0x1d7d</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">3814</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1d8e</literal></expr>,<expr><literal type="number">0x1d8e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">35384</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e01</literal></expr>,<expr><literal type="number">0x1e95</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e9b</literal></expr>,<expr><literal type="number">0x1e9b</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">59</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ea1</literal></expr>,<expr><literal type="number">0x1eff</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f00</literal></expr>,<expr><literal type="number">0x1f07</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f10</literal></expr>,<expr><literal type="number">0x1f15</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f20</literal></expr>,<expr><literal type="number">0x1f27</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f30</literal></expr>,<expr><literal type="number">0x1f37</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f40</literal></expr>,<expr><literal type="number">0x1f45</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f51</literal></expr>,<expr><literal type="number">0x1f57</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f60</literal></expr>,<expr><literal type="number">0x1f67</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f70</literal></expr>,<expr><literal type="number">0x1f71</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">74</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f72</literal></expr>,<expr><literal type="number">0x1f75</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">86</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f76</literal></expr>,<expr><literal type="number">0x1f77</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">100</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f78</literal></expr>,<expr><literal type="number">0x1f79</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">128</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f7a</literal></expr>,<expr><literal type="number">0x1f7b</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">112</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f7c</literal></expr>,<expr><literal type="number">0x1f7d</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">126</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f80</literal></expr>,<expr><literal type="number">0x1f87</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1f90</literal></expr>,<expr><literal type="number">0x1f97</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fa0</literal></expr>,<expr><literal type="number">0x1fa7</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fb0</literal></expr>,<expr><literal type="number">0x1fb1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fb3</literal></expr>,<expr><literal type="number">0x1fb3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fbe</literal></expr>,<expr><literal type="number">0x1fbe</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">7205</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fc3</literal></expr>,<expr><literal type="number">0x1fc3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fd0</literal></expr>,<expr><literal type="number">0x1fd1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fe0</literal></expr>,<expr><literal type="number">0x1fe1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1fe5</literal></expr>,<expr><literal type="number">0x1fe5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1ff3</literal></expr>,<expr><literal type="number">0x1ff3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x214e</literal></expr>,<expr><literal type="number">0x214e</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">28</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2170</literal></expr>,<expr><literal type="number">0x217f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">16</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2184</literal></expr>,<expr><literal type="number">0x2184</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x24d0</literal></expr>,<expr><literal type="number">0x24e9</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">26</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c30</literal></expr>,<expr><literal type="number">0x2c5e</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c61</literal></expr>,<expr><literal type="number">0x2c61</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c65</literal></expr>,<expr><literal type="number">0x2c65</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10795</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c66</literal></expr>,<expr><literal type="number">0x2c66</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">10792</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c68</literal></expr>,<expr><literal type="number">0x2c6c</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c73</literal></expr>,<expr><literal type="number">0x2c76</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2c81</literal></expr>,<expr><literal type="number">0x2ce3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2cec</literal></expr>,<expr><literal type="number">0x2cee</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2cf3</literal></expr>,<expr><literal type="number">0x2cf3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2d00</literal></expr>,<expr><literal type="number">0x2d25</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">7264</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2d27</literal></expr>,<expr><literal type="number">0x2d2d</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><operator>-</operator><literal type="number">7264</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa641</literal></expr>,<expr><literal type="number">0xa66d</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa681</literal></expr>,<expr><literal type="number">0xa69b</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa723</literal></expr>,<expr><literal type="number">0xa72f</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa733</literal></expr>,<expr><literal type="number">0xa76f</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa77a</literal></expr>,<expr><literal type="number">0xa77c</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa77f</literal></expr>,<expr><literal type="number">0xa787</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa78c</literal></expr>,<expr><literal type="number">0xa791</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa793</literal></expr>,<expr><literal type="number">0xa793</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa794</literal></expr>,<expr><literal type="number">0xa794</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">48</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa797</literal></expr>,<expr><literal type="number">0xa7a9</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7b5</literal></expr>,<expr><literal type="number">0xa7bf</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xa7c3</literal></expr>,<expr><literal type="number">0xa7c3</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xab53</literal></expr>,<expr><literal type="number">0xab53</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">928</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xab70</literal></expr>,<expr><literal type="number">0xabbf</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">38864</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xff41</literal></expr>,<expr><literal type="number">0xff5a</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10428</literal></expr>,<expr><literal type="number">0x1044f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">40</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x104d8</literal></expr>,<expr><literal type="number">0x104fb</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">40</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10cc0</literal></expr>,<expr><literal type="number">0x10cf2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">64</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x118c0</literal></expr>,<expr><literal type="number">0x118df</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x16e60</literal></expr>,<expr><literal type="number">0x16e7f</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">32</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e922</literal></expr>,<expr><literal type="number">0x1e943</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">34</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><name>int</name></type>
<name>utf_toupper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_KEEPASCII</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TOWUPPER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_ISO_10646__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_INTERNAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>towupper</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TOUPPER_LOC</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>utf_convert</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>toUpper</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>toUpper</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>utf_islower</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>utf_toupper</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>a</name><operator>)</operator> <operator>||</operator> <name>a</name> <operator>==</operator> <literal type="number">0xdf</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>utf_tolower</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_KEEPASCII</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TOWLOWER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_ISO_10646__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_INTERNAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>towlower</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TOLOWER_LOC</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>utf_convert</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>toLower</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>toLower</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>utf_isupper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>utf_tolower</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>utf_strnicmp</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>n1</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>n2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>cdiff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>utf_safe_read_char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>utf_safe_read_char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cdiff</name> <operator>=</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cdiff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cdiff</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><call><name>utf_fold</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><call><name>utf_fold</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>n1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s1</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s2</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cdiff</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>s1</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>s2</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cdiff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cdiff</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n1</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s1</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s2</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>n1</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>mb_strnicmp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cdiff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>nn</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>utf_strnicmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>l</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cdiff</name> <operator>=</operator> <call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cdiff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cdiff</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>n</name> <operator>-</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cdiff</name> <operator>=</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>s2</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cdiff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cdiff</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>show_utf8</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>



<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><literal type="string">"NUL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <name>rlen</name></expr></argument>, <argument><expr><literal type="string">"+ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name> <operator>+</operator> <name>rlen</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NUL</name></expr> </then><else>: <expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>--</operator><name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rlen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&gt;</operator> <name>IOSIZE</name> <operator>-</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>latin_head_off</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>base</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>p</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbcs_head_off</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>base</name> <operator>||</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>q</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <call><name>dbcs_ptr2len</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>q</name> <operator>==</operator> <name>p</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>dbcs_screen_head_off</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>base</name>
<operator>||</operator> <operator>(</operator><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x8e</literal><operator>)</operator>
<operator>||</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>q</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>p</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>q</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <call><name>dbcs_ptr2len</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>q</name> <operator>==</operator> <name>p</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>utf_head_off</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>j</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</init> <condition>;</condition> <incr><expr><operator>--</operator><name>q</name></expr></incr>)</control>
<block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>q</name></expr>;</init> <condition><expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<while>while <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>base</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>q</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>q</name></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>utf8len_tab</name><index>[<expr><operator>*</operator><name>q</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;=</operator> <name>base</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>arabic_maycombine</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>j</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&gt;</operator> <name>base</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>j</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>j</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><call><name>arabic_combine</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>q</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mb_copy_char</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><operator>*</operator><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>*</operator><name>tp</name></expr></argument>, <argument><expr><operator>*</operator><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>mb_off_next</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>-</operator> <name>j</name> <operator>&gt;</operator> <name>base</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><operator>-</operator><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>utf8len_tab</name><index>[<expr><name><name>p</name><index>[<expr><operator>-</operator><name>j</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<return>return <expr><call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mb_tail_off</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>-</operator> <name>j</name> <operator>&gt;</operator> <name>base</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><operator>-</operator><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>utf8len_tab</name><index>[<expr><name><name>p</name><index>[<expr><operator>-</operator><name>j</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">1</literal> <operator>-</operator> <call><name>dbcs_head_off</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>utf_find_illegal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vimconv_T</name></type> <name>vimconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vimconv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>enc_canon_props</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ENC_8BIT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vimconv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tofree</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tofree</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tofree</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal>
<operator>||</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vimconv</name><operator>.</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <call><name>ml_get_cursor</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>tofree</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <name>l</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>theend</name>:</label>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>utf_valid_string</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><ternary><condition><expr><name>end</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr> </then><else>: <expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr></else></ternary></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>utf8len_tab_zero</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>+</operator> <name>l</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while> 
</block_content>}</block></while>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>dbcs_screen_tail_off</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <operator>(</operator><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x8e</literal><operator>)</operator>
<operator>||</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">1</literal> <operator>-</operator> <call><name>dbcs_screen_head_off</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>void</name></type>
<name>mb_adjust_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mb_adjustpos</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>mb_adjustpos</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>lp</name><operator>-&gt;</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>lp</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>col</name></name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name><name>lp</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>coladd</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name><name>lp</name><operator>-&gt;</operator><name>col</name></name></expr>]</index></name> <operator>!=</operator> <name>TAB</name>
<operator>&amp;&amp;</operator> <call><name>vim_isprintc</name><argument_list>(<argument><expr><call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name><name>lp</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name><name>lp</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>mb_prevptr</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>line</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mb_charlen</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>mb_charlen_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>str</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>mb_unescape</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>m</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_SPECIAL</name>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>KE_FILLER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>m</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>str</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>CSI</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_EXTRA</name>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>m</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>str</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>m</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>mb_lefthalve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr></argument>,
<argument><expr><name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>screen_Columns</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mb_fix_col</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>check_col</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>check_row</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>ScreenLines</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>enc_dbcs</name>
<operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <call><name>dbcs_screen_head_off</name><argument_list>(<argument><expr><name>ScreenLines</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name></expr></argument>,
<argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>enc_alias_search</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>enc_skip</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"2byte-"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"8bit-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>enc_canonize</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>get_encoding_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"latin1"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>enc</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_skip</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"microsoft-cp"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"iso8859"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"iso-8859"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"latin-"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>enc_canon_search</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>enc_alias_search</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>enc_canon_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>enc_alias_search</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>enc_alias_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>enc_alias_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>enc_alias_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>canon</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>enc_locale_env</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>locale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>locale</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LC_ALL"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LC_CTYPE"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>s</name> <operator>+</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"EUC"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"euc-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><call><name>enc_canonize</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>enc_locale</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>acp</name> <init>= <expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>acp</name> <operator>==</operator> <literal type="number">1200</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ucs-2le"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>acp</name> <operator>==</operator> <literal type="number">1252</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"latin1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>acp</name> <operator>==</operator> <literal type="number">65001</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cp%ld"</literal></expr></argument>, <argument><expr><name>acp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>enc_canonize</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NL_LANGINFO_CODESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>nl_langinfo</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>enc_locale_env</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CYGWIN_WIN32_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type>
<name>encname2codepage</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"8bit-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"2byte-"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>enc_canon_search</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>enc_canon_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>codepage</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsValidCodePage</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cp</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ICONV</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>







<function><type><name>void</name> <modifier>*</modifier></type>
<name>my_iconv_open</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iconv_t</name></type> <name>fd</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICONV_TESTLEN</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>tobuf</name><index>[<expr><name>ICONV_TESTLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tolen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>iconv_ok</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>iconv_ok</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iconv_enabled</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>enc_skip</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>enc_skip</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>iconv_ok</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>







<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tobuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tolen</name> <operator>=</operator> <name>ICONV_TESTLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>iconv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tolen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>iconv_ok</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>iconv_ok</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>fd</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>iconv_string</name><parameter_list>(
<parameter><decl><type><name>vimconv_T</name> <modifier>*</modifier></type><name>vcp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>unconvlenp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>resultlenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fromlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tolen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>from</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fromlen</name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ICONV_ERRNO</name> <operator>==</operator> <name>ICONV_E2BIG</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>fromlen</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>done</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>result</name> <operator>+</operator> <name>done</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tolen</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>done</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>iconv</name><argument_list>(<argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fromlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tolen</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vcp</name><operator>-&gt;</operator><name>vc_fail</name></name> <operator>&amp;&amp;</operator> <name>unconvlenp</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>ICONV_ERRNO</name> <operator>==</operator> <name>ICONV_EINVAL</name> <operator>||</operator> <name>ICONV_ERRNO</name> <operator>==</operator> <name>EINVAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>unconvlenp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>fromlen</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>



<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>vcp</name><operator>-&gt;</operator><name>vc_fail</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>ICONV_ERRNO</name> <operator>==</operator> <name>ICONV_EILSEQ</name> <operator>||</operator> <name>ICONV_ERRNO</name> <operator>==</operator> <name>EILSEQ</name>
<operator>||</operator> <name>ICONV_ERRNO</name> <operator>==</operator> <name>ICONV_EINVAL</name> <operator>||</operator> <name>ICONV_ERRNO</name> <operator>==</operator> <name>EINVAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>fromlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>fromlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>fromlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fromlen</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ICONV_ERRNO</name> <operator>!=</operator> <name>ICONV_E2BIG</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>to</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>result</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>resultlenp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>resultlenp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>to</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>result</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HINSTANCE</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>hIconvDLL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>hMsvcrtDLL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_ICONV_DLL</name></cpp:macro> <cpp:value>"iconv.dll"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_ICONV_DLL_ALT1</name></cpp:macro> <cpp:value>"libiconv.dll"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_ICONV_DLL_ALT2</name></cpp:macro> <cpp:value>"libiconv2.dll"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_ICONV_DLL_ALT3</name></cpp:macro> <cpp:value>"libiconv-2.dll"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_MSVCRT_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_MSVCRT_DLL</name></cpp:macro> <cpp:value>"msvcrt.dll"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>int</name></type>
<name>iconv_enabled</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hIconvDLL</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>hMsvcrtDLL</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV_DLL_ALT2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hIconvDLL</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hIconvDLL</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV_DLL_ALT2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV_DLL_ALT3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hIconvDLL</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hIconvDLL</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV_DLL_ALT3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>hIconvDLL</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hIconvDLL</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV_DLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV_DLL_ALT1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hIconvDLL</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hIconvDLL</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV_DLL_ALT1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>hIconvDLL</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hMsvcrtDLL</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><name>DYNAMIC_MSVCRT_DLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hIconvDLL</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>hMsvcrtDLL</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&amp;&amp;</operator> <name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_loadlib</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>hIconvDLL</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>DYNAMIC_ICONV_DLL</name></expr> </then><else>: <expr><name>DYNAMIC_MSVCRT_DLL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>iconv_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>iconv</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hIconvDLL</name></expr></argument>, <argument><expr><literal type="string">"libiconv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iconv_open</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hIconvDLL</name></expr></argument>, <argument><expr><literal type="string">"libiconv_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iconv_close</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hIconvDLL</name></expr></argument>, <argument><expr><literal type="string">"libiconv_close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iconvctl</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hIconvDLL</name></expr></argument>, <argument><expr><literal type="string">"libiconvctl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iconv_errno</name> <operator>=</operator> <call><name>get_dll_import_func</name><argument_list>(<argument><expr><name>hIconvDLL</name></expr></argument>, <argument><expr><literal type="string">"_errno"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iconv_errno</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>iconv_errno</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hMsvcrtDLL</name></expr></argument>, <argument><expr><literal type="string">"_errno"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iconv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>iconv_open</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>iconv_close</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name>iconvctl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>iconv_errno</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>iconv_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&amp;&amp;</operator> <name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_loadfunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"for libiconv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>iconv_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_ICONV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_ICONV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hIconvDLL</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hIconvDLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hMsvcrtDLL</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hMsvcrtDLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hIconvDLL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hMsvcrtDLL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_IMACTIVATEFUNC</name></cpp:macro> <cpp:value>(!gui.in_use &amp;&amp; *p_imaf != NUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_IMSTATUSFUNC</name></cpp:macro> <cpp:value>(!gui.in_use &amp;&amp; *p_imsf != NUL)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_IMACTIVATEFUNC</name></cpp:macro> <cpp:value>(*p_imaf != NUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_IMSTATUSFUNC</name></cpp:macro> <cpp:value>(*p_imsf != NUL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IME_WITHOUT_XIM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>call_imactivatefunc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>active</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>call_func_retnr</name><argument_list>(<argument><expr><name>p_imaf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_imstatusfunc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_active</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>exiting</name> <operator>||</operator> <call><name>is_autocmd_blocked</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>++</operator><name>msg_silent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_active</name> <operator>=</operator> <call><name>call_func_retnr</name><argument_list>(<argument><expr><name>p_imsf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>msg_silent</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>is_active</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>xim_has_preediting</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 




<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_preedit_start_col</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>preedit_start_col</name> <operator>=</operator> <call><name>cmdline_getvcol_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>preedit_start_col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xim_changed_while_preediting</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>im_is_active</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>preedit_is_active</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>im_preedit_cursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>im_preedit_trailing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>im_commit_handler_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>im_activatekey_keyval</name> <init>= <expr><name>GDK_VoidSymbol</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>im_activatekey_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GtkWidget</name> <modifier>*</modifier></type><name>preedit_window</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GtkWidget</name> <modifier>*</modifier></type><name>preedit_label</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>im_preedit_window_set_position</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>im_set_active</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>was_active</name></decl>;</decl_stmt>

<expr_stmt><expr><name>was_active</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>im_get_status</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>im_is_active</name> <operator>=</operator> <operator>(</operator><name>active</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_imdisable</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>im_is_active</name> <operator>!=</operator> <name>was_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xim_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xim_set_focus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>focus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>focus</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_im_context_focus_in</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_im_context_focus_out</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>im_set_position</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GdkRectangle</name></type> <name>area</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>area</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><call><name>mb_lefthalve</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_im_context_set_cursor_location</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_OVER_THE_SPOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>im_preedit_window_set_position</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if> 
void
xim_set_preedit(void)
{
im_set_position(gui.row, gui.col);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_add_to_input</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_conv</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_to_input_buf_csi</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_mh</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_preedit_window_set_position</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_x</name></decl>, <decl><type ref="prev"/><name>screen_y</name></decl>, <decl><type ref="prev"/><name>screen_width</name></decl>, <decl><type ref="prev"/><name>screen_height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>preedit_window</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_gtk_get_screen_geom_of_win</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>screen_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdk_window_get_origin</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_window_get_size</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>preedit_window</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>+</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>width</name> <operator>&gt;</operator> <name>screen_x</name> <operator>+</operator> <name>screen_width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>screen_x</name> <operator>+</operator> <name>screen_width</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <name>height</name> <operator>&gt;</operator> <name>screen_y</name> <operator>+</operator> <name>screen_height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>screen_y</name> <operator>+</operator> <name>screen_height</name> <operator>-</operator> <name>height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gtk_window_move</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>preedit_window</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_preedit_window_open</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>preedit_string</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">16</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>PangoAttrList</name> <modifier>*</modifier></type><name>attr_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PangoLayout</name> <modifier>*</modifier></type><name>layout</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">16</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GdkRGBA</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>GdkColor</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>gint</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>preedit_window</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>preedit_window</name> <operator>=</operator> <call><name>gtk_window_new</name><argument_list>(<argument><expr><name>GTK_WINDOW_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_window_set_transient_for</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>preedit_window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>preedit_label</name> <operator>=</operator> <call><name>gtk_label_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_name</name><argument_list>(<argument><expr><name>preedit_label</name></expr></argument>, <argument><expr><literal type="string">"vim-gui-preedit-area"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>preedit_window</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>preedit_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">16</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkStyleContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>context</name>
<init>= <expr><call><name>gtk_widget_get_style_context</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkCssProvider</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>provider</name> <init>= <expr><call><name>gtk_css_provider_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>css</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>fontname</name>
<init>= <expr><call><name>pango_font_description_get_family</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gint</name></type> <name>fontsize</name>
<init>= <expr><call><name>pango_font_description_get_size</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name>PANGO_SCALE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>fontsize_propval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pango_font_description_get_size_is_absolute</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>GdkScreen</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>screen</name>
<init>= <expr><call><name>gdk_window_get_screen</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>gdouble</name></type> <name>dpi</name> <init>= <expr><call><name>gdk_screen_get_resolution</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fontsize</name> <operator>=</operator> <name>dpi</name> <operator>*</operator> <name>fontsize</name> <operator>/</operator> <literal type="number">72</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fontsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fontsize_propval</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%dpx"</literal></expr></argument>, <argument><expr><name>fontsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fontsize_propval</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"inherit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>css</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(
<argument><expr><literal type="string">"widget#vim-gui-preedit-area {\n"</literal>
<literal type="string">" font-family: %s,monospace;\n"</literal>
<literal type="string">" font-size: %s;\n"</literal>
<literal type="string">" color: #%.2lx%.2lx%.2lx;\n"</literal>
<literal type="string">" background-color: #%.2lx%.2lx%.2lx;\n"</literal>
<literal type="string">"}\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>fontname</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>fontname</name></expr> </then><else>: <expr><literal type="string">"inherit"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>fontsize_propval</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_css_provider_load_from_data</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>css</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_style_context_add_provider</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
<argument><expr><call><name>GTK_STYLE_PROVIDER</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>G_MAXUINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>css</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>fontsize_propval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>gtk_widget_override_font</name><argument_list>(<argument><expr><name>preedit_label</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#%06X"</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdk_rgba_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_override_color</name><argument_list>(<argument><expr><name>preedit_label</name></expr></argument>, <argument><expr><name>GTK_STATE_FLAG_NORMAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#%06X"</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdk_rgba_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_override_background_color</name><argument_list>(<argument><expr><name>preedit_label</name></expr></argument>, <argument><expr><name>GTK_STATE_FLAG_NORMAL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_widget_modify_font</name><argument_list>(<argument><expr><name>preedit_label</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#%06X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdk_color_parse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_modify_fg</name><argument_list>(<argument><expr><name>preedit_label</name></expr></argument>, <argument><expr><name>GTK_STATE_NORMAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#%06X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdk_color_parse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_modify_bg</name><argument_list>(<argument><expr><name>preedit_window</name></expr></argument>, <argument><expr><name>GTK_STATE_NORMAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gtk_im_context_get_preedit_string</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>preedit_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>preedit_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_label_set_text</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name>preedit_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>preedit_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_label_set_attributes</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name>preedit_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <call><name>gtk_label_get_layout</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name>preedit_label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pango_layout_get_pixel_size</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_window_resize</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>preedit_window</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show_all</name><argument_list>(<argument><expr><name>preedit_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>im_preedit_window_set_position</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>preedit_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pango_attr_list_unref</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_preedit_window_close</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>preedit_window</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_widget_hide</name><argument_list>(<argument><expr><name>preedit_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_show_preedit</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>im_preedit_window_open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_mh</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_delete_preedit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>bskey</name><index>[]</index></name> <init>= <expr><block>{<expr><name>CSI</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'b'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>delkey</name><index>[]</index></name> <init>= <expr><block>{<expr><name>CSI</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_OVER_THE_SPOT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>im_preedit_window_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>NORMAL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>term_use_loop</name><argument_list>()</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><name>im_preedit_cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>im_preedit_cursor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>im_preedit_cursor</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>bskey</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>bskey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>im_preedit_trailing</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>im_preedit_trailing</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>delkey</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>delkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_correct_cursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num_move_back</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>backkey</name><index>[]</index></name> <init>= <expr><block>{<expr><name>CSI</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>curwin</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>backkey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init> <condition><expr><name>num_move_back</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>num_move_back</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>backkey</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>backkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xim_expected_char</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xim_ignored_char</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_show_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_vgetc_busy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_vgetc_busy</name> <operator>=</operator> <name>vgetc_busy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vgetc_busy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vgetc_busy</name> <operator>=</operator> <name>old_vgetc_busy</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>NORMAL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_commit_cb</name><parameter_list>(<parameter><decl><type><name>GtkIMContext</name> <modifier>*</modifier><name>context</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>add_to_input</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>slen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>commit_with_preedit</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>im_str</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XIM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_log</name><argument_list>(<argument><expr><literal type="string">"im_commit_cb(): %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_ON_THE_SPOT</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>im_delete_preedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>preedit_start_col</name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>init_preedit_start_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>commit_with_preedit</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>im_str</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_conv</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><name>im_str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>im_str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>mb_string2cells</name><argument_list>(<argument><expr><name>im_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>im_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>preedit_start_col</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>xim_expected_char</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>xim_expected_char</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>xim_ignored_char</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_to_input</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>xim_ignored_char</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>add_to_input</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>im_add_to_input</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_ON_THE_SPOT</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commit_with_preedit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>preedit_start_col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>xim_changed_while_preediting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gtk_main_level</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_main_quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_preedit_start_cb</name><parameter_list>(<parameter><decl><type><name>GtkIMContext</name> <modifier>*</modifier><name>context</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XIM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_log</name><argument_list>(<argument><expr><literal type="string">"im_preedit_start_cb()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>im_is_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>preedit_is_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>im_show_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_preedit_end_cb</name><parameter_list>(<parameter><decl><type><name>GtkIMContext</name> <modifier>*</modifier><name>context</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XIM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_log</name><argument_list>(<argument><expr><literal type="string">"im_preedit_end_cb()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>im_delete_preedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_ON_THE_SPOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>preedit_start_col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>xim_has_preediting</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>



im_is_active = FALSE;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>preedit_is_active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>im_show_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






































<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_preedit_changed_cb</name><parameter_list>(<parameter><decl><type><name>GtkIMContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>preedit_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cursor_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_move_back</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_ON_THE_SPOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_im_context_get_preedit_string</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>preedit_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cursor_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_im_context_get_preedit_string</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>preedit_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XIM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_log</name><argument_list>(<argument><expr><literal type="string">"im_preedit_changed_cb(): %s\n"</literal></expr></argument>, <argument><expr><name>preedit_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><name>preedit_string</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_OVER_THE_SPOT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>preedit_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xim_has_preediting</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>im_delete_preedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>xim_has_preediting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>im_show_preedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>preedit_start_col</name> <operator>==</operator> <name>MAXCOL</name> <operator>&amp;&amp;</operator> <name><name>preedit_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xim_has_preediting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>init_preedit_start_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>cursor_index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>preedit_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xim_has_preediting</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>



<expr_stmt><expr><name>preedit_start_col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>im_delete_preedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name>preedit_start_col</name> <operator>!=</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>preedit_end_col</name> <operator>=</operator> <name>preedit_start_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>preedit_string</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>str</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <call><name>utf_byte2len</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_composing</name></decl>;</decl_stmt>

<expr_stmt><expr><name>is_composing</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_composing</name> <operator>||</operator> <name>p_deco</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>cursor_index</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>im_preedit_cursor</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>im_preedit_trailing</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_composing</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <name>cursor_index</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><operator>++</operator><name>num_move_back</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>preedit_start_col</name> <operator>!=</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>preedit_end_col</name> <operator>+=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>str</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>im_add_to_input</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>im_correct_cursor</name><argument_list>(<argument><expr><name>num_move_back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>preedit_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gtk_main_level</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_main_quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>translate_pango_attributes</name><parameter_list>(<parameter><decl><type><name>PangoAttrIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PangoAttribute</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>char_attr</name> <init>= <expr><name>HL_NORMAL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>pango_attr_iterator_get</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>PANGO_ATTR_UNDERLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>PangoAttrInt</name> <operator>*</operator><operator>)</operator><name>attr</name><operator>)</operator><operator>-&gt;</operator><name>value</name>
<operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>PANGO_UNDERLINE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>|=</operator> <name>HL_UNDERLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>pango_attr_iterator_get</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>PANGO_ATTR_WEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>PangoAttrInt</name> <operator>*</operator><operator>)</operator><name>attr</name><operator>)</operator><operator>-&gt;</operator><name>value</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>PANGO_WEIGHT_BOLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>|=</operator> <name>HL_BOLD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>pango_attr_iterator_get</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>PANGO_ATTR_STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>PangoAttrInt</name> <operator>*</operator><operator>)</operator><name>attr</name><operator>)</operator><operator>-&gt;</operator><name>value</name>
<operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>PANGO_STYLE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>|=</operator> <name>HL_ITALIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>pango_attr_iterator_get</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>PANGO_ATTR_BACKGROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>PangoColor</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>PangoAttrColor</name> <operator>*</operator><operator>)</operator><name>attr</name><operator>)</operator><operator>-&gt;</operator><name>color</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>color</name><operator>-&gt;</operator><name>red</name></name> <operator>|</operator> <name><name>color</name><operator>-&gt;</operator><name>green</name></name> <operator>|</operator> <name><name>color</name><operator>-&gt;</operator><name>blue</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>|=</operator> <name>HL_INVERSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>char_attr</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>im_get_feedback_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>preedit_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PangoAttrList</name> <modifier>*</modifier></type><name>attr_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>char_attr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>char_attr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_im_context_get_preedit_string</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>preedit_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>preedit_string</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>attr_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>preedit_string</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>--</operator><name>col</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>preedit_string</name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>preedit_string</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>PangoAttrIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>HL_NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>pango_attr_list_get_iterator</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>pango_attr_iterator_range</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>|=</operator> <call><name>translate_pango_attributes</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>pango_attr_iterator_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>pango_attr_iterator_destroy</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pango_attr_list_unref</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>preedit_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>char_attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xim_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XIM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_log</name><argument_list>(<argument><expr><literal type="string">"xim_init()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xic</name> <operator>=</operator> <call><name>gtk_im_multicontext_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_ref</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>im_commit_handler_id</name> <operator>=</operator> <call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>im_commit_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"preedit_changed"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>im_preedit_changed_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"preedit_start"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>im_preedit_start_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"preedit_end"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>im_preedit_end_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_im_context_set_client_window</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>im_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XIM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_log</name><argument_list>(<argument><expr><literal type="string">"im_shutdown()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_im_context_focus_out</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xic</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>im_is_active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>im_commit_handler_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_ON_THE_SPOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>preedit_start_col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>xim_has_preediting</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>im_string_to_keyval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>keyval</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mods_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tmp_keyval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tmp_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mods_end</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mods_end</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>mods_end</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>mods_end</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>str</name></expr></else></ternary></expr>;</expr_stmt>


<while>while <condition>(<expr><name>str</name> <operator>&lt;</operator> <name>mods_end</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>str</name><operator>++</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>tmp_state</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>GDK_SHIFT_MASK</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name>tmp_state</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>GDK_LOCK_MASK</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>tmp_state</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>GDK_CONTROL_MASK</name></expr>;</expr_stmt><break>break;</break>
<case>case <expr><literal type="char">'1'</literal></expr>:</case> <expr_stmt><expr><name>tmp_state</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>GDK_MOD1_MASK</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'2'</literal></expr>:</case> <expr_stmt><expr><name>tmp_state</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>GDK_MOD2_MASK</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'3'</literal></expr>:</case> <expr_stmt><expr><name>tmp_state</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>GDK_MOD3_MASK</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'4'</literal></expr>:</case> <expr_stmt><expr><name>tmp_state</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>GDK_MOD4_MASK</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <expr_stmt><expr><name>tmp_state</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>GDK_MOD5_MASK</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></switch></block_content></block></while>

<expr_stmt><expr><name>tmp_keyval</name> <operator>=</operator> <call><name>gdk_keyval_from_name</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_keyval</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>tmp_keyval</name> <operator>==</operator> <name>GDK_VoidSymbol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keyval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>keyval</name> <operator>=</operator> <name>tmp_keyval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>tmp_state</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>im_xim_isvalid_imactivate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_imak</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>im_activatekey_keyval</name> <operator>=</operator> <name>GDK_VoidSymbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>im_activatekey_state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>im_string_to_keyval</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_imak</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>im_activatekey_keyval</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>im_activatekey_state</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>im_synthesize_keypress</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keyval</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GdkEventKey</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name>event</name> <operator>=</operator> <operator>(</operator><name>GdkEventKey</name> <operator>*</operator><operator>)</operator><call><name>gdk_event_new</name><argument_list>(<argument><expr><name>GDK_KEY_PRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_ref</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>send_event</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name>GDK_CURRENT_TIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>keyval</name></name> <operator>=</operator> <name>keyval</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>hardware_keycode</name></name> <operator>=</operator> 
<call><name>XKeysymToKeycode</name><argument_list>(<argument><expr><call><name>GDK_WINDOW_XDISPLAY</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>KeySym</name><operator>)</operator><name>keyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_im_context_filter_keypress</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>GDK_KEY_RELEASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>send_event</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_im_context_filter_keypress</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_event_free</name><argument_list>(<argument><expr><operator>(</operator><name>GdkEvent</name> <operator>*</operator><operator>)</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>xim_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>USE_IMACTIVATEFUNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>call_imactivatefunc</name><argument_list>(<argument><expr><name>im_is_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>xic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_im_context_reset</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_imdisable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>im_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>xim_set_focus</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>im_activatekey_keyval</name> <operator>!=</operator> <name>GDK_VoidSymbol</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>im_is_active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>g_signal_handler_block</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>im_commit_handler_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>im_synthesize_keypress</name><argument_list>(<argument><expr><name>im_activatekey_keyval</name></expr></argument>,
<argument><expr><name>im_activatekey_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_handler_unblock</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>im_commit_handler_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>im_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xim_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xim_set_focus</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_ON_THE_SPOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>preedit_start_col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>xim_has_preediting</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>xim_queue_key_press_event</name><parameter_list>(<parameter><decl><type><name>GdkEventKey</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>down</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>down</name></expr>)</condition>
<block>{<block_content>











<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>keyval</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GDK_KP_Add</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_Subtract</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_Divide</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_Multiply</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_Decimal</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_Equal</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_0</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_1</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_2</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'2'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_3</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'3'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_4</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'4'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_5</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'5'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_6</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'6'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_7</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'7'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_8</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'8'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_KP_9</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">'9'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GDK_space</name></expr>:</case> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>xim_ignored_char</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_imdisable</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name> <operator>|</operator> <name>CMDLINE</name> <operator>|</operator> <name>NORMAL</name> <operator>|</operator> <name>EXTERNCMD</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>keyval</name></name> <operator>==</operator> <name>im_activatekey_keyval</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>im_activatekey_state</name><operator>)</operator> <operator>==</operator> <name>im_activatekey_state</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>state_mask</name></decl>;</decl_stmt>




<expr_stmt><expr><name>state_mask</name> <operator>=</operator> <name>im_activatekey_state</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state_mask</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>GDK_SHIFT_MASK</name> <operator>|</operator> <operator>(</operator><name>int</name><operator>)</operator><name>GDK_CONTROL_MASK</name>
<operator>|</operator> <operator>(</operator><name>int</name><operator>)</operator><name>GDK_MOD1_MASK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>state_mask</name><operator>)</operator> <operator>!=</operator> <name>im_activatekey_state</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GDK_KEY_PRESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>map_to_exists_mode</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>LANGMAP</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>im_set_active</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>State</name> <operator>^=</operator> <name>LANGMAP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>LANGMAP</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>=</operator> <name>B_IMODE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>State</name> <operator>&amp;=</operator> <operator>~</operator><name>LANGMAP</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>=</operator> <name>B_IMODE_LMAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>State</name> <operator>|=</operator> <name>LANGMAP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>gtk_im_context_filter_keypress</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>im_activatekey_keyval</name> <operator>==</operator> <name>GDK_VoidSymbol</name> <operator>||</operator> <name>im_is_active</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>imresult</name> <init>= <expr><call><name>gtk_im_context_filter_keypress</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_ON_THE_SPOT</name></expr>)</condition>
<block>{<block_content>








<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imresult</name> <operator>&amp;&amp;</operator> <name>preedit_start_col</name> <operator>!=</operator> <name>MAXCOL</name>
<operator>&amp;&amp;</operator> <name><name>event</name><operator>-&gt;</operator><name>keyval</name></name> <operator>==</operator> <name>GDK_Return</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>im_synthesize_keypress</name><argument_list>(<argument><expr><name>GDK_Return</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>xim_expected_char</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>xim_ignored_char</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>xim_expected_char</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>


<return>return <expr><name>imresult</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>im_get_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>USE_IMSTATUSFUNC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>call_imstatusfunc</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>im_is_active</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>preedit_get_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>preedit_is_active</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>im_is_preediting</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>xim_has_preediting</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xim_is_active</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xim_has_focus</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>XIMStyle</name></type> <name>input_style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>status_area_enabled</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>im_set_active</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>active_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>active</name> <init>= <expr><name>active_arg</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>p_imdisable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>input_style</name> <operator>&amp;</operator> <name>XIMPreeditPosition</name></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name>active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>USE_IMACTIVATEFUNC</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>active</name> <operator>!=</operator> <call><name>im_get_status</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>call_imactivatefunc</name><argument_list>(<argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xim_has_focus</name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>xim_is_active</name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xim_set_preedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>xim_set_focus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>focus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>focus</name> <operator>&amp;&amp;</operator> <name>xim_is_active</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xim_has_focus</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xim_has_focus</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetICFocus</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xim_has_focus</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xim_has_focus</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XUnsetICFocus</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>im_set_position</name><parameter_list>(<parameter><decl><type><name>int</name> <name>row</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>col</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xim_set_preedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>xim_set_preedit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XVaNestedList</name></type> <name>attr_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XRectangle</name></type> <name>spot_area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XPoint</name></type> <name>over_spot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_space</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xim_set_focus</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xim_has_focus</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>over_spot</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>over_spot</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>attr_list</name> <operator>=</operator> <operator>(</operator><name>XVaNestedList</name><operator>)</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>XNSpotLocation</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>over_spot</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetICValues</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>XNPreeditAttributes</name></expr></argument>, <argument><expr><name>attr_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input_style</name> <operator>&amp;</operator> <name>XIMPreeditPosition</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xim_fg_color</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xim_fg_color</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xim_bg_color</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>over_spot</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>TEXT_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>over_spot</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>TEXT_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spot_area</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spot_area</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spot_area</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>Rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spot_area</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line_space</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr_list</name> <operator>=</operator> <operator>(</operator><name>XVaNestedList</name><operator>)</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>XNSpotLocation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>over_spot</name></expr></argument>,
<argument><expr><name>XNForeground</name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator> <name>xim_fg_color</name></expr></argument>,
<argument><expr><name>XNBackground</name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator> <name>xim_bg_color</name></expr></argument>,
<argument><expr><name>XNArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spot_area</name></expr></argument>,
<argument><expr><name>XNLineSpace</name></expr></argument>, <argument><expr><name>line_space</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XSetICValues</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>XNPreeditAttributes</name></expr></argument>, <argument><expr><name>attr_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E284: Cannot set IC values"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>e_xim</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E285: Failed to create input context"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XtSpecificationRelease</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>XtSpecificationRelease</name> <operator>&gt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUN_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_X11R6_XIM</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xim_real_init</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>x11_window</name></decl></parameter>, <parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11_display</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_X11R6_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>xim_instantiate_cb</name><parameter_list>(
<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>XPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Window</name></type> <name>x11_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11_display</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XIM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_log</name><argument_list>(<argument><expr><literal type="string">"xim_instantiate_cb()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_get_x11_windis</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x11_window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x11_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>display</name> <operator>!=</operator> <name>x11_display</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xim_real_init</name><argument_list>(<argument><expr><name>x11_window</name></expr></argument>, <argument><expr><name>x11_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XUnregisterIMInstantiateCallback</name><argument_list>(<argument><expr><name>x11_display</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>xim_instantiate_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xim_destroy_cb</name><parameter_list>(
<parameter><decl><type><name>XIM</name> <name>im</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Window</name></type> <name>x11_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11_display</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XIM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_log</name><argument_list>(<argument><expr><literal type="string">"xim_destroy_cb()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gui_get_x11_windis</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x11_window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x11_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xic</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status_area_enabled</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XRegisterIMInstantiateCallback</name><argument_list>(<argument><expr><name>x11_display</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>xim_instantiate_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>xim_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Window</name></type> <name>x11_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11_display</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XIM_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_log</name><argument_list>(<argument><expr><literal type="string">"xim_init()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_get_x11_windis</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x11_window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x11_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xic</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xim_real_init</name><argument_list>(<argument><expr><name>x11_window</name></expr></argument>, <argument><expr><name>x11_display</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_X11R6_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XRegisterIMInstantiateCallback</name><argument_list>(<argument><expr><name>x11_display</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>xim_instantiate_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xim_real_init</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>x11_window</name></decl></parameter>, <parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11_display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>ns</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>,
<decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMLEN_MAX</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IMLEN_MAX</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XIM</name></type> <name>xim</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XIMStyles</name> <modifier>*</modifier></type><name>xim_styles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XIMStyle</name></type> <name>this_input_style</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XPoint</name></type> <name>over_spot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XVaNestedList</name></type> <name>preedit_list</name></decl>, <decl><type ref="prev"/><name>status_list</name></decl>;</decl_stmt>

<expr_stmt><expr><name>input_style</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>status_area_enabled</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>rsrc_input_method</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>gui</name><operator>.</operator><name>rsrc_input_method</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>rsrc_input_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ns</name> <operator>=</operator> <name>s</name> <operator>=</operator> <name>tmp</name></expr>;</init> <condition><expr><name>ns</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ns</name> <operator>=</operator> <name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>end</name><operator>)</operator><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>IMLEN_MAX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"@im="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>XSetLocaleModifiers</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>xim</name> <operator>=</operator> <call><name>XOpenIM</name><argument_list>(<argument><expr><name>x11_display</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>ns</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xim</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>XSetLocaleModifiers</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xim</name> <operator>=</operator> <call><name>XOpenIM</name><argument_list>(<argument><expr><name>x11_display</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>xim</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>XSetLocaleModifiers</name><argument_list>(<argument><expr><literal type="string">"@im=none"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xim</name> <operator>=</operator> <call><name>XOpenIM</name><argument_list>(<argument><expr><name>x11_display</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xim</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E286: Failed to open input method"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_X11R6_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>XIMCallback</name></type> <name>destroy_cb</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>destroy_cb</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>xim_destroy_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destroy_cb</name><operator>.</operator><name>client_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XSetIMValues</name><argument_list>(<argument><expr><name>xim</name></expr></argument>, <argument><expr><name>XNDestroyCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>destroy_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E287: Warning: Could not set destroy callback to IM"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>XGetIMValues</name><argument_list>(<argument><expr><name>xim</name></expr></argument>, <argument><expr><name>XNQueryInputStyle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xim_styles</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>xim_styles</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E288: input method doesn't support any style"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCloseIM</name><argument_list>(<argument><expr><name>xim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>rsrc_preedit_type_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>tmp</name></expr>;</init> <condition><expr><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ns</name> <operator>=</operator> <name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ns</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"OverTheSpot"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>this_input_style</name> <operator>=</operator> <operator>(</operator><name>XIMPreeditPosition</name> <operator>|</operator> <name>XIMStatusArea</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"OffTheSpot"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>this_input_style</name> <operator>=</operator> <operator>(</operator><name>XIMPreeditArea</name> <operator>|</operator> <name>XIMStatusArea</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Root"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>this_input_style</name> <operator>=</operator> <operator>(</operator><name>XIMPreeditNothing</name> <operator>|</operator> <name>XIMStatusNothing</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name><name>xim_styles</name><operator>-&gt;</operator><name>count_styles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>this_input_style</name> <operator>==</operator> <name><name>xim_styles</name><operator>-&gt;</operator><name>supported_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name><name>xim_styles</name><operator>-&gt;</operator><name>count_styles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xim_styles</name><operator>-&gt;</operator><name>supported_styles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>this_input_style</name><operator>)</operator>
<operator>==</operator> <operator>(</operator><name>this_input_style</name> <operator>&amp;</operator> <operator>~</operator><name>XIMStatusArea</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>this_input_style</name> <operator>&amp;=</operator> <operator>~</operator><name>XIMStatusArea</name></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>xim_styles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E289: input method doesn't support my preedit type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>XCloseIM</name><argument_list>(<argument><expr><name>xim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>over_spot</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>TEXT_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>over_spot</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>TEXT_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input_style</name> <operator>=</operator> <name>this_input_style</name></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>preedit_list</name> <operator>=</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>XNSpotLocation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>over_spot</name></expr></argument>,
<argument><expr><name>XNForeground</name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name></expr></argument>,
<argument><expr><name>XNBackground</name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name></expr></argument>,
<argument><expr><name>XNFontSet</name></expr></argument>, <argument><expr><operator>(</operator><name>XFontSet</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>fontset</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status_list</name> <operator>=</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>XNForeground</name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name></expr></argument>,
<argument><expr><name>XNBackground</name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name></expr></argument>,
<argument><expr><name>XNFontSet</name></expr></argument>, <argument><expr><operator>(</operator><name>XFontSet</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>fontset</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>preedit_list</name> <operator>=</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>XNSpotLocation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>over_spot</name></expr></argument>,
<argument><expr><name>XNForeground</name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name></expr></argument>,
<argument><expr><name>XNBackground</name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status_list</name> <operator>=</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>XNForeground</name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name></expr></argument>,
<argument><expr><name>XNBackground</name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>xic</name> <operator>=</operator> <call><name>XCreateIC</name><argument_list>(<argument><expr><name>xim</name></expr></argument>,
<argument><expr><name>XNInputStyle</name></expr></argument>, <argument><expr><name>input_style</name></expr></argument>,
<argument><expr><name>XNClientWindow</name></expr></argument>, <argument><expr><name>x11_window</name></expr></argument>,
<argument><expr><name>XNFocusWindow</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>,
<argument><expr><name>XNPreeditAttributes</name></expr></argument>, <argument><expr><name>preedit_list</name></expr></argument>,
<argument><expr><name>XNStatusAttributes</name></expr></argument>, <argument><expr><name>status_list</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>status_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>preedit_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>input_style</name> <operator>&amp;</operator> <name>XIMStatusArea</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xim_set_status_area</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status_area_enabled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_not_a_term</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_xim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>XCloseIM</name><argument_list>(<argument><expr><name>xim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<function><type><name>int</name></type>
<name>im_get_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>USE_IMSTATUSFUNC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>call_imstatusfunc</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>xim_has_focus</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>








<function><type><name>void</name></type>
<name>xim_set_status_area</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XVaNestedList</name></type> <name>preedit_list</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>status_list</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>list</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XRectangle</name></type> <name>pre_area</name></decl>, <decl><type ref="prev"/><name>status_area</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input_style</name> <operator>&amp;</operator> <name>XIMStatusArea</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>input_style</name> <operator>&amp;</operator> <name>XIMPreeditArea</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>XRectangle</name> <modifier>*</modifier></type><name>needed_rect</name></decl>;</decl_stmt>


<expr_stmt><expr><name>status_list</name> <operator>=</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XNAreaNeeded</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>needed_rect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XGetICValues</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>XNStatusAttributes</name></expr></argument>, <argument><expr><name>status_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>status_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>needed_rect</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>Columns</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>Rows</name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_BOTTOM</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>status_list</name> <operator>=</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XNArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_area</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>Rows</name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_BOTTOM</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_area</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input_style</name> <operator>&amp;</operator> <name>XIMPreeditArea</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>pre_area</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>status_area</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>status_area</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pre_area</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>Rows</name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pre_area</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>Columns</name> <operator>-</operator> <name><name>pre_area</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_BOTTOM</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pre_area</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pre_area</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>pre_area</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>preedit_list</name> <operator>=</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XNArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pre_area</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>input_style</name> <operator>&amp;</operator> <name>XIMPreeditPosition</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>pre_area</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pre_area</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pre_area</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>Rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pre_area</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>preedit_list</name> <operator>=</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XNArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pre_area</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>preedit_list</name> <operator>&amp;&amp;</operator> <name>status_list</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XNPreeditAttributes</name></expr></argument>, <argument><expr><name>preedit_list</name></expr></argument>,
<argument><expr><name>XNStatusAttributes</name></expr></argument>, <argument><expr><name>status_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>preedit_list</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XNPreeditAttributes</name></expr></argument>, <argument><expr><name>preedit_list</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>status_list</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>XVaCreateNestedList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XNStatusAttributes</name></expr></argument>, <argument><expr><name>status_list</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XSetICValues</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>XNVaNestedList</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status_list</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>status_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>preedit_list</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>preedit_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>xim_get_status_area_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status_area_enabled</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IME_WITHOUT_XIM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>im_was_set_active</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>mbyte_im_get_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
im_get_status<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>USE_IMSTATUSFUNC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>call_imstatusfunc</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>im_was_set_active</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>mbyte_im_set_active</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>active_arg</name></decl></parameter>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
im_set_active<parameter_list>(<parameter><decl><type><name>int</name></type> <name>active_arg</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>active</name> <init>= <expr><operator>!</operator><name>p_imdisable</name> <operator>&amp;&amp;</operator> <name>active_arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>USE_IMACTIVATEFUNC</name> <operator>&amp;&amp;</operator> <name>active</name> <operator>!=</operator> <call><name>im_get_status</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>call_imactivatefunc</name><argument_list>(<argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>im_was_set_active</name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>im_set_position</name><parameter_list>(<parameter><decl><type><name>int</name> <name>row</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>col</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>f_getimstatus</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>im_get_status</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<function><type><name>int</name></type>
<name>convert_setup</name><parameter_list>(<parameter><decl><type><name>vimconv_T</name> <modifier>*</modifier></type><name>vcp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>convert_setup_ext</name><argument_list>(<argument><expr><name>vcp</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>convert_setup_ext</name><parameter_list>(
<parameter><decl><type><name>vimconv_T</name> <modifier>*</modifier></type><name>vcp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>from_unicode_is_utf8</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>to_unicode_is_utf8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>from_prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>to_prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>from_is_utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>to_is_utf8</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_ICONV</name> <operator>&amp;&amp;</operator> <name><name>vcp</name><operator>-&gt;</operator><name>vc_fd</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_factor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fail</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>from</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name>to</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>to</name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>from_prop</name> <operator>=</operator> <call><name>enc_canon_props</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to_prop</name> <operator>=</operator> <call><name>enc_canon_props</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>from_unicode_is_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from_is_utf8</name> <operator>=</operator> <name>from_prop</name> <operator>&amp;</operator> <name>ENC_UNICODE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>from_is_utf8</name> <operator>=</operator> <name>from_prop</name> <operator>==</operator> <name>ENC_UNICODE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to_unicode_is_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to_is_utf8</name> <operator>=</operator> <name>to_prop</name> <operator>&amp;</operator> <name>ENC_UNICODE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>to_is_utf8</name> <operator>=</operator> <name>to_prop</name> <operator>==</operator> <name>ENC_UNICODE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>from_prop</name> <operator>&amp;</operator> <name>ENC_LATIN1</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>to_is_utf8</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_TO_UTF8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_factor</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>from_prop</name> <operator>&amp;</operator> <name>ENC_LATIN9</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>to_is_utf8</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_9_TO_UTF8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_factor</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>from_is_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>to_prop</name> <operator>&amp;</operator> <name>ENC_LATIN1</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_TO_LATIN1</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>from_is_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>to_prop</name> <operator>&amp;</operator> <name>ENC_LATIN9</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_TO_LATIN9</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>from_is_utf8</name> <operator>||</operator> <call><name>encname2codepage</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>to_is_utf8</name> <operator>||</operator> <call><name>encname2codepage</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_CODEPAGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_factor</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_cpfrom</name></name> <operator>=</operator> <ternary><condition><expr><name>from_is_utf8</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>encname2codepage</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_cpto</name></name> <operator>=</operator> <ternary><condition><expr><name>to_is_utf8</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>encname2codepage</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>from_prop</name> <operator>&amp;</operator> <name>ENC_MACROMAN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>to_prop</name> <operator>&amp;</operator> <name>ENC_LATIN1</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_MAC_LATIN1</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>from_prop</name> <operator>&amp;</operator> <name>ENC_MACROMAN</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>to_is_utf8</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_MAC_UTF8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_factor</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>from_prop</name> <operator>&amp;</operator> <name>ENC_LATIN1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>to_prop</name> <operator>&amp;</operator> <name>ENC_MACROMAN</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_LATIN1_MAC</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>from_is_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>to_prop</name> <operator>&amp;</operator> <name>ENC_MACROMAN</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_UTF8_MAC</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fd</name></name> <operator>=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><call><name>my_iconv_open</name><argument_list>(
<argument><expr><ternary><condition><expr><name>to_is_utf8</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-8"</literal></expr> </then><else>: <expr><name>to</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>from_is_utf8</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-8"</literal></expr> </then><else>: <expr><name>from</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fd</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_ICONV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_factor</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>int</name></type>
<name>convert_input</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>convert_input_safe</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type>
<name>convert_input_safe</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>restp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>restlenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unconvertlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>string_convert_ext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_conv</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>restp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>unconvertlen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&lt;=</operator> <name>maxlen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>unconvertlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>restp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>unconvertlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>restp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>*</operator><name>restp</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>unconvertlen</name></expr></argument>, <argument><expr><name>unconvertlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>restlenp</name> <operator>=</operator> <name>unconvertlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name>dlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dlen</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>string_convert</name><parameter_list>(
<parameter><decl><type><name>vimconv_T</name> <modifier>*</modifier></type><name>vcp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>string_convert_ext</name><argument_list>(<argument><expr><name>vcp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>string_convert_ext</name><parameter_list>(
<parameter><decl><type><name>vimconv_T</name> <modifier>*</modifier></type><name>vcp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>unconvlenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>lenp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CONV_TO_UTF8</name></expr>:</case> 
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="number">0xc0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name> <operator>-</operator> <name>retval</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CONV_9_TO_UTF8</name></expr>:</case> 
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0xa4</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x20ac</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xa6</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0160</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xa8</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0161</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xb4</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x017d</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xb8</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x017e</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xbc</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0152</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xbd</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0153</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xbe</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0178</literal></expr>;</expr_stmt> <break>break;</break> 
</block_content>}</block></switch>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name> <operator>-</operator> <name>retval</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CONV_TO_LATIN1</name></expr>:</case> 
<case>case <expr><name>CONV_TO_LATIN9</name></expr>:</case> 
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l_w</name> <init>= <expr><name><name>utf8len_tab_zero</name><index>[<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l_w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>unconvlenp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>l_w</name> <operator>&gt;</operator> <name>len</name> <operator>-</operator> <name>i</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>unconvlenp</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_TO_LATIN9</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x20ac</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xa4</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x0160</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xa6</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x0161</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xa8</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x017d</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xb4</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x017e</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xb8</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x0152</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xbc</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x0153</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x0178</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xbe</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xa4</literal></expr>:</case>
<case>case <expr><literal type="number">0xa6</literal></expr>:</case>
<case>case <expr><literal type="number">0xa8</literal></expr>:</case>
<case>case <expr><literal type="number">0xb4</literal></expr>:</case>
<case>case <expr><literal type="number">0xb8</literal></expr>:</case>
<case>case <expr><literal type="number">0xbc</literal></expr>:</case>
<case>case <expr><literal type="number">0xbd</literal></expr>:</case>
<case>case <expr><literal type="number">0xbe</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt> <break>break;</break> 
</block_content>}</block></switch></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fail</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="number">0xbf</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name> <operator>-</operator> <name>retval</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CONV_MAC_LATIN1</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>mac_string_convert</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fail</name></name></expr></argument>,
<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><name>unconvlenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CONV_LATIN1_MAC</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>mac_string_convert</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fail</name></name></expr></argument>,
<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><name>unconvlenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CONV_MAC_UTF8</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>mac_string_convert</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fail</name></name></expr></argument>,
<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><name>unconvlenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CONV_UTF8_MAC</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>mac_string_convert</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fail</name></name></expr></argument>,
<argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><name>unconvlenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CONV_ICONV</name></expr>:</case> 
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>iconv_string</name><argument_list>(<argument><expr><name>vcp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>unconvlenp</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CONV_CODEPAGE</name></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short_u</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_cpfrom</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp_len</name> <operator>=</operator> <call><name>utf8_to_utf16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>tmp_len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_cpfrom</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>unconvlenp</name></expr> ?</condition><then> <expr><name>MB_ERR_INVALID_CHARS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_len</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_NO_UNICODE_TRANSLATION</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>unconvlenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>unconvlenp</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>retval</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>short_u</name></expr></argument>, <argument><expr><name>tmp_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_cpfrom</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>utf8_to_utf16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>unconvlenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_cpfrom</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_cpto</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retlen</name> <operator>=</operator> <call><name>utf16_to_utf8</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retlen</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_cpto</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>retlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_cpto</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>utf16_to_utf8</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp_len</name></expr></argument>, <argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_cpto</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp_len</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>retval</name></expr></argument>, <argument><expr><name>retlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>retlen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>retlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
