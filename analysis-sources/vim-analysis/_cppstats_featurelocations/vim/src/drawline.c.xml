<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\drawline.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>advance_color_col</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vcol</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>color_cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>color_cols</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>&gt;</operator> <operator>*</operator><operator>*</operator><name>color_cols</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>color_cols</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><operator>*</operator><operator>*</operator><name>color_cols</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>margin_columns_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>left_col</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>right_col</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>saved_w_virtcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>prev_wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_left_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_right_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_col_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_col_off</name> <init>= <expr><call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>saved_w_virtcol</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name>
<operator>&amp;&amp;</operator> <name>prev_wp</name> <operator>==</operator> <name>wp</name> <operator>&amp;&amp;</operator> <name>prev_col_off</name> <operator>==</operator> <name>cur_col_off</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>right_col</name> <operator>=</operator> <name>prev_right_col</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>left_col</name> <operator>=</operator> <name>prev_left_col</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>width1</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>cur_col_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width2</name> <operator>=</operator> <name>width1</name> <operator>+</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>left_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>right_col</name> <operator>=</operator> <name>width1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>width1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>right_col</name> <operator>=</operator> <name>width1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>-</operator> <name>width1</name><operator>)</operator> <operator>/</operator> <name>width2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>width1</name> <operator>&amp;&amp;</operator> <name>width2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>left_col</name> <operator>=</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>-</operator> <name>width1</name><operator>)</operator> <operator>/</operator> <name>width2</name> <operator>*</operator> <name>width2</name> <operator>+</operator> <name>width1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>prev_left_col</name> <operator>=</operator> <operator>*</operator><name>left_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_right_col</name> <operator>=</operator> <operator>*</operator><name>right_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_wp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_w_virtcol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_col_off</name> <operator>=</operator> <name>cur_col_off</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_sign_display_info</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>nrcol</name></decl></parameter>,
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name> <name>lnum</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>sign_attrs_T</name> <modifier>*</modifier></type><name>sattr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>wcr_attr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>startrow</name></decl></parameter>,
<parameter><decl><type><name>int</name> <name>filler_lines</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name> <name>filler_todo</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c_extrap</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c_finalp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_extra</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>n_extrap</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>char_attrp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>text_sign</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>icon_sign</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><operator>*</operator><name>c_extrap</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c_finalp</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nrcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>n_extrap</name> <operator>=</operator> <call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>char_attrp</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>wcr_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_SC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>n_extrap</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>startrow</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <name>filler_lines</name> <operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><name>text_sign</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sattr</name><operator>-&gt;</operator><name>sat_text</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>sattr</name><operator>-&gt;</operator><name>sat_typenr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>icon_sign</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sattr</name><operator>-&gt;</operator><name>sat_icon</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>sattr</name><operator>-&gt;</operator><name>sat_typenr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name>icon_sign</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nrcol</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>c_extrap</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>extra</name></expr></argument>, <argument><expr><literal type="string">"%-*c "</literal></expr></argument>, <argument><expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SIGN_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>n_extrap</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>pp_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>c_extrap</name> <operator>=</operator> <name>SIGN_BYTE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>netbeans_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>buf_signcount</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nrcol</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>c_extrap</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>extra</name></expr></argument>, <argument><expr><literal type="string">"%-*c "</literal></expr></argument>, <argument><expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>MULTISIGN_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>n_extrap</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>pp_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>c_extrap</name> <operator>=</operator> <name>MULTISIGN_BYTE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>c_finalp</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>char_attrp</name> <operator>=</operator> <name>icon_sign</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>text_sign</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_extra</name> <operator>=</operator> <name><name>sattr</name><operator>-&gt;</operator><name>sat_text</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp_extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nrcol</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>width</name> <init>= <expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>extra</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>extra</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>c_extrap</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c_finalp</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>n_extrap</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>pp_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>char_attrp</name> <operator>=</operator> <name><name>sattr</name><operator>-&gt;</operator><name>sat_texthl</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>textprop_T</name> <modifier>*</modifier></type><name>current_text_props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>buf_T</name> <modifier>*</modifier></type><name>current_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>text_prop_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx1</name></decl>, <decl><type ref="prev"/><name>idx2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>pt1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pt2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col1</name></decl>, <decl><type ref="prev"/><name>col2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>s2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pt1</name> <operator>=</operator> <call><name>text_prop_type_by_id</name><argument_list>(<argument><expr><name>current_buf</name></expr></argument>, <argument><expr><name><name>current_text_props</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>tp_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pt2</name> <operator>=</operator> <call><name>text_prop_type_by_id</name><argument_list>(<argument><expr><name>current_buf</name></expr></argument>, <argument><expr><name><name>current_text_props</name><index>[<expr><name>idx2</name></expr>]</index></name><operator>.</operator><name>tp_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pt1</name> <operator>==</operator> <name>pt2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pt1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pt2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pt1</name><operator>-&gt;</operator><name>pt_priority</name></name> <operator>!=</operator> <name><name>pt2</name><operator>-&gt;</operator><name>pt_priority</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>pt1</name><operator>-&gt;</operator><name>pt_priority</name></name> <operator>&gt;</operator> <name><name>pt2</name><operator>-&gt;</operator><name>pt_priority</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>col1</name> <operator>=</operator> <name><name>current_text_props</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>tp_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col2</name> <operator>=</operator> <name><name>current_text_props</name><index>[<expr><name>idx2</name></expr>]</index></name><operator>.</operator><name>tp_col</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>col1</name> <operator>==</operator> <name>col2</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><name>col1</name> <operator>&gt;</operator> <name>col2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>int</name></type>
<name>win_line</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>startrow</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>endrow</name></decl></parameter>,
<parameter><decl><type><name>int</name> <name>nochange</name></type> <name>UNUSED</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>number_only</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>vcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long</name></type> <name>vcol_sbr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>long</name></type> <name>vcol_prev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>screen_row</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>extra</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p_extra_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>c_extra</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>c_final</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>extra_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>at_end_str</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lcs_eol_one</name> <init>= <expr><name>lcs_eol</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>lcs_prec_todo</name> <init>= <expr><name>lcs_prec</name></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>saved_n_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_p_extra</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_c_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_c_final</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_char_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>saved_attr2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n_attr3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>saved_attr3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n_skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fromcol</name> <init>= <expr><operator>-</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tocol</name> <init>= <expr><name>MAXCOL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fromcol_prev</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>noinvcur</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>lnum_in_visual_area</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>char_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>attr_pri</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>area_highlighting</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vi_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>wcr_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>win_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>area_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>search_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>vcol_save_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>syntax_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>prev_syntax_col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>prev_syntax_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>has_syntax</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>save_did_emsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>draw_color_col</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>color_cols</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>eol_hl_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>text_prop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_prop_next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>textprop_T</name> <modifier>*</modifier></type><name>text_props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>text_prop_idxs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_props_active</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>text_prop_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_prop_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_prop_combine</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>has_spell</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>can_spell</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPWORDLEN</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>nextline</name><index>[<expr><name>SPWORDLEN</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nextlinecol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nextline_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>spell_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>word_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>checked_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>checked_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cap_col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>capcol_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cur_checked_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>extra_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>multi_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mb_l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mb_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mb_utf8</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>u8cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>filler_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>filler_todo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>hlf_T</name></type> <name>diff_hlf</name> <init>= <expr><operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>change_start</name> <init>= <expr><name>MAXCOL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>change_end</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>trailcol</name> <init>= <expr><name>MAXCOL</name></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>need_showbreak</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_ATTR</name></cpp:macro></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>line_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>line_attr_save</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>sign_present</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sign_attrs_T</name></type> <name>sattr</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>prev_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>prev_c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>did_line_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>get_term_attr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>cul_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>cul_screenline</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>left_curline_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>right_curline_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_START</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_CMDLINE</name></cpp:macro> <cpp:value>WL_START + 1</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_CMDLINE</name></cpp:macro> <cpp:value>WL_START</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_FOLD</name></cpp:macro> <cpp:value>WL_CMDLINE + 1</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_FOLD</name></cpp:macro> <cpp:value>WL_CMDLINE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_SIGN</name></cpp:macro> <cpp:value>WL_FOLD + 1</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_SIGN</name></cpp:macro> <cpp:value>WL_FOLD</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_NR</name></cpp:macro> <cpp:value>WL_SIGN + 1</cpp:value></cpp:define> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_BRI</name></cpp:macro> <cpp:value>WL_NR + 1</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_BRI</name></cpp:macro> <cpp:value>WL_NR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_SBR</name></cpp:macro> <cpp:value>WL_BRI + 1</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_SBR</name></cpp:macro> <cpp:value>WL_BRI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_LINE</name></cpp:macro> <cpp:value>WL_SBR + 1</cpp:value></cpp:define> 
<decl_stmt><decl><type><name>int</name></type> <name>draw_state</name> <init>= <expr><name>WL_START</name></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>feedback_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>feedback_old_attr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>screen_line_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>match_conc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>syntax_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>syntax_seqnr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_syntax_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>conceal_attr</name> <init>= <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CONCEAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_concealing</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>boguscols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vcol_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>did_wcol</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_boguscols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCOL_HLC</name></cpp:macro> <cpp:value>(vcol - vcol_off)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_FOR_BOGUSCOLS</name></cpp:macro> <cpp:value>{ n_extra += vcol_off; vcol -= vcol_off; vcol_off = 0; col -= boguscols; old_boguscols = boguscols; boguscols = 0; }</cpp:value></cpp:define>








<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCOL_HLC</name></cpp:macro> <cpp:value>(vcol)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>startrow</name> <operator>&gt;</operator> <name>endrow</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>startrow</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>startrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_row</name> <operator>=</operator> <name>row</name> <operator>+</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>number_only</name></expr>)</condition>
<block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_error</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYN_TIME_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>


<expr_stmt><expr><name>save_did_emsg</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syntax_start</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_error</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>save_did_emsg</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYN_TIME_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>has_syntax</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>color_cols</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color_cols</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>draw_color_col</name> <operator>=</operator> <call><name>advance_color_col</name><argument_list>(<argument><expr><name>VCOL_HLC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>term_show_buffer</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>get_term_attr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>win_attr</name> <operator>=</operator> <call><name>term_get_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_spell</name></name>
<operator>&amp;&amp;</operator> <operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_langp</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_langp</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>has_spell</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>nextline</name><index>[<expr><name>SPWORDLEN</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>spell_cat_line</name><argument_list>(<argument><expr><name>nextline</name> <operator>+</operator> <name>SPWORDLEN</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>SPWORDLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name>checked_lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_checked_col</name> <operator>=</operator> <name>checked_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>checked_lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>!=</operator> <name>capcol_lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cap_col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cap_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>capcol_lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LTOREQ_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>lnum_in_visual_area</name> <operator>=</operator> <operator>(</operator><name>lnum</name> <operator>&gt;=</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum_in_visual_area</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tocol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fromcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gchar_pos</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tocol</name> <operator>=</operator> <name>fromcol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>!=</operator> <literal type="char">'V'</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name><name>bot</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bot</name><operator>-&gt;</operator><name>coladd</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <operator>-</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tocol</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>bot</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tocol</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>*</operator><name>bot</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tocol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>tocol</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>highlight_match</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>noinvcur</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>fromcol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vi_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>clip_star</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>clip_star</name><operator>.</operator><name>owned</name></name>
<operator>&amp;&amp;</operator> <call><name>clip_isautosel_star</name><argument_list>()</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>clip_plus</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>clip_plus</name><operator>.</operator><name>owned</name></name>
<operator>&amp;&amp;</operator> <call><name>clip_isautosel_plus</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vi_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_VNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>highlight_match</name>
<operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>search_match_lines</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>colnr_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fromcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>search_match_lines</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>search_match_endcol</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tocol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tocol</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fromcol</name> <operator>==</operator> <name>tocol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tocol</name> <operator>=</operator> <name>fromcol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vi_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>filler_lines</name> <operator>=</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filler_lines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>filler_lines</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>diff_find_change</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>change_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>change_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_ADD</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>change_start</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_TXD</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_CHD</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_ADD</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><name>filler_lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filler_lines</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>filler_todo</name> <operator>=</operator> <name>filler_lines</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sign_present</name> <operator>=</operator> <call><name>buf_get_signattrs</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>sign_present</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <name><name>sattr</name><operator>.</operator><name>sat_linehl</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>bt_quickfix</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>qf_current_entry</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_QFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>line_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>has_spell</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>number_only</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cap_col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cap_col</name> <operator>=</operator> <call><name>getwhitecols</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>nextline</name><index>[<expr><name>SPWORDLEN</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>nextlinecol</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nextline_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>SPWORDLEN</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>nextlinecol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>nextline</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>nextline</name> <operator>+</operator> <name>v</name></expr></argument>, <argument><expr><name>nextline</name> <operator>+</operator> <name>SPWORDLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nextline_idx</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>nextlinecol</name> <operator>=</operator> <name>v</name> <operator>-</operator> <name>SPWORDLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>nextline</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>nextlinecol</name></expr></argument>, <argument><expr><name>SPWORDLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nextline_idx</name> <operator>=</operator> <name>SPWORDLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lcs_space</name> <operator>||</operator> <name>lcs_trail</name> <operator>||</operator> <name>lcs_nbsp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lcs_trail</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>trailcol</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>trailcol</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>trailcol</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>trailcol</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>trailcol</name> <operator>+=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wcr_attr</name> <operator>=</operator> <call><name>get_wcr_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wcr_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>win_attr</name> <operator>=</operator> <name>wcr_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>screen_line_flags</name> <operator>|=</operator> <name>SLF_POPUP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>number_only</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev_ptr</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>vcol</name> <operator>&lt;</operator> <name>v</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_ptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>







<if_stmt><if>if <condition>(<expr><name>vcol</name> <operator>&lt;</operator> <name>v</name> <operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name> <operator>||</operator> <name>draw_color_col</name> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>virtual_active</name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>vcol</name> <operator>&gt;</operator> <name>v</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>vcol</name> <operator>-=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>prev_ptr</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator> <call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>c</name> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <name>TAB</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n_skip</name> <operator>=</operator> <name>v</name> <operator>-</operator> <name>vcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>tocol</name> <operator>&lt;=</operator> <name>vcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>fromcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fromcol</name> <operator>&lt;</operator> <name>vcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <name>vcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_showbreak</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>has_spell</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>linecol</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hlf_T</name></type> <name>spell_hlf</name> <init>= <expr><name>HLF_COUNT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>linecol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>spell_move_to</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spell_hlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>linecol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>ptr</name> <operator>-</operator> <name>line</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>spell_hlf</name> <operator>=</operator> <name>HLF_COUNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>word_end</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>spell_to_word_end</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>word_end</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>spell_hlf</name> <operator>!=</operator> <name>HLF_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>spell_attr</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>spell_hlf</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>has_syntax</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_start</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>fromcol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>noinvcur</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>fromcol</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>fromcol_prev</name> <operator>=</operator> <name>fromcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>fromcol</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fromcol_prev</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fromcol</name> <operator>&gt;=</operator> <name>tocol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>number_only</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>area_highlighting</name> <operator>|=</operator> <call><name>prepare_search_hl_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>v</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_search_hl</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>search_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>v</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>VIsual_active</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_culopt_flags</name></name> <operator>!=</operator> <name>CULOPT_NBR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cul_screenline</name> <operator>=</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_culopt_flags</name></name> <operator>&amp;</operator> <name>CULOPT_SCRLINE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cul_screenline</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cul_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <name>cul_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_last_cursorline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>line_attr_save</name> <operator>=</operator> <name>line_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_last_cursorline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>margin_columns_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left_curline_col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right_curline_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_last_cursorline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prop_start</name></decl>;</decl_stmt>

<expr_stmt><expr><name>text_prop_count</name> <operator>=</operator> <call><name>get_text_props</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>prop_start</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>text_prop_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>text_props</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>textprop_T</name></expr></argument>, <argument><expr><name>text_prop_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>text_props</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>text_props</name></expr></argument>, <argument><expr><name>prop_start</name></expr></argument>,
<argument><expr><name>text_prop_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>text_prop_idxs</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>text_prop_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>current_ScreenLine</name> <operator>-</operator> <name>ScreenLines</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_line_flags</name> <operator>|=</operator> <name>SLF_RIGHTLEFT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>has_match_conc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>did_decrement_ptr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>!=</operator> <name>WL_LINE</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_CMDLINE</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_CMDLINE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>cmdwin_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>wcr_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_FOLD</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fdc</name> <init>= <expr><call><name>compute_foldcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_FOLD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fdc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra_free</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><literal type="number">12</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_extra_free</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fill_foldcolumn</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name>fdc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_extra_free</name><index>[<expr><name>n_extra</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>p_extra_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>wcr_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_FC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_SIGN</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_SIGN</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>signcolumn_on</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_sign_display_info</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sattr</name></expr></argument>, <argument><expr><name>wcr_attr</name></expr></argument>,
<argument><expr><name>row</name></expr></argument>, <argument><expr><name>startrow</name></expr></argument>, <argument><expr><name>filler_lines</name></expr></argument>, <argument><expr><name>filler_todo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_extra</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>c_final</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_NR</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_NR</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>row</name> <operator>==</operator> <name>startrow</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <name>filler_lines</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_NUMCOL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_scl</name></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_scl</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name>sign_present</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_sign_display_info</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sattr</name></expr></argument>, <argument><expr><name>wcr_attr</name></expr></argument>,
<argument><expr><name>row</name></expr></argument>, <argument><expr><name>startrow</name></expr></argument>, <argument><expr><name>filler_lines</name></expr></argument>, <argument><expr><name>filler_todo</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>c_extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_final</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_extra</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>startrow</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <name>filler_lines</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"%*ld "</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>labs</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>get_cursor_rel_lnum</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%-*ld "</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>extra</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>p_extra</name> <operator>=</operator> <name>extra</name></expr>;</init> <condition><expr><operator>*</operator><name>p_extra</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p_extra</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_extra</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p1</name> <operator>=</operator> <name>extra</name></expr>;</init> <condition><expr><name>p1</name> <operator>&lt;</operator> <name>p2</name></expr>;</condition> <incr><expr><operator>++</operator><name>p1</name></expr><operator>,</operator> <expr><operator>--</operator><name>p2</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <operator>*</operator><name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>wcr_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>






<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_culopt_flags</name></name> <operator>&amp;</operator> <name>CULOPT_NBR</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>row</name> <operator>==</operator> <name>startrow</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_culopt_flags</name></name> <operator>&amp;</operator> <name>CULOPT_LINE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>wcr_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CLN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_LNA</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>wcr_attr</name></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_LNA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_LNB</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>wcr_attr</name></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_LNB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_briopt_sbr</name></name> <operator>&amp;&amp;</operator> <name>draw_state</name> <operator>==</operator> <name>WL_BRI</name> <operator>-</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_showbreak_value</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_BRI</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_briopt_sbr</name></name> <operator>&amp;&amp;</operator> <name>draw_state</name> <operator>==</operator> <name>WL_SBR</name> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_BRI</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_BRI</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_BRI</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_bri</name></name> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>row</name> <operator>!=</operator> <name>startrow</name> <operator>||</operator> <name>need_showbreak</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>filler_lines</name> <operator>==</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>!=</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>diff_hlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cul_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><name>cul_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>get_breakindent_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>,
<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_briopt_sbr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_showbreak</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>tocol</name> <operator>==</operator> <name>vcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tocol</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_SBR</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sbr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_SBR</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>filler_todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>char2cells</name><argument_list>(<argument><expr><name>fill_diff</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>fill_diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_DED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sbr</name> <operator>=</operator> <call><name>get_showbreak_value</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sbr</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>need_showbreak</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>sbr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_showbreak</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vcol_sbr</name> <operator>=</operator> <name>vcol</name> <operator>+</operator> <call><name>MB_CHARLEN</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>tocol</name> <operator>==</operator> <name>vcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tocol</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>cul_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><name>cul_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_LINE</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_LINE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>saved_n_extra</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name>saved_n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>saved_c_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>saved_c_final</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>saved_p_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>saved_char_attr</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>win_attr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cul_screenline</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_LINE</name>
<operator>&amp;&amp;</operator> <name>vcol</name> <operator>&gt;=</operator> <name>left_curline_col</name>
<operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;</operator> <name>right_curline_col</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cul_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <name>cul_attr</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>cul_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <name>line_attr_save</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dollar_vcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>&gt;=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator>
<operator>||</operator> <operator>(</operator><name>number_only</name> <operator>&amp;&amp;</operator> <name>draw_state</name> <operator>&gt;</operator> <name>WL_NR</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>screen_line</name><argument_list>(<argument><expr><name>screen_row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>,
<argument><expr><name>screen_line_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cline_height</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_LINE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>area_highlighting</name> <operator>||</operator> <name>extra_check</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vcol</name> <operator>==</operator> <name>fromcol</name>
<operator>||</operator> <operator>(</operator><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>fromcol</name> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>vcol_prev</name> <operator>==</operator> <name>fromcol_prev</name>
<operator>&amp;&amp;</operator> <name>vcol_prev</name> <operator>&lt;</operator> <name>vcol</name> 
<operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;</operator> <name>tocol</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>area_attr</name> <operator>=</operator> <name>vi_attr</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>area_attr</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>vcol</name> <operator>==</operator> <name>tocol</name>
<operator>||</operator> <operator>(</operator><name>noinvcur</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>area_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n_extra</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>search_attr</name> <operator>=</operator> <call><name>update_search_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>screen_search_hl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_match_conc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>match_conc</name></expr></argument>, <argument><expr><name>did_line_attr</name></expr></argument>, <argument><expr><name>lcs_eol_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>v</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>!=</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>==</operator> <name>HLF_CHD</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>-</operator> <name>line</name> <operator>&gt;=</operator> <name>change_start</name>
<operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_TXD</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>==</operator> <name>HLF_TXD</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>-</operator> <name>line</name> <operator>&gt;</operator> <name>change_end</name>
<operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_CHD</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>diff_hlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_culopt_flags</name></name> <operator>!=</operator> <name>CULOPT_NBR</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>cul_screenline</name> <operator>||</operator> <operator>(</operator><name>vcol</name> <operator>&gt;=</operator> <name>left_curline_col</name>
<operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;=</operator> <name>right_curline_col</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(
<argument><expr><name>line_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CUL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>text_props</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bcol</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>bcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<for>for <control>(<init><expr><name>pi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pi</name> <operator>&lt;</operator> <name>text_props_active</name></expr>;</condition> <incr><expr><operator>++</operator><name>pi</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tpi</name> <init>= <expr><name><name>text_prop_idxs</name><index>[<expr><name>pi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bcol</name> <operator>&gt;=</operator> <name><name>text_props</name><index>[<expr><name>tpi</name></expr>]</index></name><operator>.</operator><name>tp_col</name> <operator>-</operator> <literal type="number">1</literal>
<operator>+</operator> <name><name>text_props</name><index>[<expr><name>tpi</name></expr>]</index></name><operator>.</operator><name>tp_len</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pi</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>text_props_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>text_prop_idxs</name> <operator>+</operator> <name>pi</name></expr></argument>,
<argument><expr><name>text_prop_idxs</name> <operator>+</operator> <name>pi</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof>
<operator>*</operator> <operator>(</operator><name>text_props_active</name> <operator>-</operator> <operator>(</operator><name>pi</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>text_props_active</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>pi</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<while>while <condition>(<expr><name>text_prop_next</name> <operator>&lt;</operator> <name>text_prop_count</name>
<operator>&amp;&amp;</operator> <name>bcol</name> <operator>&gt;=</operator> <name><name>text_props</name><index>[<expr><name>text_prop_next</name></expr>]</index></name><operator>.</operator><name>tp_col</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>text_prop_idxs</name><index>[<expr><name>text_props_active</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>text_prop_next</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>text_prop_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>text_prop_combine</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>text_prop_type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>text_props_active</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>current_text_props</name> <operator>=</operator> <name>text_props</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_buf</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>text_prop_idxs</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>text_props_active</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>text_prop_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pi</name> <operator>&lt;</operator> <name>text_props_active</name></expr>;</condition> <incr><expr><operator>++</operator><name>pi</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tpi</name> <init>= <expr><name><name>text_prop_idxs</name><index>[<expr><name>pi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>text_prop_type_by_id</name><argument_list>(
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>text_props</name><index>[<expr><name>tpi</name></expr>]</index></name><operator>.</operator><name>tp_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pt</name><operator>-&gt;</operator><name>pt_hl_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pt_attr</name> <init>= <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_hl_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>text_prop_type</name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>text_prop_attr</name> <operator>=</operator>
<call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>text_prop_attr</name></expr></argument>, <argument><expr><name>pt_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text_prop_combine</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>&amp;</operator> <name>PT_FLAG_COMBINE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>extra_check</name> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>syntax_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>get_term_attr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>syntax_attr</name> <operator>=</operator> <call><name>term_get_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>has_syntax</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>save_did_emsg</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>prev_syntax_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>syntax_attr</name> <operator>=</operator> <name>prev_syntax_attr</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>can_spell</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>syntax_attr</name> <operator>=</operator> <call><name>get_syntax_attr</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>v</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><name>has_spell</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>can_spell</name></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_syntax_col</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_syntax_attr</name> <operator>=</operator> <name>syntax_attr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_error</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>has_syntax</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>syntax_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>save_did_emsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYN_TIME_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_syntax</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>v</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>syntax_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>syntax_flags</name> <operator>=</operator> <call><name>get_syntax_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syntax_seqnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>text_prop_type</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>text_prop_combine</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>syntax_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>syntax_attr</name></expr></argument>, <argument><expr><name>text_prop_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>syntax_attr</name> <operator>=</operator> <name>text_prop_attr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>attr_pri</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>area_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>line_attr</name></expr></argument>, <argument><expr><name>area_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>syntax_attr</name></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>search_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>line_attr</name></expr></argument>, <argument><expr><name>search_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>syntax_attr</name></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>line_attr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>fromcol</name> <operator>==</operator> <operator>-</operator><literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>tocol</name> <operator>==</operator> <name>MAXCOL</name><operator>)</operator>
<operator>||</operator> <name>vcol</name> <operator>&lt;</operator> <name>fromcol</name> <operator>||</operator> <name>vcol_prev</name> <operator>&lt;</operator> <name>fromcol_prev</name>
<operator>||</operator> <name>vcol</name> <operator>&gt;=</operator> <name>tocol</name><operator>)</operator></expr>)</condition>
<block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>syntax_attr</name></expr></argument>, <argument><expr><name>line_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>line_attr</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>attr_pri</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>area_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>area_attr</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>search_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>search_attr</name></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>attr_pri</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>syntax_attr</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>win_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>win_attr</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c_extra</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name>n_extra</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c_final</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n_extra</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c_final</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr> ?</condition><then> <expr><name>c_final</name></expr> </then><else>: <expr><name>c_extra</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p_extra</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_l</name> <operator>&gt;</operator> <name>n_extra</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mb_l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_l</name> <operator>&gt;=</operator> <name>n_extra</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mb_l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p_extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>col</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>multi_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cul_attr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>multi_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>multi_attr</name></expr></argument>, <argument><expr><name>cul_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>multi_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><name>multi_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><operator>++</operator><name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>p_extra</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>-=</operator> <name>mb_l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>+=</operator> <name>mb_l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p_extra</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>--</operator><name>n_extra</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>c0</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>mb_c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>mb_c</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <name>mb_c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>Screen_mco</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>u8cc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mb_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mb_l</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>mb_l</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>mb_c</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>mb_l</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>transchar_hex</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><name>mb_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>rl_mirror</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>area_attr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>search_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <name>n_extra</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(
<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>mb_l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name> <operator>&amp;&amp;</operator> <call><name>ARABIC_CHAR</name><argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>, <decl><type ref="prev"/><name>pc1</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pcc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name>prev_c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>mb_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_c1</name> <operator>=</operator> <name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>mb_l</name></expr></argument>, <argument><expr><name>pcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>mb_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <call><name>arabic_shape</name><argument_list>(<argument><expr><name>mb_c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pc1</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>mb_c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mb_l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transchar_nonprint</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="string">"XX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p_extra</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>area_attr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>search_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <name>n_extra</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(
<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>col</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>multi_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>--</operator><name>ptr</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>did_decrement_ptr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>mb_l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>n_skip</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mb_l</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>MB_FILLER_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>area_attr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>search_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <name>n_extra</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extra_check</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_spell</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;=</operator> <name>word_end</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;</operator> <name>cur_checked_col</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>spell_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>!</operator><name>has_syntax</name> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>can_spell</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hlf_T</name></type> <name>spell_hlf</name> <init>= <expr><name>HLF_COUNT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prev_ptr</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>mb_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>-=</operator> <name>mb_l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_ptr</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev_ptr</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <name>nextlinecol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>nextline</name> <operator>+</operator> <operator>(</operator><name>prev_ptr</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <name>nextlinecol</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>prev_ptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>cap_col</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>prev_ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>spell_check</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spell_hlf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cap_col</name></expr></argument>,
<argument><expr><name>nochange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>word_end</name> <operator>=</operator> <name>v</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>spell_hlf</name> <operator>!=</operator> <name>HLF_COUNT</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator>
<operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>prev_ptr</name> <operator>-</operator> <name>line</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>word_end</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>spell_hlf</name> <operator>=</operator> <name>HLF_COUNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>spell_redraw_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spell_hlf</name> <operator>==</operator> <name>HLF_COUNT</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>prev_ptr</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>nextline</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>nextline_idx</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>checked_lnum</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>checked_col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>nextline</name><operator>)</operator>
<operator>+</operator> <name>len</name> <operator>-</operator> <name>nextline_idx</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>spell_hlf</name> <operator>!=</operator> <name>HLF_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>spell_attr</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>spell_hlf</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cap_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>prev_ptr</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>nextline</name><operator>)</operator> <operator>+</operator> <name>cap_col</name> <operator>&gt;=</operator> <name>nextline_idx</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>capcol_lnum</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cap_col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>nextline</name><operator>)</operator> <operator>+</operator> <name>cap_col</name>
<operator>-</operator> <name>nextline_idx</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cap_col</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>prev_ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>spell_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_pri</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><name>spell_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>spell_attr</name></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>&amp;&amp;</operator> <name>c0</name> <operator>==</operator> <name>c</name>
<operator>&amp;&amp;</operator> <call><name>VIM_ISBREAK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISBREAK</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_off</name> <init>= <expr><ternary><condition><expr><name>has_mbyte</name></expr> ?</condition><then> <expr><call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>ptr</name> <operator>-</operator> <operator>(</operator><name>mb_off</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>+</operator> <name>col</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>vcol</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name>
<operator>-</operator> <name>vcol</name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <ternary><condition><expr><name>mb_off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>MB_FILLER_CHAR</name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>TAB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>FIX_FOR_BOGUSCOLS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">160</literal> <operator>&amp;&amp;</operator> <name>mb_l</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>mb_utf8</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>mb_c</name> <operator>==</operator> <literal type="number">160</literal> <operator>&amp;&amp;</operator> <name>mb_l</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>mb_c</name> <operator>==</operator> <literal type="number">0x202f</literal> <operator>&amp;&amp;</operator> <name>mb_l</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name>lcs_nbsp</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal>
<operator>&amp;&amp;</operator> <name>mb_l</name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>lcs_space</name>
<operator>&amp;&amp;</operator> <name>ptr</name> <operator>-</operator> <name>line</name> <operator>&lt;=</operator> <name>trailcol</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr> ?</condition><then> <expr><name>lcs_space</name></expr> </then><else>: <expr><name>lcs_nbsp</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>area_attr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>search_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trailcol</name> <operator>!=</operator> <name>MAXCOL</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&gt;</operator> <name>line</name> <operator>+</operator> <name>trailcol</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>lcs_trail</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_pri</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>||</operator> <name>lcs_tab1</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tab_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>vcol_adjusted</name> <init>= <expr><name>vcol</name></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sbr</name> <init>= <expr><call><name>get_showbreak_value</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sbr</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>==</operator> <name>vcol_sbr</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vcol_adjusted</name> <operator>=</operator> <name>vcol</name> <operator>-</operator> <call><name>MB_CHARLEN</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tab_len</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>vcol_adjusted</name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tab_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name>
<operator>-</operator> <name>vcol_adjusted</name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>||</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name>tab_len</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_nextra</name> <init>= <expr><name>n_extra</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>vcol_off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tab_len</name> <operator>+=</operator> <name>vcol_off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>&amp;&amp;</operator> <name>lcs_tab1</name> <operator>&amp;&amp;</operator> <name>old_boguscols</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>n_extra</name> <operator>&gt;</operator> <name>tab_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tab_len</name> <operator>+=</operator> <name>n_extra</name> <operator>-</operator> <name>tab_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>tab_len</name> <operator>*</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name>lcs_tab2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>n_extra</name> <operator>-</operator> <name>tab_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>lcs_tab1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra_free</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tab_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lcs</name> <init>= <expr><name>lcs_tab2</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tab_len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>lcs_tab3</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>tab_len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lcs</name> <operator>=</operator> <name>lcs_tab3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mb_char2bytes</name><argument_list>(<argument><expr><name>lcs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name>lcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>+=</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name>lcs</name></expr></argument>)</argument_list></call>
<operator>-</operator> <operator>(</operator><ternary><condition><expr><name>saved_nextra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>p_extra_free</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>vcol_off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n_extra</name> <operator>-=</operator> <name>vcol_off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vc_saved</name> <init>= <expr><name>vcol_off</name></expr></init></decl>;</decl_stmt>







<expr_stmt><expr><name>FIX_FOR_BOGUSCOLS</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>==</operator> <name>tab_len</name> <operator>+</operator> <name>vc_saved</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>&amp;&amp;</operator> <name>lcs_tab1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tab_len</name> <operator>+=</operator> <name>vc_saved</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n_extra</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lcs_tab3</name><operator>)</operator></expr> ?</condition><then> <expr><name>lcs_tab3</name></expr> </then><else>: <expr><name>lcs_tab1</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>lcs_tab2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>lcs_tab3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <name>tab_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>fromcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>fromcol_prev</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name>tocol</name> <operator>&gt;</operator> <name>vcol</name>
<operator>&amp;&amp;</operator> <name>VIsual_mode</name> <operator>!=</operator> <name>Ctrl_V</name>
<operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>(</operator><name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>noinvcur</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name>lcs_eol_one</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LINE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>diff_hlf</name> <operator>==</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>line_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>area_highlighting</name> <operator>&amp;&amp;</operator> <call><name>virtual_active</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <name>tocol</name> <operator>!=</operator> <name>MAXCOL</name> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;</operator> <name>tocol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>at_end_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>&amp;&amp;</operator> <name>lcs_eol</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>lcs_eol</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>lcs_eol_one</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>ptr</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_pri</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <call><name>transchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>byte2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dy_flags</name> <operator>&amp;</operator> <name>DY_UHEX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rl_mirror</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>n_extra</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>n_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_extra</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>n_extra</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra_free</name> <operator>=</operator> <name>p_extra</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>byte2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p_extra</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_pri</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <name>n_extra</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>VIsual_active</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name>
<operator>||</operator> <name>VIsual_mode</name> <operator>==</operator> <literal type="char">'v'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>virtual_active</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <name>tocol</name> <operator>!=</operator> <name>MAXCOL</name>
<operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;</operator> <name>tocol</name>
<operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>(</operator><name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>ptr</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>diff_hlf</name> <operator>!=</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>win_attr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>line_attr</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>(</operator><name>col</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>-</operator> <name>boguscols</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>ptr</name></expr>;</expr_stmt> 


<expr_stmt><expr><operator>++</operator><name>did_line_attr</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>line_attr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>char_attr</name> <operator>==</operator> <name>search_attr</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>did_line_attr</name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>&amp;&amp;</operator> <name>lcs_eol</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>line_attr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>==</operator> <name>HLF_TXD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_CHD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vi_attr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>char_attr</name> <operator>!=</operator> <name>vi_attr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>diff_hlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_culopt_flags</name></name> <operator>!=</operator> <name>CULOPT_NBR</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>cul_screenline</name>
<operator>||</operator> <operator>(</operator><name>vcol</name> <operator>&gt;=</operator> <name>left_curline_col</name>
<operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;=</operator> <name>right_curline_col</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(
<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CUL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>win_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>win_attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_culopt_flags</name></name> <operator>!=</operator> <name>CULOPT_NBR</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cul_screenline</name> <operator>||</operator> <operator>(</operator><name>vcol</name> <operator>&gt;=</operator> <name>left_curline_col</name>
<operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;=</operator> <name>right_curline_col</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(
<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CUL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>line_attr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><name>line_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>( <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>||</operator> <name>lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>||</operator>
<call><name>conceal_cursor_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>syntax_flags</name> <operator>&amp;</operator> <name>HL_CONCEAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>has_match_conc</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>lnum_in_visual_area</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cocu</name></name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>conceal_attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev_syntax_id</name> <operator>!=</operator> <name>syntax_seqnr</name> <operator>||</operator> <name>has_match_conc</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>syn_get_sub_char</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <name>match_conc</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>match_conc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>match_conc</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>syn_get_sub_char</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>syn_get_sub_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>lcs_conceal</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>lcs_conceal</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prev_syntax_id</name> <operator>=</operator> <name>syntax_seqnr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vcol_off</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>boguscols</name> <operator>-=</operator> <name>n_extra</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>boguscols</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>n_skip</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>is_concealing</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_skip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>prev_syntax_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>is_concealing</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n_skip</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>did_decrement_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_wcol</name> <operator>&amp;&amp;</operator> <name>draw_state</name> <operator>==</operator> <name>WL_LINE</name>
<operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <call><name>conceal_cursor_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&lt;=</operator> <name>vcol</name> <operator>+</operator> <name>n_skip</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col</name> <operator>+</operator> <name>boguscols</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>col</name> <operator>-</operator> <name>boguscols</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_wcol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_WCOL</name><operator>|</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_VIRTCOL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>n_attr</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>draw_state</name> <operator>==</operator> <name>WL_LINE</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>attr_pri</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>line_attr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>extra_attr</name></expr></argument>, <argument><expr><name>line_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>extra_attr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>==</operator> <name>IM_ON_THE_SPOT</name>
<operator>&amp;&amp;</operator> <name>xic</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name>p_imdisable</name>
<operator>&amp;&amp;</operator> <call><name>im_is_preediting</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <name>draw_state</name> <operator>==</operator> <name>WL_LINE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>tcol</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>preedit_end_col</name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tcol</name> <operator>=</operator> <name>preedit_end_col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>preedit_start_col</name> <operator>&lt;=</operator> <name>vcol</name> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>tcol</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>feedback_old_attr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>feedback_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>feedback_old_attr</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>im_get_feedback_attr</name><argument_list>(<argument><expr><name>feedback_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>feedback_old_attr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>feedback_col</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>feedback_old_attr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>feedback_old_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>feedback_old_attr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>feedback_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name>lcs_prec_todo</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr> ?</condition><then>
<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>:
<expr><name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <name>draw_state</name> <operator>&gt;</operator> <name>WL_NR</name>
<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>lcs_prec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lcs_prec_todo</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>MB_FILLER_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_pri</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>saved_attr3</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr3</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <name>NUL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>did_line_attr</name> <operator>==</operator> <literal type="number">1</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator> <operator>&amp;&amp;</operator> <name>eol_hl_off</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><name>int</name></type> <name>prevcol_hl_flag</name> <init>= <expr><call><name>get_prevcol_hl_flag</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_search_hl</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name>lcs_eol</name> <operator>==</operator> <name>lcs_eol_one</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>area_attr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>==</operator> <name>fromcol</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>VIsual_mode</name> <operator>!=</operator> <name>Ctrl_V</name>
<operator>||</operator> <name>lnum</name> <operator>==</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name>
<operator>||</operator> <name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>NUL</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <operator>(</operator><name>prevcol_hl_flag</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>VIsual_active</name><operator>)</operator><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>diff_hlf</name> <operator>==</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINE_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>did_line_attr</name> <operator>&lt;=</operator> <literal type="number">1</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>area_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>get_search_match_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_search_hl</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>off</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>vcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eol_hl_off</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>vcol</name> <operator>&lt;</operator> <name>v</name> <operator>+</operator> <name>col</name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <name>v</name> <operator>+</operator> <name>col</name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>boguscols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>boguscols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>draw_color_col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>draw_color_col</name> <operator>=</operator> <call><name>advance_color_col</name><argument_list>(<argument><expr><name>VCOL_HLC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&gt;=</operator> <name>VCOL_HLC</name> <operator>-</operator> <name>eol_hl_off</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&lt;</operator>
<name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>*</operator> <operator>(</operator><name>row</name> <operator>-</operator> <name>startrow</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>v</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator>
<operator>||</operator> <name>draw_color_col</name>
<operator>||</operator> <name>win_attr</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rightmost_vcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rightmost_vcol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>draw_color_col</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>color_cols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>rightmost_vcol</name> <operator>&lt;</operator> <name><name>color_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rightmost_vcol</name> <operator>=</operator> <name><name>color_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>draw_color_col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>draw_color_col</name> <operator>=</operator> <call><name>advance_color_col</name><argument_list>(<argument><expr><name>VCOL_HLC</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>color_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name> <operator>&amp;&amp;</operator> <name>VCOL_HLC</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CUC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>draw_color_col</name> <operator>&amp;&amp;</operator> <name>VCOL_HLC</name> <operator>==</operator> <operator>*</operator><name>color_cols</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>win_attr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VCOL_HLC</name> <operator>&gt;=</operator> <name>rightmost_vcol</name> <operator>&amp;&amp;</operator> <name>win_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>vcol</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>screen_line</name><argument_list>(<argument><expr><name>screen_row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>, <argument><expr><name>screen_line_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name><operator>++</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>=</operator> <name>startrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>=</operator> <name>row</name> <operator>-</operator> <name>startrow</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_folded</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <operator>(</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_CROW</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>lcs_ext</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>col</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>&amp;&amp;</operator> <name>lcs_eol_one</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>n_extra</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c_extra</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>p_extra</name> <operator>!=</operator> <name>NUL</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>lcs_ext</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>win_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>draw_color_col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>draw_color_col</name> <operator>=</operator> <call><name>advance_color_col</name><argument_list>(<argument><expr><name>VCOL_HLC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>vcol_save_attr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_LINE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lnum_in_visual_area</name>
<operator>&amp;&amp;</operator> <name>search_attr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>area_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name> <operator>&amp;&amp;</operator> <name>VCOL_HLC</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>vcol_save_attr</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CUC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>draw_color_col</name> <operator>&amp;&amp;</operator> <name>VCOL_HLC</name> <operator>==</operator> <operator>*</operator><name>color_cols</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>vcol_save_attr</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>vcol_prev</name> <operator>=</operator> <name>vcol</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>&lt;</operator> <name>WL_LINE</name> <operator>||</operator> <name>n_skip</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mb_c</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x8e00</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x8e</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ScreenLines2</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>mb_c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mb_utf8</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>mb_c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Screen_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>multi_attr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>multi_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>multi_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>mb_c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>&gt;</operator> <name>WL_NR</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>vcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>tocol</name> <operator>==</operator> <name>vcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>tocol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>is_concealing</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>n_skip</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>vcol_off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vcol_off</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition>
<block>{<block_content>











<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>boguscols</name> <operator>-=</operator> <name>n_extra</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>boguscols</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>boguscols</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>boguscols</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>boguscols</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>boguscols</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>n_skip</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>&gt;</operator> <name>WL_NR</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>vcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>vcol_save_attr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>vcol_save_attr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>&gt;</operator> <name>WL_NR</name> <operator>&amp;&amp;</operator> <name>n_attr3</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name>n_attr3</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>saved_attr3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>n_attr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>draw_state</name> <operator>==</operator> <name>WL_LINE</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>n_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>saved_attr2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>filler_todo</name> <operator>&gt;</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>&amp;&amp;</operator> <name>lcs_eol</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>p_extra</name> <operator>!=</operator> <name>at_end_str</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>n_extra</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c_extra</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>p_extra</name> <operator>!=</operator> <name>NUL</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>
)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>screen_line</name><argument_list>(<argument><expr><name>screen_row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name>col</name> <operator>-</operator> <name>boguscols</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>, <argument><expr><name>screen_line_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>boguscols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>screen_line</name><argument_list>(<argument><expr><name>screen_row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>, <argument><expr><name>screen_line_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>screen_row</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator> <operator>||</operator> <name>lcs_eol_one</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>!=</operator> <name>WL_LINE</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_draw_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_vsep_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name>endrow</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>endrow</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>row</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_cur_row</name> <operator>==</operator> <name>screen_row</name> <operator>-</operator> <literal type="number">1</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>==</operator> <name>Columns</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>LineWraps</name><index>[<expr><name>screen_row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>











<if_stmt><if>if <condition>(<expr><name>p_tf</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>has_mbyte</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>screen_row</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>LineOffset</name><index>[<expr><name>screen_row</name></expr>]</index></name> <operator>+</operator> <name>screen_Columns</name></expr></argument>)</argument_list></call>
<operator>==</operator> <literal type="number">2</literal>
<operator>||</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>screen_row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Columns</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>LineOffset</name><index>[<expr><name>screen_row</name></expr>]</index></name> <operator>+</operator> <name>screen_Columns</name></expr></argument>)</argument_list></call>
<operator>==</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>screen_cur_col</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>screen_row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>screen_row</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>ScreenLines</name><index>[<expr><name><name>LineOffset</name><index>[
<expr><name>screen_row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><name><name>ScreenLines</name><index>[<expr><name><name>LineOffset</name><index>[<expr><name>screen_row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name><name>LineOffset</name><index>[<expr><name>screen_row</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sattr_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>current_ScreenLine</name> <operator>-</operator> <name>ScreenLines</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_START</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_n_extra</name> <operator>=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_p_extra</name> <operator>=</operator> <name>p_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_c_extra</name> <operator>=</operator> <name>c_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_c_final</name> <operator>=</operator> <name>c_final</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cul_screenline</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>diff_hlf</name> <operator>==</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>saved_char_attr</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>saved_char_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lcs_prec_todo</name> <operator>=</operator> <name>lcs_prec</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>need_showbreak</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>--</operator><name>filler_todo</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>filler_todo</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botfill</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>capcol_lnum</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cap_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>text_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>text_prop_idxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>row</name></expr>;</return>
</block_content>}</block></function>
</unit>
