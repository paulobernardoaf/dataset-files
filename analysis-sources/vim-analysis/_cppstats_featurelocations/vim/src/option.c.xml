<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\option.c">
































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN_OPTION_C</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optiondefs.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_options_default</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_string_default_esc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>escape</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>option_expand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>didset_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>didset_options2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>long_u</name> <modifier>*</modifier></type><name>insecure_flag</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>insecure_flag</name><parameter_list>(<parameter><type><name>opt_idx</name></type></parameter>, <parameter><type><name>opt_flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;options[opt_idx].flags)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>set_bool_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>set_num_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errbuflen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>find_key_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_lt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>showoptions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>all</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>optval_default</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compatible</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>showoneopt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>put_setstring</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>valuep</name></decl></parameter>, <parameter><decl><type><name>long_u</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>put_setnum</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>valuep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>put_setbool</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>istermoption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>get_varp_scope</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>get_varp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_win_options</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>option_value2string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_winopt</name><parameter_list>(<parameter><decl><type><name>winopt_T</name> <modifier>*</modifier></type><name>wop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>wc_use_keyname</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>wcp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>paste_option_changed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>compatible_set</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function><type><name>void</name></type>
<name>set_init_1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>clean_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>n</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>langmap_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>p_cp</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"VIM_POSIX"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"cpo"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CPO_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"shm"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>SHM_POSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"SHELL"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"COMSPEC"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>default_shell</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"sh"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"sh"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>set_string_default_esc</name><argument_list>(<argument><expr><literal type="string">"sh"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>




<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>names</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"TMPDIR"</literal></expr>, <expr><literal type="string">"TEMP"</literal></expr>, <expr><literal type="string">"TMP"</literal></expr>}</block></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>names</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"TMPDIR"</literal></expr>, <expr><literal type="string">"TEMP"</literal></expr>, <expr><literal type="string">"TMP"</literal></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mustfree</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>mustfree</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>names</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"/private/tmp"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"/tmp"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>names</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mustfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mustfree</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"bsk"</literal></expr></argument>, <argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"maxmemtot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AVAIL_MEM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TOTAL_MEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AVAIL_MEM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><call><name>mch_avail_mem</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TOTAL_MEM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><call><name>mch_total_mem</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><literal type="number">0x7fffffff</literal> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"maxmem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AVAIL_MEM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TOTAL_MEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>long_i</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>n</name>
<operator>||</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>long_i</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cdpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mustfree</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>cdpath</name> <operator>=</operator> <call><name>vim_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"CDPATH"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mustfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cdpath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>cdpath</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cdpath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_ispathlistsep</name><argument_list>(<argument><expr><name><name>cdpath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cdpath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>cdpath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cdpath</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cdpath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_DEF_ALLOCED</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mustfree</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cdpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MAC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>hpux</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"penc"</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cp1252"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dec-mcs"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ebcdic-uk"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"mac-roman"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"hp-roman8"</literal></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"pexpr"</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"system('copy' . ' ' . v:fname_in . (&amp;printdevice == '' ? ' LPT1:' : (' \"' . &amp;printdevice . '\"'))) . delete(v:fname_in)"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"system('print/delete' . (&amp;printdevice == '' ? '' : ' /queue=' . &amp;printdevice) . ' ' . v:fname_in)"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"system('lpr' . (&amp;printdevice == '' ? '' : ' -P' . &amp;printdevice) . ' ' . v:fname_in) . delete(v:fname_in) + v:shell_error"</literal></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><call><name>set_options_default</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEAN_RUNTIMEPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>clean_arg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"runtimepath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CLEAN_RUNTIMEPATH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_rtp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CLEAN_RUNTIMEPATH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"packpath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CLEAN_RUNTIMEPATH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CLEAN_RUNTIMEPATH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>found_reverse_arg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bg"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dark"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_initialized</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ar</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>=</operator> <name>NO_LOCAL_UNDOLEVEL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_buf_options</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_win_options</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>didset_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>init_spell_chartab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>istermoption_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_GETTEXT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>option_expand</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_DEF_ALLOCED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_DEF_ALLOCED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>save_file_ff</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"MLTERM"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"tbidi"</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>didset_options2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>




<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>GetLocaleInfo</name><argument_list>(<argument><expr><name>LOCALE_USER_DEFAULT</name></expr></argument>, <argument><expr><name>LOCALE_SABBREVLANGNAME</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPTSTR</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"en"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cht"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"zht"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"zh_TW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"chs"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"zhc"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"zh_CN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"jp"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ja"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LANG"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mac_lang_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_locale</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_enc</name></decl>;</decl_stmt>



<expr_stmt><expr><name>save_enc</name> <operator>=</operator> <name>p_enc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_enc</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"gb18030"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>p_enc</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cp936"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mb_init</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_enc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_DEF_ALLOCED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"latin1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>enc_utf8</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"isp"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>ISP_LATIN1</name></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>SID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"isk"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>ISK_LATIN1</name></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>SID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"isp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VIM_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>ISP_LATIN1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"isk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VIM_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>ISK_LATIN1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>init_chartab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>


<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>GetACP</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>GetConsoleCP</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>GetConsoleCP</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cp%ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>GetACP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cp%ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>GetConsoleCP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p_tenc</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_tenc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"termencoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_tenc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_DEF_ALLOCED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_conv</name></expr></argument>, <argument><expr><name>p_tenc</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_tenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_tenc</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>init_homedir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_enc</name> <operator>=</operator> <name>save_enc</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_helplang_default</name><argument_list>(<argument><expr><call><name>get_mess_lang</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_option_default</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>compatible</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dvi</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long_u</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name> <modifier>*</modifier></type><name>flagsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>both</name> <init>= <expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><ternary><condition><expr><name>both</name></expr> ?</condition><then> <expr><name>OPT_LOCAL</name></expr> </then><else>: <expr><name>opt_flags</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>dvi</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_VI_DEF</name><operator>)</operator> <operator>||</operator> <name>compatible</name><operator>)</operator></expr> ?</condition><then> <expr><name>VI_DEFAULT</name></expr> </then><else>: <expr><name>VIM_DEFAULT</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>!=</operator> <name>PV_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opt_idx</name></expr></argument>,
<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_FREE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_ALLOCED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>P_ALLOCED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_SCROLL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_comp_scroll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>def_val</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>long_i</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name>
<operator>||</operator> <operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <name>def_val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>both</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call> <operator>=</operator>
<name>def_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>


<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>long_i</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_ML</name> <operator>&amp;&amp;</operator> <call><name>getuid</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ROOT_UID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>both</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call> <operator>=</operator>
<operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>flagsp</name> <operator>=</operator> <call><name>insecure_flag</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagsp</name> <operator>=</operator> <operator>*</operator><name>flagsp</name> <operator>&amp;</operator> <operator>~</operator><name>P_INSECURE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>current_sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_options_default</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>istermoption_idx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_NODEFAULT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>opt_flags</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_enc</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cm</name>
<operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_key</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_default</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>p_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>


<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>win_comp_scroll</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>parse_cino</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_string_default_esc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>escape</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>escape</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_DEF_ALLOCED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_DEF_ALLOCED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>set_string_default</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>set_string_default_esc</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>set_number_default</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>long_i</name><operator>)</operator><name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>set_local_options_default</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>istermoption_idx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name> <init>= <expr><call><name>get_varp_scope</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>!=</operator> <name>PV_NONE</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>do_buffer</name> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_BUF</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_NODEFAULT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>optval_default</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_default</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>save_curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>free_all_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>istermoption_idx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_NONE</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_ALLOCED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_DEF_ALLOCED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <name>VAR_WIN</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_STRING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>void</name></type>
<name>set_init_2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>





<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"scroll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_default</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>, <argument><expr><name>p_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_number_default</name><argument_list>(<argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>





<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>*</operator><call><name>term_bg_default</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dark"</literal></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>P_WAS_SET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>parse_shape_opt</name><argument_list>(<argument><expr><name>SHAPE_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>parse_shape_opt</name><argument_list>(<argument><expr><name>SHAPE_MOUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>parse_printoptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>set_init_3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>





<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx_srr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_srr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>idx_sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_sp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>idx_srr</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"srr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx_srr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_srr</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>do_srr</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx_srr</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>idx_sp</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"sp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx_sp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_sp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>do_sp</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx_sp</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_isolated_shell_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>( <expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"csh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"tcsh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"csh.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"tcsh.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>do_sp</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_sp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&gt;&amp;"</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>p_sp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"|&amp; tee"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx_sp</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_sp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>do_srr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_srr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&gt;&amp;"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx_srr</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_srr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else

if <condition>( <expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ksh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"mksh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"pdksh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"zsh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"zsh-beta"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"bash"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"fish"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cmd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"sh.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ksh.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"mksh.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"pdksh.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"zsh.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"zsh-beta.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"bash.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cmd.exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>do_sp</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_sp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&gt;%s 2&gt;&amp;1"</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>p_sp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"2&gt;&amp;1| tee"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx_sp</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_sp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>do_srr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_srr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&gt;%s 2&gt;&amp;1"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx_srr</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_srr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>








<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>gettail</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx3</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"shcf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx3</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx3</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_shcf</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"-c"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx3</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_shcf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>idx3</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"sxq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx3</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx3</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_sxq</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx3</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_sxq</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>gettail</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"cmd.exe"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx3</name></decl>;</decl_stmt>














<expr_stmt><expr><name>idx3</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"sxq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx3</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx3</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_sxq</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"("</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx3</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_sxq</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx3</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"shcf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx3</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx3</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_shcf</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"/c"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx3</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_shcf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>BUFEMPTY</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx_ffs</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ffs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>idx_ffs</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>idx_ffs</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_fileformat</name><argument_list>(<argument><expr><call><name>default_fileformat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_title_defaults</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>set_helplang_default</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lang</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"hlg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_ALLOCED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>p_hlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_hlg</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_hlg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_hlg</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>p_hlg</name></expr></argument>, <argument><expr><literal type="string">"zh_"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_hlg</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_hlg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>p_hlg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_hlg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>p_hlg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_hlg</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_hlg</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_hlg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_hlg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_hlg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_ALLOCED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>







<function><type><name>void</name></type>
<name>set_title_defaults</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>;</decl_stmt>






<expr_stmt><expr><name>idx1</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>starting</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>mch_can_restore_title</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>long_i</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_title</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx1</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"icon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>starting</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>mch_can_restore_icon</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>long_i</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_icon</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>ex_set</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_setlocal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>OPT_LOCAL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_setglobal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>OPT_GLOBAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>browse</name></name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ex_options</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>OPT_ONECOLUMN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_set</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
















<function><type><name>int</name></type>
<name>do_set</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>startarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prefix</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nextchar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>afterchar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>did_show</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>adding</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>prepending</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>removing</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cp_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>key_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>showoptions</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>startarg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_options_default</name><argument_list>(<argument><expr><name>OPT_FREE</name> <operator>|</operator> <name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>didset_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>didset_options2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>showoptions</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"termcap"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>showoptions</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_termcodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"novice"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"inv"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>arg</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>find_key_option</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<while>while <condition>(<expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>
<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>nextchar</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>find_key_option</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>afterchar</name> <operator>=</operator> <name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>adding</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prepending</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>removing</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>adding</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prepending</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>removing</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>key</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E518: Unknown option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"=:!&amp;&lt;"</literal></expr></argument>, <argument><expr><name>nextchar</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator>
<operator>||</operator> <name>nextchar</name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E519: Option not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>P_STRING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP0</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>KS_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>key</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_WINONLY</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>opt_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <name>VAR_WIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_NOWIN</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>VAR_WIN</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>P_SECURE</name> <operator>|</operator> <name>P_NO_ML</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"E520: Not allowed in a modeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_MLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_mle</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"E992: Not allowed in a modeline when 'modelineexpr' is off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name>
<operator>&amp;&amp;</operator> <name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> 
<operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_FDM</name> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_WRAP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SANDBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_SECURE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><name>e_sandbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"?=:!&amp;&lt;"</literal></expr></argument>, <argument><expr><name>nextchar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp_val</name> <operator>=</operator> <name>p_cp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>cp_val</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>cp_val</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"?!&amp;&lt;"</literal></expr></argument>, <argument><expr><name>nextchar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_trailing</name></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'?'</literal>
<operator>||</operator> <operator>(</operator><name>prefix</name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"=:&amp;&lt;"</literal></expr></argument>, <argument><expr><name>nextchar</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>did_show</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>gotocmdline</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>did_show</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>showoneopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>last_set_msg</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>script_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_WIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>last_set_msg</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_script_ctx</name><index>[
<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BUF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>last_set_msg</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_script_ctx</name><index>[
<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_termcode</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E846: Key code not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>show_one_termcode</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>!=</operator> <literal type="char">'?'</literal>
<operator>&amp;&amp;</operator> <name>nextchar</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name>afterchar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_trailing</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value_is_replaced</name> <init>= <expr><operator>!</operator><name>prepending</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>adding</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>removing</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value_checked</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name>nextchar</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>long_i</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[
<expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_VI_DEF</name><operator>)</operator> <operator>||</operator> <name>cp_val</name><operator>)</operator></expr>
?</condition><then> <expr><name>VI_DEFAULT</name></expr> </then><else>: <expr><name>VIM_DEFAULT</name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ar</name></name>
<operator>&amp;&amp;</operator> <name>opt_flags</name> <operator>==</operator> <name>OPT_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name>afterchar</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_trailing</name></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>set_bool_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>value</name></expr></argument>,
<argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"=:&amp;&lt;"</literal></expr></argument>, <argument><expr><name>nextchar</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name>prefix</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> 
<block>{<block_content>









<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>long_i</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[
<expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_VI_DEF</name><operator>)</operator> <operator>||</operator> <name>cp_val</name><operator>)</operator></expr>
?</condition><then> <expr><name>VI_DEFAULT</name></expr> </then><else>: <expr><name>VIM_DEFAULT</name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name>
<operator>&amp;&amp;</operator> <name>opt_flags</name> <operator>==</operator> <name>OPT_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NO_LOCAL_UNDOLEVEL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wc</name>
<operator>||</operator> <operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wcm</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&lt;'</literal>
<operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'^'</literal>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>string_to_key</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>!=</operator> <operator>&amp;</operator><name>p_wcm</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>STR2NR_ALL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E521: Number required after ="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E521: Number required after ="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>adding</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>+</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prepending</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>*</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>removing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>-</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>set_num_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>origval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>origval_l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>origval_g</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_origval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_origval_l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_origval_g</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_newval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name></type> <name>newlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>comma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_value_alloced</name></decl>;</decl_stmt> 





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BOTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>oldval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>origval_l</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>origval_g</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BOTH</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>origval_l</name> <operator>==</operator> <name>empty_option</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>origval_l</name> <operator>=</operator> <name>origval_g</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BOTH</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>origval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_varp</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>origval</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>newval</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[
<expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_VI_DEF</name><operator>)</operator> <operator>||</operator> <name>cp_val</name><operator>)</operator></expr>
?</condition><then> <expr><name>VI_DEFAULT</name></expr> </then><else>: <expr><name>VIM_DEFAULT</name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bg</name></expr>)</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>gui_bg_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>term_bg_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>newval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newval</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>option_expand</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>new_value_alloced</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value_alloced</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt> 






<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_kp</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">":help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>save_arg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr>;</expr_stmt>
</block_content>}</block></if>




<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bs</name>
<operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"indent,eol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"indent,eol,start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>origval</name> <operator>==</operator> <name>oldval</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>origval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>origval_l</name> <operator>==</operator> <name>oldval</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>origval_l</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>origval_g</name> <operator>==</operator> <name>oldval</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>origval_g</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>oldval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt>
</block_content>}</block></if>





<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ww</name>
<operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>errbuf</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"b,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"s,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"h,l,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"&lt;,&gt;,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"[,],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>errbuf</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>errbuf</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>save_arg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr>;</expr_stmt>
</block_content>}</block></if>




<if type="elseif">else if <condition>( <expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&gt;'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_dir</name>
<operator>||</operator> <name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bdir</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>newlen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adding</name> <operator>||</operator> <name>prepending</name> <operator>||</operator> <name>removing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>origval</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>









<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_EXPAND</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>vim_isfilec</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal>
<operator>||</operator> <operator>(</operator><name>s</name> <operator>==</operator> <name>newval</name>
<operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>adding</name> <operator>||</operator> <name>prepending</name> <operator>||</operator> <name>removing</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>option_expand</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adding</name> <operator>||</operator> <name>prepending</name> <operator>||</operator> <name>removing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>origval</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>removing</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_NODUP</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>origval</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator>
<operator>||</operator> <name>s</name> <operator>==</operator> <name>origval</name>
<operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>bs</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator>
<operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal>
<operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>&gt;</operator> <name>origval</name> <operator>+</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>s</name> <operator>==</operator> <name>origval</name> <operator>+</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>bs</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>adding</name> <operator>||</operator> <name>prepending</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prepending</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>adding</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>adding</name> <operator>||</operator> <name>prepending</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>comma</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>origval</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>newval</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adding</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comma</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_ONECOMMA</name><operator>)</operator> <operator>==</operator> <name>P_ONECOMMA</name>
<operator>&amp;&amp;</operator> <name><name>origval</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal>
<operator>&amp;&amp;</operator> <name><name>origval</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newval</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>comma</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>,
<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>origval</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newval</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>comma</name></expr></argument>, <argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newval</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>removing</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>origval</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newval</name> <operator>+</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>origval</name><operator>)</operator></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_FLAGLIST</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>newval</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition><incr/>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_ONECOMMA</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">','</literal>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator> <operator>||</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>save_arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>save_arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>new_value_alloced</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>starting</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>!=</operator> <name>PV_KEY</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <name>origval</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>newval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>saved_origval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>saved_newval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>origval_l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>saved_origval_l</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>origval_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>origval_g</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>saved_origval_g</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>origval_g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>
<decl_stmt><decl><type><name>long_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>insecure_flag</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>secure_saved</name> <init>= <expr><name>secure</name></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SANDBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>value_is_replaced</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <name>P_INSECURE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>secure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>did_set_string_option</name><argument_list>(
<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>,
<argument><expr><name>new_value_alloced</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>secure_saved</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>trigger_optionsset_string</name><argument_list>(
<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>saved_origval</name></expr></argument>,
<argument><expr><name>saved_origval_l</name></expr></argument>, <argument><expr><name>saved_origval_g</name></expr></argument>,
<argument><expr><name>saved_newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved_origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved_origval_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved_origval_g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved_newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>add_termcap_entry</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E522: Not found in termcap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_termcode</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>nextchar</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>full_screen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ttest</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>did_set_option</name><argument_list>(
<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>value_is_replaced</name></expr></argument>, <argument><expr><name>value_checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<label><name>skip</name>:</label>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>arg</name> <operator>-</operator> <name>startarg</name><operator>)</operator> <operator>&lt;</operator> <name>IOSIZE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>startarg</name></expr></argument>, <argument><expr><operator>(</operator><name>arg</name> <operator>-</operator> <name>startarg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>arg</name> <operator>-</operator> <name>startarg</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>trans_characters</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>theend</name>:</label>
<if_stmt><if>if <condition>(<expr><name>silent_mode</name> <operator>&amp;&amp;</operator> <name>did_show</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>info_message</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>info_message</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>did_set_option</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>new_value</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>value_checked</name></decl></parameter>)</parameter_list> 

<block>{<block_content>
<decl_stmt><decl><type><name>long_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_WAS_SET</name></expr>;</expr_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>insecure_flag</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value_checked</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>secure</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SANDBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>|</operator> <name>P_INSECURE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>new_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <operator>~</operator><name>P_INSECURE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>string_to_key</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>multi_byte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>find_key_option</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Ctrl_chr</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>multi_byte</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>*</operator><name>arg</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>void</name></type>
<name>did_set_title</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>!=</operator> <name>NO_SCREEN</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>set_options_bin</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>oldval</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>newval</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldval</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw_nobin</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm_nobin</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml_nobin</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et_nobin</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_tw_nobin</name> <operator>=</operator> <name>p_tw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wm_nobin</name> <operator>=</operator> <name>p_wm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ml_nobin</name> <operator>=</operator> <name>p_ml</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_et_nobin</name> <operator>=</operator> <name>p_et</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_tw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ml</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_et</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_bin</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>oldval</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw_nobin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm_nobin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml_nobin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et_nobin</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_tw</name> <operator>=</operator> <name>p_tw_nobin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wm</name> <operator>=</operator> <name>p_wm_nobin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ml</name> <operator>=</operator> <name>p_ml_nobin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_et</name> <operator>=</operator> <name>p_et_nobin</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>option_expand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_EXPAND</name><operator>)</operator> <operator>||</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXPATHL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr>;</expr_stmt></block_content></block></if></if_stmt>







<expr_stmt><expr><call><name>expand_env_esc</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <operator>&amp;</operator><name>p_tags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <operator>&amp;</operator><name>p_sps</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"file:"</literal></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NameBuff</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>didset_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>init_chartab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>didset_string_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>spell_check_msm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>spell_check_sps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>compile_cap_prog</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>did_set_spell_option</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>check_cedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>fill_breakat_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>after_copy_winopt</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>didset_options2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>highlight_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>check_opt_wim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_chars_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_lcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_chars_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_fcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>check_clipboard_option</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tabstop_set</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vsts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tabstop_set</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>check_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_STRING</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_varp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>get_term_opt_idx</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>opt_idx</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>set_term_option_alloced</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name> <init>= <expr><call><name>get_term_opt_idx</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_ALLOCED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>opt_idx</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>was_set_insecurely</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name> <modifier>*</modifier></type><name>flagp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flagp</name> <operator>=</operator> <call><name>insecure_flag</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>*</operator><name>flagp</name> <operator>&amp;</operator> <name>P_INSECURE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"was_set_insecurely()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>long_u</name> <modifier>*</modifier></type>
<name>insecure_flag</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_STL</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_stl_flags</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_FDE</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fde_flags</name></name></expr>;</return>
<case>case <expr><name>PV_FDT</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdt_flags</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_BEXPR</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bexpr_flags</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_INDE</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inde_flags</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_FEX</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fex_flags</name></name></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_INEX</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inex_flags</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch></block_content></block></if></if_stmt>


<return>return <expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type> <name>redraw_titles</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>need_maketitle</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type>
<name>valid_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>allowed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>val</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>allowed</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>set_option_sctx_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, <parameter><decl><type><name>sctx_T</name></type> <name>script_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>both</name> <init>= <expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indir</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sctx_T</name></type> <name>new_script_ctx</name> <init>= <expr><name>script_ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>SOURCING_LNUM</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>both</name> <operator>||</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>indir</name> <operator>&amp;</operator> <operator>(</operator><name>PV_BUF</name><operator>|</operator><name>PV_WIN</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>script_ctx</name> <operator>=</operator> <name>new_script_ctx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>both</name> <operator>||</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>indir</name> <operator>&amp;</operator> <name>PV_BUF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_script_ctx</name><index>[<expr><name>indir</name> <operator>&amp;</operator> <name>PV_MASK</name></expr>]</index></name> <operator>=</operator> <name>new_script_ctx</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>indir</name> <operator>&amp;</operator> <name>PV_WIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_script_ctx</name><index>[<expr><name>indir</name> <operator>&amp;</operator> <name>PV_MASK</name></expr>]</index></name> <operator>=</operator> <name>new_script_ctx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>set_term_option_sctx_idx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>opt_idx</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>, <argument><expr><name>current_sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>apply_optionset_autocmd</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>opt_flags</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>oldval</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>oldval_g</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf_old</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf_old_global</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf_new</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf_type</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>||</operator> <name>errmsg</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf_old</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf_old</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf_old_global</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf_old_global</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>,
<argument><expr><name>oldval_g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf_new</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf_new</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"local"</literal></expr> </then><else>: <expr><literal type="string">"global"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_NEW</name></expr></argument>, <argument><expr><name>buf_new</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLD</name></expr></argument>, <argument><expr><name>buf_old</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>, <argument><expr><name>buf_type</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_COMMAND</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDLOCAL</name></expr></argument>, <argument><expr><name>buf_old</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_COMMAND</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"setglobal"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDGLOBAL</name></expr></argument>, <argument><expr><name>buf_old</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_COMMAND</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"set"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDLOCAL</name></expr></argument>, <argument><expr><name>buf_old</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDGLOBAL</name></expr></argument>, <argument><expr><name>buf_old_global</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_COMMAND</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"modeline"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDLOCAL</name></expr></argument>, <argument><expr><name>buf_old</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_OPTIONSET</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_v_option_vars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>set_bool_option</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_value</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_global_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>secure</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SANDBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_SECURE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e_secure</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_global_value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>current_sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compatible_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_lrm</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_lnr</name> <operator>=</operator> <operator>!</operator><name>p_lrm</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_lnr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_lrm</name> <operator>=</operator> <operator>!</operator><name>p_lnr</name></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>value</name> <operator>&amp;&amp;</operator> <name>old_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reset_cursorline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERSISTENT_UNDO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_udf</name></name> <operator>||</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_udf</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_udf</name></name> <operator>||</operator> <name>p_udf</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>hash</name><index>[<expr><name>UNDO_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>save_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>curbuf</argument>)</argument_list></macro>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curbuf</name> <operator>==</operator> <name>save_curbuf</name>
<operator>||</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>||</operator> <name>opt_flags</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>curbufIsChanged</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>u_compute_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u_read_undo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>save_curbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ro</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ro</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>readonlymode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ro</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_did_warn</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mh</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_mh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>term_in_normal_mode</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>bt_terminal</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>term_is_finished</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E946: Cannot make a terminal with running job modifiable"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_eol</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bomb</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_options_bin</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bl</name></name> <operator>&amp;&amp;</operator> <name>old_value</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bl</name></name></expr> ?</condition><then> <expr><name>EVENT_BUFADD</name></expr> </then><else>: <expr><name>EVENT_BUFDELETE</name></expr></else></ternary></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_swf</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_swf</name></name> <operator>&amp;&amp;</operator> <name>p_uc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_open_file</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><call><name>mf_close_file</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_terse</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_shm</name></expr></argument>, <argument><expr><name>SHM_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p_terse</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>p_shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"shm"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>p_terse</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_paste</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>paste_option_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_im</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_im</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_start_insertmode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>stop_insert_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>old_value</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>need_start_insertmode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stop_insert_mode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mode_displayed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ic</name> <operator>&amp;&amp;</operator> <name>p_hls</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hls</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>do_check_scrollbind</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_scbind_pos</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>win</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_p_pvw</name></name> <operator>&amp;&amp;</operator> <name>win</name> <operator>!=</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E590: A preview window already exists"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tx</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_fileformat</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tx</name></name></expr> ?</condition><then> <expr><name>EOL_DOS</name></expr> </then><else>: <expr><name>EOL_UNIX</name></expr></else></ternary></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ta</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ffs"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>p_ta</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_FFS_VIM</name></expr> </then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>OPT_FREE</name> <operator>|</operator> <name>opt_flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lisp</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buf_init_chartab</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_title</name> <operator>||</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_icon</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>did_set_title</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>save_file_ff</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>modified_was_set</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ssl</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_ssl</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>psepc</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psepcN</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pseps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psepc</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psepcN</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pseps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>buflist_slash_adjust</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alist_slash_adjust</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>scriptnames_slash_adjust</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ea</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_ea</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>old_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_equal</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wiv</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>p_wiv</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>old_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>T_XS</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"y"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>p_wiv</name> <operator>&amp;&amp;</operator> <name>old_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>T_XS</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_wiv</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>T_XS</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_beval</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>balloonEvalForTerm</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_beval</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>old_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_enable_beval_area</name><argument_list>(<argument><expr><name>balloonEval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>p_beval</name> <operator>&amp;&amp;</operator> <name>old_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_disable_beval_area</name><argument_list>(<argument><expr><name>balloonEval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bevalterm</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_bevalterm_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_AUTOCHDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_acd</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>DO_AUTOCHDIR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>diff_buf_adjust</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_imdisable</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_imdisable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>im_set_active</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>im_set_active</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>==</operator> <name>B_IMODE_IM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><call><name>did_set_spelllang</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_arab</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_arab</name></name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_tbidi</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_arshape</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_arshape</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>w_arabic</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"W17: Arabic requires UTF-8, do ':set encoding=utf-8'"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_source</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_W</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>w_arabic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_W</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_WARNINGMSG</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>w_arabic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_deco</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"keymap"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"arabic"</literal></expr></argument>,
<argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_tbidi</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



</block_content>}</block></if></if_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>=</operator> <name>B_IMODE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>=</operator> <name>B_IMODE_USE_INSERT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nu</name></name>
<operator>||</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scl</name></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scl</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_signlist</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_tgc</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>!</operator><call><name>has_vtp_working</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_tgc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E954: 24-bit colors are not supported on this environment"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_term_win32</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swap_tcap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>highlight_gui_started</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>is_term_win32</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>control_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_termname</name><argument_list>(<argument><expr><name>T_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_highlight</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_WAS_SET</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apply_optionset_autocmd</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>old_value</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>old_global_value</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>!=</operator> <name>MAXCOL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>P_CURSWANT</name> <operator>|</operator> <name>P_RALL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>check_redraw</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>set_num_option</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, 
<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>, 
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name></type> <name>errbuflen</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list> 

<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>old_value</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long</name></type> <name>old_global_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>long</name></type> <name>old_Rows</name> <init>= <expr><name>Rows</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>old_Columns</name> <init>= <expr><name>Columns</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>secure</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SANDBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_SECURE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e_secure</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_global_value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>current_sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>=</operator> <ternary><condition><expr><call><name>tabstop_count</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><call><name>tabstop_first</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wh</name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hh</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_wh</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wh</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_wmh</name> <operator>&gt;</operator> <name>p_wh</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_winheight</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wh</name> <operator>=</operator> <name>p_wmh</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_hh</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_hh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ONE_WINDOW</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wh</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&lt;</operator> <name>p_wh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_wh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hh</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&lt;</operator> <name>p_hh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wmh</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_wmh</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wmh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_wmh</name> <operator>&gt;</operator> <name>p_wh</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_winheight</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wmh</name> <operator>=</operator> <name>p_wh</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>win_setminheight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wiw</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_wiw</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wiw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_wmw</name> <operator>&gt;</operator> <name>p_wiw</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_winwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wiw</name> <operator>=</operator> <name>p_wmw</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ONE_WINDOW</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&lt;</operator> <name>p_wiw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_setwidth</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_wiw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wmw</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_wmw</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wmw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_wmw</name> <operator>&gt;</operator> <name>p_wiw</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_winwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wmw</name> <operator>=</operator> <name>p_wiw</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>win_setminwidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ls</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_stal</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>shell_new_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_linespace</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <call><name>gui_mch_adjust_charheight</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>newFoldLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fml</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdn</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsSyntax</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>foldmethodIsIndent</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdc</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdc</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdc</name></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdc</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsIndent</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_cino</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mco</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_mco</name> <operator>&gt;</operator> <name>MAX_MCO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_mco</name> <operator>=</operator> <name>MAX_MCO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>p_mco</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_mco</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>screenclear</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>&gt;</operator> <name>B_IMODE_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>=</operator> <name>B_IMODE_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_iminsert</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>termcap_active</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>status_redraw_curbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_imst</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_imst</name> <operator>!=</operator> <name>IM_ON_THE_SPOT</name> <operator>&amp;&amp;</operator> <name>p_imst</name> <operator>!=</operator> <name>IM_OVER_THE_SPOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_window</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_window</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_window</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>p_window</name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>&gt;</operator> <name>B_IMODE_LAST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>=</operator> <name>B_IMODE_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_imsearch</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name></expr>;</expr_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_titlelen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_titlelen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_titlelen</name> <operator>=</operator> <literal type="number">85</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>!=</operator> <name>NO_SCREEN</name> <operator>&amp;&amp;</operator> <name>old_value</name> <operator>!=</operator> <name>p_titlelen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_maketitle</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ch</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>&gt;</operator> <name>Rows</name> <operator>-</operator> <call><name>min_rows</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <call><name>min_rows</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>!=</operator> <name>old_value</name> <operator>&amp;&amp;</operator> <name>full_screen</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>command_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_uc</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_uc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_uc</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_uc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>old_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_open_files</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MZSCHEME_GUI_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mzq</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mzvim_reset_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_pyx</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_pyx</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>p_pyx</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ul</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p_ul</name> <operator>=</operator> <name>old_value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ul</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>=</operator> <name>old_value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nuw</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nuw</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nuw</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nuw</name></name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nuw</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_nrwidth_line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>check_colorcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>Rows</name> <operator>&lt;</operator> <call><name>min_rows</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E593: Need at least %d lines"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>min_rows</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>Rows</name> <operator>=</operator> <call><name>min_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Columns</name> <operator>&lt;</operator> <name>MIN_COLUMNS</name> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E594: Need at least %d columns"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MIN_COLUMNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name>MIN_COLUMNS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>limit_screen_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>old_Rows</name> <operator>!=</operator> <name>Rows</name> <operator>||</operator> <name>old_Columns</name> <operator>!=</operator> <name>Columns</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>updating_screen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>old_value</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>full_screen</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_shellsize</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><call><name>check_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdline_row</name> <operator>&gt;</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name> <operator>&amp;&amp;</operator> <name>Rows</name> <operator>&gt;</operator> <name>p_ch</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_window</name> <operator>&gt;=</operator> <name>Rows</name> <operator>||</operator> <operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_tm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_tm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>&lt;=</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_scroll</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>win_comp_scroll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_hi</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_hi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>p_hi</name> <operator>&gt;</operator> <literal type="number">10000</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_hi</name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_re</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>p_re</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_re</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_report</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_report</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p_sj</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">100</literal> <operator>||</operator> <name>p_sj</name> <operator>&gt;=</operator> <name>Rows</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Rows</name> <operator>!=</operator> <name>old_Rows</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p_sj</name> <operator>=</operator> <name>Rows</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_scroll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sj</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_so</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_so</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_siso</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_siso</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_cwh</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_cwh</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>p_ut</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ut</name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_ss</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ss</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_WAS_SET</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apply_optionset_autocmd</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>old_value</name></expr></argument>, <argument><expr><name>old_global_value</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>!=</operator> <name>MAXCOL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>P_CURSWANT</name> <operator>|</operator> <name>P_RALL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>check_redraw</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>errmsg</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>check_redraw</name><parameter_list>(<parameter><decl><type><name>long_u</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>doclear</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_RCLR</name><operator>)</operator> <operator>==</operator> <name>P_RCLR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>all</name> <init>= <expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_RALL</name><operator>)</operator> <operator>==</operator> <name>P_RALL</name> <operator>||</operator> <name>doclear</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_RSTAT</name><operator>)</operator> <operator>||</operator> <name>all</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>status_redraw_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_RBUF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_RWIN</name><operator>)</operator> <operator>||</operator> <name>all</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_RBUF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_RWINONLY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>doclear</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>all</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>findoption</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name><name>quick_tab</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_term_opt</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name><name>quick_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fullname</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>s</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quick_tab</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <name>opt_idx</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>quick_tab</name><index>[<expr><call><name>CharOrdLow</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>opt_idx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>islower</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'a'</literal> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>is_term_opt</name> <operator>=</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_term_opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <name><name>quick_tab</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <name><name>quick_tab</name><index>[<expr><call><name>CharOrdLow</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>( <init>;</init> <condition><expr><operator>(</operator><name>s</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_term_opt</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <name><name>quick_tab</name><index>[<expr><call><name>CharOrdLow</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>( <init>;</init> <condition><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>shortname</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>opt_idx</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TCL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>










<function><type><name>int</name></type>
<name>get_option_value</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>numval</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>stringval</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>=</operator> <call><name>find_key_option</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>key_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP0</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>KS_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>key</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_termcode</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>stringval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>stringval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stringval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_key</name></name>
<operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>stringval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"*****"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>stringval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <call><name>curbufIsChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>


















<function><type><name>int</name></type>
<name>get_option_value_strict</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>numval</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>stringval</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>opt_type</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>SOPT_BOOL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>SOPT_NUM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>SOPT_STRING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_NONE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_GLOBAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>SOPT_GLOBAL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_BOTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>SOPT_GLOBAL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_GLOBAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_WIN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_BUF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>SOPT_WIN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_BUF</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_WIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>SOPT_BUF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stringval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_GLOBAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_BUF</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_MOD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <call><name>bufIsChanged</name><argument_list>(<argument><expr><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_KEY</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>stringval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>save_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <operator>(</operator><name>buf_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>save_curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_WIN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>save_curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name> <operator>|</operator> <name>SOPT_UNSET</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>stringval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <name>varp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>option_iter_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>option</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>option</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>options</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator>struct <name>vimoption</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>*</operator><name>option</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>fullname</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>option</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>option</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator>struct <name>vimoption</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>*</operator><name>option</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>vimoption</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>*</operator><name>option</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>opt_type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SREQ_GLOBAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_NONE</name> <operator>||</operator> <name><name>ret</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_BOTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>SREQ_BUF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_BUF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>SREQ_WIN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_WIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"option_iter_next()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block>
while <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ret</name><operator>-&gt;</operator><name>fullname</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>long_u</name></type>
<name>get_option_flags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>set_option_flag</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>long_u</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>clear_option_flag</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>long_u</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>flag</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>is_global_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_NONE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>is_global_local_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BOTH</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>is_window_local_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>VAR_WIN</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>is_hidden_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>is_crypt_key_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_KEY</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>char</name> <modifier>*</modifier></type>
<name>set_option_value</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>number</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>=</operator> <call><name>find_key_option</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>key_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP0</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>KS_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>key</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>add_termcode</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>full_screen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ttest</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E355: Unknown option: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SANDBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>sandbox</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_SECURE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_sandbox</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_string_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>string</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>string</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E521: Number required: &amp;%s = '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_num_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>number</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>set_bool_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>number</name></expr></argument>,
<argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_term_code</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'t'</literal> <operator>||</operator> <name><name>tname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>||</operator>
<name><name>tname</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>tname</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>tname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>varp</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>find_termcode</name><argument_list>(<argument><expr><name>tname</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_highlight_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"hl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_encoding_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"enc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_key_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_lt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg_arg</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>has_lt</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>arg</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>find_special_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>modifiers</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>key</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>showoptions</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>all</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isterm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>item_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INC</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<expr_stmt><expr><name>items</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr>struct <name>vimoption</name> <operator>*</operator></expr></argument>, <argument><expr><name>OPTION_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>items</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>all</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_puts_title</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Terminal codes ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_puts_title</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Global option values ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_puts_title</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Local option values ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_puts_title</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Options ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>







<for>for <control>(<init><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>run</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>run</name></expr></incr>)</control>
<block>{<block_content>



<expr_stmt><expr><name>item_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>message_filtered</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>isterm</name> <operator>=</operator> <call><name>istermoption</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>!=</operator> <name>PV_NONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isterm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>all</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>isterm</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>all</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>isterm</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>all</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>optval_default</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>p_cp</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_ONECOLUMN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>option_value2string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&lt;=</operator> <name>INC</name> <operator>-</operator> <name>GAP</name> <operator>&amp;&amp;</operator> <name>run</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>len</name> <operator>&gt;</operator> <name>INC</name> <operator>-</operator> <name>GAP</name> <operator>&amp;&amp;</operator> <name>run</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>item_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>(</operator><name>Columns</name> <operator>+</operator> <name>GAP</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <name>INC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rows</name> <operator>=</operator> <operator>(</operator><name>item_count</name> <operator>+</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>cols</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>rows</name> <operator>=</operator> <name>item_count</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>rows</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>row</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>rows</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>showoneopt</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>INC</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>optval_default</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compatible</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dvi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>dvi</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_VI_DEF</name><operator>)</operator> <operator>||</operator> <name>compatible</name><operator>)</operator></expr> ?</condition><then> <expr><name>VI_DEFAULT</name></expr> </then><else>: <expr><name>VIM_DEFAULT</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>long_i</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>long_i</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>showoneopt</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_silent</name> <init>= <expr><name>silent_mode</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>info_message</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>
?</condition><then> <expr><operator>!</operator><call><name>curbufIsChanged</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>!</operator><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>option_value2string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>save_silent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>info_message</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>























<function><type><name>int</name></type>
<name>makeset</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>local_only</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp_fresh</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp_local</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pri</name></decl>;</decl_stmt>







<for>for <control>(<init><expr><name>pri</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>pri</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>pri</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><operator>!</operator><call><name>istermoption</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NO_MKRC</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>istermoption</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>pri</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_PRI_MKRC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_NONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NOGLOB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>optval_default</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>p_cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>!=</operator> <name>PV_NONE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>VAR_WIN</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>local_only</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>varp_fresh</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>optval_default</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>varp_fresh</name></expr></argument>, <argument><expr><name>p_cp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>varp_local</name> <operator>=</operator> <name>varp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <name>varp_fresh</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<for>for <control>( <init>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>varp</name> <operator>=</operator> <name>varp_local</name></expr><operator>,</operator> <expr><operator>++</operator><name>round</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"set"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"setlocal"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>put_setbool</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>put_setnum</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>do_endif</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_SYN</name> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_FT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"if &amp;%s != '%s'"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>do_endif</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>put_setstring</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_endif</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"endif"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type>
<name>makefoldset</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>put_setstring</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fdm"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>put_setstring</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fde"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fde</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <name>FAIL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <call><name>put_setstring</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fmr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fmr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>put_setstring</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fdi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdi</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>put_setnum</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fdl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>put_setnum</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fml"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fml</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>put_setnum</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fdn"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>put_setbool</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fen"</literal></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>
)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>put_setstring</name><parameter_list>(
<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>valuep</name></decl></parameter>,
<parameter><decl><type><name>long_u</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s %s="</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>valuep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>valuep</name> <operator>==</operator> <operator>&amp;</operator><name>p_pt</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>valuep</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>put_escstr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>str2special</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_EXPAND</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>valuep</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>*</operator><name>valuep</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>MAXPATHL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>*</operator><name>valuep</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>part</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s %s+="</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>put_escstr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>put_escstr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>put_escstr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>*</operator><name>valuep</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>put_setnum</name><parameter_list>(
<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>valuep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>wc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s %s="</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wc_use_keyname</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>valuep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>get_special_key_name</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>wc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>*</operator><name>valuep</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>put_setbool</name><parameter_list>(
<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s %s%s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>clear_termoptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>





<expr_stmt><expr><call><name>mch_setmouse</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mch_restore_title</name><argument_list>(<argument><expr><name>SAVE_RESTORE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_xterm_clip</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>stoptermcap</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free_termoptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>free_termoptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>options</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>istermoption</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_ALLOCED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_DEF_ALLOCED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>P_ALLOCED</name><operator>|</operator><name>P_DEF_ALLOCED</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>options</name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>, <argument><expr><name>current_sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>clear_termcodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>free_one_termoption</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>var</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_ALLOCED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>P_ALLOCED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>set_term_defaults</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>istermoption</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>!=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_DEF_ALLOCED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>P_DEF_ALLOCED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_ALLOCED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>P_DEF_ALLOCED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>P_ALLOCED</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>istermoption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>fullname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>fullname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>istermoption_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istermoption</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>unset_global_local_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>indir</name></name></expr>)</condition>
<block>{<block_content>

<case>case <expr><name>PV_EP</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_KP</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_kp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_PATH</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_AR</name></expr>:</case>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ar</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_BKC</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bkc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_bkc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_TAGS</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_TC</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_tc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_SISO</name></expr>:</case>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_SO</name></expr>:</case>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_DEF</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_def</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_INC</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_inc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_DICT</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_TSR</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tsr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_FP</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_EFM</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_efm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_GP</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_gp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PV_MP</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_mp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_BEXPR</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_CM</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_SBR</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name><operator>)</operator><operator>-&gt;</operator><name>w_p_sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_STL</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name><operator>)</operator><operator>-&gt;</operator><name>w_p_stl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_UL</name></expr>:</case>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>=</operator> <name>NO_LOCAL_UNDOLEVEL</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_LW</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_lw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_MENC</name></expr>:</case>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_menc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>get_varp_scope</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>!=</operator> <name>PV_NONE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>VAR_WIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>GLOBAL_WO</name><argument_list>(<argument><expr><call><name>get_varp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_BOTH</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>indir</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PV_FP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fp</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_EFM</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_efm</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_GP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_gp</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_MP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mp</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_EP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ep</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_KP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_kp</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_PATH</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_path</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_AR</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ar</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_TAGS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tags</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_TC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tc</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_SISO</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_SO</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_DEF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_def</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_INC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inc</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_DICT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_dict</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_TSR</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tsr</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_BEXPR</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bexpr</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_CM</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cm</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_SBR</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_sbr</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_STL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_stl</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_UL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_LW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lw</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_BKC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bkc</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_MENC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_menc</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>get_varp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_option_varp_scope</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>get_varp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>indir</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PV_NONE</name></expr>:</case> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr>;</return>


<case>case <expr><name>PV_EP</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ep</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ep</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_KP</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_kp</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_kp</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_PATH</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_path</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_path</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_AR</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ar</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ar</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_TAGS</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tags</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tags</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_TC</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tc</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tc</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_BKC</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bkc</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bkc</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_SISO</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_SO</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_DEF</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_def</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_def</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_INC</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inc</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inc</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_DICT</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_dict</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_dict</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_TSR</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tsr</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tsr</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_FP</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fp</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fp</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_EFM</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_efm</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_efm</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_GP</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_gp</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_gp</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<case>case <expr><name>PV_MP</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mp</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mp</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_BEXPR</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bexpr</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bexpr</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_CM</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cm</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_SBR</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_sbr</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_sbr</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_STL</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_stl</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_UL</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>!=</operator> <name>NO_LOCAL_UNDOLEVEL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_LW</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lw</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lw</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_MENC</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_menc</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_menc</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_ARAB</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_arab</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_LIST</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_SPELL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_CUC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cuc</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_CUL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cul</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_CULOPT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_culopt</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_CC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cc</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_DIFF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_FDC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdc</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FEN</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FDI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdi</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FDL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FDM</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdm</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FML</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fml</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FDN</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdn</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_FDE</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fde</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FDT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdt</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_FMR</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fmr</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_NU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nu</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_RNU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_NUW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nuw</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_WFH</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wfh</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_WFW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wfw</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_PVW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_RL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_RLC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rlc</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_SCROLL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_WRAP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_LBR</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_BRI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_bri</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_BRIOPT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_briopt</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_WCR</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wcr</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_SCBIND</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_CRBIND</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_crb</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_COCU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cocu</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_COLE</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_TWK</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_twk</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_TWS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_tws</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_TWSL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_twsl</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>PV_AI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_BIN</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_BOMB</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bomb</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_BH</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bh</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_BT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bt</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_BL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bl</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_CI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ci</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_CIN</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cin</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_CINK</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cink</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_CINO</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cino</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_CINW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cinw</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_COM</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_com</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_CMS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cms</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_CPT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cpt</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_CSL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_csl</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_CFU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cfu</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_OFU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ofu</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_TFU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tfu</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_EOL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_eol</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FIXEOL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_ET</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FENC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ff</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ft</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FO</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fo</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_FLP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_flp</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_IMI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_IMS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_INF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inf</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_ISK</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_INEX</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inex</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_INDE</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inde</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_INDK</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_indk</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_FEX</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fex</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_KEY</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_key</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_LISP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lisp</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_ML</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_MPS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mps</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_MA</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_MOD</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_NF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_nf</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_PI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_pi</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEXTOBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_QE</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_qe</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_RO</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ro</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_SI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_si</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_SN</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sn</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_STS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sts</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_SUA</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sua</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_SWF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_swf</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_SMC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_smc</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_SYN</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_syn</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_SPC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spc</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_SPF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spf</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_SPL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_SW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_TS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_TW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_TX</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tx</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERSISTENT_UNDO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_UDF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_udf</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PV_WM</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_KMAP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_keymap</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_SCL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scl</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PV_VSTS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vsts</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>PV_VTS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default> <expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E356: get_varp ERROR"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_option_var</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_option_fullname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_equalprg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ep</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_ep</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ep</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>win_copy_options</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp_from</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp_to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>copy_winopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp_from</name><operator>-&gt;</operator><name>w_onebuf_opt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp_to</name><operator>-&gt;</operator><name>w_onebuf_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_winopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp_from</name><operator>-&gt;</operator><name>w_allbuf_opt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp_to</name><operator>-&gt;</operator><name>w_allbuf_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>after_copy_winopt</name><argument_list>(<argument><expr><name>wp_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>after_copy_winopt</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier><name>wp</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>briopt_check</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fill_culopt_flags</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_colorcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>copy_winopt</name><parameter_list>(<parameter><decl><type><name>winopt_T</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>winopt_T</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_arab</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_arab</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_list</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_nu</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_nu</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_rnu</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_rnu</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_nuw</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_nuw</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_rl</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_rl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_rlc</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_rlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_sbr</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_sbr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_stl</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_stl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_wrap</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_wrap</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_wrap_save</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_wrap_save</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_lbr</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_lbr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_bri</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_bri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_briopt</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_briopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_wcr</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_wcr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_scb</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_scb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_scb_save</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_scb_save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_crb</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_crb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_crb_save</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_crb_save</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_spell</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_spell</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_cuc</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_cuc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_cul</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_cul</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_culopt</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_culopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_cc</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_diff</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_diff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_diff_saved</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_diff_saved</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_cocu</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_cocu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_cole</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_cole</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_twk</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_twk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_tws</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_tws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdc</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fdc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdc_save</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fdc_save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fen</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fen_save</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fen_save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdi</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fdi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fml</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fml</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdl</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fdl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdl_save</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fdl_save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdm</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fdm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdm_save</name></name> <operator>=</operator> <ternary><condition><expr><name><name>from</name><operator>-&gt;</operator><name>wo_diff_saved</name></name></expr>
?</condition><then> <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fdm_save</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>empty_option</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdn</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fdn</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fde</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fde</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdt</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fdt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fmr</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fmr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_scl</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_scl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>wo_script_ctx</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_script_ctx</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>wo_script_ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>check_winopt</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_win_options</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>check_winopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_onebuf_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_winopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_allbuf_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_winopt</name><parameter_list>(<parameter><decl><type><name>winopt_T</name> <modifier>*</modifier><name>wop</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdm_save</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fde</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fmr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_scl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_rlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_sbr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_stl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_culopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_cocu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_twk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_tws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_briopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_wcr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>clear_winopt</name><parameter_list>(<parameter><decl><type><name>winopt_T</name> <modifier>*</modifier><name>wop</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdm_save</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fde</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fmr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_scl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_briopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_wcr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_rlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_sbr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_stl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_culopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_cocu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_twk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_tws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>buf_opt_idx</name><index>[<expr><name>BV_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_OPT_SCTX</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>bv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>buf-&gt;b_p_script_ctx[bv] = options[buf_opt_idx[bv]].script_ctx</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_buf_opt_idx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_init_buf_opt_idx</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>did_init_buf_opt_idx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>did_init_buf_opt_idx</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>istermoption_idx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BUF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf_opt_idx</name><index>[<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_MASK</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_OPT_SCTX</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>bv</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<function><type><name>void</name></type>
<name>buf_copy_options</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>should_copy</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_p_isk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dont_do_help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_isk</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>p_cpo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>












<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_BUFOPTGLOB</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BCO_ENTER</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_initialized</name></name>
<operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BCO_ENTER</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_BUFOPT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>should_copy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>should_copy</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BCO_ALWAYS</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_script_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_script_ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_buf_opt_idx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>dont_do_help</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BCO_NOHELP</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_help</name></name><operator>)</operator>
<operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_initialized</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dont_do_help</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>save_p_isk</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_initialized</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free_buf_options</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ro</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tx</name></name> <operator>=</operator> <name>p_tx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fenc</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_fenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>p_ffs</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FF_MAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FF_DOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FF_UNIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_start_ffc</name></name> <operator>=</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bh</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bt</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_buf_options</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ai</name></name> <operator>=</operator> <name>p_ai</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_AI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ai_nopaste</name></name> <operator>=</operator> <name>p_ai_nopaste</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>=</operator> <name>p_sw</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_SW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <name>p_tw</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_TW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw_nopaste</name></name> <operator>=</operator> <name>p_tw_nopaste</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw_nobin</name></name> <operator>=</operator> <name>p_tw_nobin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm</name></name> <operator>=</operator> <name>p_wm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_WM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm_nopaste</name></name> <operator>=</operator> <name>p_wm_nopaste</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm_nobin</name></name> <operator>=</operator> <name>p_wm_nobin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bin</name></name> <operator>=</operator> <name>p_bin</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_BIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bomb</name></name> <operator>=</operator> <name>p_bomb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_BOMB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name> <operator>=</operator> <name>p_fixeol</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_FIXEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>=</operator> <name>p_et</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_ET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et_nobin</name></name> <operator>=</operator> <name>p_et_nobin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et_nopaste</name></name> <operator>=</operator> <name>p_et_nopaste</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ml</name></name> <operator>=</operator> <name>p_ml</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_ML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ml_nobin</name></name> <operator>=</operator> <name>p_ml_nobin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_inf</name></name> <operator>=</operator> <name>p_inf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>noswapfile</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_swf</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_swf</name></name> <operator>=</operator> <name>p_swf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cpt</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_CPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_csl</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_csl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_CSL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cfu</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cfu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_CFU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ofu</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_ofu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_OFU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tfu</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_tfu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_TFU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sts</name></name> <operator>=</operator> <name>p_sts</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_STS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sts_nopaste</name></name> <operator>=</operator> <name>p_sts_nopaste</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_vsts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_VSTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_vsts</name> <operator>&amp;&amp;</operator> <name>p_vsts</name> <operator>!=</operator> <name>empty_option</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tabstop_set</name><argument_list>(<argument><expr><name>p_vsts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_nopaste</name></name> <operator>=</operator> <ternary><condition><expr><name>p_vsts_nopaste</name></expr>
?</condition><then> <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_vsts_nopaste</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sn</name></name> <operator>=</operator> <name>p_sn</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_SN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_com</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_com</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_COM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cms</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_CMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fo</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_fo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_FO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_flp</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_flp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_FLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_nf</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_NF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_mps</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_mps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_MPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_si</name></name> <operator>=</operator> <name>p_si</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_SI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ci</name></name> <operator>=</operator> <name>p_ci</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_CI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cin</name></name> <operator>=</operator> <name>p_cin</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_CIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cink</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_CINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cino</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cino</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_CINO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ft</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_pi</name></name> <operator>=</operator> <name>p_pi</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cinw</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cinw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_CINW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_lisp</name></name> <operator>=</operator> <name>p_lisp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_LISP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_syn</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_smc</name></name> <operator>=</operator> <name>p_smc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_SMC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_syn_isk</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spc</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_spc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_SPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>compile_cap_prog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spf</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_spf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_SPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spl</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_SPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_inde</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_inde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_INDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_indk</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_indk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_INDK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fp</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fex</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_fex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_FEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sua</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_sua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_SUA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_keymap</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_keymap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_KMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_kmap_state</name></name> <operator>|=</operator> <name>KEYMAP_INIT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_twsl</name></name> <operator>=</operator> <name>p_twsl</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_TWSL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>=</operator> <name>p_iminsert</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_IMI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>=</operator> <name>p_imsearch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_IMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ar</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>=</operator> <name>NO_LOCAL_UNDOLEVEL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bkc</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_bkc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_gp</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_mp</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_efm</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ep</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_kp</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_path</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tags</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tc</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_tc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_def</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_inc</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_inex</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_inex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_INEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_dict</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tsr</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEXTOBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_qe</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_qe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_QE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bexpr</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERSISTENT_UNDO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_udf</name></name> <operator>=</operator> <name>p_udf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_UDF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_lw</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_menc</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>dont_do_help</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name> <operator>=</operator> <name>save_p_isk</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_vts</name> <operator>&amp;&amp;</operator> <name>p_vts</name> <operator>!=</operator> <name>empty_option</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tabstop_set</name><argument_list>(<argument><expr><name>p_vts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_ISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_isk</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>=</operator> <name>p_ts</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vts</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_vts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_VTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_vts</name> <operator>&amp;&amp;</operator> <name>p_vts</name> <operator>!=</operator> <name>empty_option</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tabstop_set</name><argument_list>(<argument><expr><name>p_vts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_help</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>p_ma</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_OPT_SCTX</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BV_MA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>should_copy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_initialized</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_buf_options</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>did_isk</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buf_init_chartab</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>reset_modifiable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ma</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>set_iminsert_global</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>p_iminsert</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>set_imsearch_global</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>p_imsearch</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_option_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>expand_option_name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>NUL</name></expr>, <expr><name>NUL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_option_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>set_context_in_set_cmd</name><parameter_list>(
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nextchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_term_option</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><name>expand_option_flags</name> <operator>=</operator> <name>opt_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_SETTINGS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>arg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"novice"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_BOOL_SETTINGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"inv"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_BOOL_SETTINGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt></block_content></block></while>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>get_special_key_code</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_term_option</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expand_option_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP0</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expand_option_name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_term_option</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expand_option_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expand_option_name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<while>while <condition>(<expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>nextchar</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nextchar</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>nextchar</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>nextchar</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nextchar</name> <operator>!=</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name>nextchar</name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_BOOL_SETTINGS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_UNSUCCESSFUL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_BOOL_SETTINGS</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_OLD_SETTING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_term_option</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expand_option_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>expand_option_idx</name> <operator>=</operator> <name>opt_idx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_term_option</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_NUM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_EXPAND</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bdir</name>
<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_dir</name>
<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_path</name>
<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pp</name>
<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_rtp</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cdpath</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_vdir</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_DIRECTORIES</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_path</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cdpath</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_THREE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_ONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_FILES</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_THREE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_ONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>p</name> <operator>&gt;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr>;</condition> <incr><expr><operator>--</operator><name>p</name></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&gt;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>==</operator> <name>XP_BS_THREE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sps</name>
<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"file:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ExpandSettings</name><parameter_list>(
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,
<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_normal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num_term</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_term_opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>name_buf</name><index>[<expr><name>MAX_KEY_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>names</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"termcap"</literal></expr>}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ic</name> <init>= <expr><name><name>regmatch</name><operator>-&gt;</operator><name>rm_ic</name></name></expr></init></decl>;</decl_stmt> 




<for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>loop</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>regmatch</name><operator>-&gt;</operator><name>rm_ic</name></name> <operator>=</operator> <name>ic</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_BOOL_SETTINGS</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>match</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>
<incr><expr><operator>++</operator><name>match</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>names</name><index>[<expr><name>match</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>loop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_normal</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>count</name><operator>++</operator></expr>]</index> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>names</name><index>[<expr><name>match</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_BOOL_SETTINGS</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>is_term_opt</name> <operator>=</operator> <call><name>istermoption_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_term_opt</name> <operator>&amp;&amp;</operator> <name>num_normal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>shortname</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>shortname</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>is_term_opt</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>name_buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>loop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_term_opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_term</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>num_normal</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>count</name><operator>++</operator></expr>]</index> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_BOOL_SETTINGS</name> <operator>&amp;&amp;</operator> <name>num_normal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>str</name> <operator>=</operator> <call><name>get_termcode</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>loop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_term</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>count</name><operator>++</operator></expr>]</index> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<expr_stmt><expr><name><name>regmatch</name><operator>-&gt;</operator><name>rm_ic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>str</name> <operator>=</operator> <call><name>get_key_name</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>name_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>name_buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>loop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_term</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>count</name><operator>++</operator></expr>]</index> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>loop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num_normal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <name>num_normal</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>num_term</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <name>num_term</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><operator>*</operator><name>num_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ExpandOldSetting</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>expand_option_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>find_termcode</name><argument_list>(<argument><expr><name>expand_option_name</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expand_option_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>expand_option_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>expand_option_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>option_value2string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>expand_option_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>expand_option_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>var</name> <operator>=</operator> <name>NameBuff</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>var</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>escape_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>


<for>for <control>(<init><expr><name>var</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><operator>*</operator><name>var</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>var</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <name>expand_option_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>expand_option_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_EXPAND</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>vim_isfilec</name><argument_list>(<argument><expr><name><name>var</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>var</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>(</operator><name>var</name> <operator>==</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name><name>var</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>var</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>option_value2string</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>opp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><name>opp</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>wc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wc_use_keyname</name><argument_list>(<argument><expr><name>varp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><call><name>get_special_key_name</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>wc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>wc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><call><name>transchar</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>wc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>NameBuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name><name>opp</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_key</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>varp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><literal type="string">"*****"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><name><name>opp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_EXPAND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>opp</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <operator>&amp;</operator><name>p_pt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>str2specialbuf</name><argument_list>(<argument><expr><name>p_pt</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>wc_use_keyname</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>wcp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wcm</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>wcp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><operator>*</operator><name>wcp</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>find_special_key_in_table</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>wcp</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>has_format_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_paste</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fo</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>shortmess</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>p_shm</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_shm</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_shm</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>SHM_A</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>paste_option_changed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_p_paste</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_sm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_sta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_ru</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_ri</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_hkmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_paste</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_p_paste</name></expr>)</condition>
<block>{<block_content>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw_nopaste</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_tw</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm_nopaste</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_wm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sts_nopaste</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_sts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ai_nopaste</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_ai</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et_nopaste</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_nopaste</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_nopaste</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_nopaste</name></name> <operator>=</operator> <ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name> <operator>!=</operator> <name>empty_option</name></expr>
?</condition><then> <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>


<expr_stmt><expr><name>save_sm</name> <operator>=</operator> <name>p_sm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_sta</name> <operator>=</operator> <name>p_sta</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>save_ru</name> <operator>=</operator> <name>p_ru</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>save_ri</name> <operator>=</operator> <name>p_ri</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_hkmap</name> <operator>=</operator> <name>p_hkmap</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p_ai_nopaste</name> <operator>=</operator> <name>p_ai</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_et_nopaste</name> <operator>=</operator> <name>p_et</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sts_nopaste</name> <operator>=</operator> <name>p_sts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_tw_nopaste</name> <operator>=</operator> <name>p_tw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wm_nopaste</name> <operator>=</operator> <name>p_wm</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_vsts_nopaste</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_vsts_nopaste</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_vsts_nopaste</name> <operator>=</operator> <ternary><condition><expr><name>p_vsts</name> <operator>&amp;&amp;</operator> <name>p_vsts</name> <operator>!=</operator> <name>empty_option</name></expr> ?</condition><then> <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_vsts</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>






<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ai</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>


<expr_stmt><expr><name>p_sm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_sta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_ru</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>status_redraw_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>p_ru</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_ri</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_hkmap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p_tw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ai</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_vsts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>p_vsts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_vsts</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>




<if type="elseif">else if <condition>(<expr><name>old_p_paste</name></expr>)</condition>
<block>{<block_content>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_tw_nopaste</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_wm_nopaste</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sts</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_sts_nopaste</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ai</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_ai_nopaste</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_et_nopaste</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_nopaste</name></name></expr>
?</condition><then> <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_nopaste</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>empty_option</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name> <operator>!=</operator> <name>empty_option</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tabstop_set</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>


<expr_stmt><expr><name>p_sm</name> <operator>=</operator> <name>save_sm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sta</name> <operator>=</operator> <name>save_sta</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_ru</name> <operator>!=</operator> <name>save_ru</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>status_redraw_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>p_ru</name> <operator>=</operator> <name>save_ru</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_ri</name> <operator>=</operator> <name>save_ri</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_hkmap</name> <operator>=</operator> <name>save_hkmap</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p_ai</name> <operator>=</operator> <name>p_ai_nopaste</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_et</name> <operator>=</operator> <name>p_et_nopaste</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sts</name> <operator>=</operator> <name>p_sts_nopaste</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_tw</name> <operator>=</operator> <name>p_tw_nopaste</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wm</name> <operator>=</operator> <name>p_wm_nopaste</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_vsts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>p_vsts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_vsts</name> <operator>=</operator> <ternary><condition><expr><name>p_vsts_nopaste</name></expr> ?</condition><then> <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_vsts_nopaste</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>empty_option</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_p_paste</name> <operator>=</operator> <name>p_paste</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>vimrc_found</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>envname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dofree</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cp"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_cp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>istermoption_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>P_WAS_SET</name><operator>|</operator><name>P_VI_DEF</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_default</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>didset_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>didset_options2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_getenv</name><argument_list>(<argument><expr><name>envname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>FullName_save</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><name>envname</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>dofree</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>change_compatible</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_cp</name> <operator>!=</operator> <name>on</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_cp</name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compatible_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_WAS_SET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>option_was_set</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>reset_option_was_set</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>P_WAS_SET</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>compatible_set</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>istermoption_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_VIM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>p_cp</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_VI_DEF</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_cp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_default</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>p_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>didset_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>didset_options2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>fill_breakat_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>breakat_flags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>p_breakat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_breakat</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>breakat_flags</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>int</name></type>
<name>can_bs</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>BS_START</name> <operator>&amp;&amp;</operator> <call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><operator>*</operator><name>p_bs</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'2'</literal></expr>:</case> <return>return <expr><name>TRUE</name></expr>;</return>
<case>case <expr><literal type="char">'1'</literal></expr>:</case> <return>return <expr><operator>(</operator><name>what</name> <operator>!=</operator> <name>BS_START</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>long</name></type>
<name>get_scrolloff_value</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>p_so</name></expr> </then><else>: <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><name>long</name></type>
<name>get_sidescrolloff_value</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>p_siso</name></expr> </then><else>: <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>unsigned</name> <name>int</name></type>
<name>get_bkc_value</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_bkc_flags</name></name></expr> ?</condition><then> <expr><name><name>buf</name><operator>-&gt;</operator><name>b_bkc_flags</name></name></expr> </then><else>: <expr><name>bkc_flags</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_showbreak_value</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_p_sbr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>win</name><operator>-&gt;</operator><name>w_p_sbr</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_sbr</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_p_sbr</name></name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>empty_option</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>win</name><operator>-&gt;</operator><name>w_p_sbr</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>dict_T</name> <modifier>*</modifier></type>
<name>get_winbuf_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bufopt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>istermoption_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bufopt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_BUF</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>bufopt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_WIN</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name> <init>= <expr><call><name>get_varp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>fill_culopt_flags</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name>culopt_flags_new</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_culopt</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"line"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>culopt_flags_new</name> <operator>|=</operator> <name>CULOPT_LINE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"both"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>culopt_flags_new</name> <operator>|=</operator> <name>CULOPT_LINE</name> <operator>|</operator> <name>CULOPT_NBR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"number"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>culopt_flags_new</name> <operator>|=</operator> <name>CULOPT_NBR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"screenline"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>culopt_flags_new</name> <operator>|=</operator> <name>CULOPT_SCRLINE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>culopt_flags_new</name> <operator>&amp;</operator> <name>CULOPT_LINE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>culopt_flags_new</name> <operator>&amp;</operator> <name>CULOPT_SCRLINE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_culopt_flags</name></name> <operator>=</operator> <name>culopt_flags_new</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
