<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\xdiff\xdiffi.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xinclude.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MAX_COST_MIN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_HEUR_MIN_COST</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_LINE_MAX</name></cpp:macro> <cpp:value>(long)((1UL &lt;&lt; (CHAR_BIT * sizeof(long) - 1)) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_SNAKE_CNT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_K_HEUR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>s_xdpsplit</name> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>i1</name></decl>, <name>i2</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_lo</name></decl>, <name>min_hi</name>;</decl_stmt>
}</block></struct></type> <name>xdpsplit_t</name>;</typedef>










<function><type><specifier>static</specifier> <name>long</name></type> <name>xdl_split</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ha1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>off1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lim1</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ha2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>off2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lim2</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>kvdf</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>kvdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_min</name></decl></parameter>, <parameter><decl><type><name>xdpsplit_t</name> <modifier>*</modifier></type><name>spl</name></decl></parameter>,
<parameter><decl><type><name>xdalgoenv_t</name> <modifier>*</modifier></type><name>xenv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>dmin</name> <init>= <expr><name>off1</name> <operator>-</operator> <name>lim2</name></expr></init></decl>, <decl><type ref="prev"/><name>dmax</name> <init>= <expr><name>lim1</name> <operator>-</operator> <name>off2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fmid</name> <init>= <expr><name>off1</name> <operator>-</operator> <name>off2</name></expr></init></decl>, <decl><type ref="prev"/><name>bmid</name> <init>= <expr><name>lim1</name> <operator>-</operator> <name>lim2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>odd</name> <init>= <expr><operator>(</operator><name>fmid</name> <operator>-</operator> <name>bmid</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fmin</name> <init>= <expr><name>fmid</name></expr></init></decl>, <decl><type ref="prev"/><name>fmax</name> <init>= <expr><name>fmid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bmin</name> <init>= <expr><name>bmid</name></expr></init></decl>, <decl><type ref="prev"/><name>bmax</name> <init>= <expr><name>bmid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ec</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>, <decl><type ref="prev"/><name>prev1</name></decl>, <decl><type ref="prev"/><name>best</name></decl>, <decl><type ref="prev"/><name>dd</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>




<expr_stmt><expr><name><name>kvdf</name><index>[<expr><name>fmid</name></expr>]</index></name> <operator>=</operator> <name>off1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kvdb</name><index>[<expr><name>bmid</name></expr>]</index></name> <operator>=</operator> <name>lim1</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>ec</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>got_snake</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><name>fmin</name> <operator>&gt;</operator> <name>dmin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>kvdf</name><index>[<expr><operator>--</operator><name>fmin</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>fmin</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fmax</name> <operator>&lt;</operator> <name>dmax</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>kvdf</name><index>[<expr><operator>++</operator><name>fmax</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>fmax</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>fmax</name></expr>;</init> <condition><expr><name>d</name> <operator>&gt;=</operator> <name>fmin</name></expr>;</condition> <incr><expr><name>d</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>kvdf</name><index>[<expr><name>d</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>kvdf</name><index>[<expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>kvdf</name><index>[<expr><name>d</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>kvdf</name><index>[<expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>prev1</name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <name>i1</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i1</name> <operator>&lt;</operator> <name>lim1</name> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;</operator> <name>lim2</name> <operator>&amp;&amp;</operator> <name><name>ha1</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>==</operator> <name><name>ha2</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i1</name><operator>++</operator></expr><operator>,</operator> <expr><name>i2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i1</name> <operator>-</operator> <name>prev1</name> <operator>&gt;</operator> <name><name>xenv</name><operator>-&gt;</operator><name>snake_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>got_snake</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>kvdf</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>odd</name> <operator>&amp;&amp;</operator> <name>bmin</name> <operator>&lt;=</operator> <name>d</name> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;=</operator> <name>bmax</name> <operator>&amp;&amp;</operator> <name><name>kvdb</name><index>[<expr><name>d</name></expr>]</index></name> <operator>&lt;=</operator> <name>i1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i1</name></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i2</name></name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>min_lo</name></name> <operator>=</operator> <name><name>spl</name><operator>-&gt;</operator><name>min_hi</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>ec</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>








<if_stmt><if>if <condition>(<expr><name>bmin</name> <operator>&gt;</operator> <name>dmin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>kvdb</name><index>[<expr><operator>--</operator><name>bmin</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>XDL_LINE_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>bmin</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bmax</name> <operator>&lt;</operator> <name>dmax</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>kvdb</name><index>[<expr><operator>++</operator><name>bmax</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>XDL_LINE_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>bmax</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>bmax</name></expr>;</init> <condition><expr><name>d</name> <operator>&gt;=</operator> <name>bmin</name></expr>;</condition> <incr><expr><name>d</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>kvdb</name><index>[<expr><name>d</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>kvdb</name><index>[<expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>kvdb</name><index>[<expr><name>d</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>kvdb</name><index>[<expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>prev1</name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <name>i1</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i1</name> <operator>&gt;</operator> <name>off1</name> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&gt;</operator> <name>off2</name> <operator>&amp;&amp;</operator> <name><name>ha1</name><index>[<expr><name>i1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>ha2</name><index>[<expr><name>i2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i1</name><operator>--</operator></expr><operator>,</operator> <expr><name>i2</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>prev1</name> <operator>-</operator> <name>i1</name> <operator>&gt;</operator> <name><name>xenv</name><operator>-&gt;</operator><name>snake_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>got_snake</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>kvdb</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>odd</name> <operator>&amp;&amp;</operator> <name>fmin</name> <operator>&lt;=</operator> <name>d</name> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;=</operator> <name>fmax</name> <operator>&amp;&amp;</operator> <name>i1</name> <operator>&lt;=</operator> <name><name>kvdf</name><index>[<expr><name>d</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i1</name></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i2</name></name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>min_lo</name></name> <operator>=</operator> <name><name>spl</name><operator>-&gt;</operator><name>min_hi</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>ec</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>need_min</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><name>got_snake</name> <operator>&amp;&amp;</operator> <name>ec</name> <operator>&gt;</operator> <name><name>xenv</name><operator>-&gt;</operator><name>heur_min</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>best</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <name>fmax</name></expr>;</init> <condition><expr><name>d</name> <operator>&gt;=</operator> <name>fmin</name></expr>;</condition> <incr><expr><name>d</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dd</name> <operator>=</operator> <ternary><condition><expr><name>d</name> <operator>&gt;</operator> <name>fmid</name></expr> ?</condition><then> <expr><name>d</name> <operator>-</operator> <name>fmid</name></expr></then><else>: <expr><name>fmid</name> <operator>-</operator> <name>d</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>kvdf</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <name>i1</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>i1</name> <operator>-</operator> <name>off1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i2</name> <operator>-</operator> <name>off2</name><operator>)</operator> <operator>-</operator> <name>dd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>XDL_K_HEUR</name> <operator>*</operator> <name>ec</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;</operator> <name>best</name> <operator>&amp;&amp;</operator>
<name>off1</name> <operator>+</operator> <name><name>xenv</name><operator>-&gt;</operator><name>snake_cnt</name></name> <operator>&lt;=</operator> <name>i1</name> <operator>&amp;&amp;</operator> <name>i1</name> <operator>&lt;</operator> <name>lim1</name> <operator>&amp;&amp;</operator>
<name>off2</name> <operator>+</operator> <name><name>xenv</name><operator>-&gt;</operator><name>snake_cnt</name></name> <operator>&lt;=</operator> <name>i2</name> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;</operator> <name>lim2</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>ha1</name><index>[<expr><name>i1</name> <operator>-</operator> <name>k</name></expr>]</index></name> <operator>==</operator> <name><name>ha2</name><index>[<expr><name>i2</name> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name><name>xenv</name><operator>-&gt;</operator><name>snake_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i1</name></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i2</name></name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>best</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>min_lo</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>min_hi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ec</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>best</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <name>bmax</name></expr>;</init> <condition><expr><name>d</name> <operator>&gt;=</operator> <name>bmin</name></expr>;</condition> <incr><expr><name>d</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dd</name> <operator>=</operator> <ternary><condition><expr><name>d</name> <operator>&gt;</operator> <name>bmid</name></expr> ?</condition><then> <expr><name>d</name> <operator>-</operator> <name>bmid</name></expr></then><else>: <expr><name>bmid</name> <operator>-</operator> <name>d</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>kvdb</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <name>i1</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>lim1</name> <operator>-</operator> <name>i1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>lim2</name> <operator>-</operator> <name>i2</name><operator>)</operator> <operator>-</operator> <name>dd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>XDL_K_HEUR</name> <operator>*</operator> <name>ec</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;</operator> <name>best</name> <operator>&amp;&amp;</operator>
<name>off1</name> <operator>&lt;</operator> <name>i1</name> <operator>&amp;&amp;</operator> <name>i1</name> <operator>&lt;=</operator> <name>lim1</name> <operator>-</operator> <name><name>xenv</name><operator>-&gt;</operator><name>snake_cnt</name></name> <operator>&amp;&amp;</operator>
<name>off2</name> <operator>&lt;</operator> <name>i2</name> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;=</operator> <name>lim2</name> <operator>-</operator> <name><name>xenv</name><operator>-&gt;</operator><name>snake_cnt</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ha1</name><index>[<expr><name>i1</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>==</operator> <name><name>ha2</name><index>[<expr><name>i2</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name><name>xenv</name><operator>-&gt;</operator><name>snake_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i1</name></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i2</name></name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>best</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>min_lo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>min_hi</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>ec</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>&gt;=</operator> <name><name>xenv</name><operator>-&gt;</operator><name>mxcost</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>fbest</name></decl>, <decl><type ref="prev"/><name>fbest1</name></decl>, <decl><type ref="prev"/><name>bbest</name></decl>, <decl><type ref="prev"/><name>bbest1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fbest</name> <operator>=</operator> <name>fbest1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>fmax</name></expr>;</init> <condition><expr><name>d</name> <operator>&gt;=</operator> <name>fmin</name></expr>;</condition> <incr><expr><name>d</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <call><name>XDL_MIN</name><argument_list>(<argument><expr><name><name>kvdf</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name>lim1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <name>i1</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lim2</name> <operator>&lt;</operator> <name>i2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name>lim2</name> <operator>+</operator> <name>d</name></expr><operator>,</operator> <expr><name>i2</name> <operator>=</operator> <name>lim2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fbest</name> <operator>&lt;</operator> <name>i1</name> <operator>+</operator> <name>i2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fbest</name> <operator>=</operator> <name>i1</name> <operator>+</operator> <name>i2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fbest1</name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>bbest</name> <operator>=</operator> <name>bbest1</name> <operator>=</operator> <name>XDL_LINE_MAX</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>bmax</name></expr>;</init> <condition><expr><name>d</name> <operator>&gt;=</operator> <name>bmin</name></expr>;</condition> <incr><expr><name>d</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <call><name>XDL_MAX</name><argument_list>(<argument><expr><name>off1</name></expr></argument>, <argument><expr><name><name>kvdb</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <name>i1</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i2</name> <operator>&lt;</operator> <name>off2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name>off2</name> <operator>+</operator> <name>d</name></expr><operator>,</operator> <expr><name>i2</name> <operator>=</operator> <name>off2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i1</name> <operator>+</operator> <name>i2</name> <operator>&lt;</operator> <name>bbest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bbest</name> <operator>=</operator> <name>i1</name> <operator>+</operator> <name>i2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bbest1</name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lim1</name> <operator>+</operator> <name>lim2</name><operator>)</operator> <operator>-</operator> <name>bbest</name> <operator>&lt;</operator> <name>fbest</name> <operator>-</operator> <operator>(</operator><name>off1</name> <operator>+</operator> <name>off2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i1</name></name> <operator>=</operator> <name>fbest1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i2</name></name> <operator>=</operator> <name>fbest</name> <operator>-</operator> <name>fbest1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>min_lo</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>min_hi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i1</name></name> <operator>=</operator> <name>bbest1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>i2</name></name> <operator>=</operator> <name>bbest</name> <operator>-</operator> <name>bbest1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>min_lo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>-&gt;</operator><name>min_hi</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ec</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>xdl_recs_cmp</name><parameter_list>(<parameter><decl><type><name>diffdata_t</name> <modifier>*</modifier></type><name>dd1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>off1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lim1</name></decl></parameter>,
<parameter><decl><type><name>diffdata_t</name> <modifier>*</modifier></type><name>dd2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>off2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lim2</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>kvdf</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>kvdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_min</name></decl></parameter>, <parameter><decl><type><name>xdalgoenv_t</name> <modifier>*</modifier></type><name>xenv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ha1</name> <init>= <expr><name><name>dd1</name><operator>-&gt;</operator><name>ha</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ha2</name> <init>= <expr><name><name>dd2</name><operator>-&gt;</operator><name>ha</name></name></expr></init></decl>;</decl_stmt>




<for>for <control>(<init>;</init> <condition><expr><name>off1</name> <operator>&lt;</operator> <name>lim1</name> <operator>&amp;&amp;</operator> <name>off2</name> <operator>&lt;</operator> <name>lim2</name> <operator>&amp;&amp;</operator> <name><name>ha1</name><index>[<expr><name>off1</name></expr>]</index></name> <operator>==</operator> <name><name>ha2</name><index>[<expr><name>off2</name></expr>]</index></name></expr>;</condition> <incr><expr><name>off1</name><operator>++</operator></expr><operator>,</operator> <expr><name>off2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>off1</name> <operator>&lt;</operator> <name>lim1</name> <operator>&amp;&amp;</operator> <name>off2</name> <operator>&lt;</operator> <name>lim2</name> <operator>&amp;&amp;</operator> <name><name>ha1</name><index>[<expr><name>lim1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>ha2</name><index>[<expr><name>lim2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>lim1</name><operator>--</operator></expr><operator>,</operator> <expr><name>lim2</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>





<if_stmt><if>if <condition>(<expr><name>off1</name> <operator>==</operator> <name>lim1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rchg2</name> <init>= <expr><name><name>dd2</name><operator>-&gt;</operator><name>rchg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>rindex2</name> <init>= <expr><name><name>dd2</name><operator>-&gt;</operator><name>rindex</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>off2</name> <operator>&lt;</operator> <name>lim2</name></expr>;</condition> <incr><expr><name>off2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rchg2</name><index>[<expr><name><name>rindex2</name><index>[<expr><name>off2</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>off2</name> <operator>==</operator> <name>lim2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rchg1</name> <init>= <expr><name><name>dd1</name><operator>-&gt;</operator><name>rchg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>rindex1</name> <init>= <expr><name><name>dd1</name><operator>-&gt;</operator><name>rindex</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>off1</name> <operator>&lt;</operator> <name>lim1</name></expr>;</condition> <incr><expr><name>off1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rchg1</name><index>[<expr><name><name>rindex1</name><index>[<expr><name>off1</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>xdpsplit_t</name></type> <name>spl</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>spl</name><operator>.</operator><name>i1</name></name> <operator>=</operator> <name><name>spl</name><operator>.</operator><name>i2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>xdl_split</name><argument_list>(<argument><expr><name>ha1</name></expr></argument>, <argument><expr><name>off1</name></expr></argument>, <argument><expr><name>lim1</name></expr></argument>, <argument><expr><name>ha2</name></expr></argument>, <argument><expr><name>off2</name></expr></argument>, <argument><expr><name>lim2</name></expr></argument>, <argument><expr><name>kvdf</name></expr></argument>, <argument><expr><name>kvdb</name></expr></argument>,
<argument><expr><name>need_min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spl</name></expr></argument>, <argument><expr><name>xenv</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>xdl_recs_cmp</name><argument_list>(<argument><expr><name>dd1</name></expr></argument>, <argument><expr><name>off1</name></expr></argument>, <argument><expr><name><name>spl</name><operator>.</operator><name>i1</name></name></expr></argument>, <argument><expr><name>dd2</name></expr></argument>, <argument><expr><name>off2</name></expr></argument>, <argument><expr><name><name>spl</name><operator>.</operator><name>i2</name></name></expr></argument>,
<argument><expr><name>kvdf</name></expr></argument>, <argument><expr><name>kvdb</name></expr></argument>, <argument><expr><name><name>spl</name><operator>.</operator><name>min_lo</name></name></expr></argument>, <argument><expr><name>xenv</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>xdl_recs_cmp</name><argument_list>(<argument><expr><name>dd1</name></expr></argument>, <argument><expr><name><name>spl</name><operator>.</operator><name>i1</name></name></expr></argument>, <argument><expr><name>lim1</name></expr></argument>, <argument><expr><name>dd2</name></expr></argument>, <argument><expr><name><name>spl</name><operator>.</operator><name>i2</name></name></expr></argument>, <argument><expr><name>lim2</name></expr></argument>,
<argument><expr><name>kvdf</name></expr></argument>, <argument><expr><name>kvdb</name></expr></argument>, <argument><expr><name><name>spl</name><operator>.</operator><name>min_hi</name></name></expr></argument>, <argument><expr><name>xenv</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>xdl_do_diff</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf2</name></decl></parameter>, <parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>,
<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>ndiags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>kvd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kvdf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kvdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdalgoenv_t</name></type> <name>xenv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>diffdata_t</name></type> <name>dd1</name></decl>, <decl><type ref="prev"/><name>dd2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XDF_DIFF_ALG</name><argument_list>(<argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XDF_PATIENCE_DIFF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>xdl_do_patience_diff</name><argument_list>(<argument><expr><name>mf1</name></expr></argument>, <argument><expr><name>mf2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XDF_DIFF_ALG</name><argument_list>(<argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XDF_HISTOGRAM_DIFF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>xdl_do_histogram_diff</name><argument_list>(<argument><expr><name>mf1</name></expr></argument>, <argument><expr><name>mf2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_prepare_env</name><argument_list>(<argument><expr><name>mf1</name></expr></argument>, <argument><expr><name>mf2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>xe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>ndiags</name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nreff</name></name> <operator>+</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nreff</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>kvd</name> <operator>=</operator> <operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>ndiags</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>kvdf</name> <operator>=</operator> <name>kvd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kvdb</name> <operator>=</operator> <name>kvdf</name> <operator>+</operator> <name>ndiags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kvdf</name> <operator>+=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nreff</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kvdb</name> <operator>+=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nreff</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xenv</name><operator>.</operator><name>mxcost</name></name> <operator>=</operator> <call><name>xdl_bogosqrt</name><argument_list>(<argument><expr><name>ndiags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xenv</name><operator>.</operator><name>mxcost</name></name> <operator>&lt;</operator> <name>XDL_MAX_COST_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xenv</name><operator>.</operator><name>mxcost</name></name> <operator>=</operator> <name>XDL_MAX_COST_MIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xenv</name><operator>.</operator><name>snake_cnt</name></name> <operator>=</operator> <name>XDL_SNAKE_CNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xenv</name><operator>.</operator><name>heur_min</name></name> <operator>=</operator> <name>XDL_HEUR_MIN_COST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dd1</name><operator>.</operator><name>nrec</name></name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nreff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dd1</name><operator>.</operator><name>ha</name></name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>ha</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dd1</name><operator>.</operator><name>rchg</name></name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>rchg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dd1</name><operator>.</operator><name>rindex</name></name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>rindex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dd2</name><operator>.</operator><name>nrec</name></name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nreff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dd2</name><operator>.</operator><name>ha</name></name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>ha</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dd2</name><operator>.</operator><name>rchg</name></name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>rchg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dd2</name><operator>.</operator><name>rindex</name></name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>rindex</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_recs_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dd1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dd1</name><operator>.</operator><name>nrec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dd2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dd2</name><operator>.</operator><name>nrec</name></name></expr></argument>,
<argument><expr><name>kvdf</name></expr></argument>, <argument><expr><name>kvdb</name></expr></argument>, <argument><expr><operator>(</operator><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>XDF_NEED_MINIMAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>xenv</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>kvd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>kvd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>xdchange_t</name> <modifier>*</modifier></type><name>xdl_add_change</name><parameter_list>(<parameter><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xscr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>i1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>i2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>chg1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>chg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>xch</name> <operator>=</operator> <operator>(</operator><name>xdchange_t</name> <operator>*</operator><operator>)</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xdchange_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xch</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>xscr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xch</name><operator>-&gt;</operator><name>i2</name></name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xch</name><operator>-&gt;</operator><name>chg1</name></name> <operator>=</operator> <name>chg1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xch</name><operator>-&gt;</operator><name>chg2</name></name> <operator>=</operator> <name>chg2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xch</name><operator>-&gt;</operator><name>ignore</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>xch</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>recs_match</name><parameter_list>(<parameter><decl><type><name>xrecord_t</name> <modifier>*</modifier></type><name>rec1</name></decl></parameter>, <parameter><decl><type><name>xrecord_t</name> <modifier>*</modifier></type><name>rec2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>rec1</name><operator>-&gt;</operator><name>ha</name></name> <operator>==</operator> <name><name>rec2</name><operator>-&gt;</operator><name>ha</name></name> <operator>&amp;&amp;</operator>
<call><name>xdl_recmatch</name><argument_list>(<argument><expr><name><name>rec1</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>rec1</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name><name>rec2</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>rec2</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INDENT</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>int</name></type> <name>xget_indent</name><parameter_list>(<parameter><decl><type><name>xrecord_t</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>rec</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">8</literal> <operator>-</operator> <name>ret</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <name>MAX_INDENT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MAX_INDENT</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>


<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BLANKS</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>


<struct>struct <name>split_measurement</name> <block>{



<decl_stmt><decl><type><name>int</name></type> <name>end_of_file</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>indent</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>pre_blank</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>pre_indent</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>post_blank</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>post_indent</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>split_score</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>effective_indent</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>penalty</name></decl>;</decl_stmt>
}</block>;</struct>




<function><type><specifier>static</specifier> <name>void</name></type> <name>measure_split</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>split</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>split_measurement</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>split</name> <operator>&gt;=</operator> <name><name>xdf</name><operator>-&gt;</operator><name>nrec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>end_of_file</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>end_of_file</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <call><name>xget_indent</name><argument_list>(<argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>split</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pre_blank</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pre_indent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>split</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pre_indent</name></name> <operator>=</operator> <call><name>xget_indent</name><argument_list>(<argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>pre_indent</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pre_blank</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>pre_blank</name></name> <operator>==</operator> <name>MAX_BLANKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pre_indent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>post_blank</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>post_indent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>split</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xdf</name><operator>-&gt;</operator><name>nrec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>post_indent</name></name> <operator>=</operator> <call><name>xget_indent</name><argument_list>(<argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>post_indent</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>post_blank</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>post_blank</name></name> <operator>==</operator> <name>MAX_BLANKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>post_indent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_OF_FILE_PENALTY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_FILE_PENALTY</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOTAL_BLANK_WEIGHT</name></cpp:macro> <cpp:value>(-30)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POST_BLANK_WEIGHT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELATIVE_INDENT_PENALTY</name></cpp:macro> <cpp:value>(-4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELATIVE_INDENT_WITH_BLANK_PENALTY</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELATIVE_OUTDENT_PENALTY</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELATIVE_OUTDENT_WITH_BLANK_PENALTY</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELATIVE_DEDENT_PENALTY</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELATIVE_DEDENT_WITH_BLANK_PENALTY</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_WEIGHT</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_HEURISTIC_MAX_SLIDING</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>void</name></type> <name>score_add_split</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>split_measurement</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>split_score</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>post_blank</name></decl>, <decl><type ref="prev"/><name>total_blank</name></decl>, <decl><type ref="prev"/><name>indent</name></decl>, <decl><type ref="prev"/><name>any_blanks</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>pre_indent</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>pre_blank</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>penalty</name></name> <operator>+=</operator> <name>START_OF_FILE_PENALTY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>end_of_file</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>penalty</name></name> <operator>+=</operator> <name>END_OF_FILE_PENALTY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>post_blank</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>indent</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>post_blank</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>total_blank</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>pre_blank</name></name> <operator>+</operator> <name>post_blank</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>penalty</name></name> <operator>+=</operator> <name>TOTAL_BLANK_WEIGHT</name> <operator>*</operator> <name>total_blank</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>penalty</name></name> <operator>+=</operator> <name>POST_BLANK_WEIGHT</name> <operator>*</operator> <name>post_blank</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>indent</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>indent</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>post_indent</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>any_blanks</name> <operator>=</operator> <operator>(</operator><name>total_blank</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>effective_indent</name></name> <operator>+=</operator> <name>indent</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>indent</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>pre_indent</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>indent</name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>pre_indent</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>penalty</name></name> <operator>+=</operator> <ternary><condition><expr><name>any_blanks</name></expr> ?</condition><then>
<expr><name>RELATIVE_INDENT_WITH_BLANK_PENALTY</name></expr> </then><else>:
<expr><name>RELATIVE_INDENT_PENALTY</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>indent</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>pre_indent</name></name></expr>)</condition> <block>{<block_content>




</block_content>}</block></if> <else>else <block>{<block_content>







<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>post_indent</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>post_indent</name></name> <operator>&gt;</operator> <name>indent</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>penalty</name></name> <operator>+=</operator> <ternary><condition><expr><name>any_blanks</name></expr> ?</condition><then>
<expr><name>RELATIVE_OUTDENT_WITH_BLANK_PENALTY</name></expr> </then><else>:
<expr><name>RELATIVE_OUTDENT_PENALTY</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>penalty</name></name> <operator>+=</operator> <ternary><condition><expr><name>any_blanks</name></expr> ?</condition><then>
<expr><name>RELATIVE_DEDENT_WITH_BLANK_PENALTY</name></expr> </then><else>:
<expr><name>RELATIVE_DEDENT_PENALTY</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>score_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>split_score</name></name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>split_score</name></name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp_indents</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>s1</name><operator>-&gt;</operator><name>effective_indent</name></name> <operator>&gt;</operator> <name><name>s2</name><operator>-&gt;</operator><name>effective_indent</name></name><operator>)</operator> <operator>-</operator>
<operator>(</operator><name><name>s1</name><operator>-&gt;</operator><name>effective_indent</name></name> <operator>&lt;</operator> <name><name>s2</name><operator>-&gt;</operator><name>effective_indent</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><name>INDENT_WEIGHT</name> <operator>*</operator> <name>cmp_indents</name> <operator>+</operator> <operator>(</operator><name><name>s1</name><operator>-&gt;</operator><name>penalty</name></name> <operator>-</operator> <name><name>s2</name><operator>-&gt;</operator><name>penalty</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
















<struct>struct <name>xdlgroup</name> <block>{




<decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>long</name></type> <name>end</name></decl>;</decl_stmt>
}</block>;</struct>




<function><type><specifier>static</specifier> <name>void</name></type> <name>group_init</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xdlgroup</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>xdf</name><operator>-&gt;</operator><name>rchg</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>group_next</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xdlgroup</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <name><name>xdf</name><operator>-&gt;</operator><name>nrec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>start</name></name></expr>;</init> <condition><expr><name><name>xdf</name><operator>-&gt;</operator><name>rchg</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name></expr>]</index></name></expr>;</condition> <incr><expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>group_previous</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xdlgroup</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>end</name></name></expr>;</init> <condition><expr><name><name>xdf</name><operator>-&gt;</operator><name>rchg</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>group_slide_down</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xdlgroup</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;</operator> <name><name>xdf</name><operator>-&gt;</operator><name>nrec</name></name> <operator>&amp;&amp;</operator>
<call><name>recs_match</name><argument_list>(<argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>rchg</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>rchg</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>xdf</name><operator>-&gt;</operator><name>rchg</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>group_slide_up</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xdlgroup</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>recs_match</name><argument_list>(<argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>rchg</name><index>[<expr><operator>--</operator><name><name>g</name><operator>-&gt;</operator><name>start</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>rchg</name><index>[<expr><operator>--</operator><name><name>g</name><operator>-&gt;</operator><name>end</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>xdf</name><operator>-&gt;</operator><name>rchg</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>start</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdl_bug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"BUG: %s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>xdl_change_compact</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdfo</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xdlgroup</name></name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>go</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>earliest_end</name></decl>, <decl><type ref="prev"/><name>end_matching_other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>groupsize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>group_init</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>group_init</name><argument_list>(<argument><expr><name>xdfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>go</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>end</name></name> <operator>==</operator> <name><name>g</name><operator>.</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>





<do>do <block>{<block_content>
<expr_stmt><expr><name>groupsize</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>g</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>







<expr_stmt><expr><name>end_matching_other</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>!</operator><call><name>group_slide_up</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>group_previous</name><argument_list>(<argument><expr><name>xdfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>go</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdl_bug</name><argument_list>(<argument><expr><literal type="string">"group sync broken sliding up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>





<expr_stmt><expr><name>earliest_end</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>end</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>go</name><operator>.</operator><name>end</name></name> <operator>&gt;</operator> <name><name>go</name><operator>.</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_matching_other</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>end</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>group_slide_down</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>group_next</name><argument_list>(<argument><expr><name>xdfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>go</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdl_bug</name><argument_list>(<argument><expr><literal type="string">"group sync broken sliding down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>go</name><operator>.</operator><name>end</name></name> <operator>&gt;</operator> <name><name>go</name><operator>.</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_matching_other</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>end</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>groupsize</name> <operator>!=</operator> <name><name>g</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>g</name><operator>.</operator><name>start</name></name></expr>)</condition>;</do>









<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>end</name></name> <operator>==</operator> <name>earliest_end</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end_matching_other</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<while>while <condition>(<expr><name><name>go</name><operator>.</operator><name>end</name></name> <operator>==</operator> <name><name>go</name><operator>.</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>group_slide_up</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdl_bug</name><argument_list>(<argument><expr><literal type="string">"match disappeared"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>group_previous</name><argument_list>(<argument><expr><name>xdfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>go</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdl_bug</name><argument_list>(<argument><expr><literal type="string">"group sync broken sliding to match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XDF_INDENT_HEURISTIC</name></expr>)</condition> <block>{<block_content>











<decl_stmt><decl><type><name>long</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>best_shift</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>split_score</name></name></type> <name>best_score</name></decl>;</decl_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>earliest_end</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name>groupsize</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>shift</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name>groupsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name>INDENT_HEURISTIC_MAX_SLIDING</name> <operator>&gt;</operator> <name>shift</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name>INDENT_HEURISTIC_MAX_SLIDING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>shift</name> <operator>&lt;=</operator> <name><name>g</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><name>shift</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>split_measurement</name></name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>split_score</name></name></type> <name>score</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>measure_split</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>score_add_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>measure_split</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><name>shift</name> <operator>-</operator> <name>groupsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>score_add_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>best_shift</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name>score_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>score</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_score</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>best_score</name><operator>.</operator><name>effective_indent</name></name> <operator>=</operator> <name><name>score</name><operator>.</operator><name>effective_indent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>best_score</name><operator>.</operator><name>penalty</name></name> <operator>=</operator> <name><name>score</name><operator>.</operator><name>penalty</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_shift</name> <operator>=</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name><name>g</name><operator>.</operator><name>end</name></name> <operator>&gt;</operator> <name>best_shift</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>group_slide_up</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdl_bug</name><argument_list>(<argument><expr><literal type="string">"best shift unreached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>group_previous</name><argument_list>(<argument><expr><name>xdfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>go</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdl_bug</name><argument_list>(<argument><expr><literal type="string">"group sync broken sliding to blank line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<label><name>next</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>group_next</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>group_next</name><argument_list>(<argument><expr><name>xdfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>go</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdl_bug</name><argument_list>(<argument><expr><literal type="string">"group sync broken moving to next group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>group_next</name><argument_list>(<argument><expr><name>xdfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>go</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdl_bug</name><argument_list>(<argument><expr><literal type="string">"group sync broken at end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>xdl_build_script</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>, <parameter><decl><type><name>xdchange_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xscr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>cscr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rchg1</name> <init>= <expr><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>rchg</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rchg2</name> <init>= <expr><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>rchg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>, <decl><type ref="prev"/><name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i1</name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name></expr><operator>,</operator> <expr><name>i2</name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nrec</name></name></expr>;</init> <condition><expr><name>i1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i1</name><operator>--</operator></expr><operator>,</operator> <expr><name>i2</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>rchg1</name><index>[<expr><name>i1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>rchg2</name><index>[<expr><name>i2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>l1</name> <operator>=</operator> <name>i1</name></expr>;</init> <condition><expr><name><name>rchg1</name><index>[<expr><name>i1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i1</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>l2</name> <operator>=</operator> <name>i2</name></expr>;</init> <condition><expr><name><name>rchg2</name><index>[<expr><name>i2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i2</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>xch</name> <operator>=</operator> <call><name>xdl_add_change</name><argument_list>(<argument><expr><name>cscr</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>l1</name> <operator>-</operator> <name>i1</name></expr></argument>, <argument><expr><name>l2</name> <operator>-</operator> <name>i2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xdl_free_script</name><argument_list>(<argument><expr><name>cscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cscr</name> <operator>=</operator> <name>xch</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>xscr</name> <operator>=</operator> <name>cscr</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>xdl_free_script</name><parameter_list>(<parameter><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xscr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xch</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>xch</name> <operator>=</operator> <name>xscr</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xscr</name> <operator>=</operator> <name><name>xscr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>xch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_call_hunk_func</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier><name>xe</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xscr</name></decl></parameter>, <parameter><decl><type><name>xdemitcb_t</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>,
<parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xch</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xche</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xch</name> <operator>=</operator> <name>xscr</name></expr>;</init> <condition><expr><name>xch</name></expr>;</condition> <incr><expr><name>xch</name> <operator>=</operator> <name><name>xche</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>xche</name> <operator>=</operator> <call><name>xdl_get_hunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xch</name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xch</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>xecfg</name><operator>-&gt;</operator><name>hunk_func</name></name><argument_list>(<argument><expr><name><name>xch</name><operator>-&gt;</operator><name>i1</name></name></expr></argument>, <argument><expr><name><name>xche</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg1</name></name> <operator>-</operator> <name><name>xch</name><operator>-&gt;</operator><name>i1</name></name></expr></argument>,
<argument><expr><name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr></argument>, <argument><expr><name><name>xche</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg2</name></name> <operator>-</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr></argument>,
<argument><expr><name><name>ecb</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdl_mark_ignorable</name><parameter_list>(<parameter><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xscr</name></decl></parameter>, <parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xch</name> <operator>=</operator> <name>xscr</name></expr>;</init> <condition><expr><name>xch</name></expr>;</condition> <incr><expr><name>xch</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ignore</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>recs</name><index>[<expr><name><name>xch</name><operator>-&gt;</operator><name>i1</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg1</name></name> <operator>&amp;&amp;</operator> <name>ignore</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>ignore</name> <operator>=</operator> <call><name>xdl_blankline</name><argument_list>(<argument><expr><name><name>rec</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>rec</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg2</name></name> <operator>&amp;&amp;</operator> <name>ignore</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>ignore</name> <operator>=</operator> <call><name>xdl_blankline</name><argument_list>(<argument><expr><name><name>rec</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>rec</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>xch</name><operator>-&gt;</operator><name>ignore</name></name> <operator>=</operator> <name>ignore</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdl_diff</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf2</name></decl></parameter>, <parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>,
<parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>, <parameter><decl><type><name>xdemitcb_t</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xscr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdfenv_t</name></type> <name>xe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>emit_func_t</name></type> <name>ef</name> <init>= <expr><ternary><condition><expr><name><name>xecfg</name><operator>-&gt;</operator><name>hunk_func</name></name></expr> ?</condition><then> <expr><name>xdl_call_hunk_func</name></expr> </then><else>: <expr><name>xdl_emit_diff</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_do_diff</name><argument_list>(<argument><expr><name>mf1</name></expr></argument>, <argument><expr><name>mf2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xdl_change_compact</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>.</operator><name>xdf1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe</name><operator>.</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>xdl_change_compact</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>.</operator><name>xdf2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe</name><operator>.</operator><name>xdf1</name></name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>xdl_build_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xscr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xscr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>XDF_IGNORE_BLANK_LINES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdl_mark_ignorable</name><argument_list>(<argument><expr><name>xscr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ef</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>, <argument><expr><name>xscr</name></expr></argument>, <argument><expr><name>ecb</name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_script</name><argument_list>(<argument><expr><name>xscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xdl_free_script</name><argument_list>(<argument><expr><name>xscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
