<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\window.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cmd_with_count</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bufp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>Prenum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_init</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_init_some</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_comp_pos</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_setheight</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>curfrp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_setwidth</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>curfrp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_exchange</name><parameter_list>(<parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_rotate</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_totop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_equal_rec</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>next_curwin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>win_free_mem</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dirp</name></decl></parameter>, <parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>frame_T</name> <modifier>*</modifier></type><name>win_altframe</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>tabpage_T</name> <modifier>*</modifier></type><name>alt_tabpage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>frame2win</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>frame_has_win</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_new_height</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>topfirst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wfh</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>frame_fixed_height</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>frame_fixed_width</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_add_statusline</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_new_width</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leftfirst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wfw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_add_vsep</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>frame_minwidth</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>next_curwin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_fix_width</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win_alloc_firstwin</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>oldwin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>new_frame</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>tabpage_T</name> <modifier>*</modifier></type><name>alloc_tabpage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>leave_tabpage</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>new_curbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trigger_leave_autocmds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>enter_tabpage</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_curbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trigger_enter_autocmds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trigger_leave_autocmds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_fix_height</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>frame_minheight</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>next_curwin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>may_open_tabpage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_enter_ext</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>undo_sync</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>no_curwin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trigger_new_autocmds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trigger_enter_autocmds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trigger_leave_autocmds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_free</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win_unlisted</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_append</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>after</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_append</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>after</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_insert</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>before</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_remove</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_goto_ver</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_goto_hor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>frame_add_height</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>last_status_rec</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>statusline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>make_snapshot_rec</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clear_snapshot</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clear_snapshot_rec</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_snapshot_rec</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>sn</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>restore_snapshot_rec</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>sn</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>frame_check_height</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>frame_check_width</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>win_alloc</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>after</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hidden</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOWIN</name></cpp:macro> <cpp:value>(win_T *)-1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROWS_AVAIL</name></cpp:macro> <cpp:value>(Rows - p_ch - tabline_height())</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>m_onlyone</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Already only one window"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>split_disallowed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_frame_layout</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"layout %s, wi: %d, he: %d, wwi: %d, whe: %d, id: %d"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr> ?</condition><then> <expr><literal type="string">"LEAF"</literal></expr>
</then><else>: <expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr> ?</condition><then> <expr><literal type="string">"ROW"</literal></expr> </then><else>: <expr><literal type="string">"COL"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>fr_width</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>fr_height</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_width</name></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_height</name></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_id</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"children"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_frame_layout</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>fr_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"END of children"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>log_frame_layout</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>fr_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>do_window</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>nchar</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>Prenum</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xchar</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>Prenum1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>FIND_DEFINE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>cbuf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_IF_ANY_POPUP_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CMDWIN</name></cpp:macro> <cpp:value>do { if (cmdwin_type != 0) { emsg(_(e_cmdwin)); return; } } while (0)</cpp:value></cpp:define>







<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CMDWIN</name></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>Prenum1</name> <operator>=</operator> <ternary><condition><expr><name>Prenum</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>Prenum</name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>nchar</name></expr>)</condition>
<block>{<block_content>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<case>case <expr><name>Ctrl_S</name></expr>:</case>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>bt_quickfix</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>newwindow</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_split</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Prenum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>Ctrl_V</name></expr>:</case>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>bt_quickfix</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>newwindow</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_split</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Prenum</name></expr></argument>, <argument><expr><name>WSP_VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>Ctrl_HAT</name></expr>:</case>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>buflist_findnr</name><argument_list>(<argument><expr><ternary><condition><expr><name>Prenum</name> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alt_fnum</name></name></expr> </then><else>: <expr><name>Prenum</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Prenum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noalt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E92: Buffer %ld not found"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Prenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>curbuf_locked</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>win_split</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buflist_getfile</name><argument_list>(
<argument><expr><ternary><condition><expr><name>Prenum</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alt_fnum</name></name></expr> </then><else>: <expr><name>Prenum</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>GETF_ALT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>Ctrl_N</name></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>newwindow</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>Prenum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>Prenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>nchar</name> <operator>==</operator> <literal type="char">'v'</literal> <operator>||</operator> <name>nchar</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>Ctrl_Q</name></expr>:</case>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>cmd_with_count</name><argument_list>(<argument><expr><literal type="string">"quit"</literal></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>Prenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>Ctrl_C</name></expr>:</case>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>cmd_with_count</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>Prenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>Ctrl_Z</name></expr>:</case>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"pclose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E441: There is no preview window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<case>case <expr><name>Ctrl_O</name></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>cmd_with_count</name><argument_list>(<argument><expr><literal type="string">"only"</literal></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>Prenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>Ctrl_W</name></expr>:</case>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ONE_WINDOW</name> <operator>&amp;&amp;</operator> <name>Prenum</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Prenum</name></expr>)</condition> 
<block>{<block_content>
<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</init> <condition><expr><operator>--</operator><name>Prenum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nchar</name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_prev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>lastwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<case>case <expr><name>K_DOWN</name></expr>:</case>
<case>case <expr><name>Ctrl_J</name></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_goto_ver</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<case>case <expr><name>K_UP</name></expr>:</case>
<case>case <expr><name>Ctrl_K</name></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_goto_ver</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><name>K_LEFT</name></expr>:</case>
<case>case <expr><name>Ctrl_H</name></expr>:</case>
<case>case <expr><name>K_BS</name></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_goto_hor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><name>K_RIGHT</name></expr>:</case>
<case>case <expr><name>Ctrl_L</name></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_goto_hor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>one_window</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>m_onlyone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>oldtab</name> <init>= <expr><name>curtab</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>newtab</name></decl>;</decl_stmt>



<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_new_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Prenum</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>
<operator>&amp;&amp;</operator> <call><name>valid_tabpage</name><argument_list>(<argument><expr><name>oldtab</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>newtab</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>oldtab</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>wp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_close</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>valid_tabpage</name><argument_list>(<argument><expr><name>newtab</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>newtab</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<case>case <expr><name>Ctrl_T</name></expr>:</case>
<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>firstwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><name>Ctrl_B</name></expr>:</case>
<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>lastwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<case>case <expr><name>Ctrl_P</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>prevwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>prevwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><name>Ctrl_X</name></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_exchange</name><argument_list>(<argument><expr><name>Prenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>Ctrl_R</name></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>win_rotate</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>


<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>win_rotate</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>


<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_totop</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Prenum</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>nchar</name> <operator>==</operator> <literal type="char">'H'</literal> <operator>||</operator> <name>nchar</name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>WSP_VERT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>nchar</name> <operator>==</operator> <literal type="char">'H'</literal> <operator>||</operator> <name>nchar</name> <operator>==</operator> <literal type="char">'K'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>WSP_TOP</name></expr> </then><else>: <expr><name>WSP_BOT</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'='</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>win_equal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>Ctrl__</name></expr>:</case>
<case>case <expr><literal type="char">'_'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><ternary><condition><expr><name>Prenum</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>Prenum</name></expr> </then><else>: <expr><literal type="number">9999</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>win_setwidth</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>win_setwidth</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'|'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>win_setwidth</name><argument_list>(<argument><expr><ternary><condition><expr><name>Prenum</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>Prenum</name></expr> </then><else>: <expr><literal type="number">9999</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'}'</literal></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Prenum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g_do_tagpreview</name> <operator>=</operator> <name>Prenum</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>g_do_tagpreview</name> <operator>=</operator> <name>p_pvh</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">']'</literal></expr>:</case>
<case>case <expr><name>Ctrl_RSB</name></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Prenum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>postponed_split</name> <operator>=</operator> <name>Prenum</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>postponed_split</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>nchar</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g_do_tagpreview</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>do_nv_ident</name><argument_list>(<argument><expr><name>Ctrl_RSB</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<case>case <expr><name>Ctrl_F</name></expr>:</case>
<label><name>wingotofile</name>:</label>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>grab_file_name</name><argument_list>(<argument><expr><name>Prenum1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>oldtab</name> <init>= <expr><name>curtab</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>oldwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_split</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RESET_BINDING</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>do_ecmd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ECMD_LASTL</name></expr></argument>,
<argument><expr><name>ECMD_HIDE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>win_close</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>goto_tabpage_win</name><argument_list>(<argument><expr><name>oldtab</name></expr></argument>, <argument><expr><name>oldwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>nchar</name> <operator>==</operator> <literal type="char">'F'</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_cursor_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>


<case>case <expr><literal type="char">'i'</literal></expr>:</case> 
<case>case <expr><name>Ctrl_I</name></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FIND_ANY</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 
<case>case <expr><name>Ctrl_D</name></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>find_ident_under_cursor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>FIND_IDENT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>find_pattern_in_path</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>Prenum</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name>Prenum1</name></expr></argument>, <argument><expr><name>ACTION_SPLIT</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>K_KENTER</name></expr>:</case>
<case>case <expr><name>CAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>bt_quickfix</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qf_view_result</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><name>Ctrl_G</name></expr>:</case>
<expr_stmt><expr><name>CHECK_CMDWIN</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>xchar</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xchar</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><name>xchar</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>add_to_showcmd</name><argument_list>(<argument><expr><name>xchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>xchar</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'}'</literal></expr>:</case>
<expr_stmt><expr><name>xchar</name> <operator>=</operator> <name>Ctrl_RSB</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Prenum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g_do_tagpreview</name> <operator>=</operator> <name>Prenum</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>g_do_tagpreview</name> <operator>=</operator> <name>p_pvh</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">']'</literal></expr>:</case>
<case>case <expr><name>Ctrl_RSB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>Prenum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>postponed_split</name> <operator>=</operator> <name>Prenum</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>postponed_split</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



<expr_stmt><expr><call><name>do_nv_ident</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><name>xchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> 
<case>case <expr><literal type="char">'F'</literal></expr>:</case> 
<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>tab</name></name> <operator>=</operator> <call><name>tabpage_index</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nchar</name> <operator>=</operator> <name>xchar</name></expr>;</expr_stmt>
<goto>goto <name>wingotofile</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> 
<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Prenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case> 
<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>get_wincmd_addr_type</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>arg</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<case>case <expr><name>Ctrl_S</name></expr>:</case>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><name>Ctrl_N</name></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<case>case <expr><name>Ctrl_J</name></expr>:</case>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<case>case <expr><name>Ctrl_K</name></expr>:</case>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<case>case <expr><name>Ctrl_R</name></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<case>case <expr><name>Ctrl__</name></expr>:</case>
<case>case <expr><literal type="char">'_'</literal></expr>:</case>
<case>case <expr><literal type="char">'|'</literal></expr>:</case>
<case>case <expr><literal type="char">']'</literal></expr>:</case>
<case>case <expr><name>Ctrl_RSB</name></expr>:</case>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><name>Ctrl_G</name></expr>:</case>
<case>case <expr><name>Ctrl_V</name></expr>:</case>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><name>Ctrl_H</name></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><name>Ctrl_L</name></expr>:</case>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'}'</literal></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<case>case <expr><name>Ctrl_F</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><name>Ctrl_I</name></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><name>Ctrl_D</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>=</operator> <name>ADDR_OTHER</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Ctrl_HAT</name></expr>:</case>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>=</operator> <name>ADDR_BUFFERS</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>Ctrl_Q</name></expr>:</case>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<case>case <expr><name>Ctrl_C</name></expr>:</case>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<case>case <expr><name>Ctrl_O</name></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<case>case <expr><name>Ctrl_W</name></expr>:</case>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><name>Ctrl_X</name></expr>:</case>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>=</operator> <name>ADDR_WINDOWS</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>Ctrl_Z</name></expr>:</case>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<case>case <expr><name>Ctrl_T</name></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><name>Ctrl_B</name></expr>:</case>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<case>case <expr><name>Ctrl_P</name></expr>:</case>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<case>case <expr><name>CAR</name></expr>:</case>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>addr_type</name></name> <operator>=</operator> <name>ADDR_NONE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmd_with_count</name><parameter_list>(
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bufp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>Prenum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>bufp</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Prenum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>bufp</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufsize</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>Prenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_split_disallowed</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>split_disallowed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E242: Can't split a window while closing another"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>int</name></type>
<name>win_split</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ERROR_IF_ANY_POPUP_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>may_open_tabpage</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name><name>cmdmod</name><operator>.</operator><name>split</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_TOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_BOT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E442: Can't split topleft and botright at the same time"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_split_disallowed</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_HELP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>make_snapshot</name><argument_list>(<argument><expr><name>SNAP_HELP_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_snapshot</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>, <argument><expr><name>SNAP_HELP_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>win_split_ins</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>win_split_ins</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>new_wp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>new_wp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>oldwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_equal</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldwin_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>layout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>curfrp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>frp2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prevfrp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>before</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minheight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wmh1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_set_fraction</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_TOP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>oldwin</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_BOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>oldwin</name> <operator>=</operator> <name>lastwin</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>oldwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ONE_WINDOW</name> <operator>&amp;&amp;</operator> <name>p_ls</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VISIBLE_HEIGHT</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>p_wmh</name> <operator>&amp;&amp;</operator> <name>new_wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noroom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>need_status</name> <operator>=</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_VERT</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wmw1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minwidth</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <name>FR_ROW</name></expr>;</expr_stmt>






<expr_stmt><expr><name>wmw1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>p_wmw</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>p_wmw</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> <operator>=</operator> <name>wmw1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_ROOM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>needed</name> <operator>+=</operator> <name>p_wiw</name> <operator>-</operator> <name>wmw1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>WSP_BOT</name> <operator>|</operator> <name>WSP_TOP</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>minwidth</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>available</name> <operator>=</operator> <name><name>topframe</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> <operator>+=</operator> <name>minwidth</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>p_ea</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>minwidth</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prevfrp</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>frp</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</init> <condition><expr><name>frp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp2</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>frp2</name> <operator>!=</operator> <name>prevfrp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minwidth</name> <operator>+=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>frp2</name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prevfrp</name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>available</name> <operator>=</operator> <name><name>topframe</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> <operator>+=</operator> <name>minwidth</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>minwidth</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>available</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> <operator>+=</operator> <name>minwidth</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>available</name> <operator>&lt;</operator> <name>needed</name> <operator>&amp;&amp;</operator> <name>new_wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noroom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <name>available</name> <operator>-</operator> <name>minwidth</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>available</name> <operator>-</operator> <name>minwidth</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&lt;</operator> <name>wmw1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>wmw1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>new_size</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>p_wmw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_equal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_p_wfw</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_setwidth_win</name><argument_list>(<argument><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <name>new_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>oldwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_equal</name> <operator>&amp;&amp;</operator> <name>p_ea</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_ead</name> <operator>!=</operator> <literal type="char">'v'</literal>
<operator>&amp;&amp;</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>oldwin</name> <operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&gt;</operator> <name>new_size</name>
<operator>||</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&gt;</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_width</name></name>
<operator>-</operator> <name>new_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>do_equal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>layout</name> <operator>=</operator> <name>FR_COL</name></expr>;</expr_stmt>






<expr_stmt><expr><name>wmh1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>p_wmh</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>p_wmh</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>WINBAR_HEIGHT</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> <operator>=</operator> <name>wmh1</name> <operator>+</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_ROOM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>needed</name> <operator>+=</operator> <name>p_wh</name> <operator>-</operator> <name>wmh1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>WSP_BOT</name> <operator>|</operator> <name>WSP_TOP</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>minheight</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>need_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name>available</name> <operator>=</operator> <name><name>topframe</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> <operator>+=</operator> <name>minheight</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>p_ea</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>minheight</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>need_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevfrp</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>frp</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</init> <condition><expr><name>frp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp2</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>frp2</name> <operator>!=</operator> <name>prevfrp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minheight</name> <operator>+=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>frp2</name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prevfrp</name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>available</name> <operator>=</operator> <name><name>topframe</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> <operator>+=</operator> <name>minheight</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>minheight</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>need_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name>available</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> <operator>+=</operator> <name>minheight</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>available</name> <operator>&lt;</operator> <name>needed</name> <operator>&amp;&amp;</operator> <name>new_wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noroom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>oldwin_height</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_status</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oldwin_height</name> <operator>-=</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>oldwin_height</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <name>available</name> <operator>-</operator> <name>minheight</name> <operator>-</operator> <name>STATUS_HEIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>available</name> <operator>-</operator> <name>minheight</name> <operator>-</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&lt;</operator> <name>wmh1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>wmh1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>oldwin_height</name> <operator>-</operator> <name>new_size</name> <operator>-</operator> <name>STATUS_HEIGHT</name> <operator>&lt;</operator> <name>p_wmh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_equal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_p_wfh</name></name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>set_fraction</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_set_fraction</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_setheight_win</name><argument_list>(<argument><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name>new_size</name> <operator>+</operator> <name>STATUS_HEIGHT</name></expr></argument>,
<argument><expr><name>oldwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oldwin_height</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_status</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>oldwin_height</name> <operator>-=</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_equal</name> <operator>&amp;&amp;</operator> <name>p_ea</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_ead</name> <operator>!=</operator> <literal type="char">'h'</literal>
<operator>&amp;&amp;</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>oldwin</name> <operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;</operator> <name>new_size</name>
<operator>||</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;</operator> <name>oldwin_height</name> <operator>-</operator> <name>new_size</name>
<operator>-</operator> <name>STATUS_HEIGHT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>do_equal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_TOP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_BOT</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_BELOW</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_ABOVE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_VERT</name><operator>)</operator></expr> ?</condition><then> <expr><name>p_spr</name></expr> </then><else>: <expr><name>p_sb</name></expr></else></ternary><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>win_alloc</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_append</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>win_alloc</name><argument_list>(<argument><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_prev</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_append</name><argument_list>(<argument><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_prev</name></name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>new_frame</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>win_init</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>WSP_TOP</name> <operator>|</operator> <name>WSP_BOT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>topframe</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_VERT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>topframe</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_VERT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curfrp</name> <operator>=</operator> <name><name>topframe</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_BOT</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curfrp</name> <operator>=</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>curfrp</name> <operator>=</operator> <name>topframe</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>before</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_TOP</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>curfrp</name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_BELOW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>before</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_ABOVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>before</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_VERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>before</name> <operator>=</operator> <operator>!</operator><name>p_spr</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>before</name> <operator>=</operator> <operator>!</operator><name>p_sb</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>!=</operator> <name>layout</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>frp</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>frame_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>frp</name> <operator>=</operator> <operator>*</operator><name>curfrp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>=</operator> <name>layout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>=</operator> <name>curfrp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curfrp</name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_frame</name></name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>=</operator> <name>curfrp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>new_wp</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>=</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>before</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>frame_insert</name><argument_list>(<argument><expr><name>curfrp</name></expr></argument>, <argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>frame_append</name><argument_list>(<argument><expr><name>curfrp</name></expr></argument>, <argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_set_fraction</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_fraction</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_fraction</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_fraction</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_VERT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_status</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_new_height</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>, <argument><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name>need_status</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>WSP_TOP</name> <operator>|</operator> <name>WSP_BOT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <call><name>tabline_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_new_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <operator>(</operator><name>p_ls</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
<operator>-</operator> <call><name>WINBAR_HEIGHT</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <operator>(</operator><name>p_ls</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_new_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><call><name>VISIBLE_HEIGHT</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>=</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>win_new_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>before</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>WSP_TOP</name> <operator>|</operator> <name>WSP_BOT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_BOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>frame_add_vsep</name><argument_list>(<argument><expr><name>curfrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>curfrp</name></expr></argument>, <argument><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_width</name></name>
<operator>-</operator> <operator>(</operator><name>new_size</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_TOP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>WSP_TOP</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_new_width</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>, <argument><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <operator>(</operator><name>new_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>before</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+=</operator> <name>new_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>frame_fix_width</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_fix_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>WSP_TOP</name> <operator>|</operator> <name>WSP_BOT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_new_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_new_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>=</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>win_new_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>WSP_TOP</name> <operator>|</operator> <name>WSP_BOT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_fr_height</name> <init>= <expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <name>new_size</name>
<operator>+</operator> <call><name>WINBAR_HEIGHT</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_BOT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>p_ls</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_fr_height</name> <operator>-=</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>curfrp</name></expr></argument>, <argument><expr><name>new_fr_height</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>WSP_TOP</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_new_height</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>, <argument><expr><name>oldwin_height</name> <operator>-</operator> <operator>(</operator><name>new_size</name> <operator>+</operator> <name>STATUS_HEIGHT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>before</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <call><name>VISIBLE_HEIGHT</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_BOT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_BOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>frame_add_statusline</name><argument_list>(<argument><expr><name>curfrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>frame_fix_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_fix_height</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>WSP_TOP</name> <operator>|</operator> <name>WSP_BOT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oldwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_status</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>sc_col</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos_force</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>do_equal</name> <operator>||</operator> <name>dir</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_equal</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_VERT</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <literal type="char">'v'</literal></expr> ?</condition><then> <expr><literal type="char">'b'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary><operator>)</operator></expr>
</then><else>: <expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <literal type="char">'h'</literal></expr> ?</condition><then> <expr><literal type="char">'b'</literal></expr> </then><else>: <expr><literal type="char">'v'</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_VERT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>p_wiw</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_wiw</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_init_which_components</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>p_wh</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_wh</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_changelistidx</name></name> <operator>=</operator> <name><name>oldwin</name><operator>-&gt;</operator><name>w_changelistidx</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><call><name>win_enter_ext</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_VERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_wiw</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_wh</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_init</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>flags</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_s</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>oldp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_s</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>oldp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_nwindows</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_set_curswant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_pcmark</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_pcmark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_prev_pcmark</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_prev_pcmark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_alt_fnum</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_alt_fnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_fraction</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_fraction</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_prev_fraction_row</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_prev_fraction_row</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>copy_jumplist</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>WSP_NEWLOC</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_llist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_llist_ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_loclist_stack</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_localdir</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>oldp</name><operator>-&gt;</operator><name>w_localdir</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>oldp</name><operator>-&gt;</operator><name>w_localdir</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_tagstacklen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>taggy_T</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><operator>&amp;</operator><name><name>newp</name><operator>-&gt;</operator><name>w_tagstack</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_tagstack</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tag</name><operator>-&gt;</operator><name>tagname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>tagname</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>tagname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tag</name><operator>-&gt;</operator><name>user_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_tagstackidx</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_tagstackidx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_tagstacklen</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_tagstacklen</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>copyFoldingState</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>win_init_some</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_colorcolumn</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_init_some</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_alist</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>newp</name><operator>-&gt;</operator><name>w_alist</name><operator>-&gt;</operator><name>al_refcount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <name><name>oldp</name><operator>-&gt;</operator><name>w_arg_idx</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>win_copy_options</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>win_valid_popup</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier><name>win</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_POPUPWINS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>win</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<macro><name>FOR_ALL_POPUPWINS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>win</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>win_valid</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>win</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>win_valid_popup</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>win_valid_any_tab</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>win</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FOR_ALL_POPUPWINS_IN_TAB</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>win</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<return>return <expr><call><name>win_valid_popup</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>win_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FOR_ALL_WINDOWS</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>++</operator><name>count</name></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>make_windows</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>int</name> <name>vertical</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>maxcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vertical</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>maxcount</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_vsep_width</name></name>
<operator>-</operator> <operator>(</operator><name>p_wiw</name> <operator>-</operator> <name>p_wmw</name><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>p_wmw</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>maxcount</name> <operator>=</operator> <operator>(</operator><call><name>VISIBLE_HEIGHT</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_status_height</name></name>
<operator>-</operator> <operator>(</operator><name>p_wh</name> <operator>-</operator> <name>p_wmh</name><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>p_wmh</name> <operator>+</operator> <name>STATUS_HEIGHT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>maxcount</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxcount</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>maxcount</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>maxcount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>todo</name> <operator>=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>todo</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>vertical</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>win_split</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>todo</name><operator>)</operator>
<operator>/</operator> <operator>(</operator><name>todo</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>WSP_VERT</name> <operator>|</operator> <name>WSP_ABOVE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>win_split</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>todo</name>
<operator>*</operator> <name>STATUS_HEIGHT</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>todo</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator>
<operator>-</operator> <name>STATUS_HEIGHT</name></expr></argument>, <argument><expr><name>WSP_ABOVE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><name>count</name> <operator>-</operator> <name>todo</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_exchange</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>Prenum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_IF_ANY_POPUP_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ONE_WINDOW</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name>Prenum</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>Prenum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>









<expr_stmt><expr><name>wp2</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frp2</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_prev</name></name> <operator>!=</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_remove</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_remove</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_append</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_prev</name></name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_insert</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>wp2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_remove</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_remove</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_append</name><argument_list>(<argument><expr><name>wp2</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frp2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>frame_insert</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_child</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>frame_append</name><argument_list>(<argument><expr><name>frp2</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>frame_fix_height</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_fix_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_fix_width</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_fix_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_rotate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>upwards</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ONE_WINDOW</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>curwin-&gt;w_frame-&gt;fr_parent-&gt;fr_child</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E443: Cannot rotate when another window is split"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>upwards</name></expr>)</condition> 
<block>{<block_content>

<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wp1</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_remove</name><argument_list>(<argument><expr><name>wp1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_remove</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>( <init>;</init> <condition><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>win_append</name><argument_list>(<argument><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name></expr></argument>, <argument><expr><name>wp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_append</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name><name>wp1</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wp2</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else 
<block>{<block_content>

<for>for <control>(<init><expr><name>frp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</init> <condition><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>wp1</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wp2</name> <operator>=</operator> <name><name>wp1</name><operator>-&gt;</operator><name>w_prev</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>win_remove</name><argument_list>(<argument><expr><name>wp1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_remove</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>win_append</name><argument_list>(<argument><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_child</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_prev</name></name></expr></argument>, <argument><expr><name>wp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_insert</name><argument_list>(<argument><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_child</name></name></expr></argument>, <argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>wp2</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp2</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name><name>wp1</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp1</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_fix_height</name><argument_list>(<argument><expr><name>wp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_fix_height</name><argument_list>(<argument><expr><name>wp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>wp2</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp2</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <name><name>wp1</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp1</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_fix_width</name><argument_list>(<argument><expr><name>wp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_fix_width</name><argument_list>(<argument><expr><name>wp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_totop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ONE_WINDOW</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_split_disallowed</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>winframe_remove</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_remove</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_split_ins</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WSP_VERT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_ea</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_equal</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>gui_may_update_scrollbars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>win_move_after</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win1</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>win1</name> <operator>==</operator> <name>win2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>win2</name><operator>-&gt;</operator><name>w_next</name></name> <operator>!=</operator> <name>win1</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>win1</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>!=</operator> <name><name>win2</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><literal type="string">"INTERNAL: trying to move a window into another frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>win1</name> <operator>==</operator> <name>lastwin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>win1</name><operator>-&gt;</operator><name>w_prev</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win1</name><operator>-&gt;</operator><name>w_prev</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name><name>win1</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win1</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win1</name><operator>-&gt;</operator><name>w_prev</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>win1</name><operator>-&gt;</operator><name>w_prev</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win1</name><operator>-&gt;</operator><name>w_prev</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win1</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win1</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>win2</name> <operator>==</operator> <name>lastwin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>win1</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win1</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name><name>win2</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win2</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win1</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>win2</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win2</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win1</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win1</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>win_remove</name><argument_list>(<argument><expr><name>win1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_remove</name><argument_list>(<argument><expr><name><name>win1</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_append</name><argument_list>(<argument><expr><name>win2</name></expr></argument>, <argument><expr><name>win1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_append</name><argument_list>(<argument><expr><name><name>win2</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>, <argument><expr><name><name>win1</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>win1</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>win_equal</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>next_curwin</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>current</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list> 

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>*</operator><name>p_ead</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>win_equal_rec</name><argument_list>(<argument><expr><ternary><condition><expr><name>next_curwin</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>curwin</name></expr> </then><else>: <expr><name>next_curwin</name></expr></else></ternary></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name>topframe</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>tabline_height</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_equal_rec</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>next_curwin</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>current</name></decl></parameter>, 
<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfr</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra_sep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wincount</name></decl>, <decl><type ref="prev"/><name>totwincount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_curwin_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>room</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_next_curwin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hnc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topfr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>topfr</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>!=</operator> <name>height</name> <operator>||</operator> <name><name>topfr</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>!=</operator> <name>row</name>
<operator>||</operator> <name><name>topfr</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>!=</operator> <name>width</name> <operator>||</operator> <name><name>topfr</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>!=</operator> <name>col</name></expr>
)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>topfr</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>topfr</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topfr</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>topfr</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>topfr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>topfr</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topfr</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <literal type="char">'v'</literal></expr>)</condition> 
<block>{<block_content>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>topfr</name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <name>width</name> <operator>==</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extra_sep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>extra_sep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>totwincount</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>extra_sep</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>p_wmw</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>has_next_curwin</name> <operator>=</operator> <call><name>frame_has_win</name><argument_list>(<argument><expr><name>topfr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>topfr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>=</operator> <name>width</name> <operator>-</operator> <name>m</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <name>p_wiw</name> <operator>+</operator> <name>room</name></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>fr</argument>, <argument>topfr-&gt;fr_child</argument>)</argument_list></macro>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>frame_fixed_width</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>frame_has_win</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>+=</operator> <name>p_wiw</name> <operator>-</operator> <name>p_wmw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&lt;</operator> <name>p_wiw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>p_wiw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>totwincount</name> <operator>-=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name></expr>
?</condition><then> <expr><name>extra_sep</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>p_wmw</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>new_size</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_size</name> <operator>+=</operator> <name>room</name></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_newwidth</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>next_curwin_size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_next_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>totwincount</name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>room</name> <operator>+</operator> <operator>(</operator><name>totwincount</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator>
<operator>/</operator> <operator>(</operator><name>totwincount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>p_wiw</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <operator>(</operator><name>room</name> <operator>+</operator> <name>p_wiw</name>
<operator>+</operator> <operator>(</operator><name>totwincount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>p_wmw</name>
<operator>+</operator> <operator>(</operator><name>totwincount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>totwincount</name></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>next_curwin_size</name> <operator>-</operator> <name>p_wiw</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <name>p_wiw</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_next_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>totwincount</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>fr</argument>, <argument>topfr-&gt;fr_child</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>wincount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>frame_fixed_width</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_newwidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wincount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wincount</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>extra_sep</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator>
<operator>/</operator> <operator>(</operator><name>p_wmw</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_next_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hnc</name> <operator>=</operator> <call><name>frame_has_win</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hnc</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hnc</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>--</operator><name>wincount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>totwincount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>room</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <operator>(</operator><name>wincount</name> <operator>*</operator> <name>room</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>totwincount</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator>
<operator>/</operator> <name>totwincount</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hnc</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>next_curwin_size</name> <operator>-=</operator> <name>p_wiw</name> <operator>-</operator> <operator>(</operator><name>m</name> <operator>-</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_size</name> <operator>+=</operator> <name>next_curwin_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>new_size</name> <operator>-</operator> <name>next_curwin_size</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>new_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>new_size</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current</name> <operator>||</operator> <name>dir</name> <operator>!=</operator> <literal type="char">'v'</literal> <operator>||</operator> <name><name>topfr</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name>new_size</name> <operator>!=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name><operator>)</operator>
<operator>||</operator> <call><name>frame_has_win</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_equal_rec</name><argument_list>(<argument><expr><name>next_curwin</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>fr</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><name>new_size</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>new_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>-=</operator> <name>new_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>totwincount</name> <operator>-=</operator> <name>wincount</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name><name>topfr</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topfr</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <literal type="char">'h'</literal></expr>)</condition> 
<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>topfr</name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <name>height</name> <operator>==</operator> <name>cmdline_row</name> <operator>&amp;&amp;</operator> <name>p_ls</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extra_sep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>extra_sep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>totwincount</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>extra_sep</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>p_wmh</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>has_next_curwin</name> <operator>=</operator> <call><name>frame_has_win</name><argument_list>(<argument><expr><name>topfr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>topfr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>=</operator> <name>height</name> <operator>-</operator> <name>m</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <name>p_wh</name> <operator>+</operator> <name>room</name></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>fr</argument>, <argument>topfr-&gt;fr_child</argument>)</argument_list></macro>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>frame_fixed_height</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>frame_has_win</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>+=</operator> <name>p_wh</name> <operator>-</operator> <name>p_wmh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&lt;</operator> <name>p_wh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>p_wh</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>totwincount</name> <operator>-=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name></expr>
?</condition><then> <expr><name>extra_sep</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>p_wmh</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>new_size</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_size</name> <operator>+=</operator> <name>room</name></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_newheight</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>next_curwin_size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_next_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>totwincount</name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>room</name> <operator>+</operator> <operator>(</operator><name>totwincount</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator>
<operator>/</operator> <operator>(</operator><name>totwincount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>p_wh</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <operator>(</operator><name>room</name> <operator>+</operator> <name>p_wh</name>
<operator>+</operator> <operator>(</operator><name>totwincount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>p_wmh</name>
<operator>+</operator> <operator>(</operator><name>totwincount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>totwincount</name></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>next_curwin_size</name> <operator>-</operator> <name>p_wh</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>next_curwin_size</name> <operator>=</operator> <name>p_wh</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_next_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>totwincount</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>fr</argument>, <argument>topfr-&gt;fr_child</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>wincount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>frame_fixed_height</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_newheight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wincount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wincount</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>extra_sep</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator>
<operator>/</operator> <operator>(</operator><name>p_wmh</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_next_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hnc</name> <operator>=</operator> <call><name>frame_has_win</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hnc</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hnc</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>--</operator><name>wincount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>totwincount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>room</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <operator>(</operator><name>wincount</name> <operator>*</operator> <name>room</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>totwincount</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator>
<operator>/</operator> <name>totwincount</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hnc</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>next_curwin_size</name> <operator>-=</operator> <name>p_wh</name> <operator>-</operator> <operator>(</operator><name>m</name> <operator>-</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_size</name> <operator>+=</operator> <name>next_curwin_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>new_size</name> <operator>-</operator> <name>next_curwin_size</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>new_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>new_size</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current</name> <operator>||</operator> <name>dir</name> <operator>!=</operator> <literal type="char">'h'</literal> <operator>||</operator> <name><name>topfr</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name>new_size</name> <operator>!=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name><operator>)</operator>
<operator>||</operator> <call><name>frame_has_win</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_equal_rec</name><argument_list>(<argument><expr><name>next_curwin</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>fr</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name>new_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>-=</operator> <name>new_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>totwincount</name> <operator>-=</operator> <name>wincount</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>leaving_window</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bt_prompt</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_prompt_insert</name></name> <operator>=</operator> <name>restart_edit</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mode_displayed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>stop_insert_mode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_prompt_insert</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_prompt_insert</name></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>entering_window</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bt_prompt</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_prompt_insert</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stop_insert_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_prompt_insert</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>close_windows</name><parameter_list>(
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>keep_curwin</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nexttp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>tabline_height</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>tabpage_index</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ONE_WINDOW</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>keep_curwin</name> <operator>||</operator> <name>wp</name> <operator>!=</operator> <name>curwin</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_locked</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>win_close</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>


<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name>nexttp</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>nexttp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_locked</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_close_othertab</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>nexttp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>--</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <call><name>tabpage_index</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TABCLOSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <call><name>tabline_height</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shell_new_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>last_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>one_window</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>one_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_one</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>aucmd_win</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seen_one</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>seen_one</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>close_last_window_tabpage</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>free_buf</name></decl></parameter>,
<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>prev_curtab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ONE_WINDOW</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>









<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><call><name>alt_tabpage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>valid_tabpage</name><argument_list>(<argument><expr><name>prev_curtab</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>prev_curtab</name><operator>-&gt;</operator><name>tp_firstwin</name></name> <operator>==</operator> <name>win</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>tabline_height</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>win_close_othertab</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>free_buf</name></expr></argument>, <argument><expr><name>prev_curtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <call><name>tabline_height</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shell_new_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>entering_window</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TABCLOSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_WINENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TABENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_curbuf</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_close_buffer</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>abort_if_last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reset_synblock</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>bt_quickfix</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_bl</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_buffer</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>abort_if_last</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_valid_any_tab</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>firstbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>win_close</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>free_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>other_buffer</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>close_curwin</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>help_window</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>prev_curtab</name> <init>= <expr><name>curtab</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>win_frame</name> <init>= <expr><name><name>win</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>had_diffmode</name> <init>= <expr><name><name>win</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>may_close_term_popup</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>ERROR_IF_ANY_POPUP_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>last_window</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E444: Cannot close last window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>||</operator> <operator>(</operator><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_locked</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>win_unlisted</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E813: Cannot close autocmd or popup window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>firstwin</name> <operator>==</operator> <name>aucmd_win</name> <operator>||</operator> <name>lastwin</name> <operator>==</operator> <name>aucmd_win</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>one_window</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E814: Cannot close window, only autocmd window would remain"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>close_last_window_tabpage</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>free_buf</name></expr></argument>, <argument><expr><name>prev_curtab</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>bt_help</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>help_window</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_snapshot</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>, <argument><expr><name>SNAP_HELP_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>leaving_window</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>frame2win</name><argument_list>(<argument><expr><call><name>win_altframe</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>curbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>other_buffer</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFLEAVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>last_window</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_WINLEAVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>last_window</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>popup_win_closed</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>win_close_buffer</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><ternary><condition><expr><name>free_buf</name></expr> ?</condition><then> <expr><name>DOBUF_UNLOAD</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>only_one_window</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>last_window</name><argument_list>()</argument_list></call> <operator>||</operator> <name>curtab</name> <operator>!=</operator> <name>prev_curtab</name>
<operator>||</operator> <call><name>close_last_window_tabpage</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>free_buf</name></expr></argument>, <argument><expr><name>prev_curtab</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>curtab</name> <operator>!=</operator> <name>prev_curtab</name> <operator>&amp;&amp;</operator> <call><name>win_valid_any_tab</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>win_close_othertab</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>prev_curtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>last_window</name><argument_list>()</argument_list></call>
<operator>||</operator> <call><name>close_last_window_tabpage</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>free_buf</name></expr></argument>, <argument><expr><name>prev_curtab</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><operator>++</operator><name>split_disallowed</name></expr>;</expr_stmt>



<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>win_free_mem</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name> <operator>||</operator> <call><name>bt_quickfix</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bt_quickfix</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>close_curwin</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_ea</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p_ead</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <operator>*</operator><name>p_ead</name> <operator>==</operator> <name>dir</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>win_equal</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>==</operator> <name>win_frame</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>close_curwin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_enter_ext</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>other_buffer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>split_disallowed</name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>help_window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>restore_snapshot</name><argument_list>(<argument><expr><name>SNAP_HELP_IDX</name></expr></argument>, <argument><expr><name>close_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>diffopt_closeoff</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>had_diffmode</name> <operator>&amp;&amp;</operator> <name>curtab</name> <operator>==</operator> <name>prev_curtab</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diffcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>dwin</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>dwin</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>dwin</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>diffcount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>diffcount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"diffoff!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>win_hasvertsplit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_init_which_components</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>win_close_othertab</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>free_buf</name></decl></parameter>, <parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>ptp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>free_tp</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>||</operator> <operator>(</operator><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_locked</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close_buffer</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>free_buf</name></expr> ?</condition><then> <expr><name>DOBUF_UNLOAD</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>ptp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>ptp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ptp</name> <operator>!=</operator> <name>tp</name></expr>;</condition> <incr><expr><name>ptp</name> <operator>=</operator> <name><name>ptp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>ptp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>win</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name> <operator>==</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_lastwin</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>first_tabpage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_tabpage</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>ptp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>ptp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ptp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>tp</name></expr>;</condition>
<incr><expr><name>ptp</name> <operator>=</operator> <name><name>ptp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>ptp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"win_close_othertab()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>free_tp</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>win_free_mem</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>free_tp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_tabpage</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type>
<name>win_free_mem</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dirp</name></decl></parameter>, 
<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>winframe_remove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>dirp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_free</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>win</name> <operator>==</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_curwin</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_curwin</name></name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>wp</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>win_free_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tabpage_close</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>aucmd_win</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_free_mem</name><argument_list>(<argument><expr><name>aucmd_win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aucmd_win</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>close_all_popups</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>firstwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_free_mem</name><argument_list>(<argument><expr><name>firstwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>win_T</name> <modifier>*</modifier></type>
<name>winframe_remove</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><name>dirp</name></type> <name>UNUSED</name></decl></parameter>, 
<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>frp2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>frp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp_close</name> <init>= <expr><name><name>win</name><operator>-&gt;</operator><name>w_frame</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>ONE_WINDOW</name></expr> </then><else>: <expr><name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name> <operator>==</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_lastwin</name></name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>frp2</name> <operator>=</operator> <call><name>win_altframe</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>frame2win</name><argument_list>(<argument><expr><name>frp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>frame_remove</name><argument_list>(<argument><expr><name>frp_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frp_close</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>frp2</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_p_wfh</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp_close</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frp3</name> <operator>=</operator> <name><name>frp_close</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>frp3</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>frame_fixed_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>frp2</name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>frame2win</name><argument_list>(<argument><expr><name>frp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>frp3</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp3</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>frp3</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_p_wfh</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>frp2</name> <operator>=</operator> <name>frp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>frp3</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>frp3</name> <operator>=</operator> <name><name>frp3</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>frp2</name></expr></argument>, <argument><expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>+</operator> <name><name>frp_close</name><operator>-&gt;</operator><name>fr_height</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>frp2</name> <operator>==</operator> <name><name>frp_close</name><operator>-&gt;</operator><name>fr_next</name></name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dirp</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>frp2</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_p_wfw</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp_close</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frp3</name> <operator>=</operator> <name><name>frp_close</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>frp3</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>frame_fixed_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>frp2</name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>frame2win</name><argument_list>(<argument><expr><name>frp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>frp3</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp3</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>frp3</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_p_wfw</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>frp2</name> <operator>=</operator> <name>frp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>frp3</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>frp3</name> <operator>=</operator> <name><name>frp3</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>frp2</name></expr></argument>, <argument><expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>+</operator> <name><name>frp_close</name><operator>-&gt;</operator><name>fr_width</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>frp2</name> <operator>==</operator> <name><name>frp_close</name><operator>-&gt;</operator><name>fr_next</name></name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dirp</name> <operator>=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>frp2</name> <operator>==</operator> <name><name>frp_close</name><operator>-&gt;</operator><name>fr_next</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name><name>win</name><operator>-&gt;</operator><name>w_winrow</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name><name>win</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>frame_comp_pos</name><argument_list>(<argument><expr><name>frp2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>frp2</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>=</operator> <name><name>frp2</name><operator>-&gt;</operator><name>fr_layout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>=</operator> <name><name>frp2</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>frp2-&gt;fr_child</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>=</operator> <name><name>frp2</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>=</operator> <name><name>frp2</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_frame</name></name> <operator>=</operator> <name><name>frp2</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp2</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>==</operator> <name>frp2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>frp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frp2</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frp2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>frp2</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>==</operator> <name>frp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frp2</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_child</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>frp3</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</init> <condition>;</condition> <incr><expr><name>frp3</name> <operator>=</operator> <name><name>frp3</name><operator>-&gt;</operator><name>fr_next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>frp3</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>=</operator> <name>frp2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp3</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>frp3</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>=</operator> <name>frp3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>==</operator> <name>frp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>=</operator> <name>frp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>wp</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>frame_T</name> <modifier>*</modifier></type>
<name>win_altframe</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>other_fr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target_fr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>ONE_WINDOW</name></expr> </then><else>: <expr><name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name> <operator>==</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_lastwin</name></name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>alt_tabpage</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>tp_curwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>target_fr</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>other_fr</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_spr</name> <operator>||</operator> <name>p_sb</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>target_fr</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>other_fr</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>frame_fixed_width</name><argument_list>(<argument><expr><name>target_fr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>frame_fixed_width</name><argument_list>(<argument><expr><name>other_fr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>target_fr</name> <operator>=</operator> <name>other_fr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>frame_fixed_height</name><argument_list>(<argument><expr><name>target_fr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>frame_fixed_height</name><argument_list>(<argument><expr><name>other_fr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>target_fr</name> <operator>=</operator> <name>other_fr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>target_fr</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>tabpage_T</name> <modifier>*</modifier></type>
<name>alt_tabpage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>curtab</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<return>return <expr><name>tp</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type>
<name>frame2win</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>frame_has_win</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>wp</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>p</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>frame_has_win</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_new_height</name><parameter_list>(
<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>topfirst</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>wfh</name></decl></parameter>)</parameter_list> 

<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>win_new_height</name><argument_list>(<argument><expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name></name></expr></argument>,
<argument><expr><name>height</name> <operator>-</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_status_height</name></name>
<operator>-</operator> <call><name>WINBAR_HEIGHT</name><argument_list>(<argument><expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>
<do>do
<block>{<block_content>

<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>topfrp-&gt;fr_child</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>topfirst</name></expr></argument>, <argument><expr><name>wfh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>&gt;</operator> <name>height</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block>
while <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></if>
<else>else 
<block>{<block_content>



<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wfh</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>frame_fixed_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
</block_content>}</block></while></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>topfirst</name></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>wfh</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>frame_fixed_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extra_lines</name> <operator>=</operator> <name>height</name> <operator>-</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>extra_lines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>+</operator> <name>extra_lines</name> <operator>&lt;</operator> <name>h</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extra_lines</name> <operator>+=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>topfirst</name></expr></argument>, <argument><expr><name>wfh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>+</operator> <name>extra_lines</name></expr></argument>,
<argument><expr><name>topfirst</name></expr></argument>, <argument><expr><name>wfh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>topfirst</name></expr>)</condition>
<block>{<block_content>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><name>wfh</name> <operator>&amp;&amp;</operator> <name>frp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>frame_fixed_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><name>wfh</name> <operator>&amp;&amp;</operator> <name>frp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>frame_fixed_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>-=</operator> <name>extra_lines</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>extra_lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>+</operator> <name>extra_lines</name></expr></argument>, <argument><expr><name>topfirst</name></expr></argument>, <argument><expr><name>wfh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>frame_fixed_height</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_p_wfh</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>


<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>frame_fixed_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>frame_fixed_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>frame_fixed_width</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_p_wfw</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition>
<block>{<block_content>


<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><call><name>frame_fixed_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>frame_fixed_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_add_statusline</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>--</operator><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <name>STATUS_HEIGHT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>

<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>frame_add_statusline</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>

<for>for <control>(<init><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</init> <condition><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>frame_add_statusline</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_new_width</name><parameter_list>(
<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>leftfirst</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>wfw</name></decl></parameter>)</parameter_list> 

<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra_cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>frp</name> <operator>=</operator> <name>topfrp</name></expr>;</init> <condition><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name> <operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>win_new_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition>
<block>{<block_content>
<do>do
<block>{<block_content>

<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>topfrp-&gt;fr_child</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>leftfirst</name></expr></argument>, <argument><expr><name>wfw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>&gt;</operator> <name>width</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block> while <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></if>
<else>else 
<block>{<block_content>



<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wfw</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>frame_fixed_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
</block_content>}</block></while></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>leftfirst</name></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>wfw</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>frame_fixed_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extra_cols</name> <operator>=</operator> <name>width</name> <operator>-</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>extra_cols</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>+</operator> <name>extra_cols</name> <operator>&lt;</operator> <name>w</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extra_cols</name> <operator>+=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>leftfirst</name></expr></argument>, <argument><expr><name>wfw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>+</operator> <name>extra_cols</name></expr></argument>,
<argument><expr><name>leftfirst</name></expr></argument>, <argument><expr><name>wfw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>leftfirst</name></expr>)</condition>
<block>{<block_content>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><name>wfw</name> <operator>&amp;&amp;</operator> <name>frp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>frame_fixed_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><name>wfw</name> <operator>&amp;&amp;</operator> <name>frp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>frame_fixed_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>-=</operator> <name>extra_cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>extra_cols</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>+</operator> <name>extra_cols</name></expr></argument>, <argument><expr><name>leftfirst</name></expr></argument>, <argument><expr><name>wfw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_add_vsep</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>--</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition>
<block>{<block_content>

<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>frame_add_vsep</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>

<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>frame_add_vsep</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_fix_width</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_fix_height</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>=</operator> <call><name>VISIBLE_HEIGHT</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>frame_minheight</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>next_curwin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>next_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>p_wh</name> <operator>+</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>p_wmh</name> <operator>+</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>next_curwin</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>p_wmh</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <call><name>WINBAR_HEIGHT</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>topfrp-&gt;fr_child</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>topfrp-&gt;fr_child</argument>)</argument_list></macro>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>frame_minwidth</name><parameter_list>(
<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>,
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>next_curwin</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>next_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>p_wiw</name> <operator>+</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>p_wmw</name> <operator>+</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_wmw</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>next_curwin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>topfrp-&gt;fr_child</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>topfrp-&gt;fr_child</argument>)</argument_list></macro>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>next_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>close_others</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>message</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>nextwp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>one_window</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>message</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>autocmd_busy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>m_onlyone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</init> <condition><expr><call><name>win_valid</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name>nextwp</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>nextwp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>curwin</name></expr>)</condition> 
<block>{<block_content>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>can_abandon</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>nextwp</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>message</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p_confirm</name> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>confirm</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>p_write</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dialog_changed</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>nextwp</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>win_close</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>!</operator><call><name>buf_hide</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>bufIsChanged</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ONE_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E445: Other window contains changes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_init_empty</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_pcmark</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_pcmark</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_prev_pcmark</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_prev_pcmark</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_s</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>curwin_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>win_init_empty</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>win_alloc_first</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>win_alloc_firstwin</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first_tabpage</name> <operator>=</operator> <call><name>alloc_tabpage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first_tabpage</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_topframe</name></name> <operator>=</operator> <name>topframe</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curtab</name> <operator>=</operator> <name>first_tabpage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_firstwin</name></name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_lastwin</name></name> <operator>=</operator> <name>lastwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_curwin</name></name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>win_T</name> <modifier>*</modifier></type>
<name>win_alloc_popup_win</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>win_alloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>win_init_some</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RESET_BINDING</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>new_frame</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>wp</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>win_init_popup_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>buf</name><operator>-&gt;</operator><name>b_nwindows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_init_empty</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_localdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_alloc_firstwin</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>oldwin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <call><name>win_alloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oldwin</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <call><name>buflist_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>BLN_LISTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>curbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_s</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>=</operator> <operator>&amp;</operator><name>global_alist</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curwin_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>win_init</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>oldwin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RESET_BINDING</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>new_frame</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>topframe</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>new_frame</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name> <init>= <expr><call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>frame_T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>=</operator> <name>FR_LEAF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>win_init_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>firstwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>=</operator> <name>ROWS_AVAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>=</operator> <name>ROWS_AVAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>firstwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>tabpage_T</name> <modifier>*</modifier></type>
<name>alloc_tabpage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>tabpage_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_vars</name></name> <operator>=</operator> <call><name>dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_vars</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>init_var_dict</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_vars</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>tp_winvar</name></name></expr></argument>, <argument><expr><name>VAR_SCOPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_prev_which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_ch_used</name></name> <operator>=</operator> <name>p_ch</name></expr>;</expr_stmt>

<return>return <expr><name>tp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>free_tabpage</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>diff_clear</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_close_tabpage</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_first_popupwin</name><operator>-&gt;</operator><name>w_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>SNAP_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_snapshot</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vars_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>tp_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>tp_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref_var_dict</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_localdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>python_tabpage_free</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>python3_tabpage_free</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>win_new_tabpage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>after</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>curtab</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>newtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>newtp</name> <operator>=</operator> <call><name>alloc_tabpage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newtp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>leave_tabpage</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curtab</name> <operator>=</operator> <name>newtp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newtp</name><operator>-&gt;</operator><name>tp_localdir</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>tp_localdir</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_localdir</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_alloc_firstwin</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_curwin</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>after</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>newtp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>=</operator> <name>first_tabpage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_tabpage</name> <operator>=</operator> <name>newtp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>after</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>after</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>newtp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>=</operator> <name>newtp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>newtp</name><operator>-&gt;</operator><name>tp_firstwin</name></name> <operator>=</operator> <name><name>newtp</name><operator>-&gt;</operator><name>tp_lastwin</name></name> <operator>=</operator> <name><name>newtp</name><operator>-&gt;</operator><name>tp_curwin</name></name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_init_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>firstwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <call><name>tabline_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_comp_scroll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newtp</name><operator>-&gt;</operator><name>tp_topframe</name></name> <operator>=</operator> <name>topframe</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>gui_may_update_scrollbars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>entering_window</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_WINNEW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_WINENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TABNEW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TABENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>enter_tabpage</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>may_open_tabpage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>cmdmod</name><operator>.</operator><name>tab</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>postponed_split_tab</name></expr> </then><else>: <expr><name><name>cmdmod</name><operator>.</operator><name>tab</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>tab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>postponed_split_tab</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>win_new_tabpage</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>make_tabpages</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name>maxcount</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>p_tpm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>p_tpm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>todo</name> <operator>=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>todo</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>win_new_tabpage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><name>count</name> <operator>-</operator> <name>todo</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>valid_tabpage</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tpc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>tpc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>valid_tabpage_win</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tpc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>tpc</name></expr>)</condition>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>win_valid_any_tab</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>close_tabpage</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>ptp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tab</name> <operator>==</operator> <name>first_tabpage</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>first_tabpage</name> <operator>=</operator> <name><name>tab</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>ptp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>ptp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ptp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>tab</name></expr>;</condition>
<incr><expr><name>ptp</name> <operator>=</operator> <name><name>ptp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>=</operator> <name><name>tab</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>ptp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_tabpage</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>tabpage_T</name> <modifier>*</modifier></type>
<name>find_tabpage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>curtab</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>tp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>n</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>tp</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>tabpage_index</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>ftp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>tp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tp</name> <operator>!=</operator> <name>ftp</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>leave_tabpage</name><parameter_list>(
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier><name>new_curbuf</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <name>trigger_leave_autocmds</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>curtab</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>leaving_window</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>trigger_leave_autocmds</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_curbuf</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFLEAVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curtab</name> <operator>!=</operator> <name>tp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_WINLEAVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curtab</name> <operator>!=</operator> <name>tp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TABLEAVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curtab</name> <operator>!=</operator> <name>tp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_remove_scrollbars</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_curwin</name></name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_prevwin</name></name> <operator>=</operator> <name>prevwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_lastwin</name></name> <operator>=</operator> <name>lastwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_old_Rows</name></name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_old_Columns</name></name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>firstwin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lastwin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>enter_tabpage</name><parameter_list>(
<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>,
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier><name>old_curbuf</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>trigger_enter_autocmds</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>trigger_leave_autocmds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_off</name> <init>= <expr><name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name><operator>-&gt;</operator><name>w_winrow</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>next_prevwin</name> <init>= <expr><name><name>tp</name><operator>-&gt;</operator><name>tp_prevwin</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>curtab</name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>firstwin</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lastwin</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_lastwin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>topframe</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_topframe</name></name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>win_enter_ext</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_curwin</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>trigger_enter_autocmds</name></expr></argument>, <argument><expr><name>trigger_leave_autocmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prevwin</name> <operator>=</operator> <name>next_prevwin</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>diff_need_scrollbind</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>!=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_ch_used</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_ch_used</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>row</name> <operator>&lt;</operator> <name>cmdline_row</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>cmdline_row</name> <operator>&lt;=</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_old_Rows</name></name> <operator>!=</operator> <name>Rows</name> <operator>||</operator> <operator>(</operator><name>old_off</name> <operator>!=</operator> <name><name>firstwin</name><operator>-&gt;</operator><name>w_winrow</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>gui_use_tabline</name><argument_list>()</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shell_new_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_old_Columns</name></name> <operator>!=</operator> <name>Columns</name> <operator>&amp;&amp;</operator> <name>starting</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shell_new_columns</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>gui_may_update_scrollbars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name>trigger_enter_autocmds</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TABENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_curbuf</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>goto_tabpage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>ttp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>text_locked</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>text_locked_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>ttp</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>ttp</name> <operator>&amp;&amp;</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>ttp</name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">9999</literal></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_use_tabline</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_set_curtab</name><argument_list>(<argument><expr><call><name>tabpage_index</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>goto_tabpage_tp</name><parameter_list>(
<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>trigger_enter_autocmds</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>trigger_leave_autocmds</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>set_keep_msg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>curtab</name> <operator>&amp;&amp;</operator> <call><name>leave_tabpage</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>,
<argument><expr><name>trigger_leave_autocmds</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>valid_tabpage</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enter_tabpage</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>trigger_enter_autocmds</name></expr></argument>,
<argument><expr><name>trigger_leave_autocmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enter_tabpage</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>trigger_enter_autocmds</name></expr></argument>,
<argument><expr><name>trigger_leave_autocmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>goto_tabpage_win</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curtab</name> <operator>==</operator> <name>tp</name> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_use_tabline</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_set_curtab</name><argument_list>(<argument><expr><call><name>tabpage_index</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>tabpage_move</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tp_dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name> <operator>||</operator> <operator>(</operator><name>nr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>curtab</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tp_dst</name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>curtab</name> <operator>==</operator> <name>first_tabpage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_tabpage</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>=</operator> <name>first_tabpage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_tabpage</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>=</operator> <name><name>tp_dst</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp_dst</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>win_goto</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>owp</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ERROR_IF_ANY_POPUP_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E366: Not allowed to enter a popup window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>text_locked</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>text_locked_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>curbuf_locked</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name>owp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>owp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>msg_scrolled</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redrawWinline</name><argument_list>(<argument><expr><name>owp</name></expr></argument>, <argument><expr><name><name>owp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>msg_scrolled</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_cursor_line_redraw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>win_T</name> <modifier>*</modifier></type>
<name>win_find_nr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>winnr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>winnr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<return>return <expr><name>wp</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>tabpage_T</name> <modifier>*</modifier></type>
<name>win_find_tabpage</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>win</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tp</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>win_T</name> <modifier>*</modifier></type>
<name>win_vert_neighbor</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>nfr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>foundfr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>foundfr</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>fr</name> <operator>=</operator> <name>foundfr</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>==</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_topframe</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>up</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nfr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nfr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name> <operator>&amp;&amp;</operator> <name>nfr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>
</block_content>}</block></for>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nfr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>foundfr</name> <operator>=</operator> <name>nfr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>nfr</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nfr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>frame2win</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>w_wincol</name> <operator>+</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name>
<operator>&lt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nfr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name> <operator>&amp;&amp;</operator> <name>up</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nfr</name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<label><name>end</name>:</label>
<return>return <expr><ternary><condition><expr><name>foundfr</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>foundfr</name><operator>-&gt;</operator><name>fr_win</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_goto_ver</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>up</name></decl></parameter>, 
<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ERROR_IF_TERM_POPUP_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>win_vert_neighbor</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>up</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>win_T</name> <modifier>*</modifier></type>
<name>win_horz_neighbor</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>nfr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>foundfr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>foundfr</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>fr</name> <operator>=</operator> <name>foundfr</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>==</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_topframe</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nfr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nfr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name> <operator>&amp;&amp;</operator> <name>nfr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>
</block_content>}</block></for>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nfr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>foundfr</name> <operator>=</operator> <name>nfr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>nfr</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nfr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>frame2win</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>w_winrow</name> <operator>+</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name>
<operator>&lt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nfr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name> <operator>&amp;&amp;</operator> <name>left</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nfr</name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<label><name>end</name>:</label>
<return>return <expr><ternary><condition><expr><name>foundfr</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>foundfr</name><operator>-&gt;</operator><name>fr_win</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_goto_hor</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, 
<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ERROR_IF_TERM_POPUP_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>win_horz_neighbor</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>win_enter</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>undo_sync</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>win_enter_ext</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>undo_sync</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_enter_ext</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>undo_sync</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>curwin_invalid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>trigger_new_autocmds</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>trigger_enter_autocmds</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>trigger_leave_autocmds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>other_buffer</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>curwin_invalid</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curwin_invalid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>leaving_window</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curwin_invalid</name> <operator>&amp;&amp;</operator> <name>trigger_leave_autocmds</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>curbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFLEAVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>other_buffer</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_WINLEAVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>undo_sync</name> <operator>&amp;&amp;</operator> <name>curbuf</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>buf_copy_options</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>BCO_ENTER</name> <operator>|</operator> <name>BCO_NOHELP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curwin_invalid</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prevwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>changed_line_abv_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_localdir</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_localdir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dirname</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>globaldir</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>cwd</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>globaldir</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_localdir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dirname</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_localdir</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dirname</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_localdir</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dirname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>globaldir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>vim_ignored</name> <operator>=</operator> <call><name>mch_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>globaldir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>globaldir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>entering_window</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>trigger_new_autocmds</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_WINNEW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>trigger_enter_autocmds</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_WINENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>other_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>bt_terminal</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw_mode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>restart_edit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&lt;</operator> <name>p_wh</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wfh</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_wh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&lt;</operator> <name>p_wiw</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wfw</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_setwidth</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_wiw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>DO_AUTOCHDIR</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>win_T</name> <modifier>*</modifier></type>
<name>buf_jump_open_win</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>wp</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>win_T</name> <modifier>*</modifier></type>
<name>buf_jump_open_tab</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>buf_jump_open_win</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>wp</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>curtab</name></expr>)</condition>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>goto_tabpage_win</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>wp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>wp</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_win_id</name> <init>= <expr><name>LOWEST_WIN_ID</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type>
<name>win_alloc</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier><name>after</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>hidden</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>new_wp</name></decl>;</decl_stmt>




<expr_stmt><expr><name>new_wp</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>win_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_alloc_lines</name><argument_list>(<argument><expr><name>new_wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_id</name></name> <operator>=</operator> <operator>++</operator><name>last_win_id</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_vars</name></name> <operator>=</operator> <call><name>dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_vars</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_free_lsize</name><argument_list>(<argument><expr><name>new_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>init_var_dict</name><argument_list>(<argument><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_vars</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_wp</name><operator>-&gt;</operator><name>w_winvar</name></name></expr></argument>, <argument><expr><name>VAR_SCOPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hidden</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_append</name><argument_list>(<argument><expr><name>after</name></expr></argument>, <argument><expr><name>new_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_scbind_pos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_p_so</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_p_siso</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_fraction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_prev_fraction_row</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_create_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr></argument>,
<argument><expr><name>SBAR_LEFT</name></expr></argument>, <argument><expr><name>new_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_create_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr></argument>,
<argument><expr><name>SBAR_RIGHT</name></expr></argument>, <argument><expr><name>new_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>foldInitWin</name><argument_list>(<argument><expr><name>new_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_match_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_wp</name><operator>-&gt;</operator><name>w_next_match_id</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>new_wp</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_free</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wininfo_T</name> <modifier>*</modifier></type><name>wip</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clearFolding</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>alist_unlink</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_alist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LUA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>lua_window_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mzscheme_window_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>perl_win_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>python_window_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>python3_window_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>tcl_window_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ruby_window_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>clear_winopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_onebuf_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_winopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_allbuf_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vars_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unref_var_dict</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>ttp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prevwin</name> <operator>==</operator> <name>wp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prevwin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>ttp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>ttp</name><operator>-&gt;</operator><name>tp_prevwin</name></name> <operator>==</operator> <name>wp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ttp</name><operator>-&gt;</operator><name>tp_prevwin</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>win_free_lsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_tagstacklen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_tagstack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_tagstack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_localdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>
<macro><name>FOR_ALL_BUF_WININFO</name><argument_list>(<argument>buf</argument>, <argument>wip</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wip</name><operator>-&gt;</operator><name>wi_win</name></name> <operator>==</operator> <name>wp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wip</name><operator>-&gt;</operator><name>wi_win</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_matches</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free_jumplist</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>qf_free_all</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_mch_destroy_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_destroy_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>remove_winbar</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_close_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_filter_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbar_highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_thumb_highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_unref</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask_cells</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>win_valid_any_tab</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_remove</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>autocmd_busy</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name> <operator>=</operator> <name>au_pending_free_win</name></expr>;</expr_stmt>
<expr_stmt><expr><name>au_pending_free_win</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_unlisted</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>wp</name> <operator>==</operator> <name>aucmd_win</name> <operator>||</operator> <call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>win_free_popup</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bt_popup</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_close_buffer</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>DOBUF_WIPE_REUSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close_buffer</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_popup_timer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stop_timer</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_popup_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_free</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_append</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>after</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>before</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>after</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>before</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>before</name> <operator>=</operator> <name><name>after</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name> <operator>=</operator> <name>before</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_prev</name></name> <operator>=</operator> <name>after</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>after</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>firstwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>after</name><operator>-&gt;</operator><name>w_next</name></name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>before</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lastwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>before</name><operator>-&gt;</operator><name>w_prev</name></name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>win_remove</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_prev</name><operator>-&gt;</operator><name>w_next</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>firstwin</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_firstwin</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name><operator>-&gt;</operator><name>w_prev</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_prev</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lastwin</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_lastwin</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_prev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_lastwin</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_append</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>after</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>=</operator> <name><name>after</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>after</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>=</operator> <name>after</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_insert</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>before</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>=</operator> <name>before</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>=</operator> <name><name>before</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>before</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>=</operator> <name>frp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_remove</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>==</operator> <name>frp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>win_alloc_lines</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name></name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>wline_T</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>win_free_lsize</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>shell_new_rows</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>ROWS_AVAIL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>firstwin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>frame_check_height</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_ch_used</name></name> <operator>=</operator> <name>p_ch</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (p_ea)
win_equal(curwin, FALSE, 'v');
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>shell_new_columns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>firstwin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>frame_check_width</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (p_ea)
win_equal(curwin, FALSE, 'h');
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>win_size_save</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>

<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><call><name>win_count</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator>
<name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>win_size_restore</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_count</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <name>Rows</name></expr>)</condition>
<block>{<block_content>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>frame_setwidth</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name><operator>++</operator></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_setheight_win</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name><operator>++</operator></expr>]</index></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 






<function><type><name>int</name></type>
<name>win_comp_pos</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><call><name>tabline_height</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>frame_comp_pos</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>row</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_comp_pos</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startrow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>!=</operator> <operator>*</operator><name>row</name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>!=</operator> <operator>*</operator><name>col</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <operator>*</operator><name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <operator>*</operator><name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>VISIBLE_HEIGHT</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>row</name> <operator>+=</operator> <ternary><condition><expr><name>h</name> <operator>&gt;</operator> <name><name>topfrp</name><operator>-&gt;</operator><name>fr_height</name></name></expr> ?</condition><then> <expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_height</name></name></expr> </then><else>: <expr><name>h</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>col</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>startrow</name> <operator>=</operator> <operator>*</operator><name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>startcol</name> <operator>=</operator> <operator>*</operator><name>col</name></expr>;</expr_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>topfrp-&gt;fr_child</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>row</name> <operator>=</operator> <name>startrow</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>col</name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><call><name>frame_comp_pos</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>win_setheight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>win_setheight_win</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>win_setheight_win</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <name>p_wmh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>p_wmh</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>height</name> <operator>+=</operator> <call><name>WINBAR_HEIGHT</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>frame_setheight</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name><name>win</name><operator>-&gt;</operator><name>w_status_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>full_screen</name> <operator>&amp;&amp;</operator> <name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name>cmdline_row</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>cmdline_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_setheight</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>curfrp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>take</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>room_cmdline</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>room_reserved</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>==</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <name>ROWS_AVAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>ROWS_AVAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>curfrp</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <name>h</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>frame_setheight</name><argument_list>(<argument><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>










<for>for <control>(<init><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>run</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>run</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>room_reserved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>curfrp-&gt;fr_parent-&gt;fr_child</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>!=</operator> <name>curfrp</name>
<operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_p_wfh</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_reserved</name> <operator>+=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>room</name> <operator>+=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>!=</operator> <name>curfrp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>!=</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_cmdline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>room_cmdline</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name> <operator>-</operator> <operator>(</operator><name><name>lastwin</name><operator>-&gt;</operator><name>w_winrow</name></name>
<operator>+</operator> <call><name>VISIBLE_HEIGHT</name><argument_list>(<argument><expr><name>lastwin</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name><name>lastwin</name><operator>-&gt;</operator><name>w_status_height</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room_cmdline</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_cmdline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;=</operator> <name>room</name> <operator>+</operator> <name>room_cmdline</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>==</operator> <name>Columns</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <name>room</name> <operator>+</operator> <name>room_cmdline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>room</name> <operator>+</operator> <name>room_cmdline</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>frame_setheight</name><argument_list>(<argument><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></argument>, <argument><expr><name>height</name>
<operator>+</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_wmh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><name>take</name> <operator>=</operator> <name>height</name> <operator>-</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <name>room</name> <operator>+</operator> <name>room_cmdline</name> <operator>-</operator> <name>room_reserved</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_reserved</name> <operator>=</operator> <name>room</name> <operator>+</operator> <name>room_cmdline</name> <operator>-</operator> <name>height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>take</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>room</name> <operator>-</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>&lt;</operator> <name>room_reserved</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_reserved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>take</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>room_cmdline</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>take</name> <operator>&lt;</operator> <name>room_cmdline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_cmdline</name> <operator>=</operator> <name>take</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>take</name> <operator>-=</operator> <name>room_cmdline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>+=</operator> <name>room_cmdline</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>curfrp</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>run</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>run</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<while>while <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>take</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room_reserved</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_p_wfh</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>room_reserved</name> <operator>&gt;=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_reserved</name> <operator>-=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <name>room_reserved</name> <operator>&gt;</operator> <name>take</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_reserved</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <name>take</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>take</name> <operator>-=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <name>room_reserved</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>room_reserved</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>room_reserved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <name>take</name> <operator>&lt;</operator> <name>h</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>take</name> <operator>-=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <name>take</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>take</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>win_setwidth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>win_setwidth_win</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>win_setwidth_win</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <name>p_wmw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>p_wmw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>frame_setwidth</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_setwidth</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>curfrp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>take</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>room_reserved</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>==</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <name>w</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>frame_setwidth</name><argument_list>(<argument><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>








<for>for <control>(<init><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>run</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>run</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>room_reserved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>curfrp-&gt;fr_parent-&gt;fr_child</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>!=</operator> <name>curfrp</name>
<operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_p_wfw</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_reserved</name> <operator>+=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>room</name> <operator>+=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>!=</operator> <name>curfrp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <name>room</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>&gt;=</operator> <name>ROWS_AVAIL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>room</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>room</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>frame_setwidth</name><argument_list>(<argument><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></argument>, <argument><expr><name>width</name>
<operator>+</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name><name>curfrp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr></argument>, <argument><expr><name>NOWIN</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_wmw</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><name>take</name> <operator>=</operator> <name>width</name> <operator>-</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>room</name> <operator>-</operator> <name>room_reserved</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_reserved</name> <operator>=</operator> <name>room</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>take</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>room</name> <operator>-</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>&lt;</operator> <name>room_reserved</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_reserved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>curfrp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>run</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>run</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>curfrp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<while>while <condition>(<expr><name>frp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>take</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room_reserved</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_p_wfw</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>room_reserved</name> <operator>&gt;=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_reserved</name> <operator>-=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <name>room_reserved</name> <operator>&gt;</operator> <name>take</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room_reserved</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <name>take</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>take</name> <operator>-=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <name>room_reserved</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>room_reserved</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>room_reserved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <name>take</name> <operator>&lt;</operator> <name>w</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>take</name> <operator>-=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <name>take</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>take</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>win_setminheight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>p_wmh</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&gt;=</operator> <name>needed</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>p_wmh</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noroom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>win_setminwidth</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>p_wmw</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&gt;=</operator> <name>needed</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>p_wmw</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noroom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>win_drag_status_line</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>dragwin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>curfr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>up</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>dragwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curfr</name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>!=</operator> <name>topframe</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>!=</operator> <name>FR_COL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curfr</name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>!=</operator> <name>topframe</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><name>curfr</name> <operator>!=</operator> <name>topframe</name> <operator>&amp;&amp;</operator> <name><name>curfr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>!=</operator> <name>topframe</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>curfr</name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>!=</operator> <name>topframe</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>up</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>==</operator> <name>curfr</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>room</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</init> <condition>;</condition> <incr><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>+=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>==</operator> <name>curfr</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>curfr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>up</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>



<expr_stmt><expr><name>room</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <name>cmdline_row</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curfr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>p_ch</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>fr</argument>, <argument>curfr-&gt;fr_next</argument>)</argument_list></macro>
<expr_stmt><expr><name>room</name> <operator>+=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name>curfr</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>room</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>up</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>up</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name>curfr</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>curfr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 




<while>while <condition>(<expr><name>fr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <name>offset</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>!</operator><name>up</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><operator>!</operator><name>up</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>up</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>cmdline_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <name>cmdline_row</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_ch_used</name></name> <operator>=</operator> <name>p_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>win_drag_vsep_line</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>dragwin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>curfr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>dragwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>==</operator> <name>topframe</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>curfr</name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>!=</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>==</operator> <name>topframe</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>curfr</name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><name><name>curfr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>==</operator> <name>topframe</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>curfr</name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>!=</operator> <name>topframe</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curfr</name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>room</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</init> <condition>;</condition> <incr><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>+=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>==</operator> <name>curfr</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>curfr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>room</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>fr</argument>, <argument>curfr-&gt;fr_next</argument>)</argument_list></macro>
<expr_stmt><expr><name>room</name> <operator>+=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name>curfr</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>room</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name>curfr</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>curfr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<while>while <condition>(<expr><name>fr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>frame_minwidth</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <name>offset</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>!</operator><name>left</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><operator>!</operator><name>left</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRACTION_MULT</name></cpp:macro> <cpp:value>16384L</cpp:value></cpp:define>





<function><type><name>void</name></type>
<name>set_fraction</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_fraction</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>*</operator> <name>FRACTION_MULT</name>
<operator>+</operator> <name>FRACTION_MULT</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>win_new_height</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev_height</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>==</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>!=</operator> <name>prev_height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_prev_fraction_row</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_fraction</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exiting</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scroll_to_fraction</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>prev_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>scroll_to_fraction</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sline</name></decl>, <decl><type ref="prev"/><name>line_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_scb</name></name> <operator>||</operator> <name>wp</name> <operator>==</operator> <name>curwin</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>height</name> <argument_list type="generic">&lt; <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_fraction</name></name> <operator>*</operator> <operator>(</operator><name>long</name><operator>)</operator><name>height</name> <operator>-</operator> <literal type="number">1L</literal><operator>)</operator>
<operator>/</operator> <name>FRACTION_MULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line_size</name> <operator>=</operator> <call><name>plines_win_col</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sline</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>-</operator> <name>line_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sline</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><call><name>plines_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sline</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>rows</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sline</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>-=</operator> <name>rows</name> <operator>-</operator> <name>line_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sline</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name>line_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>sline</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>sline</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>line_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>sline</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>--</operator><name>lnum</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line_size</name> <operator>=</operator> <call><name>plines_win_nofill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>line_size</name> <operator>=</operator> <call><name>plines_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>sline</name> <operator>-=</operator> <name>line_size</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>sline</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>lnum</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>-=</operator> <name>line_size</name> <operator>+</operator> <name>sline</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>sline</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>-=</operator> <name>sline</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_topline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>curs_columns</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_prev_fraction_row</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>win_comp_scroll</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invalidate_botline_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>win_new_width</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_line_abv_curs_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invalidate_botline_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curs_columns</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>win_comp_scroll</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>command_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_p_ch</name> <init>= <expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_ch_used</name></name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_ch_used</name></name> <operator>=</operator> <name>p_ch</name></expr>;</expr_stmt>


<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>lastwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>!=</operator> <name>Columns</name> <operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt></block_content></block></while>


<while>while <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name>
<operator>&amp;&amp;</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_p_wfh</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>!=</operator> <name>NO_SCREEN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>&gt;</operator> <name>old_p_ch</name></expr>)</condition> 
<block>{<block_content>
<while>while <condition>(<expr><name>p_ch</name> <operator>&gt;</operator> <name>old_p_ch</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noroom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <name>old_p_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_ch_used</name></name> <operator>=</operator> <name>p_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&gt;</operator> <name>p_ch</name> <operator>-</operator> <name>old_p_ch</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>p_ch</name> <operator>-</operator> <name>old_p_ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>old_p_ch</name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_add_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><operator>-</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>full_screen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>cmdline_row</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>&lt;</operator> <name>cmdline_row</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>frame_add_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>old_p_ch</name> <operator>-</operator> <name>p_ch</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>!=</operator> <name><name>lastwin</name><operator>-&gt;</operator><name>w_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>frame_add_height</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>frp</name></expr></argument>, <argument><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>last_status</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>morewin</name></decl></parameter>)</parameter_list> 
<block>{<block_content>

<expr_stmt><expr><call><name>last_status_rec</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><operator>(</operator><name>p_ls</name> <operator>==</operator> <literal type="number">2</literal>
<operator>||</operator> <operator>(</operator><name>p_ls</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>morewin</name> <operator>||</operator> <operator>!</operator><name>ONE_WINDOW</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>last_status_rec</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>statusline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>statusline</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>win_new_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>statusline</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>&lt;=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>topframe</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noroom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_prev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>fr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_fix_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_new_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>

<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>fp</argument>, <argument>fr-&gt;fr_child</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>last_status_rec</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>statusline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for <control>(<init><expr><name>fp</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</init> <condition><expr><name><name>fp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>last_status_rec</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>statusline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>tabline_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>gui_use_tabline</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>p_stal</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>min_rows</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>firstwin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>MIN_LINES</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>frame_minheight</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_topframe</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>total</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>total</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>tabline_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>only_one_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><operator>(</operator><call><name>bt_help</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bt_help</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator> <operator>||</operator> <name>wp</name> <operator>==</operator> <name>curwin</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>aucmd_win</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>count</name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>check_lnums</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>do_curwin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>do_curwin</name> <operator>||</operator> <name>wp</name> <operator>!=</operator> <name>curwin</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>curbuf</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_save_cursor</name><operator>.</operator><name>w_cursor_save</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_save_cursor</name><operator>.</operator><name>w_topline_save</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_save_cursor</name><operator>.</operator><name>w_cursor_corr</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_save_cursor</name><operator>.</operator><name>w_topline_corr</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>reset_lnums</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>curbuf</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_save_cursor</name><operator>.</operator><name>w_cursor_corr</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_save_cursor</name><operator>.</operator><name>w_cursor_save</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_save_cursor</name><operator>.</operator><name>w_topline_corr</name></name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_save_cursor</name><operator>.</operator><name>w_topline_save</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
















<function><type><name>void</name></type>
<name>make_snapshot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_snapshot</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_snapshot_rec</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curtab</name><operator>-&gt;</operator><name>tp_snapshot</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>make_snapshot_rec</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>frp</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>frame_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>frp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>frp</name><operator>)</operator><operator>-&gt;</operator><name>fr_layout</name></name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>frp</name><operator>)</operator><operator>-&gt;</operator><name>fr_width</name></name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>frp</name><operator>)</operator><operator>-&gt;</operator><name>fr_height</name></name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>make_snapshot_rec</name><argument_list>(<argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>frp</name><operator>)</operator><operator>-&gt;</operator><name>fr_next</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>make_snapshot_rec</name><argument_list>(<argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_child</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>frp</name><operator>)</operator><operator>-&gt;</operator><name>fr_child</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name> <operator>&amp;&amp;</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>==</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>frp</name><operator>)</operator><operator>-&gt;</operator><name>fr_win</name></name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>clear_snapshot</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_snapshot_rec</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_snapshot</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_snapshot</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clear_snapshot_rec</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_snapshot_rec</name><argument_list>(<argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_snapshot_rec</name><argument_list>(<argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>restore_snapshot</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>close_curwin</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_snapshot</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_snapshot</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>fr_width</name> <operator>==</operator> <name><name>topframe</name><operator>-&gt;</operator><name>fr_width</name></name>
<operator>&amp;&amp;</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_snapshot</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>fr_height</name> <operator>==</operator> <name><name>topframe</name><operator>-&gt;</operator><name>fr_height</name></name>
<operator>&amp;&amp;</operator> <call><name>check_snapshot_rec</name><argument_list>(<argument><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_snapshot</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>topframe</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>restore_snapshot_rec</name><argument_list>(<argument><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_snapshot</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>topframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>close_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_snapshot</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_snapshot_rec</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>sn</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sn</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>!=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name>
<operator>||</operator> <operator>(</operator><name><name>sn</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>sn</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>fr</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>sn</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>check_snapshot_rec</name><argument_list>(<argument><expr><name><name>sn</name><operator>-&gt;</operator><name>fr_next</name></name></expr></argument>, <argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>sn</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>check_snapshot_rec</name><argument_list>(<argument><expr><name><name>sn</name><operator>-&gt;</operator><name>fr_child</name></name></expr></argument>, <argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_child</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>sn</name><operator>-&gt;</operator><name>fr_win</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name><name>sn</name><operator>-&gt;</operator><name>fr_win</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type>
<name>restore_snapshot_rec</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>sn</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp2</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>=</operator> <name><name>sn</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>=</operator> <name><name>sn</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>frame_new_height</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_height</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_new_width</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_width</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>sn</name><operator>-&gt;</operator><name>fr_win</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sn</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wp2</name> <operator>=</operator> <call><name>restore_snapshot_rec</name><argument_list>(<argument><expr><name><name>sn</name><operator>-&gt;</operator><name>fr_next</name></name></expr></argument>, <argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>wp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sn</name><operator>-&gt;</operator><name>fr_child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wp2</name> <operator>=</operator> <call><name>restore_snapshot_rec</name><argument_list>(<argument><expr><name><name>sn</name><operator>-&gt;</operator><name>fr_child</name></name></expr></argument>, <argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>wp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>wp</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>win_hasvertsplit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topframe</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>fr</argument>, <argument>topframe-&gt;fr_child</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>get_win_number</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>first_win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name>first_win</name></expr>;</init> <condition><expr><name>w</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>w</name> <operator>!=</operator> <name>wp</name></expr>;</condition> <incr><expr><name>w</name> <operator>=</operator> <call><name>W_NEXT</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>get_tab_number</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier><name>tp</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>t</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <name>tp</name></expr>;</condition> <incr><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>frame_check_height</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>!=</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>topfrp-&gt;fr_child</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>!=</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>frame_check_width</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>topfrp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>!=</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topfrp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>topfrp-&gt;fr_child</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_width</name></name> <operator>!=</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>int_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>a</name> <operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>b</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type>
<name>check_colorcolumn</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>color_cols</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cc</name></name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e_invarg</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>col</name> <operator>*</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_tw</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>e_invarg</name></expr>;</return></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>color_cols</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<label><name>skip</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e_invarg</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e_invarg</name></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>color_cols</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>int_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>color_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>color_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
