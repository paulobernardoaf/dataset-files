<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\charset.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win_nolbr_chartabsize</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>headp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>nr2hex</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>chartab_initialized</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_CHARTAB</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(buf)-&gt;b_chartab[(unsigned)(c) &gt;&gt; 3] |= (1 &lt;&lt; ((c) &amp; 0x7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_CHARTAB</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(buf)-&gt;b_chartab[(unsigned)(c) &gt;&gt; 3] &amp;= ~(1 &lt;&lt; ((c) &amp; 0x7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CHARTAB</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((buf)-&gt;b_chartab[(unsigned)(c) &gt;&gt; 3] &amp; (1 &lt;&lt; ((c) &amp; 0x7)))</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>g_chartab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_CELL_MASK</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_PRINT_CHAR</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_ID_CHAR</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_FNAME_CHAR</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>in_win_border</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>vcol</name></decl></parameter>)</parameter_list>;</function_decl>



























<function><type><name>int</name></type>
<name>init_chartab</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>buf_init_chartab</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>buf_init_chartab</name><parameter_list>(
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>global</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tilde</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_isalpha</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>global</name></expr>)</condition>
<block>{<block_content>








<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dy_flags</name> <operator>&amp;</operator> <name>DY_UHEX</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>CT_PRINT_CHAR</name></expr>;</expr_stmt></block_content></block></while></block_content></block></while>
<while>while <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CT_PRINT_CHAR</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CT_PRINT_CHAR</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CT_PRINT_CHAR</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dy_flags</name> <operator>&amp;</operator> <name>DY_UHEX</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>


<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="number">0x8e</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>|=</operator> <name>CT_FNAME_CHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET_CHARTAB</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_lisp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET_CHARTAB</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>global</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_isi</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_isp</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_isf</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tilde</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_isalpha</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tilde</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">256</literal> <operator>||</operator> <operator>(</operator><name>c2</name> <operator>&lt;</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>c2</name> <operator>&gt;=</operator> <literal type="number">256</literal>
<operator>||</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> 
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>do_isalpha</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>c2</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_isalpha</name> <operator>||</operator> <call><name>MB_ISLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MB_ISUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tilde</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>CT_ID_CHAR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>|=</operator> <name>CT_ID_CHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">' '</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'~'</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>enc_dbcs</name> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tilde</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><name>CT_CELL_MASK</name><operator>)</operator>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>dy_flags</name> <operator>&amp;</operator> <name>DY_UHEX</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>CT_PRINT_CHAR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><name>CT_CELL_MASK</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>|=</operator> <name>CT_PRINT_CHAR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tilde</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>CT_FNAME_CHAR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>|=</operator> <name>CT_FNAME_CHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tilde</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RESET_CHARTAB</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET_CHARTAB</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_to_option_part</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><name>chartab_initialized</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>trans_characters</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>trs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>trs_len</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>=</operator> <name>bufsize</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>buf</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>trs_len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>trs_len</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>trs</name> <operator>=</operator> <call><name>transchar_byte</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trs_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>trs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>trs_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>trs_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>trs_len</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>trs</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>trs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>trs_len</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>transstr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>hexbuf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>transchar_hex</name><argument_list>(<argument><expr><name>hexbuf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>hexbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>byte2cells</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>vim_strsize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRNCAT</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transchar_hex</name><argument_list>(<argument><expr><name>res</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>transchar_byte</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>str_foldcase</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>orglen</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>orglen</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_CHAR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char_u *)ga.ga_data)[i]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_PTR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char_u *)ga.ga_data + i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_CHAR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(buf == NULL ? GA_CHAR(i) : buf[i])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_PTR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(buf == NULL ? GA_PTR(i) : buf + i)</cpp:value></cpp:define>


<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GA_CHAR</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>STR_CHAR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>||</operator> <operator>(</operator><name>has_mbyte</name> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><call><name>STR_CHAR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><call><name>STR_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>olen</name> <init>= <expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><call><name>STR_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lc</name> <init>= <expr><call><name>utf_tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x80</literal> <operator>||</operator> <name>olen</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>lc</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nlen</name> <init>= <expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>!=</operator> <name>nlen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>&gt;</operator> <name>olen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>
?</condition><then> <expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>nlen</name> <operator>-</operator> <name>olen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>
</then><else>: <expr><name>len</name> <operator>+</operator> <name>nlen</name> <operator>-</operator> <name>olen</name> <operator>&gt;=</operator> <name>buflen</name></expr></else></ternary></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>lc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name>olen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>!=</operator> <name>nlen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><call><name>GA_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>nlen</name></expr></argument>, <argument><expr><call><name>GA_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>nlen</name> <operator>-</operator> <name>olen</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>nlen</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>nlen</name> <operator>-</operator> <name>olen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>lc</name></expr></argument>, <argument><expr><call><name>STR_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><call><name>STR_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GA_CHAR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>TOLOWER_LOC</name><argument_list>(<argument><expr><call><name>GA_CHAR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TOLOWER_LOC</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>









<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>transchar_buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>transchar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>transchar_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'~'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transchar_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>chartab_initialized</name> <operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">255</literal><operator>)</operator>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'~'</literal><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <call><name>vim_isprintc_strict</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>transchar_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transchar_buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transchar_nonprint</name><argument_list>(<argument><expr><name>transchar_buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>transchar_buf</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>transchar_byte</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>transchar_nonprint</name><argument_list>(<argument><expr><name>transchar_buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>transchar_buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>transchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>transchar_nonprint</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>CAR</name> <operator>&amp;&amp;</operator> <call><name>get_fileformat</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOL_MAC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>dy_flags</name> <operator>&amp;</operator> <name>DY_UHEX</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>transchar_hex</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><call><name>CtrlChar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>DEL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>DEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CtrlChar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>^</operator> <literal type="number">0x40</literal></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>transchar_hex</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">' '</literal> <operator>+</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'~'</literal> <operator>+</operator> <literal type="number">0x80</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'~'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>MetaChar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else 
<block>{<block_content>




<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'~'</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>^</operator> <literal type="number">0x40</literal></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>transchar_hex</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>nr2hex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>nr2hex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>nr2hex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>nr2hex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>nr2hex</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>-</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'a'</literal></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>byte2cells</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>g_chartab</name><index>[<expr><name>b</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_CELL_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>char2cells</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>char2cells</name><argument_list>(<argument><expr><call><name>K_SECOND</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>utf_char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>&amp;</operator> <name>CT_CELL_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>ptr2cells</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>g_chartab</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_CELL_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>vim_strsize</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vim_strnsize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>vim_strnsize</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>byte2cells</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET_WIN_BUF_CHARTABSIZE</name><parameter_list>(<parameter><type><name>wp</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>col</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (*(p) == TAB &amp;&amp; (!(wp)-&gt;w_p_list || lcs_tab1)) { return tabstop_padding(col, (buf)-&gt;b_p_ts, (buf)-&gt;b_p_vts_array); } else return ptr2cells(p);</cpp:value></cpp:define>






<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET_WIN_BUF_CHARTABSIZE</name><parameter_list>(<parameter><type><name>wp</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>col</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (*(p) == TAB &amp;&amp; (!(wp)-&gt;w_p_list || lcs_tab1)) { int ts; ts = (buf)-&gt;b_p_ts; return (int)(ts - (col % ts)); } else return ptr2cells(p);</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>chartabsize</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>RET_WIN_BUF_CHARTABSIZE</name><argument_list>(<argument>curwin</argument>, <argument>curbuf</argument>, <argument>p</argument>, <argument>col</argument>)</argument_list></macro>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_chartabsize</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>RET_WIN_BUF_CHARTABSIZE</name><argument_list>(<argument>wp</argument>, <argument>wp-&gt;w_buffer</argument>, <argument>p</argument>, <argument>col</argument>)</argument_list></macro>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type>
<name>linetabsize</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>linetabsize_col</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>linetabsize_col</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><name>startcol</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt> 

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>col</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>win_linetabsize</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>line</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>==</operator> <name>MAXCOL</name> <operator>||</operator> <name>s</name> <operator>&lt;</operator> <name>line</name> <operator>+</operator> <name>len</name><operator>)</operator></expr>;</condition>
<incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>col</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>vim_isIDc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_ID_CHAR</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>vim_iswordc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vim_iswordc_buf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>dbcs_class</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>utf_class_buf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>GET_CHARTAB</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>vim_iswordp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vim_iswordp_buf</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>vim_isfilec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_FNAME_CHAR</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>vim_isfilec_or_wc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<return>return <expr><call><name>vim_isfilec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <call><name>mch_has_wildcard</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>vim_isprintc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>utf_printable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_PRINT_CHAR</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>vim_isprintc_strict</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <name>MB_BYTE2LEN</name><operator>(</operator><name>c</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>utf_printable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_PRINT_CHAR</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>lbr_chartabsize</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>line</name></type> <name>UNUSED</name></decl></parameter>, 
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_showbreak_value</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_bri</name></name></expr>)</condition>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>win_nolbr_chartabsize</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<macro><name>RET_WIN_BUF_CHARTABSIZE</name><argument_list>(<argument>curwin</argument>, <argument>curbuf</argument>, <argument>s</argument>, <argument>col</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><ternary><condition><expr><name>line</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><name>line</name></expr></else></ternary></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>lbr_chartabsize_adv</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>lbr_chartabsize</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>win_lbr_chartabsize</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>line</name></type> <name>UNUSED</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><name>headp</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col_adj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>colnr_T</name></type> <name>colmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>added</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numberextra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tab_corr</name> <init>= <expr><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <name>TAB</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sbr</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_bri</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_showbreak_value</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>win_nolbr_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>headp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<macro><name>RET_WIN_BUF_CHARTABSIZE</name><argument_list>(<argument>wp</argument>, <argument>wp-&gt;w_buffer</argument>, <argument>s</argument>, <argument>col</argument>)</argument_list></macro>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>win_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tab_corr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col_adj</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name>
<operator>&amp;&amp;</operator> <call><name>VIM_ISBREAK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISBREAK</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>numberextra</name> <operator>=</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col2</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>colmax</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>numberextra</name> <operator>-</operator> <name>col_adj</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>colmax</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>colmax</name> <operator>+=</operator> <name>col_adj</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>colmax</name> <operator>+</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colmax</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>col</name> <operator>-</operator> <name>colmax</name><operator>)</operator> <operator>/</operator> <name>n</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>n</name> <operator>-</operator> <name>col_adj</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>ps</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISBREAK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><operator>!</operator><call><name>VIM_ISBREAK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>col2</name> <operator>==</operator> <name>col</name> <operator>||</operator> <operator>!</operator><call><name>VIM_ISBREAK</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>ps</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>col2</name> <operator>+=</operator> <call><name>win_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col2</name> <operator>&gt;=</operator> <name>colmax</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>colmax</name> <operator>-</operator> <name>col</name> <operator>+</operator> <name>col_adj</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <call><name>in_win_border</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>mb_added</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sbr</name> <operator>=</operator> <call><name>get_showbreak_value</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>sbr</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_bri</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>sbrlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numberwidth</name> <init>= <expr><call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>numberextra</name> <operator>=</operator> <name>numberwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>numberextra</name> <operator>+</operator> <name>mb_added</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>numberextra</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <operator>(</operator><name>numberextra</name> <operator>-</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>numberextra</name> <operator>&amp;&amp;</operator> <name>numberextra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>%=</operator> <name>numberextra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sbr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sbrlen</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>MB_CHARLEN</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>sbrlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>sbrlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>numberextra</name> <operator>&amp;&amp;</operator> <name>numberextra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>col</name> <operator>%</operator> <name>numberextra</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>numberextra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>numberwidth</name> <operator>-</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>numberwidth</name> <operator>-=</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>+</operator> <name>size</name> <operator>+</operator> <name>sbrlen</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sbr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>+</operator> <name>sbrlen</name> <operator>+</operator> <name>numberwidth</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>sbrlen</name> <operator>-</operator> <name>numberwidth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_width</name> <init>= <expr><ternary><condition><expr><name>col</name></expr>
?</condition><then> <expr><operator>(</operator><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <operator>(</operator><name>sbrlen</name> <operator>+</operator> <name>col</name><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>added</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>-</operator> <name>prev_width</name><operator>)</operator> <operator>/</operator> <name>width</name><operator>)</operator> <operator>*</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>-</operator> <name>prev_width</name><operator>)</operator> <operator>%</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>added</name> <operator>+=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>added</name> <operator>+=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_bri</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>added</name> <operator>+=</operator> <call><name>get_breakindent_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>added</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>headp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>headp</name> <operator>=</operator> <name>added</name> <operator>+</operator> <name>mb_added</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_nolbr_chartabsize</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>headp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>||</operator> <name>lcs_tab1</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>tabstop_padding</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>n</name> <operator>-</operator> <operator>(</operator><name>col</name> <operator>%</operator> <name>n</name><operator>)</operator><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>in_win_border</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>headp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>headp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>in_win_border</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>vcol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>width2</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>width1</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>vcol</name> <operator>&lt;</operator> <name>width1</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>vcol</name> <operator>==</operator> <name>width1</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>width2</name> <operator>=</operator> <name>width1</name> <operator>+</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width2</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>vcol</name> <operator>-</operator> <name>width1</name><operator>)</operator> <operator>%</operator> <name>width2</name> <operator>==</operator> <name>width2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>getvcol</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>vcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>posptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>incr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>head</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>vts</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>ts</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>posptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if> 
<else>else
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>posptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>posptr</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>posptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>||</operator> <name>lcs_tab1</name> <operator>!=</operator> <name>NUL</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_showbreak_value</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_bri</name></name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>TAB</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>vcol</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>vts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <name>ts</name> <operator>-</operator> <operator>(</operator><name>vcol</name> <operator>%</operator> <name>ts</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_CELL_MASK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>incr</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>in_win_border</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>vcol</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>incr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_CELL_MASK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>posptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&gt;=</operator> <name>posptr</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>

<expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>vcol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>posptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&gt;=</operator> <name>posptr</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>vcol</name> <operator>+</operator> <name>head</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>vcol</name> <operator>+</operator> <name>incr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>TAB</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>NORMAL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>virtual_active</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>VIsual_active</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <call><name>LTOREQ_POS</name><argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <name>vcol</name> <operator>+</operator> <name>incr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <name>vcol</name> <operator>+</operator> <name>head</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>colnr_T</name></type>
<name>getvcol_nolist</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>posp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>list_save</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>vcol</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>posp</name><operator>-&gt;</operator><name>coladd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>posp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>posp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>list_save</name></expr>;</expr_stmt>
<return>return <expr><name>vcol</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>getvvcol</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>coladd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>endadd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coladd</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>coladd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endadd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>endadd</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><call><name>char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coladd</name> <operator>&gt;</operator> <name>endadd</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>endadd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>coladd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>coladd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>col</name> <operator>+</operator> <name>endadd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>getvcols</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos1</name></decl></parameter>,
<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos2</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>left</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>from1</name></decl>, <decl><type ref="prev"/><name>from2</name></decl>, <decl><type ref="prev"/><name>to1</name></decl>, <decl><type ref="prev"/><name>to2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LT_POSP</name><argument_list>(<argument><expr><name>pos1</name></expr></argument>, <argument><expr><name>pos2</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>from2</name> <operator>&lt;</operator> <name>from1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name>from2</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name>from1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to2</name> <operator>&gt;</operator> <name>to1</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name>from2</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>to1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name>from2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name>to2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name>to1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>skipwhite</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>getwhitecols_curline</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>getwhitecols</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>getwhitecols</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>p</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>skipdigits</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>skipbin</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>vim_isbdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>skiphex</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>vim_isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>skiptobin</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isbdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>skiptodigit</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>skiptohex</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>vim_isdigit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>vim_isxdigit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>vim_isbdigit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LATIN1LOWER</name></cpp:macro> <cpp:value>'l'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LATIN1UPPER</name></cpp:macro> <cpp:value>'U'</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>latin1flags</name><index>[<expr><literal type="number">257</literal></expr>]</index></name> <init>= <expr><literal type="string">" UUUUUUUUUUUUUUUUUUUUUUUUUU llllllllllllllllllllllllll UUUUUUUUUUUUUUUUUUUUUUU UUUUUUUllllllllllllllllllllllll llllllll"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>latin1upper</name><index>[<expr><literal type="number">257</literal></expr>]</index></name> <init>= <expr><literal type="string">" !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xf7\xd8\xd9\xda\xdb\xdc\xdd\xde\xff"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>latin1lower</name><index>[<expr><literal type="number">257</literal></expr>]</index></name> <init>= <expr><literal type="string">" !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@abcdefghijklmnopqrstuvwxyz[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xd7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>vim_islower</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>utf_islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ISWLOWER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>iswlower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_latin1like</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>latin1flags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>LATIN1LOWER</name><operator>)</operator> <operator>==</operator> <name>LATIN1LOWER</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vim_isupper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>utf_isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ISWUPPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>iswupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_latin1like</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>latin1flags</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>LATIN1UPPER</name><operator>)</operator> <operator>==</operator> <name>LATIN1UPPER</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vim_toupper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_KEEPASCII</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>utf_toupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TOWUPPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>towupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_latin1like</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>latin1upper</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_KEEPASCII</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>TOUPPER_LOC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vim_tolower</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_KEEPASCII</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>utf_tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TOWLOWER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>towlower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_latin1like</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>latin1lower</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_KEEPASCII</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>TOLOWER_LOC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>skiptowhite</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>skiptowhite_esc</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>Ctrl_V</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>long</name></type>
<name>getdigits</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipdigits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>vim_isblankline</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>lbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






















<function><type><name>void</name></type>
<name>vim_str2nr</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>prep</name></decl></parameter>, 


<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>, 
<parameter><decl><type><name>varnumber_T</name> <modifier>*</modifier></type><name>nptr</name></decl></parameter>, 
<parameter><decl><type><name>uvarnumber_T</name> <modifier>*</modifier></type><name>unptr</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pre</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>negative</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uvarnumber_T</name></type> <name>un</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'8'</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'9'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>maxlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>maxlen</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pre</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_HEX</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>pre</name> <operator>==</operator> <literal type="char">'X'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>vim_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>maxlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>maxlen</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_BIN</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>pre</name> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>vim_isbdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>maxlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>maxlen</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>STR2NR_OCT</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <name>maxlen</name> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'7'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pre</name> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'b'</literal>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_BIN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_FORCE</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pre</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<while>while <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>&lt;=</operator> <literal type="char">'1'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>un</name> <operator>&lt;=</operator> <name>UVARNUM_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>un</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>un</name> <operator>+</operator> <operator>(</operator><name>uvarnumber_T</name><operator>)</operator><operator>(</operator><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>un</name> <operator>=</operator> <name>UVARNUM_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>++</operator> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_QUOTE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\''</literal>
<operator>&amp;&amp;</operator> <literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'1'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>++</operator> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>pre</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_OCT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_FORCE</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>un</name> <operator>&lt;=</operator> <name>UVARNUM_MAX</name> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>un</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>un</name> <operator>+</operator> <operator>(</operator><name>uvarnumber_T</name><operator>)</operator><operator>(</operator><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>un</name> <operator>=</operator> <name>UVARNUM_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>++</operator> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_QUOTE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\''</literal>
<operator>&amp;&amp;</operator> <literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>++</operator> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>pre</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_HEX</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_FORCE</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pre</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<while>while <condition>(<expr><call><name>vim_isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>un</name> <operator>&lt;=</operator> <name>UVARNUM_MAX</name> <operator>/</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>un</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>un</name> <operator>+</operator> <operator>(</operator><name>uvarnumber_T</name><operator>)</operator><call><name>hex2nr</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>un</name> <operator>=</operator> <name>UVARNUM_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>++</operator> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_QUOTE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <call><name>vim_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>++</operator> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<while>while <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uvarnumber_T</name></type> <name>digit</name> <init>= <expr><operator>(</operator><name>uvarnumber_T</name><operator>)</operator><operator>(</operator><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>un</name> <operator>&lt;</operator> <name>UVARNUM_MAX</name> <operator>/</operator> <literal type="number">10</literal>
<operator>||</operator> <operator>(</operator><name>un</name> <operator>==</operator> <name>UVARNUM_MAX</name> <operator>/</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>digit</name> <operator>&lt;=</operator> <name>UVARNUM_MAX</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>un</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>un</name> <operator>+</operator> <name>digit</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>un</name> <operator>=</operator> <name>UVARNUM_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>++</operator> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_QUOTE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>++</operator> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>!=</operator> <name>maxlen</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>prep</name> <operator>=</operator> <name>pre</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>un</name> <operator>&gt;</operator> <name>VARNUM_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>nptr</name> <operator>=</operator> <name>VARNUM_MIN</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>nptr</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>un</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>un</name> <operator>&gt;</operator> <name>VARNUM_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>un</name> <operator>=</operator> <name>VARNUM_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>nptr</name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name>un</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>unptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>unptr</name> <operator>=</operator> <name>un</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>hex2nr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type>
<name>hexhex2nr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isxdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>vim_isxdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>hex2nr</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<function><type><name>int</name></type>
<name>rem_backslash</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal>
<operator>||</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isfilec</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>backslash_halve</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>rem_backslash</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>backslash_halve_save</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>backslash_halve</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>ebcdic2ascii_tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0000</literal></expr>, <expr><literal type="number">0001</literal></expr>, <expr><literal type="number">0002</literal></expr>, <expr><literal type="number">0003</literal></expr>, <expr><literal type="number">0004</literal></expr>, <expr><literal type="number">0011</literal></expr>, <expr><literal type="number">0006</literal></expr>, <expr><literal type="number">0177</literal></expr>,
<expr><literal type="number">0010</literal></expr>, <expr><literal type="number">0011</literal></expr>, <expr><literal type="number">0012</literal></expr>, <expr><literal type="number">0013</literal></expr>, <expr><literal type="number">0014</literal></expr>, <expr><literal type="number">0015</literal></expr>, <expr><literal type="number">0016</literal></expr>, <expr><literal type="number">0017</literal></expr>,
<expr><literal type="number">0020</literal></expr>, <expr><literal type="number">0021</literal></expr>, <expr><literal type="number">0022</literal></expr>, <expr><literal type="number">0023</literal></expr>, <expr><literal type="number">0024</literal></expr>, <expr><literal type="number">0012</literal></expr>, <expr><literal type="number">0010</literal></expr>, <expr><literal type="number">0027</literal></expr>,
<expr><literal type="number">0030</literal></expr>, <expr><literal type="number">0031</literal></expr>, <expr><literal type="number">0032</literal></expr>, <expr><literal type="number">0033</literal></expr>, <expr><literal type="number">0033</literal></expr>, <expr><literal type="number">0035</literal></expr>, <expr><literal type="number">0036</literal></expr>, <expr><literal type="number">0037</literal></expr>,
<expr><literal type="number">0040</literal></expr>, <expr><literal type="number">0041</literal></expr>, <expr><literal type="number">0042</literal></expr>, <expr><literal type="number">0043</literal></expr>, <expr><literal type="number">0044</literal></expr>, <expr><literal type="number">0045</literal></expr>, <expr><literal type="number">0046</literal></expr>, <expr><literal type="number">0047</literal></expr>,
<expr><literal type="number">0050</literal></expr>, <expr><literal type="number">0051</literal></expr>, <expr><literal type="number">0052</literal></expr>, <expr><literal type="number">0053</literal></expr>, <expr><literal type="number">0054</literal></expr>, <expr><literal type="number">0055</literal></expr>, <expr><literal type="number">0056</literal></expr>, <expr><literal type="number">0057</literal></expr>,
<expr><literal type="number">0060</literal></expr>, <expr><literal type="number">0061</literal></expr>, <expr><literal type="number">0062</literal></expr>, <expr><literal type="number">0063</literal></expr>, <expr><literal type="number">0064</literal></expr>, <expr><literal type="number">0065</literal></expr>, <expr><literal type="number">0066</literal></expr>, <expr><literal type="number">0067</literal></expr>,
<expr><literal type="number">0070</literal></expr>, <expr><literal type="number">0071</literal></expr>, <expr><literal type="number">0072</literal></expr>, <expr><literal type="number">0073</literal></expr>, <expr><literal type="number">0074</literal></expr>, <expr><literal type="number">0075</literal></expr>, <expr><literal type="number">0076</literal></expr>, <expr><literal type="number">0077</literal></expr>,
<expr><literal type="number">0040</literal></expr>, <expr><literal type="number">0240</literal></expr>, <expr><literal type="number">0241</literal></expr>, <expr><literal type="number">0242</literal></expr>, <expr><literal type="number">0243</literal></expr>, <expr><literal type="number">0244</literal></expr>, <expr><literal type="number">0245</literal></expr>, <expr><literal type="number">0246</literal></expr>,
<expr><literal type="number">0247</literal></expr>, <expr><literal type="number">0250</literal></expr>, <expr><literal type="number">0325</literal></expr>, <expr><literal type="number">0056</literal></expr>, <expr><literal type="number">0074</literal></expr>, <expr><literal type="number">0050</literal></expr>, <expr><literal type="number">0053</literal></expr>, <expr><literal type="number">0174</literal></expr>,
<expr><literal type="number">0046</literal></expr>, <expr><literal type="number">0251</literal></expr>, <expr><literal type="number">0252</literal></expr>, <expr><literal type="number">0253</literal></expr>, <expr><literal type="number">0254</literal></expr>, <expr><literal type="number">0255</literal></expr>, <expr><literal type="number">0256</literal></expr>, <expr><literal type="number">0257</literal></expr>,
<expr><literal type="number">0260</literal></expr>, <expr><literal type="number">0261</literal></expr>, <expr><literal type="number">0041</literal></expr>, <expr><literal type="number">0044</literal></expr>, <expr><literal type="number">0052</literal></expr>, <expr><literal type="number">0051</literal></expr>, <expr><literal type="number">0073</literal></expr>, <expr><literal type="number">0176</literal></expr>,
<expr><literal type="number">0055</literal></expr>, <expr><literal type="number">0057</literal></expr>, <expr><literal type="number">0262</literal></expr>, <expr><literal type="number">0263</literal></expr>, <expr><literal type="number">0264</literal></expr>, <expr><literal type="number">0265</literal></expr>, <expr><literal type="number">0266</literal></expr>, <expr><literal type="number">0267</literal></expr>,
<expr><literal type="number">0270</literal></expr>, <expr><literal type="number">0271</literal></expr>, <expr><literal type="number">0313</literal></expr>, <expr><literal type="number">0054</literal></expr>, <expr><literal type="number">0045</literal></expr>, <expr><literal type="number">0137</literal></expr>, <expr><literal type="number">0076</literal></expr>, <expr><literal type="number">0077</literal></expr>,
<expr><literal type="number">0272</literal></expr>, <expr><literal type="number">0273</literal></expr>, <expr><literal type="number">0274</literal></expr>, <expr><literal type="number">0275</literal></expr>, <expr><literal type="number">0276</literal></expr>, <expr><literal type="number">0277</literal></expr>, <expr><literal type="number">0300</literal></expr>, <expr><literal type="number">0301</literal></expr>,
<expr><literal type="number">0302</literal></expr>, <expr><literal type="number">0140</literal></expr>, <expr><literal type="number">0072</literal></expr>, <expr><literal type="number">0043</literal></expr>, <expr><literal type="number">0100</literal></expr>, <expr><literal type="number">0047</literal></expr>, <expr><literal type="number">0075</literal></expr>, <expr><literal type="number">0042</literal></expr>,
<expr><literal type="number">0303</literal></expr>, <expr><literal type="number">0141</literal></expr>, <expr><literal type="number">0142</literal></expr>, <expr><literal type="number">0143</literal></expr>, <expr><literal type="number">0144</literal></expr>, <expr><literal type="number">0145</literal></expr>, <expr><literal type="number">0146</literal></expr>, <expr><literal type="number">0147</literal></expr>,
<expr><literal type="number">0150</literal></expr>, <expr><literal type="number">0151</literal></expr>, <expr><literal type="number">0304</literal></expr>, <expr><literal type="number">0305</literal></expr>, <expr><literal type="number">0306</literal></expr>, <expr><literal type="number">0307</literal></expr>, <expr><literal type="number">0310</literal></expr>, <expr><literal type="number">0311</literal></expr>,
<expr><literal type="number">0312</literal></expr>, <expr><literal type="number">0152</literal></expr>, <expr><literal type="number">0153</literal></expr>, <expr><literal type="number">0154</literal></expr>, <expr><literal type="number">0155</literal></expr>, <expr><literal type="number">0156</literal></expr>, <expr><literal type="number">0157</literal></expr>, <expr><literal type="number">0160</literal></expr>,
<expr><literal type="number">0161</literal></expr>, <expr><literal type="number">0162</literal></expr>, <expr><literal type="number">0136</literal></expr>, <expr><literal type="number">0314</literal></expr>, <expr><literal type="number">0315</literal></expr>, <expr><literal type="number">0316</literal></expr>, <expr><literal type="number">0317</literal></expr>, <expr><literal type="number">0320</literal></expr>,
<expr><literal type="number">0321</literal></expr>, <expr><literal type="number">0345</literal></expr>, <expr><literal type="number">0163</literal></expr>, <expr><literal type="number">0164</literal></expr>, <expr><literal type="number">0165</literal></expr>, <expr><literal type="number">0166</literal></expr>, <expr><literal type="number">0167</literal></expr>, <expr><literal type="number">0170</literal></expr>,
<expr><literal type="number">0171</literal></expr>, <expr><literal type="number">0172</literal></expr>, <expr><literal type="number">0322</literal></expr>, <expr><literal type="number">0323</literal></expr>, <expr><literal type="number">0324</literal></expr>, <expr><literal type="number">0133</literal></expr>, <expr><literal type="number">0326</literal></expr>, <expr><literal type="number">0327</literal></expr>,
<expr><literal type="number">0330</literal></expr>, <expr><literal type="number">0331</literal></expr>, <expr><literal type="number">0332</literal></expr>, <expr><literal type="number">0333</literal></expr>, <expr><literal type="number">0334</literal></expr>, <expr><literal type="number">0335</literal></expr>, <expr><literal type="number">0336</literal></expr>, <expr><literal type="number">0337</literal></expr>,
<expr><literal type="number">0340</literal></expr>, <expr><literal type="number">0341</literal></expr>, <expr><literal type="number">0342</literal></expr>, <expr><literal type="number">0343</literal></expr>, <expr><literal type="number">0344</literal></expr>, <expr><literal type="number">0135</literal></expr>, <expr><literal type="number">0346</literal></expr>, <expr><literal type="number">0347</literal></expr>,
<expr><literal type="number">0173</literal></expr>, <expr><literal type="number">0101</literal></expr>, <expr><literal type="number">0102</literal></expr>, <expr><literal type="number">0103</literal></expr>, <expr><literal type="number">0104</literal></expr>, <expr><literal type="number">0105</literal></expr>, <expr><literal type="number">0106</literal></expr>, <expr><literal type="number">0107</literal></expr>,
<expr><literal type="number">0110</literal></expr>, <expr><literal type="number">0111</literal></expr>, <expr><literal type="number">0350</literal></expr>, <expr><literal type="number">0351</literal></expr>, <expr><literal type="number">0352</literal></expr>, <expr><literal type="number">0353</literal></expr>, <expr><literal type="number">0354</literal></expr>, <expr><literal type="number">0355</literal></expr>,
<expr><literal type="number">0175</literal></expr>, <expr><literal type="number">0112</literal></expr>, <expr><literal type="number">0113</literal></expr>, <expr><literal type="number">0114</literal></expr>, <expr><literal type="number">0115</literal></expr>, <expr><literal type="number">0116</literal></expr>, <expr><literal type="number">0117</literal></expr>, <expr><literal type="number">0120</literal></expr>,
<expr><literal type="number">0121</literal></expr>, <expr><literal type="number">0122</literal></expr>, <expr><literal type="number">0356</literal></expr>, <expr><literal type="number">0357</literal></expr>, <expr><literal type="number">0360</literal></expr>, <expr><literal type="number">0361</literal></expr>, <expr><literal type="number">0362</literal></expr>, <expr><literal type="number">0363</literal></expr>,
<expr><literal type="number">0134</literal></expr>, <expr><literal type="number">0237</literal></expr>, <expr><literal type="number">0123</literal></expr>, <expr><literal type="number">0124</literal></expr>, <expr><literal type="number">0125</literal></expr>, <expr><literal type="number">0126</literal></expr>, <expr><literal type="number">0127</literal></expr>, <expr><literal type="number">0130</literal></expr>,
<expr><literal type="number">0131</literal></expr>, <expr><literal type="number">0132</literal></expr>, <expr><literal type="number">0364</literal></expr>, <expr><literal type="number">0365</literal></expr>, <expr><literal type="number">0366</literal></expr>, <expr><literal type="number">0367</literal></expr>, <expr><literal type="number">0370</literal></expr>, <expr><literal type="number">0371</literal></expr>,
<expr><literal type="number">0060</literal></expr>, <expr><literal type="number">0061</literal></expr>, <expr><literal type="number">0062</literal></expr>, <expr><literal type="number">0063</literal></expr>, <expr><literal type="number">0064</literal></expr>, <expr><literal type="number">0065</literal></expr>, <expr><literal type="number">0066</literal></expr>, <expr><literal type="number">0067</literal></expr>,
<expr><literal type="number">0070</literal></expr>, <expr><literal type="number">0071</literal></expr>, <expr><literal type="number">0372</literal></expr>, <expr><literal type="number">0373</literal></expr>, <expr><literal type="number">0374</literal></expr>, <expr><literal type="number">0375</literal></expr>, <expr><literal type="number">0376</literal></expr>, <expr><literal type="number">0377</literal></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><name>void</name></type>
<name>ebcdic2ascii</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ebcdic2ascii_tab</name><index>[<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
