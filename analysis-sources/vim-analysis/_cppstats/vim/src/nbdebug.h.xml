<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\nbdebug.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NBDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!(c)) { fprintf(stderr, "Assertion failed: line %d, file %s\n", __LINE__, __FILE__); fflush(stderr); abort(); }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nbdebug</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>nbdbg a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_TRACE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_TRACE_VERBOSE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_TRACE_COLONCMD</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_PRINT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_DEBUG_ALL</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBDLEVEL</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nb_debug != NULL &amp;&amp; (nb_dlevel &amp; (flags)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBDEBUG_TRACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>WT_ENV</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>WT_WAIT</name></decl>, 

<decl><name>WT_STOP</name></decl> 

}</block></enum></type> <name>WtWait</name>;</typedef>

<function_decl><type><name>void</name></type> <name>nbdbg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PRINTF_FORMAT_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>1<operator>,</operator> 2</function_decl>)))

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>nbdebug_wait</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>wait_flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>wait_var</name></decl></parameter>, <parameter><decl><type><name>u_int</name></type> <name>wait_secs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>nbdebug_log_init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>log_var</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>level_var</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type><name>nb_debug</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>u_int</name></type> <name>nb_dlevel</name></decl>;</decl_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>nbdbg</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
