<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\if_py_both.h"><decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_py_systemexit</name><index>[]</index></name> <init>= <expr><literal type="string">"E880: Can't handle SystemExit of %s exception in vim"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&lt;</operator> <literal type="number">0x02050000</literal></expr></cpp:if>

<typedef>typedef <type><name>int</name></type> <name>Py_ssize_t</name>;</typedef> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_OPT</name></cpp:macro> <cpp:value>(enc_utf8 ? "utf-8" : enc_dbcs ? "euc-jp" : (char *)p_enc)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOPY_FUNC</name></cpp:macro> <cpp:value>"_vim_pydo"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vim_special_path</name> <init>= <expr><literal type="string">"_vim_path_"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_SET_STRING</name><parameter_list>(<parameter><type><name>exc</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PyErr_SetString(exc, _(str))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_SetVim</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PyErr_SetString(VimError, str)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_SET_VIM</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PyErr_SET_STRING(VimError, str)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_FORMAT</name><parameter_list>(<parameter><type><name>exc</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PyErr_Format(exc, _(str), arg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_FORMAT2</name><parameter_list>(<parameter><type><name>exc</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PyErr_Format(exc, _(str), arg1,arg2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_VIM_FORMAT</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PyErr_FORMAT(VimError, str, arg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TYPE_NAME</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(obj-&gt;ob_type-&gt;tp_name == NULL ? "(NULL)" : obj-&gt;ob_type-&gt;tp_name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAISE_NO_EMPTY_KEYS</name></cpp:macro> <cpp:value>PyErr_SET_STRING(PyExc_ValueError, N_("empty keys are not allowed"))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAISE_LOCKED_DICTIONARY</name></cpp:macro> <cpp:value>PyErr_SET_VIM(N_("dictionary is locked"))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAISE_LOCKED_LIST</name></cpp:macro> <cpp:value>PyErr_SET_VIM(N_("list is locked"))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAISE_UNDO_FAIL</name></cpp:macro> <cpp:value>PyErr_SET_VIM(N_("cannot save undo information"))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAISE_DELETE_LINE_FAIL</name></cpp:macro> <cpp:value>PyErr_SET_VIM(N_("cannot delete line"))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAISE_INSERT_LINE_FAIL</name></cpp:macro> <cpp:value>PyErr_SET_VIM(N_("cannot insert line"))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAISE_REPLACE_LINE_FAIL</name></cpp:macro> <cpp:value>PyErr_SET_VIM(N_("cannot replace line"))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAISE_KEY_ADD_FAIL</name><parameter_list>(<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PyErr_VIM_FORMAT(N_("failed to add key '%s' to dictionary"), key)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAISE_INVALID_INDEX_TYPE</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PyErr_FORMAT(PyExc_TypeError, N_("index must be int or slice, not %s"), Py_TYPE_NAME(idx));</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_BUFFER_VALUE</name></cpp:macro> <cpp:value>((buf_T *)(-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_WINDOW_VALUE</name></cpp:macro> <cpp:value>((win_T *)(-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_TABPAGE_VALUE</name></cpp:macro> <cpp:value>((tabpage_T *)(-1))</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rangeinitializer</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>runner</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <parameter><decl><type><name>PyGILState_STATE</name> <modifier>*</modifier></type></decl></parameter>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ConvertFromPyObject</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_ConvertFromPyObject</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ConvertFromPyMapping</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ConvertFromPySequence</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>WindowNew</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>BufferNew</name> <parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>LineToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyInt</name></type> <name>RangeStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyInt</name></type> <name>RangeEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>globals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_chdir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_fchdir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_getcwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>vim_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>vim_special_path_object</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x030700f0</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_find_spec</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_load_module</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>py_find_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>VimError</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Python_Lock_Vim</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Python_Release_Vim</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>StringToChars</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>todecref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyBytes_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyBytes_AsStringAndSize</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>

<operator>||</operator> <name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>todecref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>bytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bytes</name> <operator>=</operator> <call><name>PyUnicode_AsEncodedString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ENC_OPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>PyBytes_AsStringAndSize</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>

<operator>||</operator> <name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>todecref</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected str() or unicode() instance, but got %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected bytes() or str() instance, but got %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name>str</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBER_LONG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBER_INT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBER_NATURAL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBER_UNSIGNED</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>NumberToLong</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyNumber_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>num</name> <operator>=</operator> <call><name>PyNumber_Long</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected int(), long() or something supporting "</literal>

<literal type="string">"coercing to long(), but got %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected int() or something supporting coercing to int(), "</literal>

<literal type="string">"but got %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NUMBER_INT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"value is too large to fit into C int type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>result</name> <operator>&lt;</operator> <name>INT_MIN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"value is too small to fit into C int type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NUMBER_NATURAL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"number must be greater than zero"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NUMBER_UNSIGNED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"number must be greater or equal to zero"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>add_string</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>string</name> <operator>=</operator> <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>ObjectDir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>attributes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyMethodDef</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>method</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>ob_type</name><operator>-&gt;</operator><name>tp_methods</name></name></expr> ;</init> <condition><expr><name><name>method</name><operator>-&gt;</operator><name>ml_name</name></name> <operator>!=</operator> <name>NULL</name></expr> ;</condition> <incr><expr><operator>++</operator><name>method</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>add_string</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>method</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>attr</name> <operator>=</operator> <name>attributes</name></expr> ;</init> <condition><expr><operator>*</operator><name>attr</name></expr> ;</condition> <incr><expr><operator>++</operator><name>attr</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>add_string</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>*</operator><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>add_string</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"__members__"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>writefn</name>)<parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>OutputType</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>long</name></type> <name>softspace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>error</name></decl>;</decl_stmt>

}</block></struct></type> <name>OutputObject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>OutputAttrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"softspace"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>OutputDir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>OutputAttrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>OutputSetattr</name><parameter_list>(<parameter><decl><type><name>OutputObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>valObject</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"can't delete OutputObject attributes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"softspace"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>NumberToLong</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>softspace</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NUMBER_UNSIGNED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"invalid attribute: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>io_ga</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>writefn</name></type> <name>old_fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>PythonIO_Flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>old_fn</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>io_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>io_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>io_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>old_fn</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>io_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>io_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>writer</name><parameter_list>(<parameter><decl><type><name>writefn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fn</name> <operator>!=</operator> <name>old_fn</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PythonIO_Flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_fn</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>fn</name> <operator>==</operator> <operator>(</operator><name>writefn</name><operator>)</operator><name>emsg</name> <operator>||</operator> <operator>!</operator><name>got_int</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyInt</name></type> <name>len</name> <init>= <expr><name>ptr</name> <operator>-</operator> <name>str</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>io_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>io_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>io_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>io_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+</operator> <name>len</name></expr>]</index> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>io_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>fn</name> <operator>==</operator> <operator>(</operator><name>writefn</name><operator>)</operator><name>emsg</name> <operator>||</operator> <operator>!</operator><name>got_int</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>io_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>io_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>write_output</name><parameter_list>(<parameter><decl><type><name>OutputObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>error</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"et#"</literal></expr></argument>, <argument><expr><name>ENC_OPT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<function_decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>

<name>Python_Lock_Vim</name><parameter_list>()</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>emsg_severe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>writer</name><argument_list>(<argument><expr><operator>(</operator><name>writefn</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>error</name></expr> ?</condition><then> <expr><name>emsg</name></expr> </then><else>: <expr><name>msg</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Python_Release_Vim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Py_END_ALLOW_THREADS</name></type>

<name>PyMem_Free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>OutputWrite</name><parameter_list>(<parameter><decl><type><name>OutputObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>write_output</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>OutputWritelines</name><parameter_list>(<parameter><decl><type><name>OutputObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iterator</name> <operator>=</operator> <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>write_output</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>AlwaysNone</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>AlwaysFalse</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>Py_False</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>AlwaysTrue</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>Py_True</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>OutputMethods</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"write"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>OutputWrite</name></expr>, <expr><name>METH_O</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"writelines"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>OutputWritelines</name></expr>, <expr><name>METH_O</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"flush"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>AlwaysNone</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"close"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>AlwaysNone</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"isatty"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>AlwaysFalse</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"readable"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>AlwaysFalse</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"seekable"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>AlwaysFalse</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"writable"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>AlwaysTrue</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"closed"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>AlwaysFalse</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"__dir__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>OutputDir</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>OutputObject</name></type> <name>Output</name> <init>=

<expr><block>{

<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>OutputType</name></expr></argument>)</argument_list></call>

<literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>OutputObject</name></type> <name>Error</name> <init>=

<expr><block>{

<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>OutputType</name></expr></argument>)</argument_list></call>

<literal type="number">0</literal></expr>,

<expr><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>PythonIO_Init_io</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PySys_SetObject</name><argument_list>(<argument><expr><literal type="string">"stdout"</literal></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>Output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PySys_SetObject</name><argument_list>(<argument><expr><literal type="string">"stderr"</literal></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>Error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E264: Python: Error initialising I/O objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&lt;</operator> <literal type="number">0x030700f0</literal></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>call_load_module</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>find_module_result</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>char</name> <modifier>*</modifier></type><name>fullname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

}</block></struct></type> <name>LoaderObject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>LoaderType</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>LoaderDestructor</name><parameter_list>(<parameter><decl><type><name>LoaderObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DESTRUCTOR_FINISH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>LoaderLoadModule</name><parameter_list>(<parameter><decl><type><name>LoaderObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>args</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>fullname</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>result</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fullname</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>module</name> <operator>=</operator> <ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><name>Py_None</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>module</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>call_load_module</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>fullname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>module</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>module</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>module</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>LoaderMethods</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"load_module"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>LoaderLoadModule</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>VimTryStart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>trylevel</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>VimTryEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>trylevel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_throw</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>discard_current_exception</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_KeyboardInterrupt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>msg_list</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>should_free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>get_exception_string</name><argument_list>(<argument><expr><operator>*</operator><name>msg_list</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PyErr_SetVim</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_global_msglist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>did_throw</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>discard_current_exception</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetVim</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>current_exception</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_current_exception</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>VimCheckInterrupt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_KeyboardInterrupt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>VimCommand</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<function_decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>

<name>Python_Lock_Vim</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Python_Release_Vim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>Py_END_ALLOW_THREADS</name></macro>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>VimToPython</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>our_tv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>newObj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ptrBuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>our_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name> <operator>&amp;&amp;</operator> <name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>our_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name> <operator>&amp;&amp;</operator> <name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptrBuf</name></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>our_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr> ?</condition><then> <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>

</then><else>: <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>, <argument><expr><name>ptrBuf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>our_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyString_FromString</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>our_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyString_FromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>our_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyString_FromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><name><name>our_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>, <argument><expr><name>ptrBuf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>list</argument>, <argument>curr</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newObj</name> <operator>=</operator> <call><name>VimToPython</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>newObj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>newObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>newObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>our_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>, <argument><expr><name>ptrBuf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_lookup</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newObj</name> <operator>=</operator> <call><name>VimToPython</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><name>newObj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>newObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>our_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_BOOL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <name>VVAL_FALSE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Py_False</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Py_True</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>our_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_SPECIAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>our_tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_BLOB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyBytes_FromStringAndSize</name><argument_list>(

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_blob</name><operator>-&gt;</operator><name>bv_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>Py_ssize_t</name><operator>)</operator> <name><name>our_tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_blob</name><operator>-&gt;</operator><name>bv_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>VimEval</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>our_tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>expr</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<function_decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>

<name>Python_Lock_Vim</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>our_tv</name> <operator>=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Python_Release_Vim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Py_END_ALLOW_THREADS</name></type>

<name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>our_tv</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"invalid expression"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lookup_dict</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>VimToPython</name><argument_list>(<argument><expr><name>our_tv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<function_decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>

<name>Python_Lock_Vim</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name>our_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Python_Release_Vim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>Py_END_ALLOW_THREADS</name></macro>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>ConvertToPyObject</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>VimEvalPy</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>our_tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>expr</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<function_decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>

<name>Python_Lock_Vim</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>our_tv</name> <operator>=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Python_Release_Vim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Py_END_ALLOW_THREADS</name></type>

<name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>our_tv</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"invalid expression"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ConvertToPyObject</name><argument_list>(<argument><expr><name>our_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>

<name>Python_Lock_Vim</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name>our_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Python_Release_Vim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>Py_END_ALLOW_THREADS</name></macro>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>VimStrwidth</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>str</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mb_string2cells</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>_VimChdir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>_chdir</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>newwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_dir</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>_chdir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>PyObject_Call</name><argument_list>(<argument><expr><name>_chdir</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newwd</name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>py_getcwd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new_dir</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>newwd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>newwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_chdir</name><argument_list>(<argument><expr><name>new_dir</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>newwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"failed to change directory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>newwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>post_chdir</name><argument_list>(<argument><expr><name>CDSCOPE_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>VimChdir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_VimChdir</name><argument_list>(<argument><expr><name>py_chdir</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>VimFchdir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_VimChdir</name><argument_list>(<argument><expr><name>py_fchdir</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>callable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

}</block></struct></type> <name>map_rtp_data</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>map_rtp_callback</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pathObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>map_rtp_data</name> <modifier>*</modifier></type><name>mr_data</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>map_rtp_data</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>data</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pathObject</name> <operator>=</operator> <call><name>PyString_FromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mr_data</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name><name>mr_data</name><operator>-&gt;</operator><name>callable</name></name></expr></argument>,

<argument><expr><name>pathObject</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pathObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mr_data</name><operator>-&gt;</operator><name>result</name></name> <operator>||</operator> <name><name>mr_data</name><operator>-&gt;</operator><name>result</name></name> <operator>!=</operator> <name>Py_None</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>mr_data</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mr_data</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>VimForeachRTP</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>callable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>map_rtp_data</name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>callable</name></name> <operator>=</operator> <name>callable</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_in_runtimepath</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>map_rtp_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>result</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>data</name><operator>.</operator><name>result</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>map_finder_callback</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>data</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pathObject1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pathObject2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pathbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pathlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_MAIN_DIR_STRING</name></cpp:macro> <cpp:value>"python2"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_MAIN_DIR_STRING</name></cpp:macro> <cpp:value>"python3"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_ALTERNATE_DIR_STRING</name></cpp:macro> <cpp:value>"pythonx"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHONX_STRING_LENGTH</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pathbuf</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>char</name></expr></argument>,

<argument><expr><name>pathlen</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>PATHSEPSTR</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>PYTHONX_STRING_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pathlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name>pathbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>pathbuf</name> <operator>+</operator> <name>pathlen</name></expr></argument>, <argument><expr><name>PY_MAIN_DIR_STRING</name></expr></argument>,

<argument><expr><name>PYTHONX_STRING_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pathObject1</name> <operator>=</operator> <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>pathbuf</name> <operator>+</operator> <name>pathlen</name></expr></argument>, <argument><expr><name>PY_ALTERNATE_DIR_STRING</name></expr></argument>,

<argument><expr><name>PYTHONX_STRING_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pathObject2</name> <operator>=</operator> <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pathObject1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>pathObject1</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>pathObject2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pathObject1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pathObject2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>Vim_GetPaths</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_in_runtimepath</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>map_finder_callback</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x030700f0</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>FinderFindSpec</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>paths</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>spec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"s|O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fullname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>paths</name> <operator>=</operator> <call><name>Vim_GetPaths</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>spec</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_find_spec</name></expr></argument>, <argument><expr><literal type="string">"sOO"</literal></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>spec</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>FinderFindModule</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier> <name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>PyObject</name><modifier>*</modifier> <name>args</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>call_load_module</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>find_module_result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>fd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pathname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>find_module_result</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected 3-tuple as imp.find_module() result, but got %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>find_module_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>find_module_result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected 3-tuple as imp.find_module() result, but got "</literal>

<literal type="string">"tuple of size %d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>find_module_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>find_module_result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>!</operator><operator>(</operator><name>pathname</name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>find_module_result</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>!</operator><operator>(</operator><name>description</name> <operator>=</operator> <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>find_module_result</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"internal error: imp.find_module returned tuple with NULL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_load_module</name></expr></argument>,

<argument><expr><literal type="string">"s#OOO"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>find_module</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>new_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>find_module_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dot</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name>tail</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>newest_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>partlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>dot</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>tail</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>find_module_result</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_find_module</name></expr></argument>,

<argument><expr><literal type="string">"s#O"</literal></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>partlen</name></expr></argument>, <argument><expr><name>new_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>module</name> <operator>=</operator> <call><name>call_load_module</name><argument_list>(

<argument><expr><name>fullname</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>tail</name> <operator>-</operator> <name>fullname</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>partlen</name></expr></argument>,

<argument><expr><name>find_module_result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>find_module_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>find_module_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newest_path</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="string">"__path__"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>find_module_result</name> <operator>=</operator> <call><name>find_module</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>dot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>newest_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>newest_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>find_module_result</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>find_module_result</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_find_module</name></expr></argument>,

<argument><expr><literal type="string">"sO"</literal></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>new_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>find_module_result</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>FinderFindModule</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>new_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LoaderObject</name> <modifier>*</modifier></type><name>loader</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fullname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new_path</name> <operator>=</operator> <call><name>Vim_GetPaths</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>find_module</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fullname</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>fullname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>loader</name> <operator>=</operator> <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>LoaderObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>LoaderType</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>loader</name><operator>-&gt;</operator><name>fullname</name></name> <operator>=</operator> <name>fullname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loader</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <name>loader</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>VimPathHook</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>vim_special_path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>vim_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vim_module</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>VimMethods</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"command"</literal></expr>, <expr><name>VimCommand</name></expr>, <expr><name>METH_O</name></expr>, <expr><literal type="string">"Execute a Vim ex-mode command"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><name>VimEval</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">"Evaluate an expression using Vim evaluator"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"bindeval"</literal></expr>, <expr><name>VimEvalPy</name></expr>, <expr><name>METH_O</name></expr>, <expr><literal type="string">"Like eval(), but returns objects attached to vim ones"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"strwidth"</literal></expr>, <expr><name>VimStrwidth</name></expr>, <expr><name>METH_O</name></expr>, <expr><literal type="string">"Screen string width, counts &lt;Tab&gt; as having width 1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"chdir"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>VimChdir</name></expr>, <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><literal type="string">"Change directory"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fchdir"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>VimFchdir</name></expr>, <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><literal type="string">"Change directory"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foreach_rtp"</literal></expr>, <expr><name>VimForeachRTP</name></expr>, <expr><name>METH_O</name></expr>, <expr><literal type="string">"Call given callable for each path in &amp;rtp"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x030700f0</literal></expr></cpp:if>

<expr><block>{<expr><literal type="string">"find_spec"</literal></expr>, <expr><name>FinderFindSpec</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">"Internal use only, returns spec object for any input it receives"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"find_module"</literal></expr>, <expr><name>FinderFindModule</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">"Internal use only, returns loader object for any input it receives"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"path_hook"</literal></expr>, <expr><name>VimPathHook</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">"Hook function to install in sys.path_hooks"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"_get_paths"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>Vim_GetPaths</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">"Get &amp;rtp-based additions to sys.path"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>IterType</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>nextfun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructorfun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>traversefun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>visitproc</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>clearfun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>void</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nextfun</name></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>destructorfun</name></type> <name>destruct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>traversefun</name></type> <name>traverse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>clearfun</name></type> <name>clear</name></decl>;</decl_stmt>

}</block></struct></type> <name>IterObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>IterNew</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>destructorfun</name></type> <name>destruct</name></decl></parameter>, <parameter><decl><type><name>nextfun</name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>traversefun</name></type> <name>traverse</name></decl></parameter>,

<parameter><decl><type><name>clearfun</name></type> <name>clear</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IterObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>IterObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IterType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>destruct</name></name> <operator>=</operator> <name>destruct</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>traverse</name></name> <operator>=</operator> <name>traverse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>clear</name></name> <operator>=</operator> <name>clear</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>IterDestructor</name><parameter_list>(<parameter><decl><type><name>IterObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>self</name><operator>-&gt;</operator><name>destruct</name></name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>IterTraverse</name><parameter_list>(<parameter><decl><type><name>IterObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>visitproc</name></type> <name>visit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>traverse</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>self</name><operator>-&gt;</operator><name>traverse</name></name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>visit</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>clear</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>clear</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>IterClear</name><parameter_list>(<parameter><decl><type><name>IterObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>clear</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>self</name><operator>-&gt;</operator><name>clear</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>IterNext</name><parameter_list>(<parameter><decl><type><name>IterObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>self</name><operator>-&gt;</operator><name>next</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>IterIter</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>pylinkedlist_S</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>pylinkedlist_S</name></name> <modifier>*</modifier></type><name>pll_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pylinkedlist_S</name></name> <modifier>*</modifier></type><name>pll_prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pll_obj</name></decl>;</decl_stmt>

}</block></struct></type> <name>pylinkedlist_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>pylinkedlist_T</name> <modifier>*</modifier></type><name>lastdict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pylinkedlist_T</name> <modifier>*</modifier></type><name>lastlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pylinkedlist_T</name> <modifier>*</modifier></type><name>lastfunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>pyll_remove</name><parameter_list>(<parameter><decl><type><name>pylinkedlist_T</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>pylinkedlist_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>pll_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>pll_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>pll_prev</name><operator>-&gt;</operator><name>pll_next</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>pll_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>pll_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>pll_prev</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>pll_next</name><operator>-&gt;</operator><name>pll_prev</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>pll_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>pyll_add</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>pylinkedlist_T</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>pylinkedlist_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>last</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>pll_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator><operator>-&gt;</operator><name>pll_next</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>pll_prev</name></name> <operator>=</operator> <operator>*</operator><name>last</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>pll_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>pll_obj</name></name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>DictionaryType</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pylinkedlist_T</name></type> <name>ref</name></decl>;</decl_stmt>

}</block></struct></type> <name>DictionaryObject</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>DictionaryUpdate</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_DICTIONARY</name><parameter_list>(<parameter><type><name>dict</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DictionaryNew(&amp;DictionaryType, dict)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryNew</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>subtype</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <operator>(</operator><name>DictionaryObject</name> <operator>*</operator><operator>)</operator> <call><name><name>subtype</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <name>dict</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pyll_add</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dict_T</name> <modifier>*</modifier></type>

<name>py_dict_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dict_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ret</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryConstructor</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>subtype</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dict</name> <operator>=</operator> <call><name>py_dict_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <operator>(</operator><name>DictionaryObject</name> <operator>*</operator><operator>)</operator> <call><name>DictionaryNew</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kwargs</name> <operator>||</operator> <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>DictionaryUpdate</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>DictionaryDestructor</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pyll_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DESTRUCTOR_FINISH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>DictionaryAttrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"locked"</literal></expr>, <expr><literal type="string">"scope"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryDir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>DictionaryAttrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>DictionarySetattr</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>valObject</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"cannot delete vim.Dictionary attributes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"locked"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>dict</name><operator>-&gt;</operator><name>dv_lock</name></name> <operator>==</operator> <name>VAR_FIXED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"cannot modify fixed dictionary"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>istrue</name> <init>= <expr><call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>istrue</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>istrue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>dict</name><operator>-&gt;</operator><name>dv_lock</name></name> <operator>=</operator> <name>VAR_LOCKED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>dict</name><operator>-&gt;</operator><name>dv_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"cannot set attribute %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyInt</name></type>

<name>DictionaryLength</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>PyInt</name><operator>)</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_FLAG_HAS_DEFAULT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_FLAG_POP</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_FLAG_NONE_DEFAULT</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_FLAG_RETURN_BOOL</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_FLAG_RETURN_PAIR</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>_DictionaryItem</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>defObject</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DICT_FLAG_NONE_DEFAULT</name><operator>)</operator></expr>?</condition><then> <expr><name>Py_None</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DICT_FLAG_HAS_DEFAULT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O|O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defObject</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>keyObject</name> <operator>=</operator> <name>args</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DICT_FLAG_RETURN_BOOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>defObject</name> <operator>=</operator> <name>Py_False</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_NO_EMPTY_KEYS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>defObject</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>defObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>defObject</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr><name>keyObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DICT_FLAG_RETURN_BOOL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Py_True</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_lookup</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ConvertToPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DICT_FLAG_POP</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>dv_lock</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_LOCKED_DICTIONARY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hash_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dictitem_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryItem</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_DictionaryItem</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyObject</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>DictionaryContains</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>rObj</name> <init>= <expr><call><name>_DictionaryItem</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyObject</name></expr></argument>, <argument><expr><name>DICT_FLAG_RETURN_BOOL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>rObj</name> <operator>==</operator> <name>Py_True</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>ht_array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>ht_used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>todo</name></decl>;</decl_stmt>

}</block></struct></type> <name>dictiterinfo_T</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryIterNext</name><parameter_list>(<parameter><decl><type><name>dictiterinfo_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>dii</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>dii</name><operator>)</operator><operator>-&gt;</operator><name>todo</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>dii</name><operator>)</operator><operator>-&gt;</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></name> <operator>!=</operator> <name><operator>(</operator><operator>*</operator><name>dii</name><operator>)</operator><operator>-&gt;</operator><name>ht_array</name></name> <operator>||</operator>

<name><operator>(</operator><operator>*</operator><name>dii</name><operator>)</operator><operator>-&gt;</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></name> <operator>!=</operator> <name><operator>(</operator><operator>*</operator><name>dii</name><operator>)</operator><operator>-&gt;</operator><name>ht_used</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"hashtab changed during iteration"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>dii</name><operator>)</operator><operator>-&gt;</operator><name>todo</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>dii</name><operator>)</operator><operator>-&gt;</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>dii</name><operator>)</operator><operator>-&gt;</operator><name>hi</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>--</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>dii</name><operator>)</operator><operator>-&gt;</operator><name>todo</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>PyBytes_FromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><operator>(</operator><operator>*</operator><name>dii</name><operator>)</operator><operator>-&gt;</operator><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryIter</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dictiterinfo_T</name> <modifier>*</modifier></type><name>dii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dii</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>dictiterinfo_T</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dii</name><operator>-&gt;</operator><name>ht_array</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dii</name><operator>-&gt;</operator><name>ht_used</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dii</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <name>ht</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dii</name><operator>-&gt;</operator><name>hi</name></name> <operator>=</operator> <name><name>dii</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dii</name><operator>-&gt;</operator><name>todo</name></name> <operator>=</operator> <name><name>dii</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>IterNew</name><argument_list>(<argument><expr><name>dii</name></expr></argument>,

<argument><expr><operator>(</operator><name>destructorfun</name><operator>)</operator> <name>PyMem_Free</name></expr></argument>, <argument><expr><operator>(</operator><name>nextfun</name><operator>)</operator> <name>DictionaryIterNext</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyInt</name></type>

<name>DictionaryAssItem</name><parameter_list>(

<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>dv_lock</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_LOCKED_DICTIONARY</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_NO_EMPTY_KEYS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>valObject</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr><name>keyObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dictitem_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ConvertFromPyObject</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>di</name> <operator>=</operator> <call><name>dictitem_alloc</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_add</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dictitem_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RAISE_KEY_ADD_FAIL</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>hi_to_py</name>)<parameter_list>(<parameter><decl><type><name>hashitem_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryListObjects</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>hi_to_py</name></type> <name>hiconvert</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>todo</name> <init>= <expr><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>newObj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><name>todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newObj</name> <operator>=</operator> <call><name>hiconvert</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>newObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>dict_key</name><parameter_list>(<parameter><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>PyBytes_FromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryListKeys</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>DictionaryListObjects</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dict_key</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>dict_val</name><parameter_list>(<parameter><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_lookup</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ConvertToPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryListValues</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>DictionaryListObjects</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dict_val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>dict_item</name><parameter_list>(<parameter><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>keyObject</name> <operator>=</operator> <call><name>dict_key</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>valObject</name> <operator>=</operator> <call><name>dict_val</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(OO)"</literal></expr></argument>, <argument><expr><name>keyObject</name></expr></argument>, <argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryListItems</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>DictionaryListObjects</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dict_item</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryUpdate</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>dv_lock</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_LOCKED_DICTIONARY</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kwargs</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ConvertFromPyMapping</name><argument_list>(<argument><expr><name>kwargs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_extend</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <literal type="string">"force"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"|O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"keys"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>DictionaryUpdate</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iterator</name> <operator>=</operator> <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>fast</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fast</name> <operator>=</operator> <call><name>PySequence_Fast</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PySequence_Fast_GET_SIZE</name><argument_list>(<argument><expr><name>fast</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected sequence element of size 2, "</literal>

<literal type="string">"but got sequence of size %d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>PySequence_Fast_GET_SIZE</name><argument_list>(<argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>keyObject</name> <operator>=</operator> <call><name>PySequence_Fast_GET_ITEM</name><argument_list>(<argument><expr><name>fast</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictitem_alloc</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>valObject</name> <operator>=</operator> <call><name>PySequence_Fast_GET_ITEM</name><argument_list>(<argument><expr><name>fast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ConvertFromPyObject</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dictitem_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>dict_add</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RAISE_KEY_ADD_FAIL</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dictitem_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryGet</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_DictionaryItem</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>,

<argument><expr><name>DICT_FLAG_HAS_DEFAULT</name><operator>|</operator><name>DICT_FLAG_NONE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryPop</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_DictionaryItem</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>DICT_FLAG_HAS_DEFAULT</name><operator>|</operator><name>DICT_FLAG_POP</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryPopItem</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hi</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_lookup</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>valObject</name> <operator>=</operator> <call><name>ConvertToPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"("</literal> <name>Py_bytes_fmt</name> <literal type="string">"O)"</literal></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><name>valObject</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hash_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dictitem_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>DictionaryHasKey</name><parameter_list>(<parameter><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_DictionaryItem</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>keyObject</name></expr></argument>, <argument><expr><name>DICT_FLAG_RETURN_BOOL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>DictionaryAsSeq</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><operator>(</operator><name>objobjproc</name><operator>)</operator> <name>DictionaryContains</name></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>DictionaryAsMapping</name> <init>= <expr><block>{

<expr><operator>(</operator><name>lenfunc</name><operator>)</operator> <name>DictionaryLength</name></expr>,

<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <name>DictionaryItem</name></expr>,

<expr><operator>(</operator><name>objobjargproc</name><operator>)</operator> <name>DictionaryAssItem</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>DictionaryMethods</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"keys"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>DictionaryListKeys</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"values"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>DictionaryListValues</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"items"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>DictionaryListItems</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"update"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>DictionaryUpdate</name></expr>, <expr><name>METH_VARARGS</name><operator>|</operator><name>METH_KEYWORDS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"get"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>DictionaryGet</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pop"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>DictionaryPop</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"popitem"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>DictionaryPopItem</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"has_key"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>DictionaryHasKey</name></expr>, <expr><name>METH_O</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"__dir__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>DictionaryDir</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>ListType</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pylinkedlist_T</name></type> <name>ref</name></decl>;</decl_stmt>

}</block></struct></type> <name>ListObject</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_LIST</name><parameter_list>(<parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ListNew(&amp;ListType, list)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>ListNew</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>subtype</name></decl></parameter>, <parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <operator>(</operator><name>ListObject</name> <operator>*</operator><operator>)</operator> <call><name><name>subtype</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>list</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pyll_add</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>list_T</name> <modifier>*</modifier></type>

<name>py_list_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ret</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>list_py_concat</name><parameter_list>(<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iterator</name> <operator>=</operator> <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>li</name> <operator>=</operator> <call><name>listitem_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_ConvertFromPyObject</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>listitem_free</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>ListConstructor</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>subtype</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>kwargs</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"list constructor does not accept keyword arguments"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"|O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>list</name> <operator>=</operator> <call><name>py_list_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lookup_dict</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>list_unref</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_py_concat</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_unref</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ListNew</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ListDestructor</name><parameter_list>(<parameter><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pyll_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_unref</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DESTRUCTOR_FINISH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyInt</name></type>

<name>ListLength</name><parameter_list>(<parameter><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>PyInt</name><operator>)</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>lv_len</name></name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>ListIndex</name><parameter_list>(<parameter><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name>ListLength</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"list index out of range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_VIM_FORMAT</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"internal error: failed to get vim list item %d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ConvertToPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>ListSlice</name><parameter_list>(<parameter><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>step</name></decl></parameter>,

<parameter><decl><type><name>Py_ssize_t</name></type> <name>slicelen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyInt</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"slice step cannot be zero"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><name>slicelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slicelen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>ListIndex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>first</name> <operator>+</operator> <name>i</name><operator>*</operator><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>ListItem</name><parameter_list>(<parameter><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>_idx</name> <init>= <expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ListIndex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>_idx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>_idx</name> <init>= <expr><call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ListIndex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>_idx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PySlice_Check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>stop</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>slicelen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PySlice_GetIndicesEx</name><argument_list>(<argument><expr><operator>(</operator><name>PySliceObject_T</name> <operator>*</operator><operator>)</operator><name>idx</name></expr></argument>, <argument><expr><call><name>ListLength</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>step</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slicelen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ListSlice</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>slicelen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RAISE_INVALID_INDEX_TYPE</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>list_restore</name><parameter_list>(<parameter><decl><type><name>Py_ssize_t</name></type> <name>numadded</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>numreplaced</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>slicelen</name></decl></parameter>,

<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>listitem_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>lis</name></decl></parameter>, <parameter><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>lastaddedli</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>numreplaced</name><operator>--</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>list_insert</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>lis</name><index>[<expr><name>numreplaced</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lis</name><index>[<expr><name>slicelen</name> <operator>+</operator> <name>numreplaced</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>listitem_remove</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>lis</name><index>[<expr><name>slicelen</name> <operator>+</operator> <name>numreplaced</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>numadded</name><operator>--</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>lastaddedli</name><operator>-&gt;</operator><name>li_prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>listitem_remove</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>lastaddedli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lastaddedli</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ListAssSlice</name><parameter_list>(<parameter><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>first</name></decl></parameter>,

<parameter><decl><type><name>Py_ssize_t</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>slicelen</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>lastaddedli</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>numreplaced</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>numadded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>lis</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ListLength</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>lv_lock</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_LOCKED_LIST</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"slice step cannot be zero"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>slicelen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iterator</name> <operator>=</operator> <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"attempt to assign sequence of size greater than %d "</literal>

<literal type="string">"to extended slice"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lis</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>listitem_T</name> <operator>*</operator></expr></argument>, <argument><expr><name>slicelen</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_VIM_FORMAT</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"internal error: no vim list item %d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>slicelen</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&amp;&amp;</operator> <name>li</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>next</name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>li_next</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>--</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>next</name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>li_prev</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>++</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>listitem_remove</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lis</name><index>[<expr><name>slicelen</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"internal error: not enough list items"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iterator</name> <operator>=</operator> <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ConvertFromPyObject</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_insert_tv</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>numreplaced</name> <operator>&lt;</operator> <name>slicelen</name></expr>

?</condition><then> <expr><name><name>lis</name><index>[<expr><name>numreplaced</name></expr>]</index></name></expr>

</then><else>: <expr><name>li</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"internal error: failed to add item to list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_restore</name><argument_list>(<argument><expr><name>numadded</name></expr></argument>, <argument><expr><name>numreplaced</name></expr></argument>, <argument><expr><name>slicelen</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>lis</name></expr></argument>, <argument><expr><name>lastaddedli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>numreplaced</name> <operator>&lt;</operator> <name>slicelen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>lis</name><index>[<expr><name>slicelen</name> <operator>+</operator> <name>numreplaced</name></expr>]</index></name> <operator>=</operator> <name><name>lis</name><index>[<expr><name>numreplaced</name></expr>]</index></name><operator>-&gt;</operator><name>li_prev</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vimlist_remove</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>lis</name><index>[<expr><name>numreplaced</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lis</name><index>[<expr><name>numreplaced</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>numreplaced</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>li</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lastaddedli</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_prev</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lastaddedli</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>mat</name><operator>.</operator><name>lv_last</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>numadded</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <name>slicelen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"attempt to assign sequence of size greater than %d "</literal>

<literal type="string">"to extended slice"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>slicelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_restore</name><argument_list>(<argument><expr><name>numadded</name></expr></argument>, <argument><expr><name>numreplaced</name></expr></argument>, <argument><expr><name>slicelen</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>lis</name></expr></argument>, <argument><expr><name>lastaddedli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>slicelen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT2</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"attempt to assign sequence of size %d to extended slice "</literal>

<literal type="string">"of size %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>slicelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_restore</name><argument_list>(<argument><expr><name>numadded</name></expr></argument>, <argument><expr><name>numreplaced</name></expr></argument>, <argument><expr><name>slicelen</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>lis</name></expr></argument>, <argument><expr><name>lastaddedli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>list_restore</name><argument_list>(<argument><expr><name>numadded</name></expr></argument>, <argument><expr><name>numreplaced</name></expr></argument>, <argument><expr><name>slicelen</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>lis</name></expr></argument>, <argument><expr><name>lastaddedli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numreplaced</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>listitem_free</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>lis</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>numreplaced</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slicelen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>listitem_remove</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>lis</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ListAssIndex</name><parameter_list>(<parameter><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>length</name> <init>= <expr><call><name>ListLength</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>lv_lock</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_LOCKED_LIST</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>length</name> <operator>||</operator> <operator>(</operator><name>index</name> <operator>==</operator> <name>length</name> <operator>&amp;&amp;</operator> <name>obj</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"list index out of range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vimlist_remove</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>li</name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ConvertFromPyObject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>length</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>list_append_tv</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"failed to add item to list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>

<name>ListAssItem</name><parameter_list>(<parameter><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>_idx</name> <init>= <expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ListAssIndex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>_idx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>_idx</name> <init>= <expr><call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ListAssIndex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>_idx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PySlice_Check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>stop</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>slicelen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PySlice_GetIndicesEx</name><argument_list>(<argument><expr><operator>(</operator><name>PySliceObject_T</name> <operator>*</operator><operator>)</operator><name>idx</name></expr></argument>, <argument><expr><call><name>ListLength</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>step</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slicelen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ListAssSlice</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>slicelen</name></expr></argument>,

<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>RAISE_INVALID_INDEX_TYPE</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>ListConcatInPlace</name><parameter_list>(<parameter><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>lv_lock</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_LOCKED_LIST</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lookup_dict</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_py_concat</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>listwatch_T</name></type> <name>lw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

}</block></struct></type> <name>listiterinfo_T</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ListIterDestruct</name><parameter_list>(<parameter><decl><type><name>listiterinfo_T</name> <modifier>*</modifier></type><name>lii</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>list_rem_watch</name><argument_list>(<argument><expr><name><name>lii</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lii</name><operator>-&gt;</operator><name>lw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>lii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>ListIterNext</name><parameter_list>(<parameter><decl><type><name>listiterinfo_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>lii</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>lii</name><operator>)</operator><operator>-&gt;</operator><name><name>lw</name><operator>.</operator><name>lw_item</name></name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ConvertToPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>lii</name><operator>)</operator><operator>-&gt;</operator><name><name>lw</name><operator>.</operator><name>lw_item</name><operator>-&gt;</operator><name>li_tv</name></name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>lii</name><operator>)</operator><operator>-&gt;</operator><name><name>lw</name><operator>.</operator><name>lw_item</name></name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>lii</name><operator>)</operator><operator>-&gt;</operator><name><name>lw</name><operator>.</operator><name>lw_item</name><operator>-&gt;</operator><name>li_next</name></name></name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>ListIter</name><parameter_list>(<parameter><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>listiterinfo_T</name> <modifier>*</modifier></type><name>lii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lii</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>listiterinfo_T</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_add_watch</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lii</name><operator>-&gt;</operator><name>lw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lii</name><operator>-&gt;</operator><name>lw</name><operator>.</operator><name>lw_item</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lii</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<return>return <expr><call><name>IterNew</name><argument_list>(<argument><expr><name>lii</name></expr></argument>,

<argument><expr><operator>(</operator><name>destructorfun</name><operator>)</operator> <name>ListIterDestruct</name></expr></argument>, <argument><expr><operator>(</operator><name>nextfun</name><operator>)</operator> <name>ListIterNext</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ListAttrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"locked"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>ListDir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ListAttrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ListSetattr</name><parameter_list>(<parameter><decl><type><name>ListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>valObject</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"cannot delete vim.List attributes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"locked"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>lv_lock</name></name> <operator>==</operator> <name>VAR_FIXED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"cannot modify fixed list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>istrue</name> <init>= <expr><call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>istrue</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>istrue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>lv_lock</name></name> <operator>=</operator> <name>VAR_LOCKED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>lv_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"cannot set attribute %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>ListAsSeq</name> <init>= <expr><block>{

<expr><operator>(</operator><name>lenfunc</name><operator>)</operator> <name>ListLength</name></expr>, 

<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><operator>(</operator><name>PyIntArgFunc</name><operator>)</operator> <name>ListIndex</name></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><operator>(</operator><name>PyIntObjArgProc</name><operator>)</operator> <name>ListAssIndex</name></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <name>ListConcatInPlace</name></expr>,

<expr><literal type="number">0</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>ListAsMapping</name> <init>= <expr><block>{

<expr><operator>(</operator><name>lenfunc</name><operator>)</operator> <name>ListLength</name></expr>,

<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <name>ListItem</name></expr>,

<expr><operator>(</operator><name>objobjargproc</name><operator>)</operator> <name>ListAssItem</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>ListMethods</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"extend"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>ListConcatInPlace</name></expr>, <expr><name>METH_O</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"__dir__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>ListDir</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pylinkedlist_T</name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>auto_rebind</name></decl>;</decl_stmt>

}</block></struct></type> <name>FunctionObject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>FunctionType</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_FUNCTION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>argc</name></type></parameter>, <parameter><type><name>argv</name></type></parameter>, <parameter><type><name>self</name></type></parameter>, <parameter><type><name>pt_auto</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FunctionNew(&amp;FunctionType, (name), (argc), (argv), (self), (pt_auto))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>FunctionNew</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>subtype</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,

<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>selfdict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>auto_rebind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FunctionObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <operator>(</operator><name>FunctionObject</name> <operator>*</operator><operator>)</operator><call><name><name>subtype</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>translated_function_exists</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"unnamed function %s does not exist"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>get_expanded_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>,

<argument><expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>AUTOLOAD_CHAR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"function %s does not exist"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_EXTRA</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>np</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><literal type="string">"&lt;SNR&gt;"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>np</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>self</name></name> <operator>=</operator> <name>selfdict</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>auto_rebind</name></name> <operator>=</operator> <ternary><condition><expr><name>selfdict</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>auto_rebind</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>argv</name></name> <operator>||</operator> <name><name>self</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pyll_add</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>FunctionConstructor</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>subtype</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>selfdictObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>autoRebindObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>argsObject</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>selfdicttv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>argstv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>argslist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>selfdict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>auto_rebind</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>curtv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>kwargs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>selfdictObject</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"self"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>selfdictObject</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ConvertFromPyMapping</name><argument_list>(<argument><expr><name>selfdictObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selfdicttv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>selfdict</name> <operator>=</operator> <name><name>selfdicttv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argsObject</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argsObject</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ConvertFromPySequence</name><argument_list>(<argument><expr><name>argsObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argstv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>selfdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argslist</name> <operator>=</operator> <name><name>argstv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>argslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <name><name>argslist</name><operator>-&gt;</operator><name>lv_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>typval_T</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>selfdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_unref</name><argument_list>(<argument><expr><name>argslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curtv</name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>

<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>argslist</argument>, <argument>li</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><name>curtv</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>list_unref</name><argument_list>(<argument><expr><name>argslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>selfdict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>auto_rebind</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>autoRebindObject</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"auto_rebind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>autoRebindObject</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>auto_rebind</name> <operator>=</operator> <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>autoRebindObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>auto_rebind</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>selfdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_unref</name><argument_list>(<argument><expr><name>argslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"et"</literal></expr></argument>, <argument><expr><literal type="string">"ascii"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>selfdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>argc</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>FunctionNew</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>selfdict</name></expr></argument>, <argument><expr><name>auto_rebind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>FunctionDestructor</name><parameter_list>(<parameter><decl><type><name>FunctionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>func_unref</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>argv</name></name> <operator>||</operator> <name><name>self</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pyll_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DESTRUCTOR_FINISH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>FunctionAttrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"softspace"</literal></expr>, <expr><literal type="string">"args"</literal></expr>, <expr><literal type="string">"self"</literal></expr>, <expr><literal type="string">"auto_rebind"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>FunctionDir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>FunctionAttrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>FunctionAttr</name><parameter_list>(<parameter><decl><type><name>FunctionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"args"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>argv</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>list</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AlwaysNone</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_tv</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name>NEW_LIST</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"self"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>self</name></name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><call><name>AlwaysNone</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>NEW_DICTIONARY</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"auto_rebind"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>auto_rebind</name></name></expr>

?</condition><then> <expr><call><name>AlwaysTrue</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>AlwaysFalse</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__members__"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FunctionAttrs</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_partial</name><parameter_list>(<parameter><decl><type><name>FunctionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exported</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>argv</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exported</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name></name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>typval_T</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_auto</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>auto_rebind</name></name> <operator>||</operator> <operator>!</operator><name>exported</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exported</name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exported</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>FunctionCall</name><parameter_list>(<parameter><decl><type><name>FunctionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>argsObject</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>selfdicttv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>selfdict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>selfdictObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>partial_T</name></type> <name>pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ConvertFromPySequence</name><argument_list>(<argument><expr><name>argsObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kwargs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>selfdictObject</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>kwargs</name></expr></argument>, <argument><expr><literal type="string">"self"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>selfdictObject</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ConvertFromPyMapping</name><argument_list>(<argument><expr><name>selfdictObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selfdicttv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>selfdict</name> <operator>=</operator> <name><name>selfdicttv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>argv</name></name> <operator>||</operator> <name><name>self</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>partial_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_partial</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pt_ptr</name> <operator>=</operator> <operator>&amp;</operator><name>pt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>

<name>Python_Lock_Vim</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>func_call</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>pt_ptr</name></expr></argument>, <argument><expr><name>selfdict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Python_Release_Vim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>Py_END_ALLOW_THREADS</name></macro>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>error</name> <operator>!=</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_VIM_FORMAT</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"failed to run function %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ConvertToPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>selfdict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selfdicttv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>FunctionRepr</name><parameter_list>(<parameter><decl><type><name>FunctionObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>repr_ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>numbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;vim.Function '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;NULL&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>argv</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">", args=["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>emsg_silent</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><call><name>tv2string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>,

<argument><expr><call><name>get_copyID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>--</operator><name>emsg_silent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">", self="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>emsg_silent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><call><name>tv2string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><call><name>get_copyID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_silent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>auto_rebind</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">", auto_rebind=True"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyString_FromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>repr_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repr_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>FunctionMethods</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"__dir__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>FunctionDir</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>OptionsType</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>checkfun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>int</name></type> <name>opt_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>checkfun</name></type> <name>Check</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>fromObj</name></decl>;</decl_stmt>

}</block></struct></type> <name>OptionsObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>dummy_check</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>OptionsNew</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>checkfun</name></type> <name>Check</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>fromObj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OptionsObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>OptionsObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>OptionsType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>opt_type</name></name> <operator>=</operator> <name>opt_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>Check</name></name> <operator>=</operator> <name>Check</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>fromObj</name></name> <operator>=</operator> <name>fromObj</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fromObj</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>fromObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>OptionsDestructor</name><parameter_list>(<parameter><decl><type><name>OptionsObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>fromObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>OptionsTraverse</name><parameter_list>(<parameter><decl><type><name>OptionsObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>visitproc</name></type> <name>visit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>fromObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>OptionsClear</name><parameter_list>(<parameter><decl><type><name>OptionsObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>fromObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>OptionsItem</name><parameter_list>(<parameter><decl><type><name>OptionsObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>numval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>stringval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>self</name><operator>-&gt;</operator><name>Check</name></name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_NO_EMPTY_KEYS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>get_option_value_strict</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stringval</name></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>opt_type</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr><name>keyObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SOPT_UNSET</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SOPT_BOOL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>numval</name></expr> ?</condition><then> <expr><name>Py_True</name></expr> </then><else>: <expr><name>Py_False</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SOPT_NUM</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>numval</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SOPT_STRING</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stringval</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>PyBytes_FromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>stringval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>stringval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"unable to get option value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"internal error: unknown option type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>OptionsContains</name><parameter_list>(<parameter><decl><type><name>OptionsObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_option_value_strict</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>opt_type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lastoption</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_type</name></decl>;</decl_stmt>

}</block></struct></type> <name>optiterinfo_T</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>OptionsIterNext</name><parameter_list>(<parameter><decl><type><name>optiterinfo_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>oii</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>option_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>oii</name><operator>)</operator><operator>-&gt;</operator><name>lastoption</name></name><operator>)</operator></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>oii</name><operator>)</operator><operator>-&gt;</operator><name>opt_type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>OptionsIter</name><parameter_list>(<parameter><decl><type><name>OptionsObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>optiterinfo_T</name> <modifier>*</modifier></type><name>oii</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>oii</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>optiterinfo_T</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oii</name><operator>-&gt;</operator><name>opt_type</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>opt_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oii</name><operator>-&gt;</operator><name>lastoption</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>IterNew</name><argument_list>(<argument><expr><name>oii</name></expr></argument>,

<argument><expr><operator>(</operator><name>destructorfun</name><operator>)</operator> <name>PyMem_Free</name></expr></argument>, <argument><expr><operator>(</operator><name>nextfun</name><operator>)</operator> <name>OptionsIterNext</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>set_option_value_err</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numval</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>stringval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errmsg</name> <operator>=</operator> <call><name>set_option_value</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>numval</name></expr></argument>, <argument><expr><name>stringval</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PyErr_SetVim</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>set_option_value_for</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>numval</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>stringval</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_type</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>save_curtab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufref_T</name></type> <name>save_curbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>set_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opt_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>SREQ_WIN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>switch_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>,

<argument><expr><call><name>win_find_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>restore_win</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"problem while switching windows"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>set_ret</name> <operator>=</operator> <call><name>set_option_value_err</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>numval</name></expr></argument>, <argument><expr><name>stringval</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_win</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SREQ_BUF</name></expr>:</case>

<expr_stmt><expr><call><name>switch_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>set_ret</name> <operator>=</operator> <call><name>set_option_value_err</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>numval</name></expr></argument>, <argument><expr><name>stringval</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SREQ_GLOBAL</name></expr>:</case>

<expr_stmt><expr><name>set_ret</name> <operator>=</operator> <call><name>set_option_value_err</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>numval</name></expr></argument>, <argument><expr><name>stringval</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>set_ret</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>OptionsAssItem</name><parameter_list>(<parameter><decl><type><name>OptionsObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>self</name><operator>-&gt;</operator><name>Check</name></name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_NO_EMPTY_KEYS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>get_option_value_strict</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>opt_type</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr><name>keyObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>valObject</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>opt_type</name></name> <operator>==</operator> <name>SREQ_GLOBAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"unable to unset global option %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SOPT_GLOBAL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"unable to unset option %s "</literal>

<literal type="string">"which does not have global value"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>unset_global_local_option</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opt_flags</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>opt_type</name></name></expr> ?</condition><then> <expr><name>OPT_LOCAL</name></expr> </then><else>: <expr><name>OPT_GLOBAL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SOPT_BOOL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>istrue</name> <init>= <expr><call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>istrue</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_option_value_for</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>istrue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>opt_type</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SOPT_NUM</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NumberToLong</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>NUMBER_INT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_option_value_for</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>opt_type</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_option_value_for</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>opt_type</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>OptionsAsSeq</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><operator>(</operator><name>objobjproc</name><operator>)</operator> <name>OptionsContains</name></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>OptionsAsMapping</name> <init>= <expr><block>{

<expr><operator>(</operator><name>lenfunc</name><operator>)</operator> <name>NULL</name></expr>,

<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <name>OptionsItem</name></expr>,

<expr><operator>(</operator><name>objobjargproc</name><operator>)</operator> <name>OptionsAssItem</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

}</block></struct></type> <name>TabPageObject</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>WinListNew</name><parameter_list>(<parameter><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>tabObject</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>TabPageType</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>CheckTabPage</name><parameter_list>(<parameter><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>tab</name></name> <operator>==</operator> <name>INVALID_TABPAGE_VALUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"attempt to refer to deleted tab page"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>TabPageNew</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TAB_PYTHON_REF</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>TAB_PYTHON_REF</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>TabPageObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TabPageType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>tab</name></name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_PYTHON_REF</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>self</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>TabPageDestructor</name><parameter_list>(<parameter><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>tab</name></name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>tab</name></name> <operator>!=</operator> <name>INVALID_TABPAGE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TAB_PYTHON_REF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DESTRUCTOR_FINISH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>TabPageAttrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"windows"</literal></expr>, <expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"vars"</literal></expr>, <expr><literal type="string">"window"</literal></expr>, <expr><literal type="string">"valid"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>TabPageDir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>TabPageAttrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>TabPageAttrValid</name><parameter_list>(<parameter><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"valid"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>tab</name></name> <operator>==</operator> <name>INVALID_TABPAGE_VALUE</name><operator>)</operator></expr> ?</condition><then> <expr><name>Py_False</name></expr> </then><else>: <expr><name>Py_True</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>TabPageAttr</name><parameter_list>(<parameter><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"windows"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>WinListNew</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>get_tab_number</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"vars"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>NEW_DICTIONARY</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tab</name><operator>-&gt;</operator><name>tp_vars</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>tab</name></name> <operator>==</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>WindowNew</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>WindowNew</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tab</name><operator>-&gt;</operator><name>tp_curwin</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__members__"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TabPageAttrs</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>TabPageRepr</name><parameter_list>(<parameter><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>tab</name></name> <operator>==</operator> <name>INVALID_TABPAGE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;tabpage object (deleted) at %p&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>get_tab_number</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;tabpage object (unknown) at %p&gt;"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;tabpage %d&gt;"</literal></expr></argument>, <argument><expr><name>t</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>TabPageMethods</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"__dir__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>TabPageDir</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>TabListType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>TabListAsSeq</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<expr_stmt><expr><name>PyObject_HEAD</name></expr></expr_stmt>

}</block></struct></type> <name>TabListObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyInt</name></type>

<name>TabListLength</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>first_tabpage</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>TabListItem</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr><operator>,</operator> <expr><operator>--</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>TabPageNew</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"no such tab page"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>tabObject</name></decl>;</decl_stmt>

}</block></struct></type> <name>WindowObject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>WindowType</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>CheckWindow</name><parameter_list>(<parameter><decl><type><name>WindowObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <name>INVALID_WINDOW_VALUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"attempt to refer to deleted window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>WindowNew</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WindowObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WIN_PYTHON_REF</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>WIN_PYTHON_REF</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>WindowObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>WindowType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WIN_PYTHON_REF</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>self</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>TabPageObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>TabPageNew</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>WindowDestructor</name><parameter_list>(<parameter><decl><type><name>WindowObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>win</name></name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>win</name></name> <operator>!=</operator> <name>INVALID_WINDOW_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WIN_PYTHON_REF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>win</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>WindowTraverse</name><parameter_list>(<parameter><decl><type><name>WindowObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>visitproc</name></type> <name>visit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>WindowClear</name><parameter_list>(<parameter><decl><type><name>WindowObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type>

<name>get_firstwin</name><parameter_list>(<parameter><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>tabObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tabObject</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckTabPage</name><argument_list>(<argument><expr><name>tabObject</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>tabObject</name><operator>-&gt;</operator><name>tab</name></name> <operator>==</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>firstwin</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>tabObject</name><operator>-&gt;</operator><name>tab</name><operator>-&gt;</operator><name>tp_firstwin</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>firstwin</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>WindowAttrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"buffer"</literal></expr>,

<expr><literal type="string">"cursor"</literal></expr>,

<expr><literal type="string">"height"</literal></expr>,

<expr><literal type="string">"row"</literal></expr>,

<expr><literal type="string">"width"</literal></expr>,

<expr><literal type="string">"col"</literal></expr>,

<expr><literal type="string">"vars"</literal></expr>,

<expr><literal type="string">"options"</literal></expr>,

<expr><literal type="string">"number"</literal></expr>,

<expr><literal type="string">"tabpage"</literal></expr>,

<expr><literal type="string">"valid"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>WindowDir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>WindowAttrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>WindowAttrValid</name><parameter_list>(<parameter><decl><type><name>WindowObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"valid"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <name>INVALID_WINDOW_VALUE</name><operator>)</operator></expr> ?</condition><then> <expr><name>Py_False</name></expr> </then><else>: <expr><name>Py_True</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>WindowAttr</name><parameter_list>(<parameter><decl><type><name>WindowObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"buffer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><call><name>BufferNew</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"cursor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(ll)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>pos</name><operator>-&gt;</operator><name>col</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_height</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"row"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_winrow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_width</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"col"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_wincol</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"vars"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>NEW_DICTIONARY</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_vars</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"options"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>OptionsNew</name><argument_list>(<argument><expr><name>SREQ_WIN</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><operator>(</operator><name>checkfun</name><operator>)</operator> <name>CheckWindow</name></expr></argument>,

<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckTabPage</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator>

<call><name>get_win_number</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><call><name>get_firstwin</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"tabpage"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__members__"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>WindowAttrs</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>WindowSetattr</name><parameter_list>(<parameter><decl><type><name>WindowObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckWindow</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"buffer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"readonly attribute: buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"cursor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>col</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>, <argument><expr><literal type="string">"(ll)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>lnum</name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"cursor position outside buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimCheckInterrupt</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_col_win</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>savewin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NumberToLong</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><name>NUMBER_INT</name><operator>|</operator><name>NUMBER_UNSIGNED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>savewin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>win</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>savewin</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>savewin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NumberToLong</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><name>NUMBER_INT</name><operator>|</operator><name>NUMBER_UNSIGNED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>savewin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>win</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_setwidth</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>savewin</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>WindowRepr</name><parameter_list>(<parameter><decl><type><name>WindowObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <name>INVALID_WINDOW_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;window object (deleted) at %p&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>get_win_number</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><name>firstwin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;window object (unknown) at %p&gt;"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;window %d&gt;"</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>WindowMethods</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"__dir__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>WindowDir</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>WinListType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>WinListAsSeq</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>TabPageObject</name> <modifier>*</modifier></type><name>tabObject</name></decl>;</decl_stmt>

}</block></struct></type> <name>WinListObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>WinListNew</name><parameter_list>(<parameter><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>tabObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WinListObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>WinListObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>WinListType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name> <operator>=</operator> <name>tabObject</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tabObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>WinListDestructor</name><parameter_list>(<parameter><decl><type><name>WinListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>tabObject</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tabObject</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tabObject</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DESTRUCTOR_FINISH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyInt</name></type>

<name>WinListLength</name><parameter_list>(<parameter><decl><type><name>WinListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>w</name> <operator>=</operator> <call><name>get_firstwin</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>w</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>W_NEXT</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>WinListItem</name><parameter_list>(<parameter><decl><type><name>WinListObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>w</name> <operator>=</operator> <call><name>get_firstwin</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>w</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>w</name> <operator>=</operator> <call><name>W_NEXT</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>--</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>WindowNew</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>tabObject</name></name></expr>?</condition><then> <expr><name><name>self</name><operator>-&gt;</operator><name>tabObject</name><operator>-&gt;</operator><name>tab</name></name></expr></then><else>: <expr><name>curtab</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"no such window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>StringToLine</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyBytes_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyBytes_AsStringAndSize</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>

<operator>||</operator> <name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bytes</name> <operator>=</operator> <call><name>PyUnicode_AsEncodedString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ENC_OPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyBytes_AsStringAndSize</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>

<operator>||</operator> <name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected str() or unicode() instance, but got %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected bytes() or str() instance, but got %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>str</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"string cannot contain newlines"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>save</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>save</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>save</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>save</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>save</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>save</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>GetBufferLine</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>LineToString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>GetBufferLineList</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>hi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyInt</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>n</name> <init>= <expr><name>hi</name> <operator>-</operator> <name>lo</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>LineToString</name><argument_list>(

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>lo</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>py_fix_cursor</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>lo</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>hi</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+=</operator> <name>extra</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>extra</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>invalidate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SetBufferLine</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type><name>len_change</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bufref_T</name></type> <name>save_curbuf</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>save_curtab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>Py_None</name> <operator>||</operator> <name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>switch_to_win_for_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_savedel</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>RAISE_UNDO_FAIL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ml_delete</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>RAISE_DELETE_LINE_FAIL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>curbuf</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>save_curwin</name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>save_curbuf</name><operator>.</operator><name>br_buf</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>py_fix_cursor</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>save_curbuf</name><operator>.</operator><name>br_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>deleted_lines_mark</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>restore_win_for_buf</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>len_change</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyBytes_Check</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>save</name> <init>= <expr><call><name>StringToLine</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>save</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>switch_to_win_for_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_savesub</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_UNDO_FAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>ml_replace</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>save</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_REPLACE_LINE_FAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>restore_win_for_buf</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>len_change</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SetBufferLineList</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name></type> <name>lo</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name></type> <name>hi</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type><name>len_change</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bufref_T</name></type> <name>save_curbuf</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>save_curtab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>Py_None</name> <operator>||</operator> <name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyInt</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>hi</name> <operator>-</operator> <name>lo</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>switch_to_win_for_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_savedel</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>lo</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>RAISE_UNDO_FAIL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ml_delete</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>lo</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_DELETE_LINE_FAIL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>curbuf</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>save_curwin</name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>save_curbuf</name><operator>.</operator><name>br_buf</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>py_fix_cursor</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>lo</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>hi</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>-</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>save_curbuf</name><operator>.</operator><name>br_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>deleted_lines_mark</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>lo</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>restore_win_for_buf</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>len_change</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyInt</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>new_len</name> <init>= <expr><call><name>PyList_Size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>old_len</name> <init>= <expr><name>hi</name> <operator>-</operator> <name>lo</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>array</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>array</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>line</name> <operator>=</operator> <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>StringToLine</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>switch_to_win_for_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>lo</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>hi</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>RAISE_UNDO_FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>old_len</name> <operator>-</operator> <name>new_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>ml_delete</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>lo</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_DELETE_LINE_FAIL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>extra</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>old_len</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>new_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>ml_replace</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>lo</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_REPLACE_LINE_FAIL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>new_len</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ml_append</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>lo</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_INSERT_LINE_FAIL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>extra</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>new_len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>save_curbuf</name><operator>.</operator><name>br_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>lo</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>hi</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>MAXLNUM</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>lo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>hi</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>curbuf</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>save_curwin</name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>save_curbuf</name><operator>.</operator><name>br_buf</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>py_fix_cursor</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>lo</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>hi</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>restore_win_for_buf</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>len_change</name> <operator>=</operator> <name>new_len</name> <operator>-</operator> <name>old_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>InsertBufferLines</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>, <parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type><name>len_change</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bufref_T</name></type> <name>save_curbuf</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>save_curtab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyBytes_Check</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>StringToLine</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>switch_to_win_for_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>RAISE_UNDO_FAIL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ml_append</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>RAISE_INSERT_LINE_FAIL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>save_curbuf</name><operator>.</operator><name>br_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>appended_lines_mark</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_win_for_buf</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>len_change</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyInt</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>size</name> <init>= <expr><call><name>PyList_Size</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>array</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>line</name> <operator>=</operator> <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>StringToLine</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>switch_to_win_for_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>RAISE_UNDO_FAIL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ml_append</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>n</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>RAISE_INSERT_LINE_FAIL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>save_curbuf</name><operator>.</operator><name>br_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>appended_lines_mark</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_win_for_buf</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>len_change</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

}</block></struct></type> <name>BufferObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>CheckBuffer</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>INVALID_BUFFER_VALUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"attempt to refer to deleted buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>RBItem</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <name>end</name> <operator>-</operator> <name>start</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"line number out of range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>GetBufferLine</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>n</name><operator>+</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>RBSlice</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyInt</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lo</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>lo</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>&lt;</operator> <name>lo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>hi</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>GetBufferLineList</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>lo</name><operator>+</operator><name>start</name></expr></argument>, <argument><expr><name>hi</name><operator>+</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyInt</name></type>

<name>RBAsItem</name><parameter_list>(

<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name></type> <name>end</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type><name>new_end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyInt</name></type> <name>len_change</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <name>end</name> <operator>-</operator> <name>start</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"line number out of range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetBufferLine</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>n</name><operator>+</operator><name>start</name></expr></argument>, <argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len_change</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>new_end</name> <operator>=</operator> <name>end</name> <operator>+</operator> <name>len_change</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyInt</name></type>

<name>RBAsSlice</name><parameter_list>(

<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name></type> <name>lo</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name></type> <name>hi</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name></type> <name>end</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type><name>new_end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyInt</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>len_change</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lo</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>lo</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>&lt;</operator> <name>lo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>hi</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetBufferLineList</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>lo</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>hi</name> <operator>+</operator> <name>start</name></expr></argument>,

<argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len_change</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>new_end</name> <operator>=</operator> <name>end</name> <operator>+</operator> <name>len_change</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>RBAppend</name><parameter_list>(

<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name></type> <name>end</name></decl></parameter>,

<parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type><name>new_end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>len_change</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O|n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lines</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <name>max</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"line number out of range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>InsertBufferLines</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <name>start</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len_change</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>new_end</name> <operator>=</operator> <name>end</name> <operator>+</operator> <name>len_change</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>RangeType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>RangeAsSeq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>RangeAsMapping</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>PyObject_HEAD</name>

<name>BufferObject</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>end</name></decl>;</decl_stmt>

}</block></struct></type> <name>RangeObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>RangeNew</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>bufr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RangeObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>RangeObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RangeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bufr</name> <operator>=</operator> <operator>(</operator><name>BufferObject</name> <operator>*</operator><operator>)</operator><call><name>BufferNew</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bufr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>bufr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>bufr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>RangeDestructor</name><parameter_list>(<parameter><decl><type><name>RangeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>RangeTraverse</name><parameter_list>(<parameter><decl><type><name>RangeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>visitproc</name></type> <name>visit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>RangeClear</name><parameter_list>(<parameter><decl><type><name>RangeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyInt</name></type>

<name>RangeLength</name><parameter_list>(<parameter><decl><type><name>RangeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>self</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>RangeItem</name><parameter_list>(<parameter><decl><type><name>RangeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RBItem</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>RangeSlice</name><parameter_list>(<parameter><decl><type><name>RangeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>hi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RBSlice</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>RangeAttrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"start"</literal></expr>, <expr><literal type="string">"end"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>RangeDir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>RangeAttrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>RangeAppend</name><parameter_list>(<parameter><decl><type><name>RangeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RBAppend</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>RangeRepr</name><parameter_list>(<parameter><decl><type><name>RangeObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>INVALID_BUFFER_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;range object (for deleted buffer) at %p&gt;"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;range %s (%d:%d)&gt;"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>RangeMethods</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"append"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>RangeAppend</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">"Append data to the Vim range"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"__dir__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>RangeDir</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>BufferType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>BufferAsSeq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>BufferAsMapping</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufferNew</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BUF_PYTHON_REF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>BUF_PYTHON_REF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>BufferObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BufferType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUF_PYTHON_REF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>self</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>BufferDestructor</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>buf</name></name> <operator>!=</operator> <name>INVALID_BUFFER_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUF_PYTHON_REF</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DESTRUCTOR_FINISH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyInt</name></type>

<name>BufferLength</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><operator>(</operator><name>PyInt</name><operator>)</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufferItem</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RBItem</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufferSlice</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>hi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RBSlice</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>BufferAttrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"vars"</literal></expr>, <expr><literal type="string">"options"</literal></expr>, <expr><literal type="string">"valid"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufferDir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>BufferAttrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufferAttrValid</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"valid"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>INVALID_BUFFER_VALUE</name><operator>)</operator></expr> ?</condition><then> <expr><name>Py_False</name></expr> </then><else>: <expr><name>Py_True</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufferAttr</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"number"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><name>Py_ssize_t_fmt</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"vars"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>NEW_DICTIONARY</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"options"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>OptionsNew</name><argument_list>(<argument><expr><name>SREQ_BUF</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>checkfun</name><operator>)</operator> <name>CheckBuffer</name></expr></argument>,

<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__members__"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>BufferAttrs</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>BufferSetattr</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ren_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>val</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ren_ret</name> <operator>=</operator> <call><name>rename_buffer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ren_ret</name> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"failed to rename buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufferAppend</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RBAppend</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufferMark</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pmarkObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>posp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pmark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufref_T</name></type> <name>savebuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pmark</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>pmarkObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pmark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>pmark</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"mark name must be a single character"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mark</name> <operator>=</operator> <operator>*</operator><name>pmark</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>switch_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>savebuf</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>posp</name> <operator>=</operator> <call><name>getmark</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>savebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>posp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"invalid mark name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>posp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(ll)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>posp</name><operator>-&gt;</operator><name>lnum</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>posp</name><operator>-&gt;</operator><name>col</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufferRange</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyInt</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"nn"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>RangeNew</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufferRepr</name><parameter_list>(<parameter><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>INVALID_BUFFER_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;buffer object (deleted) at %p&gt;"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;buffer %s&gt;"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>BufferMethods</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"append"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>BufferAppend</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">"Append data to Vim buffer"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"mark"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>BufferMark</name></expr>, <expr><name>METH_O</name></expr>, <expr><literal type="string">"Return (row,col) representing position of named mark"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"range"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>BufferRange</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">"Return a range object which represents the part of the given buffer between line numbers s and e"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"__dir__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>BufferDir</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>BufMapType</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<expr_stmt><expr><name>PyObject_HEAD</name></expr></expr_stmt>

}</block></struct></type> <name>BufMapObject</name>;</typedef>

<function><type><specifier>static</specifier> <name>PyInt</name></type>

<name>BufMapLength</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>firstbuf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyInt</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>b</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>b_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufMapItem</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>bnr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NumberToLong</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bnr</name></expr></argument>, <argument><expr><name>NUMBER_INT</name><operator>|</operator><name>NUMBER_NATURAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>bnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>BufferNew</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr><name>keyObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>BufMapIterDestruct</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>BufMapIterTraverse</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>visitproc</name></type> <name>visit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>BufMapIterClear</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufMapIterNext</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><name>buffer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><operator>(</operator><name>BufferObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ret</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>BufferObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ret</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>next</name> <operator>=</operator> <call><name>BufferNew</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>BufferObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ret</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_next</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>BufMapIter</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>BufferNew</name><argument_list>(<argument><expr><name>firstbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>IterNew</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,

<argument><expr><operator>(</operator><name>destructorfun</name><operator>)</operator> <name>BufMapIterDestruct</name></expr></argument>, <argument><expr><operator>(</operator><name>nextfun</name><operator>)</operator> <name>BufMapIterNext</name></expr></argument>,

<argument><expr><operator>(</operator><name>traversefun</name><operator>)</operator> <name>BufMapIterTraverse</name></expr></argument>, <argument><expr><operator>(</operator><name>clearfun</name><operator>)</operator> <name>BufMapIterClear</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>BufMapAsMapping</name> <init>= <expr><block>{

<expr><operator>(</operator><name>lenfunc</name><operator>)</operator> <name>BufMapLength</name></expr>,

<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <name>BufMapItem</name></expr>,

<expr><operator>(</operator><name>objobjargproc</name><operator>)</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>CurrentAttrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"buffer"</literal></expr>, <expr><literal type="string">"window"</literal></expr>, <expr><literal type="string">"line"</literal></expr>, <expr><literal type="string">"range"</literal></expr>, <expr><literal type="string">"tabpage"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>CurrentDir</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>CurrentAttrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>CurrentGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"buffer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><call><name>BufferNew</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><call><name>WindowNew</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"tabpage"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><call><name>TabPageNew</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"line"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GetBufferLine</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>PyInt</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"range"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RangeNew</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>RangeStart</name></expr></argument>, <argument><expr><name>RangeEnd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__members__"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CurrentAttrs</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>

<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>WindowMethods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>NULL</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>CurrentSetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier><name>self</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"line"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SetBufferLine</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>PyInt</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>valObject</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"buffer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>valObject</name><operator>-&gt;</operator><name>ob_type</name></name> <operator>!=</operator> <operator>&amp;</operator><name>BufferType</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected vim.Buffer object, but got %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><operator>(</operator><name>BufferObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>valObject</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>BufferObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>valObject</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_buffer</name><argument_list>(<argument><expr><name>DOBUF_GOTO</name></expr></argument>, <argument><expr><name>DOBUF_FIRST</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PyErr_VIM_FORMAT</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"failed to switch to buffer %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>valObject</name><operator>-&gt;</operator><name>ob_type</name></name> <operator>!=</operator> <operator>&amp;</operator><name>WindowType</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected vim.Window object, but got %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckWindow</name><argument_list>(<argument><expr><operator>(</operator><name>WindowObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>valObject</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>get_win_number</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>WindowObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>valObject</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>win</name></expr></argument>, <argument><expr><name>firstwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"failed to find window in the current tab page"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>WindowObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>valObject</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>WindowObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>valObject</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>win</name> <operator>!=</operator> <name>curwin</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"did not switch to the specified window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"tabpage"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>valObject</name><operator>-&gt;</operator><name>ob_type</name></name> <operator>!=</operator> <operator>&amp;</operator><name>TabPageType</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expected vim.TabPage object, but got %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckTabPage</name><argument_list>(<argument><expr><operator>(</operator><name>TabPageObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>valObject</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TabPageObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>valObject</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>tab</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>TabPageObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>valObject</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>tab</name> <operator>!=</operator> <name>curtab</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PyErr_SET_STRING</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"did not switch to the specified tab page"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMethodDef</name></name></type> <name><name>CurrentMethods</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"__dir__"</literal></expr>, <expr><operator>(</operator><name>PyCFunction</name><operator>)</operator><name>CurrentDir</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_range_cmd</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>RangeStart</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>RangeEnd</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_range_eval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>RangeStart</name> <operator>=</operator> <operator>(</operator><name>PyInt</name><operator>)</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>RangeEnd</name> <operator>=</operator> <name>RangeStart</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>run_cmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>UNUSED</name></decl></parameter>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <parameter><decl><type><name>PyGILState_STATE</name> <modifier>*</modifier><name>pygilstate</name></type> <name>UNUSED</name></decl></parameter>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>run_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>run_ret</name> <operator>=</operator> <call><name>PyRun_String</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><name>Py_file_input</name></expr></argument>, <argument><expr><name>globals</name></expr></argument>, <argument><expr><name>globals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>run_ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>run_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_SystemExit</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_py_systemexit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"python"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PyErr_PrintEx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code_hdr</name> <init>= <expr><literal type="string">"def "</literal> <name>DOPY_FUNC</name> <literal type="string">"(line, linenr):\n "</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>code_hdr_len</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>run_do</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>UNUSED</name></decl></parameter>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <parameter><decl><type><name>PyGILState_STATE</name> <modifier>*</modifier></type><name>pygilstate</name></decl></parameter>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyInt</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>pyfunc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pymain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>run_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>was_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>RangeStart</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>RangeEnd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot save undo information"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>code_hdr_len</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_hdr</name></expr></argument>, <argument><expr><name>code_hdr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name> <operator>+</operator> <name>code_hdr_len</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run_ret</name> <operator>=</operator> <call><name>PyRun_String</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>Py_file_input</name></expr></argument>, <argument><expr><name>globals</name></expr></argument>, <argument><expr><name>globals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>run_ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>run_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_SystemExit</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_py_systemexit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"python"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PyErr_PrintEx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to run the code"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pymain</name> <operator>=</operator> <call><name>PyImport_AddModule</name><argument_list>(<argument><expr><literal type="string">"__main__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pyfunc</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>pymain</name></expr></argument>, <argument><expr><name>DOPY_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyGILState_Release</name><argument_list>(<argument><expr><operator>*</operator><name>pygilstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name>RangeStart</name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name>RangeEnd</name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>linenr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>pygilstate</name> <operator>=</operator> <call><name>PyGILState_Ensure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>||</operator> <operator>!</operator><operator>(</operator><name>line</name> <operator>=</operator> <call><name>GetBufferLine</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>linenr</name> <operator>=</operator> <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>lnum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>pyfunc</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>linenr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>linenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>!=</operator> <name>was_curbuf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>SetBufferLine</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PythonIO_Flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyGILState_Release</name><argument_list>(<argument><expr><operator>*</operator><name>pygilstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<goto>goto <name>out</name>;</goto>

<label><name>err</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>pygilstate</name> <operator>=</operator> <call><name>PyGILState_Ensure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>PyErr_PrintEx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PythonIO_Flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>out</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pygilstate</name> <operator>=</operator> <call><name>PyGILState_Ensure</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pyfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>pymain</name></expr></argument>, <argument><expr><name>DOPY_FUNC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_curbuf</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>run_eval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <parameter><decl><type><name>PyGILState_STATE</name> <modifier>*</modifier><name>pygilstate</name></type> <name>UNUSED</name></decl></parameter>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>run_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>run_ret</name> <operator>=</operator> <call><name>PyRun_String</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><name>Py_eval_input</name></expr></argument>, <argument><expr><name>globals</name></expr></argument>, <argument><expr><name>globals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>run_ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_SystemExit</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_py_systemexit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"python"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>msg_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PyErr_PrintEx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E858: Eval did not return a valid python object"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ConvertFromPyObject</name><argument_list>(<argument><expr><name>run_ret</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E859: Failed to convert returned python object to vim value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>run_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>set_ref_in_py</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pylinkedlist_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>ll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>abort</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FunctionObject</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lastdict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>lastdict</name></expr> ;</init> <condition><expr><operator>!</operator><name>abort</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr> ;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pll_prev</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <call><name>set_ref_in_dict</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>DictionaryObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>pll_obj</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>dict</name></expr></argument>,

<argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lastlist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>lastlist</name></expr> ;</init> <condition><expr><operator>!</operator><name>abort</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr> ;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pll_prev</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ll</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ListObject</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>pll_obj</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>list</name></expr>;</expr_stmt>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <call><name>set_ref_in_list</name><argument_list>(<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lastfunc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>lastfunc</name></expr> ;</init> <condition><expr><operator>!</operator><name>abort</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr> ;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pll_prev</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>func</name> <operator>=</operator> <operator>(</operator><name>FunctionObject</name> <operator>*</operator><operator>)</operator> <name><name>cur</name><operator>-&gt;</operator><name>pll_obj</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <call><name>set_ref_in_dict</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>func</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>abort</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>func</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name>

<operator>||</operator> <call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>func</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>abort</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>set_string_copy</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>pydict_to_tv</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dict</name> <operator>=</operator> <call><name>py_dict_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <name>dict</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>PyDict_Next</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valObject</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keyObject</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>valObject</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RAISE_NO_EMPTY_KEYS</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictitem_alloc</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_ConvertFromPyObject</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_add</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RAISE_KEY_ADD_FAIL</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>--</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>pymap_to_tv</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dict</name> <operator>=</operator> <call><name>py_dict_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <name>dict</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>list</name> <operator>=</operator> <call><name>PyMapping_Keys</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iterator</name> <operator>=</operator> <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>keyObject</name> <operator>=</operator> <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>todecref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>key</name> <operator>=</operator> <call><name>StringToChars</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todecref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RAISE_NO_EMPTY_KEYS</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>valObject</name> <operator>=</operator> <call><name>PyObject_GetItem</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>keyObject</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictitem_alloc</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keyObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>todecref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_ConvertFromPyObject</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_add</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RAISE_KEY_ADD_FAIL</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dictitem_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>pyseq_to_tv</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>l</name> <operator>=</operator> <call><name>py_list_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_py_concat</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>list_unref</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>l</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pytotvfunc</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>convert_dl</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>,

<parameter><decl><type><name>pytotvfunc</name></type> <name>py_to_tv</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>capsule</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hexBuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>hexBuf</name></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_USE_CAPSULE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>capsule</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>, <argument><expr><name>hexBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>capsule</name> <operator>=</operator> <operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>, <argument><expr><name>hexBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>capsule</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_USE_CAPSULE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>capsule</name> <operator>=</operator> <call><name>PyCapsule_New</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>capsule</name> <operator>=</operator> <call><name>PyCObject_FromVoidPtr</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>, <argument><expr><name>hexBuf</name></expr></argument>, <argument><expr><name>capsule</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>capsule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>capsule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>py_to_tv</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_USE_CAPSULE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>PyCapsule_GetPointer</name><argument_list>(<argument><expr><name>capsule</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>PyCObject_AsVoidPtr</name><argument_list>(<argument><expr><name>capsule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ConvertFromPyMapping</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lookup_dict</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyType_IsSubtype</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ob_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>DictionaryType</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>DictionaryObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>obj</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>dict</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>convert_dl</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>pydict_to_tv</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyMapping_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>convert_dl</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>pymap_to_tv</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"unable to convert %s to vim dictionary"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ConvertFromPySequence</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lookup_dict</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyType_IsSubtype</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ob_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ListType</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ListObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>obj</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyIter_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PySequence_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>convert_dl</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>pyseq_to_tv</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"unable to convert %s to vim list"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ConvertFromPyObject</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lookup_dict</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_ConvertFromPyObject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>_ConvertFromPyObject</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>lookup_dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyType_IsSubtype</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ob_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>DictionaryType</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>DictionaryObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>obj</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>dict</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyType_IsSubtype</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ob_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ListType</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ListObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>obj</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyType_IsSubtype</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ob_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FunctionType</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>FunctionObject</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><operator>(</operator><name>FunctionObject</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>func</name><operator>-&gt;</operator><name>self</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>func</name><operator>-&gt;</operator><name>argv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>partial_T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_partial</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>set_string_copy</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FUNC</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyBytes_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyBytes_AsStringAndSize</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_string_copy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>PyUnicode_AsEncodedString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ENC_OPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>PyBytes_AsStringAndSize</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_string_copy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator> <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator> <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>convert_dl</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>pydict_to_tv</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>PyFloat_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <operator>(</operator><name>float_T</name><operator>)</operator> <call><name>PyFloat_AsDouble</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"keys"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>convert_dl</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>pymap_to_tv</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyIter_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PySequence_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>convert_dl</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>pyseq_to_tv</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyMapping_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>convert_dl</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>pymap_to_tv</name></expr></argument>, <argument><expr><name>lookup_dict</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyNumber_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>num</name> <operator>=</operator> <call><name>PyNumber_Long</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator> <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Py_None</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>VVAL_NONE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_FORMAT</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"unable to convert %s to vim structure"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Py_TYPE_NAME</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>

<name>ConvertToPyObject</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"internal error: NULL reference passed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VAR_STRING</name></expr>:</case>

<return>return <expr><call><name>PyBytes_FromString</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VAR_NUMBER</name></expr>:</case>

<return>return <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VAR_FLOAT</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>VAR_LIST</name></expr>:</case>

<return>return <expr><call><name>NEW_LIST</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VAR_DICT</name></expr>:</case>

<return>return <expr><call><name>NEW_DICTIONARY</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VAR_FUNC</name></expr>:</case>

<return>return <expr><call><name>NEW_FUNCTION</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VAR_PARTIAL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_argc</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>PyMem_New</name><argument_list>(<argument><expr><name>typval_T</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>argv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>NEW_FUNCTION</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><call><name>partial_name</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_argc</name></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,

<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_dict</name></name></expr></argument>,

<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name><operator>-&gt;</operator><name>pt_auto</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VAR_BLOB</name></expr>:</case>

<return>return <expr><call><name>PyBytes_FromStringAndSize</name><argument_list>(

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_blob</name><operator>-&gt;</operator><name>bv_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>Py_ssize_t</name><operator>)</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_blob</name><operator>-&gt;</operator><name>bv_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case>

<case>case <expr><name>VAR_VOID</name></expr>:</case>

<case>case <expr><name>VAR_CHANNEL</name></expr>:</case>

<case>case <expr><name>VAR_JOB</name></expr>:</case>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Py_None</name></expr>;</return>

<case>case <expr><name>VAR_BOOL</name></expr>:</case>

<case>case <expr><name>VAR_SPECIAL</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VVAL_FALSE</name></expr>:</case> <return>return <expr><call><name>AlwaysFalse</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VVAL_TRUE</name></expr>:</case> <return>return <expr><call><name>AlwaysTrue</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VVAL_NONE</name></expr>:</case>

<case>case <expr><name>VVAL_NULL</name></expr>:</case> <return>return <expr><call><name>AlwaysNone</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>PyErr_SET_VIM</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"internal error: invalid value type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<expr_stmt><expr><name>PyObject_HEAD</name></expr></expr_stmt>

}</block></struct></type> <name>CurrentObject</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>CurrentType</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_structs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>OutputType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OutputType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.message"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OutputObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"vim message object"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_methods</name></name> <operator>=</operator> <name>OutputMethods</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_getattro</name></name> <operator>=</operator> <operator>(</operator><name>getattrofunc</name><operator>)</operator><name>OutputGetattro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_setattro</name></name> <operator>=</operator> <operator>(</operator><name>setattrofunc</name><operator>)</operator><name>OutputSetattro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_alloc</name></name> <operator>=</operator> <name>call_PyType_GenericAlloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_new</name></name> <operator>=</operator> <name>call_PyType_GenericNew</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_free</name></name> <operator>=</operator> <name>call_PyObject_Free</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_base</name></name> <operator>=</operator> <operator>&amp;</operator><name>PyStdPrinter_Type</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_getattr</name></name> <operator>=</operator> <operator>(</operator><name>getattrfunc</name><operator>)</operator><name>OutputGetattr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OutputType</name><operator>.</operator><name>tp_setattr</name></name> <operator>=</operator> <operator>(</operator><name>setattrfunc</name><operator>)</operator><name>OutputSetattr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IterType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IterType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IterType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.iter"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IterType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IterObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IterType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_HAVE_GC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IterType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"generic iterator object"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IterType</name><operator>.</operator><name>tp_iter</name></name> <operator>=</operator> <operator>(</operator><name>getiterfunc</name><operator>)</operator><name>IterIter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IterType</name><operator>.</operator><name>tp_iternext</name></name> <operator>=</operator> <operator>(</operator><name>iternextfunc</name><operator>)</operator><name>IterNext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IterType</name><operator>.</operator><name>tp_dealloc</name></name> <operator>=</operator> <operator>(</operator><name>destructor</name><operator>)</operator><name>IterDestructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IterType</name><operator>.</operator><name>tp_traverse</name></name> <operator>=</operator> <operator>(</operator><name>traverseproc</name><operator>)</operator><name>IterTraverse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IterType</name><operator>.</operator><name>tp_clear</name></name> <operator>=</operator> <operator>(</operator><name>inquiry</name><operator>)</operator><name>IterClear</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BufferType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.buffer"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BufferType</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_dealloc</name></name> <operator>=</operator> <operator>(</operator><name>destructor</name><operator>)</operator><name>BufferDestructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_repr</name></name> <operator>=</operator> <operator>(</operator><name>reprfunc</name><operator>)</operator><name>BufferRepr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_as_sequence</name></name> <operator>=</operator> <operator>&amp;</operator><name>BufferAsSeq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_as_mapping</name></name> <operator>=</operator> <operator>&amp;</operator><name>BufferAsMapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"vim buffer object"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_methods</name></name> <operator>=</operator> <name>BufferMethods</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_getattro</name></name> <operator>=</operator> <operator>(</operator><name>getattrofunc</name><operator>)</operator><name>BufferGetattro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_setattro</name></name> <operator>=</operator> <operator>(</operator><name>setattrofunc</name><operator>)</operator><name>BufferSetattro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_alloc</name></name> <operator>=</operator> <name>call_PyType_GenericAlloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_new</name></name> <operator>=</operator> <name>call_PyType_GenericNew</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_free</name></name> <operator>=</operator> <name>call_PyObject_Free</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_getattr</name></name> <operator>=</operator> <operator>(</operator><name>getattrfunc</name><operator>)</operator><name>BufferGetattr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_setattr</name></name> <operator>=</operator> <operator>(</operator><name>setattrfunc</name><operator>)</operator><name>BufferSetattr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>WindowType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WindowType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.window"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WindowObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_dealloc</name></name> <operator>=</operator> <operator>(</operator><name>destructor</name><operator>)</operator><name>WindowDestructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_repr</name></name> <operator>=</operator> <operator>(</operator><name>reprfunc</name><operator>)</operator><name>WindowRepr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_HAVE_GC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"vim Window object"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_methods</name></name> <operator>=</operator> <name>WindowMethods</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_traverse</name></name> <operator>=</operator> <operator>(</operator><name>traverseproc</name><operator>)</operator><name>WindowTraverse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_clear</name></name> <operator>=</operator> <operator>(</operator><name>inquiry</name><operator>)</operator><name>WindowClear</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_getattro</name></name> <operator>=</operator> <operator>(</operator><name>getattrofunc</name><operator>)</operator><name>WindowGetattro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_setattro</name></name> <operator>=</operator> <operator>(</operator><name>setattrofunc</name><operator>)</operator><name>WindowSetattro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_alloc</name></name> <operator>=</operator> <name>call_PyType_GenericAlloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_new</name></name> <operator>=</operator> <name>call_PyType_GenericNew</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_free</name></name> <operator>=</operator> <name>call_PyObject_Free</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_getattr</name></name> <operator>=</operator> <operator>(</operator><name>getattrfunc</name><operator>)</operator><name>WindowGetattr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WindowType</name><operator>.</operator><name>tp_setattr</name></name> <operator>=</operator> <operator>(</operator><name>setattrfunc</name><operator>)</operator><name>WindowSetattr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TabPageType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TabPageType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.tabpage"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TabPageObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_dealloc</name></name> <operator>=</operator> <operator>(</operator><name>destructor</name><operator>)</operator><name>TabPageDestructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_repr</name></name> <operator>=</operator> <operator>(</operator><name>reprfunc</name><operator>)</operator><name>TabPageRepr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"vim tab page object"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_methods</name></name> <operator>=</operator> <name>TabPageMethods</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_getattro</name></name> <operator>=</operator> <operator>(</operator><name>getattrofunc</name><operator>)</operator><name>TabPageGetattro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_alloc</name></name> <operator>=</operator> <name>call_PyType_GenericAlloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_new</name></name> <operator>=</operator> <name>call_PyType_GenericNew</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_free</name></name> <operator>=</operator> <name>call_PyObject_Free</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>TabPageType</name><operator>.</operator><name>tp_getattr</name></name> <operator>=</operator> <operator>(</operator><name>getattrfunc</name><operator>)</operator><name>TabPageGetattr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BufMapType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufMapType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufMapType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.bufferlist"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufMapType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BufMapObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufMapType</name><operator>.</operator><name>tp_as_mapping</name></name> <operator>=</operator> <operator>&amp;</operator><name>BufMapAsMapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufMapType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufMapType</name><operator>.</operator><name>tp_iter</name></name> <operator>=</operator> <name>BufMapIter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"vim buffer list"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>WinListType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WinListType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WinListType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.windowlist"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WinListType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WinListType</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WinListType</name><operator>.</operator><name>tp_as_sequence</name></name> <operator>=</operator> <operator>&amp;</operator><name>WinListAsSeq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WinListType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WinListType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"vim window list"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>WinListType</name><operator>.</operator><name>tp_dealloc</name></name> <operator>=</operator> <operator>(</operator><name>destructor</name><operator>)</operator><name>WinListDestructor</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TabListType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TabListType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabListType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.tabpagelist"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabListType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TabListType</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabListType</name><operator>.</operator><name>tp_as_sequence</name></name> <operator>=</operator> <operator>&amp;</operator><name>TabListAsSeq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabListType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabListType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"vim tab page list"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RangeType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RangeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.range"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RangeObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_dealloc</name></name> <operator>=</operator> <operator>(</operator><name>destructor</name><operator>)</operator><name>RangeDestructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_repr</name></name> <operator>=</operator> <operator>(</operator><name>reprfunc</name><operator>)</operator><name>RangeRepr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_as_sequence</name></name> <operator>=</operator> <operator>&amp;</operator><name>RangeAsSeq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_as_mapping</name></name> <operator>=</operator> <operator>&amp;</operator><name>RangeAsMapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_HAVE_GC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"vim Range object"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_methods</name></name> <operator>=</operator> <name>RangeMethods</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_traverse</name></name> <operator>=</operator> <operator>(</operator><name>traverseproc</name><operator>)</operator><name>RangeTraverse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_clear</name></name> <operator>=</operator> <operator>(</operator><name>inquiry</name><operator>)</operator><name>RangeClear</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_getattro</name></name> <operator>=</operator> <operator>(</operator><name>getattrofunc</name><operator>)</operator><name>RangeGetattro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_alloc</name></name> <operator>=</operator> <name>call_PyType_GenericAlloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_new</name></name> <operator>=</operator> <name>call_PyType_GenericNew</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_free</name></name> <operator>=</operator> <name>call_PyObject_Free</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>RangeType</name><operator>.</operator><name>tp_getattr</name></name> <operator>=</operator> <operator>(</operator><name>getattrfunc</name><operator>)</operator><name>RangeGetattr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CurrentType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CurrentType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CurrentType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.currentdata"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CurrentType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CurrentObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CurrentType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CurrentType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"vim current object"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CurrentType</name><operator>.</operator><name>tp_methods</name></name> <operator>=</operator> <name>CurrentMethods</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><name><name>CurrentType</name><operator>.</operator><name>tp_getattro</name></name> <operator>=</operator> <operator>(</operator><name>getattrofunc</name><operator>)</operator><name>CurrentGetattro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CurrentType</name><operator>.</operator><name>tp_setattro</name></name> <operator>=</operator> <operator>(</operator><name>setattrofunc</name><operator>)</operator><name>CurrentSetattro</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>CurrentType</name><operator>.</operator><name>tp_getattr</name></name> <operator>=</operator> <operator>(</operator><name>getattrfunc</name><operator>)</operator><name>CurrentGetattr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CurrentType</name><operator>.</operator><name>tp_setattr</name></name> <operator>=</operator> <operator>(</operator><name>setattrfunc</name><operator>)</operator><name>CurrentSetattr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>DictionaryType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DictionaryType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.dictionary"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DictionaryObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_dealloc</name></name> <operator>=</operator> <operator>(</operator><name>destructor</name><operator>)</operator><name>DictionaryDestructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_as_sequence</name></name> <operator>=</operator> <operator>&amp;</operator><name>DictionaryAsSeq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_as_mapping</name></name> <operator>=</operator> <operator>&amp;</operator><name>DictionaryAsMapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_BASETYPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"dictionary pushing modifications to vim structure"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_methods</name></name> <operator>=</operator> <name>DictionaryMethods</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_iter</name></name> <operator>=</operator> <operator>(</operator><name>getiterfunc</name><operator>)</operator><name>DictionaryIter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_new</name></name> <operator>=</operator> <operator>(</operator><name>newfunc</name><operator>)</operator><name>DictionaryConstructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_alloc</name></name> <operator>=</operator> <operator>(</operator><name>allocfunc</name><operator>)</operator><name>PyType_GenericAlloc</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_getattro</name></name> <operator>=</operator> <operator>(</operator><name>getattrofunc</name><operator>)</operator><name>DictionaryGetattro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_setattro</name></name> <operator>=</operator> <operator>(</operator><name>setattrofunc</name><operator>)</operator><name>DictionarySetattro</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_getattr</name></name> <operator>=</operator> <operator>(</operator><name>getattrfunc</name><operator>)</operator><name>DictionaryGetattr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>DictionaryType</name><operator>.</operator><name>tp_setattr</name></name> <operator>=</operator> <operator>(</operator><name>setattrfunc</name><operator>)</operator><name>DictionarySetattr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ListType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ListType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.list"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_dealloc</name></name> <operator>=</operator> <operator>(</operator><name>destructor</name><operator>)</operator><name>ListDestructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ListObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_as_sequence</name></name> <operator>=</operator> <operator>&amp;</operator><name>ListAsSeq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_as_mapping</name></name> <operator>=</operator> <operator>&amp;</operator><name>ListAsMapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_BASETYPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"list pushing modifications to vim structure"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_methods</name></name> <operator>=</operator> <name>ListMethods</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_iter</name></name> <operator>=</operator> <operator>(</operator><name>getiterfunc</name><operator>)</operator><name>ListIter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_new</name></name> <operator>=</operator> <operator>(</operator><name>newfunc</name><operator>)</operator><name>ListConstructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_alloc</name></name> <operator>=</operator> <operator>(</operator><name>allocfunc</name><operator>)</operator><name>PyType_GenericAlloc</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_getattro</name></name> <operator>=</operator> <operator>(</operator><name>getattrofunc</name><operator>)</operator><name>ListGetattro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_setattro</name></name> <operator>=</operator> <operator>(</operator><name>setattrofunc</name><operator>)</operator><name>ListSetattro</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_getattr</name></name> <operator>=</operator> <operator>(</operator><name>getattrfunc</name><operator>)</operator><name>ListGetattr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ListType</name><operator>.</operator><name>tp_setattr</name></name> <operator>=</operator> <operator>(</operator><name>setattrfunc</name><operator>)</operator><name>ListSetattr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>FunctionType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FunctionType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.function"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FunctionObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_dealloc</name></name> <operator>=</operator> <operator>(</operator><name>destructor</name><operator>)</operator><name>FunctionDestructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_call</name></name> <operator>=</operator> <operator>(</operator><name>ternaryfunc</name><operator>)</operator><name>FunctionCall</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_BASETYPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"object that calls vim function"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_methods</name></name> <operator>=</operator> <name>FunctionMethods</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_repr</name></name> <operator>=</operator> <operator>(</operator><name>reprfunc</name><operator>)</operator><name>FunctionRepr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_new</name></name> <operator>=</operator> <operator>(</operator><name>newfunc</name><operator>)</operator><name>FunctionConstructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_alloc</name></name> <operator>=</operator> <operator>(</operator><name>allocfunc</name><operator>)</operator><name>PyType_GenericAlloc</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_getattro</name></name> <operator>=</operator> <operator>(</operator><name>getattrofunc</name><operator>)</operator><name>FunctionGetattro</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>FunctionType</name><operator>.</operator><name>tp_getattr</name></name> <operator>=</operator> <operator>(</operator><name>getattrfunc</name><operator>)</operator><name>FunctionGetattr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>OptionsType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OptionsType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OptionsType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.options"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OptionsType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OptionsObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OptionsType</name><operator>.</operator><name>tp_as_sequence</name></name> <operator>=</operator> <operator>&amp;</operator><name>OptionsAsSeq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OptionsType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name><operator>|</operator><name>Py_TPFLAGS_HAVE_GC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OptionsType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"object for manipulating options"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OptionsType</name><operator>.</operator><name>tp_iter</name></name> <operator>=</operator> <operator>(</operator><name>getiterfunc</name><operator>)</operator><name>OptionsIter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OptionsType</name><operator>.</operator><name>tp_as_mapping</name></name> <operator>=</operator> <operator>&amp;</operator><name>OptionsAsMapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OptionsType</name><operator>.</operator><name>tp_dealloc</name></name> <operator>=</operator> <operator>(</operator><name>destructor</name><operator>)</operator><name>OptionsDestructor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OptionsType</name><operator>.</operator><name>tp_traverse</name></name> <operator>=</operator> <operator>(</operator><name>traverseproc</name><operator>)</operator><name>OptionsTraverse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>OptionsType</name><operator>.</operator><name>tp_clear</name></name> <operator>=</operator> <operator>(</operator><name>inquiry</name><operator>)</operator><name>OptionsClear</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&lt;</operator> <literal type="number">0x030700f0</literal></expr></cpp:if>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>LoaderType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LoaderType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LoaderType</name><operator>.</operator><name>tp_name</name></name> <operator>=</operator> <literal type="string">"vim.Loader"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LoaderType</name><operator>.</operator><name>tp_basicsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LoaderObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LoaderType</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <name>Py_TPFLAGS_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LoaderType</name><operator>.</operator><name>tp_doc</name></name> <operator>=</operator> <literal type="string">"vim message object"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LoaderType</name><operator>.</operator><name>tp_methods</name></name> <operator>=</operator> <name>LoaderMethods</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LoaderType</name><operator>.</operator><name>tp_dealloc</name></name> <operator>=</operator> <operator>(</operator><name>destructor</name><operator>)</operator><name>LoaderDestructor</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimmodule</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vimmodule</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimmodule</name><operator>.</operator><name>m_name</name></name> <operator>=</operator> <literal type="string">"vim"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimmodule</name><operator>.</operator><name>m_doc</name></name> <operator>=</operator> <literal type="string">"Vim Python interface\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimmodule</name><operator>.</operator><name>m_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimmodule</name><operator>.</operator><name>m_methods</name></name> <operator>=</operator> <name>VimMethods</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTYPE_READY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (PyType_Ready(&amp;type)) return -1;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>init_types</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>IterType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>BufferType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>RangeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>WindowType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>TabPageType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>BufMapType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>WinListType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>TabListType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>CurrentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>DictionaryType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>ListType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>FunctionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>OptionsType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>OutputType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&lt;</operator> <literal type="number">0x030700f0</literal></expr></cpp:if>

<expr_stmt><expr><call><name>PYTYPE_READY</name><argument_list>(<argument><expr><name>LoaderType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>init_sys_path</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>path_hook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>path_hooks</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>path_hook</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>vim_module</name></expr></argument>, <argument><expr><literal type="string">"path_hook"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>path_hooks</name> <operator>=</operator> <call><name>PySys_GetObject</name><argument_list>(<argument><expr><literal type="string">"path_hooks"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path_hooks</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>path_hooks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path_hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PySys_SetObject</name><argument_list>(<argument><expr><literal type="string">"path_hooks"</literal></expr></argument>, <argument><expr><name>path_hooks</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>path_hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>path_hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>path_hooks</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>path_hooks</name></expr></argument>, <argument><expr><name>path_hook</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>path_hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>path_hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Failed to set path hook: sys.path_hooks is not a list\n"</literal>

<literal type="string">"You should now do the following:\n"</literal>

<literal type="string">"- append vim.path_hook to sys.path_hooks\n"</literal>

<literal type="string">"- append vim.VIM_SPECIAL_PATH to sys.path\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>path_hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>path</name> <operator>=</operator> <call><name>PySys_GetObject</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>vim_special_path_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vim_special_path_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PySys_SetObject</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>vim_special_path_object</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>VimTryStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Failed to set path: sys.path is not a list\n"</literal>

<literal type="string">"You should now append vim.VIM_SPECIAL_PATH to sys.path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VimTryEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>BufMapObject</name></type> <name>TheBufferMap</name> <init>=

<expr><block>{

<macro><name>PyObject_HEAD_INIT</name><argument_list>(<argument>&amp;BufMapType</argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>WinListObject</name></type> <name>TheWindowList</name> <init>=

<expr><block>{

<macro><name>PyObject_HEAD_INIT</name><argument_list>(<argument>&amp;WinListType</argument>)</argument_list></macro>

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CurrentObject</name></type> <name>TheCurrent</name> <init>=

<expr><block>{

<macro><name>PyObject_HEAD_INIT</name><argument_list>(<argument>&amp;CurrentType</argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TabListObject</name></type> <name>TheTabPageList</name> <init>=

<expr><block>{

<macro><name>PyObject_HEAD_INIT</name><argument_list>(<argument>&amp;TabListType</argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <name>numeric_constant</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

}</block> <decl><name><name>numeric_constants</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"VAR_LOCKED"</literal></expr>, <expr><name>VAR_LOCKED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"VAR_FIXED"</literal></expr>, <expr><name>VAR_FIXED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"VAR_SCOPE"</literal></expr>, <expr><name>VAR_SCOPE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"VAR_DEF_SCOPE"</literal></expr>, <expr><name>VAR_DEF_SCOPE</name></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> struct <name>object_constant</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl>;</decl_stmt>

}</block> <decl><name><name>object_constants</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"buffers"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>TheBufferMap</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"windows"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>TheWindowList</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tabpages"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>TheTabPageList</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"current"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>TheCurrent</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Buffer"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>BufferType</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Range"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>RangeType</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Window"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>WindowType</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TabPage"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>TabPageType</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Dictionary"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>DictionaryType</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"List"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ListType</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Function"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>FunctionType</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Options"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>OptionsType</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&lt;</operator> <literal type="number">0x030700f0</literal></expr></cpp:if>

<expr><block>{<expr><literal type="string">"_Loader"</literal></expr>, <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>LoaderType</name></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_OBJECT</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (PyModule_AddObject(m, name, obj)) return -1;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CHECKED_OBJECT</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ PyObject *valObject = obj; if (!valObject) return -1; ADD_OBJECT(m, name, valObject); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>populate_module</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>other_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>imp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x030700f0</literal></expr></cpp:if>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>cls</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>numeric_constants</name></expr></argument>)</argument_list></sizeof>

<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>numeric_constant</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>

<incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_CHECKED_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>numeric_constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>numeric_constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>object_constants</name></expr></argument>)</argument_list></sizeof>

<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>object_constant</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>

<incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>valObject</name></decl>;</decl_stmt>

<expr_stmt><expr><name>valObject</name> <operator>=</operator> <name><name>object_constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valObject</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>object_constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>valObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>VimError</name> <operator>=</operator> <call><name>PyErr_NewException</name><argument_list>(<argument><expr><literal type="string">"vim.error"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name>VimError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_CHECKED_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"vars"</literal></expr></argument>, <argument><expr><call><name>NEW_DICTIONARY</name><argument_list>(<argument><expr><call><name>get_globvar_dict</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_CHECKED_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"vvars"</literal></expr></argument>, <argument><expr><call><name>NEW_DICTIONARY</name><argument_list>(<argument><expr><call><name>get_vimvar_dict</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_CHECKED_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"options"</literal></expr></argument>,

<argument><expr><call><name>OptionsNew</name><argument_list>(<argument><expr><name>SREQ_GLOBAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dummy_check</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>other_module</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"os"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"os"</literal></expr></argument>, <argument><expr><name>other_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>py_getcwd</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>other_module</name></expr></argument>, <argument><expr><literal type="string">"getcwd"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>py_getcwd</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>other_module</name></expr></argument>, <argument><expr><literal type="string">"getcwdu"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ADD_OBJECT</name><argument_list>(<argument>m</argument>, <argument><literal type="string">"_getcwd"</literal></argument>, <argument>py_getcwd</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>py_chdir</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>other_module</name></expr></argument>, <argument><expr><literal type="string">"chdir"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_chdir"</literal></expr></argument>, <argument><expr><name>py_chdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"chdir"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>other_module</name></expr></argument>, <argument><expr><literal type="string">"chdir"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>py_fchdir</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>other_module</name></expr></argument>, <argument><expr><literal type="string">"fchdir"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ADD_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_fchdir"</literal></expr></argument>, <argument><expr><name>py_fchdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"fchdir"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>other_module</name></expr></argument>, <argument><expr><literal type="string">"fchdir"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>vim_special_path_object</name> <operator>=</operator> <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>vim_special_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"VIM_SPECIAL_PATH"</literal></expr></argument>, <argument><expr><name>vim_special_path_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x030700f0</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imp</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"importlib.machinery"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cls</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"PathFinder"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>py_find_spec</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"find_spec"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>py_find_module</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="string">"find_module"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ADD_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_find_module"</literal></expr></argument>, <argument><expr><name>py_find_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_find_spec"</literal></expr></argument>, <argument><expr><name>py_find_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imp</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"imp"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>py_find_module</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>imp</name></expr></argument>, <argument><expr><literal type="string">"find_module"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>py_load_module</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>imp</name></expr></argument>, <argument><expr><literal type="string">"load_module"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_find_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_find_module"</literal></expr></argument>, <argument><expr><name>py_find_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_OBJECT</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_load_module"</literal></expr></argument>, <argument><expr><name>py_load_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
