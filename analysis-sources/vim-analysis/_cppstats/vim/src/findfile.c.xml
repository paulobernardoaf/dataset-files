<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\findfile.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ff_stack</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ff_stack</name></name> <modifier>*</modifier></type><name>ffs_prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffs_fix_path</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffs_wc_path</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>ffs_filearray</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ffs_filearray_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>ffs_filearray_cur</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ffs_stage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ffs_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ffs_star_star_empty</name></decl>;</decl_stmt>

}</block></struct></type> <name>ff_stack_T</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ff_visited</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ff_visited</name></name> <modifier>*</modifier></type><name>ffv_next</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffv_wc_path</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ffv_dev_valid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>dev_t</name></type> <name>ffv_dev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ino_t</name></type> <name>ffv_ino</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>ffv_fname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>ff_visited_T</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ff_visited_list_hdr</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ff_visited_list_hdr</name></name> <modifier>*</modifier></type><name>ffvl_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffvl_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_visited_T</name> <modifier>*</modifier></type><name>ffvl_visited_list</name></decl>;</decl_stmt>

}</block></struct></type> <name>ff_visited_list_hdr_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MAX_STAR_STAR_EXPAND</name></cpp:macro> <cpp:value>((char_u)30)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ff_search_ctx_T</name>

<block>{

<decl_stmt><decl><type><name>ff_stack_T</name> <modifier>*</modifier></type><name>ffsc_stack_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_visited_list_hdr_T</name> <modifier>*</modifier></type><name>ffsc_visited_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_visited_list_hdr_T</name> <modifier>*</modifier></type><name>ffsc_dir_visited_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_visited_list_hdr_T</name> <modifier>*</modifier></type><name>ffsc_visited_lists_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_visited_list_hdr_T</name> <modifier>*</modifier></type><name>ffsc_dir_visited_lists_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffsc_file_to_search</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffsc_start_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffsc_fix_path</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffsc_wc_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ffsc_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>ffsc_stopdirs_v</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>ffsc_find_what</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ffsc_tagfile</name></decl>;</decl_stmt>

}</block></struct></type> <name>ff_search_ctx_T</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ff_check_visited</name><parameter_list>(<parameter><decl><type><name>ff_visited_T</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ff_check_visited</name><parameter_list>(<parameter><decl><type><name>ff_visited_T</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vim_findfile_free_visited</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>search_ctx_arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vim_findfile_free_visited_list</name><parameter_list>(<parameter><decl><type><name>ff_visited_list_hdr_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>list_headp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ff_free_visited_list</name><parameter_list>(<parameter><decl><type><name>ff_visited_T</name> <modifier>*</modifier></type><name>vl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ff_visited_list_hdr_T</name><modifier>*</modifier></type> <name>ff_get_visited_list</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ff_visited_list_hdr_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>list_headp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ff_push</name><parameter_list>(<parameter><decl><type><name>ff_search_ctx_T</name> <modifier>*</modifier></type><name>search_ctx</name></decl></parameter>, <parameter><decl><type><name>ff_stack_T</name> <modifier>*</modifier></type><name>stack_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ff_stack_T</name> <modifier>*</modifier></type><name>ff_pop</name><parameter_list>(<parameter><decl><type><name>ff_search_ctx_T</name> <modifier>*</modifier></type><name>search_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ff_clear</name><parameter_list>(<parameter><decl><type><name>ff_search_ctx_T</name> <modifier>*</modifier></type><name>search_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ff_free_stack_element</name><parameter_list>(<parameter><decl><type><name>ff_stack_T</name> <modifier>*</modifier></type><name>stack_ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>ff_stack_T</name> <modifier>*</modifier></type><name>ff_create_stack_element</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><specifier>static</specifier> <name>ff_stack_T</name> <modifier>*</modifier></type><name>ff_create_stack_element</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ff_path_in_stoplist</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_pathtoolong</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E854: path too long for completion"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>ff_expand_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void *ff_fn_search_context = NULL;

char_u *

vim_findfirst(char_u *path, char_u *filename, int level)

{

ff_fn_search_context =

vim_findfile_init(path, filename, NULL, level, TRUE, FALSE,

ff_fn_search_context, rel_fname);

if (NULL == ff_fn_search_context)

return NULL;

else

return vim_findnext()

}

char_u *

vim_findnext(void)

{

char_u *ret = vim_findfile(ff_fn_search_context);

if (NULL == ret)

{

vim_findfile_cleanup(ff_fn_search_context);

ff_fn_search_context = NULL;

}

return ret;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>vim_findfile_init</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>stopdirs</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>free_visited</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>find_what</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>search_ctx_arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tagfile</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rel_fname</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wc_part</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ff_stack_T</name> <modifier>*</modifier></type><name>sptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_search_ctx_T</name> <modifier>*</modifier></type><name>search_ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>search_ctx_arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>search_ctx</name> <operator>=</operator> <name>search_ctx_arg</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>search_ctx</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>ff_search_ctx_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>search_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>search_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_search_ctx_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_find_what</name></name> <operator>=</operator> <name>find_what</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_tagfile</name></name> <operator>=</operator> <name>tagfile</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_clear</name><argument_list>(<argument><expr><name>search_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>free_visited</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_findfile_free_visited</name><argument_list>(<argument><expr><name>search_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_visited_list</name></name> <operator>=</operator> <call><name>ff_get_visited_list</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_visited_lists_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_visited_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_dir_visited_list</name></name> <operator>=</operator> <call><name>ff_get_visited_list</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_dir_visited_lists_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_dir_visited_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ff_expand_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ff_expand_buffer</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ff_expand_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>tagfile</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_DOTTAG</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>rel_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>gettail</name><argument_list>(<argument><expr><name>rel_fname</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>rel_fname</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isAbsName</name><argument_list>(<argument><expr><name>rel_fname</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>, <argument><expr><name>rel_fname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name> <operator>=</operator> <call><name>FullName_save</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>rel_fname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>path</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>path</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>!</operator><call><name>vim_isAbsName</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>path</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>drive</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>drive</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drive</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drive</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_FullName</name><argument_list>(<argument><expr><name>drive</name></expr></argument>, <argument><expr><name>ff_expand_buffer</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>stopdirs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>walker</name> <init>= <expr><name>stopdirs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dircount</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>walker</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>walker</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>dircount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name></name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>helper</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>helper</name> <operator>=</operator> <name>walker</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>vim_realloc</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>dircount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

<expr_stmt><expr><name>walker</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>walker</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>walker</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name><index>[<expr><name>dircount</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>vim_strnsave</name><argument_list>(<argument><expr><name>helper</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>walker</name> <operator>-</operator> <name>helper</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>walker</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name><index>[<expr><name>dircount</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>vim_strsave</name><argument_list>(<argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>dircount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>walker</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name><index>[<expr><name>dircount</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wc_part</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wc_part</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>llevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errpt</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>wc_part</name> <operator>-</operator> <name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>wc_part</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;=</operator> <name>MAXPATHL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_pathtoolong</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>wc_part</name></expr></argument>, <argument><expr><literal type="string">"**"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ff_expand_buffer</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>wc_part</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_expand_buffer</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>wc_part</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>llevel</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>wc_part</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errpt</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>errpt</name> <operator>!=</operator> <name>wc_part</name> <operator>&amp;&amp;</operator> <name>llevel</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>llevel</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ff_expand_buffer</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>llevel</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>errpt</name> <operator>!=</operator> <name>wc_part</name> <operator>&amp;&amp;</operator> <name>llevel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ff_expand_buffer</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>FF_MAX_STAR_STAR_EXPAND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>wc_part</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>errpt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>wc_part</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>wc_part</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E343: Invalid path: '**[number]' must be at the end of the path or be followed by '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PATHSEPSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_return</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ff_expand_buffer</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>wc_part</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>ff_expand_buffer</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name>MAXPATHL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_pathtoolong</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_return</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>, <argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>eb_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>alloc</name><argument_list>(<argument><expr><name>eb_len</name>

<operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>eb_len</name></expr></argument>, <argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_isdir</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>, <argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>gettail</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wc_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRNCAT</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>, <argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>wc_path</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call>

<operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>wc_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wc_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_return</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wc_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>sptr</name> <operator>=</operator> <call><name>ff_create_stack_element</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_push</name><argument_list>(<argument><expr><name>search_ctx</name></expr></argument>, <argument><expr><name>sptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_file_to_search</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_file_to_search</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>search_ctx</name></expr>;</return>

<label><name>error_return</name>:</label>

<expr_stmt><expr><call><name>vim_findfile_cleanup</name><argument_list>(<argument><expr><name>search_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>vim_findfile_stopdir</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r_ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>r_ptr</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>r_ptr</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>r_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>r_ptr</name></expr></argument>, <argument><expr><name>r_ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r_ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r_ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>r_ptr</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r_ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>r_ptr</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>r_ptr</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>vim_findfile_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_findfile_free_visited</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_clear</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>vim_findfile</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>search_ctx_arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>file_path</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest_of_wildcards</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ff_stack_T</name> <modifier>*</modifier></type><name>stackp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>suf</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ff_search_ctx_T</name> <modifier>*</modifier></type><name>search_ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>search_ctx_arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>search_ctx</name> <operator>=</operator> <operator>(</operator><name>ff_search_ctx_T</name> <operator>*</operator><operator>)</operator><name>search_ctx_arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file_path</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path_end</name> <operator>=</operator> <operator>&amp;</operator><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name><index>[

<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stackp</name> <operator>=</operator> <call><name>ff_pop</name><argument_list>(<argument><expr><name>search_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stackp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name></name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>ff_check_visited</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_dir_visited_list</name>

<operator>-&gt;</operator><name>ffvl_visited_list</name></name></expr></argument>,

<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_fix_path</name></name></expr></argument>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_wc_path</name></name></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FF_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"Already Searched: %s (%s)"</literal></expr></argument>,

<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_fix_path</name></name></expr></argument>, <argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_wc_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ff_free_stack_element</name><argument_list>(<argument><expr><name>stackp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FF_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"Searching: %s (%s)"</literal></expr></argument>,

<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_fix_path</name></name></expr></argument>, <argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_wc_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_level</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_free_stack_element</name><argument_list>(<argument><expr><name>stackp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name><name>dirptrs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dirptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>file_path</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dirptrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isAbsName</name><argument_list>(<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_fix_path</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ff_free_stack_element</name><argument_list>(<argument><expr><name>stackp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_fix_path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal>

<operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_fix_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ff_free_stack_element</name><argument_list>(<argument><expr><name>stackp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rest_of_wildcards</name> <operator>=</operator> <name><name>stackp</name><operator>-&gt;</operator><name>ffs_wc_path</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest_of_wildcards</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>rest_of_wildcards</name></expr></argument>, <argument><expr><literal type="string">"**"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>rest_of_wildcards</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>file_path</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ff_free_stack_element</name><argument_list>(<argument><expr><name>stackp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>rest_of_wildcards</name></expr></argument>, <argument><expr><name>rest_of_wildcards</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rest_of_wildcards</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_star_star_empty</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_star_star_empty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dirptrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>stackp</name><operator>-&gt;</operator><name>ffs_fix_path</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>rest_of_wildcards</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>rest_of_wildcards</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>file_path</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>rest_of_wildcards</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ff_free_stack_element</name><argument_list>(<argument><expr><name>stackp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></else></if_stmt></block_content></block></while>

<expr_stmt><expr><name><name>file_path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>rest_of_wildcards</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rest_of_wildcards</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>path_with_url</name><argument_list>(<argument><expr><name><name>dirptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name></name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>dirptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>expand_wildcards</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>dirptrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>, <argument><expr><name>dirptrs</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name></name></expr></argument>,

<argument><expr><name>EW_DIR</name><operator>|</operator><name>EW_ADDSLASH</name><operator>|</operator><name>EW_SILENT</name><operator>|</operator><name>EW_NOTWILD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_stage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rest_of_wildcards</name> <operator>=</operator> <operator>&amp;</operator><name><name>stackp</name><operator>-&gt;</operator><name>ffs_wc_path</name><index>[

<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_wc_path</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_stage</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest_of_wildcards</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_cur</name></name></expr>;</init>

<condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>path_with_url</name><argument_list>(<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>mch_isdir</name><argument_list>(<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal>

<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_file_to_search</name></name></expr></argument>)</argument_list></call>

<operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_file_to_search</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ff_free_stack_element</name><argument_list>(<argument><expr><name>stackp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_tagfile</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>suf</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>suf</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sua</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>path_with_url</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><call><name>mch_getperm</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_find_what</name></name>

<operator>==</operator> <name>FINDFILE_BOTH</name>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_find_what</name></name>

<operator>==</operator> <name>FINDFILE_DIR</name><operator>)</operator>

<operator>==</operator> <call><name>mch_isdir</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FF_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>ff_check_visited</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_visited_list</name><operator>-&gt;</operator><name>ffvl_visited_list</name></name></expr></argument>,

<argument><expr><name>file_path</name></expr></argument>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FF_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_check_visited</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_visited_list</name><operator>-&gt;</operator><name>ffvl_visited_list</name></name></expr></argument>,

<argument><expr><name>file_path</name></expr></argument>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"Already: %s"</literal></expr></argument>,

<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_cur</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_push</name><argument_list>(<argument><expr><name>search_ctx</name></expr></argument>, <argument><expr><name>stackp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>path_with_url</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>simplify_filename</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>shorten_fname</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>,

<argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FF_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"HIT: %s"</literal></expr></argument>, <argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>file_path</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>suf</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>suf</name></expr></argument>, <argument><expr><name>file_path</name> <operator>+</operator> <name>len</name></expr></argument>,

<argument><expr><name>MAXPATHL</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_cur</name></name></expr>;</init>

<condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mch_isdir</name><argument_list>(<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>ff_push</name><argument_list>(<argument><expr><name>search_ctx</name></expr></argument>,

<argument><expr><call><name>ff_create_stack_element</name><argument_list>(

<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>rest_of_wildcards</name></expr></argument>,

<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_level</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_stage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_wc_path</name></name></expr></argument>, <argument><expr><literal type="string">"**"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_cur</name></name></expr>;</init>

<condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_fix_path</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mch_isdir</name><argument_list>(<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>ff_push</name><argument_list>(<argument><expr><name>search_ctx</name></expr></argument>,

<argument><expr><call><name>ff_create_stack_element</name><argument_list>(<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_filearray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_wc_path</name></name></expr></argument>, <argument><expr><name><name>stackp</name><operator>-&gt;</operator><name>ffs_level</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ff_free_stack_element</name><argument_list>(<argument><expr><name>stackp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name>

<operator>&amp;&amp;</operator> <name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ff_stack_T</name> <modifier>*</modifier></type><name>sptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_path_in_stoplist</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>path_end</name> <operator>-</operator> <name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>path_end</name> <operator>&gt;</operator> <name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name>

<operator>&amp;&amp;</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>path_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path_end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>path_end</name> <operator>&gt;</operator> <name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>path_end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path_end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>path_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>path_end</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal>

<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></else></if_stmt>

<expr_stmt><expr><name>sptr</name> <operator>=</operator> <call><name>ff_create_stack_element</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>,

<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name></expr></argument>, <argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_level</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_push</name><argument_list>(<argument><expr><name>search_ctx</name></expr></argument>, <argument><expr><name>sptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vim_findfile_free_visited</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>search_ctx_arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ff_search_ctx_T</name> <modifier>*</modifier></type><name>search_ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>search_ctx_arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>search_ctx</name> <operator>=</operator> <operator>(</operator><name>ff_search_ctx_T</name> <operator>*</operator><operator>)</operator><name>search_ctx_arg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_findfile_free_visited_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_visited_lists_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_findfile_free_visited_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_dir_visited_lists_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vim_findfile_free_visited_list</name><parameter_list>(<parameter><decl><type><name>ff_visited_list_hdr_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>list_headp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ff_visited_list_hdr_T</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>list_headp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>vp</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>list_headp</name><operator>)</operator><operator>-&gt;</operator><name>ffvl_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_free_visited_list</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>list_headp</name><operator>)</operator><operator>-&gt;</operator><name>ffvl_visited_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>list_headp</name><operator>)</operator><operator>-&gt;</operator><name>ffvl_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>list_headp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>list_headp</name> <operator>=</operator> <name>vp</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>list_headp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ff_free_visited_list</name><parameter_list>(<parameter><decl><type><name>ff_visited_T</name> <modifier>*</modifier></type><name>vl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ff_visited_T</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>vl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>vp</name> <operator>=</operator> <name><name>vl</name><operator>-&gt;</operator><name>ffv_next</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>vl</name><operator>-&gt;</operator><name>ffv_wc_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vl</name> <operator>=</operator> <name>vp</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>vl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ff_visited_list_hdr_T</name><modifier>*</modifier></type>

<name>ff_get_visited_list</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>ff_visited_list_hdr_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>list_headp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ff_visited_list_hdr_T</name> <modifier>*</modifier></type><name>retptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>list_headp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retptr</name> <operator>=</operator> <operator>*</operator><name>list_headp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>retptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>retptr</name><operator>-&gt;</operator><name>ffvl_filename</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FF_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"ff_get_visited_list: FOUND list for %s"</literal></expr></argument>,

<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>retptr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retptr</name> <operator>=</operator> <name><name>retptr</name><operator>-&gt;</operator><name>ffvl_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FF_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"ff_get_visited_list: new list for %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>retptr</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>ff_visited_list_hdr_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>retptr</name><operator>-&gt;</operator><name>ffvl_visited_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retptr</name><operator>-&gt;</operator><name>ffvl_filename</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>retptr</name><operator>-&gt;</operator><name>ffvl_filename</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>retptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>retptr</name><operator>-&gt;</operator><name>ffvl_next</name></name> <operator>=</operator> <operator>*</operator><name>list_headp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>list_headp</name> <operator>=</operator> <name>retptr</name></expr>;</expr_stmt>

<return>return <expr><name>retptr</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>ff_wc_equal</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev1</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev2</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>s2</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name>p_fic</name></expr> ?</condition><then> <expr><call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr></else></ternary><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>prev1</name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>||</operator> <name>prev2</name> <operator>!=</operator> <literal type="char">'*'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev2</name> <operator>=</operator> <name>prev1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev1</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>s2</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ff_check_visited</name><parameter_list>(

<parameter><decl><type><name>ff_visited_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>visited_list</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wc_path</name></decl></parameter>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ff_visited_T</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>url</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>path_with_url</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>url</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>ff_expand_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>vim_FullName</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>ff_expand_buffer</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>vp</name> <operator>=</operator> <operator>*</operator><name>visited_list</name></expr>;</init> <condition><expr><name>vp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>vp</name> <operator>=</operator> <name><name>vp</name><operator>-&gt;</operator><name>ffv_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<expr><ternary><condition><expr><operator>!</operator><name>url</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>vp</name><operator>-&gt;</operator><name>ffv_dev_valid</name></name> <operator>&amp;&amp;</operator> <name><name>vp</name><operator>-&gt;</operator><name>ffv_dev</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>st_dev</name></name>

<operator>&amp;&amp;</operator> <name><name>vp</name><operator>-&gt;</operator><name>ffv_ino</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>st_ino</name></name><operator>)</operator></expr>

</then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>ffv_fname</name></name></expr></argument>, <argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></else></ternary></expr>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_wc_equal</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>ffv_wc_path</name></name></expr></argument>, <argument><expr><name>wc_path</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_visited_T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>ffv_dev_valid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>ffv_ino</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>ffv_dev</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>ffv_fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>ffv_dev_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>ffv_fname</name></name></expr></argument>, <argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>wc_path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>ffv_wc_path</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>wc_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>ffv_wc_path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>ffv_next</name></name> <operator>=</operator> <operator>*</operator><name>visited_list</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>visited_list</name> <operator>=</operator> <name>vp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ff_stack_T</name> <modifier>*</modifier></type>

<name>ff_create_stack_element</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fix_part</name></decl></parameter>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wc_part</name></decl></parameter>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>star_star_empty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ff_stack_T</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>ff_stack_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ffs_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ffs_filearray</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ffs_filearray_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ffs_filearray_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ffs_stage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ffs_level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ffs_star_star_empty</name></name> <operator>=</operator> <name>star_star_empty</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fix_part</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fix_part</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ffs_fix_path</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>fix_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>wc_part</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wc_part</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ffs_wc_path</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>wc_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>ffs_fix_path</name></name> <operator>==</operator> <name>NULL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>new</name><operator>-&gt;</operator><name>ffs_wc_path</name></name> <operator>==</operator> <name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_free_stack_element</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>new</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ff_push</name><parameter_list>(<parameter><decl><type><name>ff_search_ctx_T</name> <modifier>*</modifier></type><name>search_ctx</name></decl></parameter>, <parameter><decl><type><name>ff_stack_T</name> <modifier>*</modifier></type><name>stack_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stack_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>stack_ptr</name><operator>-&gt;</operator><name>ffs_prev</name></name> <operator>=</operator> <name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stack_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stack_ptr</name></name> <operator>=</operator> <name>stack_ptr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ff_stack_T</name> <modifier>*</modifier></type>

<name>ff_pop</name><parameter_list>(<parameter><decl><type><name>ff_search_ctx_T</name> <modifier>*</modifier></type><name>search_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ff_stack_T</name> <modifier>*</modifier></type><name>sptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sptr</name> <operator>=</operator> <name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stack_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stack_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stack_ptr</name></name> <operator>=</operator> <name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stack_ptr</name><operator>-&gt;</operator><name>ffs_prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>sptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ff_free_stack_element</name><parameter_list>(<parameter><decl><type><name>ff_stack_T</name> <modifier>*</modifier></type><name>stack_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>stack_ptr</name><operator>-&gt;</operator><name>ffs_fix_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>stack_ptr</name><operator>-&gt;</operator><name>ffs_wc_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>stack_ptr</name><operator>-&gt;</operator><name>ffs_filearray</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name><name>stack_ptr</name><operator>-&gt;</operator><name>ffs_filearray_size</name></name></expr></argument>, <argument><expr><name><name>stack_ptr</name><operator>-&gt;</operator><name>ffs_filearray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>stack_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ff_clear</name><parameter_list>(<parameter><decl><type><name>ff_search_ctx_T</name> <modifier>*</modifier></type><name>search_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ff_stack_T</name> <modifier>*</modifier></type><name>sptr</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>sptr</name> <operator>=</operator> <call><name>ff_pop</name><argument_list>(<argument><expr><name>search_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_free_stack_element</name><argument_list>(<argument><expr><name>sptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_file_to_search</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_stopdirs_v</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_file_to_search</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_start_dir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_fix_path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_wc_path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_ctx</name><operator>-&gt;</operator><name>ffsc_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>ff_path_in_stoplist</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>path_len</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>stopdirs_v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>path_len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><name>path_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>path_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>stopdirs_v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>stopdirs_v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>path_len</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fnamencmp</name><argument_list>(<argument><expr><name><name>stopdirs_v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>stopdirs_v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>path_len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name><name>stopdirs_v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>find_file_in_path</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rel_fname</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<return>return <expr><call><name>find_file_in_path_option</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>first</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_path</name></name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><name>p_path</name></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_path</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name>FINDFILE_BOTH</name></expr></argument>, <argument><expr><name>rel_fname</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sua</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>ff_file_to_find</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fdip_search_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>free_findfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_findfile_cleanup</name><argument_list>(<argument><expr><name>fdip_search_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ff_expand_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>find_directory_in_path</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rel_fname</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<return>return <expr><call><name>find_file_in_path_option</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>p_cdpath</name></expr></argument>,

<argument><expr><name>FINDFILE_DIR</name></expr></argument>, <argument><expr><name>rel_fname</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>find_file_in_path_option</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_option</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>find_what</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rel_fname</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>suffixes</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_findfile_init</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>save_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>file_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rel_to_curdir</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>Process</name></name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>(</operator>struct <name>Process</name> <operator>*</operator><operator>)</operator><call><name>FindTask</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>APTR</name></type> <name>save_winptr</name> <init>= <expr><name><name>proc</name><operator>-&gt;</operator><name>pr_WindowPtr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>pr_WindowPtr</name></name> <operator>=</operator> <operator>(</operator><name>APTR</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>save_char</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expand_env_esc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>save_char</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ff_file_to_find</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ff_file_to_find</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>file_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>FNAME_UNESC</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>ff_file_to_find</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>ptr</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rel_to_curdir</name> <operator>=</operator> <operator>(</operator><name><name>ff_file_to_find</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ff_file_to_find</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>ff_file_to_find</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name><name>ff_file_to_find</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ff_file_to_find</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>ff_file_to_find</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_isAbsName</name><argument_list>(<argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name>rel_to_curdir</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>ff_file_to_find</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name><name>ff_file_to_find</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>ff_file_to_find</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>ff_file_to_find</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>path_with_url</name><argument_list>(<argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>file_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>run</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>run</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>rel_to_curdir</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>FNAME_REL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>rel_fname</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>rel_fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>l</name> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>rel_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><call><name>gettail</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>suffixes</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_getperm</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>find_what</name> <operator>==</operator> <name>FINDFILE_BOTH</name>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>find_what</name> <operator>==</operator> <name>FINDFILE_DIR</name><operator>)</operator>

<operator>==</operator> <call><name>mch_isdir</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>file_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NameBuff</name> <operator>+</operator> <name>l</name></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <name>l</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_findfile_free_visited</name><argument_list>(<argument><expr><name>fdip_search_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>path_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_findfile_init</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_findfile_init</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>file_name</name> <operator>=</operator> <call><name>vim_findfile</name><argument_list>(<argument><expr><name>fdip_search_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_findfile_init</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r_ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>dir</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_findfile_cleanup</name><argument_list>(<argument><expr><name>fdip_search_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fdip_search_ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">" ,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r_ptr</name> <operator>=</operator> <call><name>vim_findfile_stopdir</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>r_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fdip_search_ctx</name> <operator>=</operator> <call><name>vim_findfile_init</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ff_file_to_find</name></expr></argument>,

<argument><expr><name>r_ptr</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>find_what</name></expr></argument>,

<argument><expr><name>fdip_search_ctx</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>rel_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fdip_search_ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_findfile_init</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>file_name</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>FNAME_MESS</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>find_what</name> <operator>==</operator> <name>FINDFILE_DIR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E344: Can't find directory \"%s\" in cdpath"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E345: Can't find file \"%s\" in path"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>find_what</name> <operator>==</operator> <name>FINDFILE_DIR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E346: No more directory \"%s\" found in cdpath"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E347: No more file \"%s\" found in path"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ff_file_to_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>pr_WindowPtr</name></name> <operator>=</operator> <name>save_winptr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>file_name</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>grab_file_name</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>file_lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>options</name> <init>= <expr><name>FNAME_MESS</name><operator>|</operator><name>FNAME_EXP</name><operator>|</operator><name>FNAME_REL</name><operator>|</operator><name>FNAME_UNESC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_visual_text</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>find_file_name_in_path</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,

<argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>file_name_at_cursor</name><argument_list>(<argument><expr><name>options</name> <operator>|</operator> <name>FNAME_HYP</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>file_lnum</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>file_name_at_cursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>file_lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>file_name_in_line</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>,

<argument><expr><name>file_lnum</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>file_name_in_line</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rel_fname</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>file_lnum</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_type</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_url</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isfilec</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>FNAME_MESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E446: No file name under cursor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <name>line</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>vim_isfilec</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>FNAME_HYP</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>path_is_url</name><argument_list>(<argument><expr><name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>vim_isfilec</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>FNAME_HYP</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>path_is_url</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>is_url</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":?&amp;="</literal></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_type</name> <operator>&amp;&amp;</operator> <call><name>path_is_url</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_url</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>in_type</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".,:;!"</literal></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>file_lnum</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line_english</name> <init>= <expr><literal type="string">" line "</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line_transl</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><name>line_msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>line_english</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>line_english</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>line_english</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>line_transl</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>line_transl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>line_transl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>file_lnum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>find_file_name_in_path</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>rel_fname</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>eval_includeexpr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>eval_to_string_safe</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"includeexpr"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FNAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>find_file_name_in_path</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rel_fname</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>file_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>FNAME_INCL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inex</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <call><name>eval_includeexpr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tofree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>tofree</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>FNAME_EXP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>file_name</name> <operator>=</operator> <call><name>find_file_in_path</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>options</name> <operator>&amp;</operator> <operator>~</operator><name>FNAME_MESS</name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>rel_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>file_name</name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>FNAME_INCL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inex</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <call><name>eval_includeexpr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tofree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>tofree</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file_name</name> <operator>=</operator> <call><name>find_file_in_path</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>options</name> <operator>&amp;</operator> <operator>~</operator><name>FNAME_MESS</name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>rel_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>file_name</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>FNAME_MESS</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E447: Can't find file \"%s\" in path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>file_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file_name</name> <operator>=</operator> <call><name>find_file_in_path</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>rel_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>file_name</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>file_name</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>gettail_dir</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dir_end</name> <init>= <expr><name>fname</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next_dir_end</name> <init>= <expr><name>fname</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>look_for_sep</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>fname</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>look_for_sep</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>next_dir_end</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>look_for_sep</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>look_for_sep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dir_end</name> <operator>=</operator> <name>next_dir_end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>look_for_sep</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>dir_end</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vim_ispathlistsep</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">';'</literal><operator>)</operator></expr>;</return> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>find_previous_pathsep</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>psep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psep</name> <operator>&gt;</operator> <name>path</name> <operator>&amp;&amp;</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>psep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><operator>*</operator><name>psep</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>psep</name> <operator>&gt;</operator> <name>path</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>psep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>*</operator><name>psep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>is_unique</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>maybe_unique</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>candidate_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>other_path_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>other_paths</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rival</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>candidate_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>maybe_unique</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>other_path_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>other_paths</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>other_path_len</name> <operator>&lt;</operator> <name>candidate_len</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>rival</name> <operator>=</operator> <name><name>other_paths</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>other_path_len</name> <operator>-</operator> <name>candidate_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>maybe_unique</name></expr></argument>, <argument><expr><name>rival</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>rival</name> <operator>==</operator> <name><name>other_paths</name><index>[<expr><name>j</name></expr>]</index></name> <operator>||</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>rival</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<return>return <expr><name>TRUE</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>expand_path_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>curdir</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_option</name> <init>= <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_path</name></name> <operator>==</operator> <name>NUL</name></expr>

?</condition><then> <expr><name>p_path</name></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_path</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>path_option</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_option</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">" ,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAXPATHL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>simplify_filename</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>path_with_url</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>mch_isFullName</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>MAXPATHL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>simplify_filename</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>get_path_cutoff</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>path_part</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cutoff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name><name>fname</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>path_part</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <operator>(</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>fname</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>path_part</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>path_part</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <operator>&amp;</operator><name><name>fname</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cutoff</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>cutoff</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>cutoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<return>return <expr><name>cutoff</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>uniquefy_paths</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fnames</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sort_again</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>file_pattern</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>curdir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>path_ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>in_curdir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>short_name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>remove_duplicates</name><argument_list>(<argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file_pattern</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>file_pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file_pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>file_pattern</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>file_pat_to_reg_pat</name><argument_list>(<argument><expr><name>file_pattern</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>file_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>RE_MAGIC</name> <operator>+</operator> <name>RE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curdir</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expand_path_option</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_curdir</name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_curdir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_in_curdir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dir_end</name> <init>= <expr><call><name>gettail_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pathsep_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_cutoff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_in_curdir</name> <operator>=</operator> <call><name>fnamencmp</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>dir_end</name> <operator>-</operator> <name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>curdir</name><index>[<expr><name>dir_end</name> <operator>-</operator> <name>path</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_in_curdir</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_curdir</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path_cutoff</name> <operator>=</operator> <call><name>get_path_cutoff</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal>

<operator>&amp;&amp;</operator> <call><name>vim_ispathsep_nocolon</name><argument_list>(<argument><expr><name><name>pattern</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>path_cutoff</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>path_cutoff</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>is_unique</name><argument_list>(<argument><expr><name>path_cutoff</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sort_again</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_cutoff</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>path_cutoff</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>pathsep_p</name> <operator>=</operator> <name>path</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>find_previous_pathsep</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pathsep_p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>pathsep_p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>is_unique</name><argument_list>(<argument><expr><name>pathsep_p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>gap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>path_cutoff</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pathsep_p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>path_cutoff</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sort_again</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pathsep_p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>pathsep_p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_isFullName</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>short_name</name> <operator>=</operator> <call><name>shorten_fname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>short_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>short_name</name> <operator>&gt;</operator> <name>path</name> <operator>+</operator> <literal type="number">1</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>short_name</name></expr></argument>)</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>short_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rel_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>in_curdir</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>short_name</name> <operator>=</operator> <call><name>shorten_fname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>short_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>short_name</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_unique</name><argument_list>(<argument><expr><name>short_name</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>short_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rel_path</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>short_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>PATHSEPSTR</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rel_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>rel_path</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>rel_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name>short_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>rel_path</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sort_again</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_curdir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>in_curdir</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>in_curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sort_again</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_duplicates</name><argument_list>(<argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>expand_in_path</name><parameter_list>(

<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>curdir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>path_ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>paths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>glob_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curdir</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expand_path_option</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path_ga</name><operator>.</operator><name>ga_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>ga_concat_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_ga</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>paths</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EW_ICASE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>glob_flags</name> <operator>|=</operator> <name>WILD_ICASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EW_ADDSLASH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>glob_flags</name> <operator>|=</operator> <name>WILD_ADD_SLASH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>globpath</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>, <argument><expr><name>glob_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>simplify_filename</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>components</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tail</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stripping_disabled</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>relative</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>relative</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block>

while <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> 

<do>do

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <name>filename</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>components</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getnextcomp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <name>filename</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>components</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getnextcomp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>relative</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if> 

<else>else

<block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>tail</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>tail</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>components</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>do_strip</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>saved_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stripping_disabled</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>saved_char</name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>mch_lstat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>do_strip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>saved_char</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>start</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>after_pathsep</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_strip</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>saved_char</name> <operator>=</operator> <operator>*</operator><name>tail</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_strip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>stripping_disabled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name>saved_char</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>do_strip</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stat_T</name></type> <name>new_st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>relative</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mch_stat</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>saved_char</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>saved_char</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new_st</name><operator>.</operator><name>st_ino</name></name> <operator>!=</operator> <name><name>st</name><operator>.</operator><name>st_ino</name></name> <operator>||</operator>

<name><name>new_st</name><operator>.</operator><name>st_dev</name></name> <operator>!=</operator> <name><name>st</name><operator>.</operator><name>st_dev</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>do_strip</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_strip</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>

<expr_stmt><expr><name>components</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>relative</name> <operator>&amp;&amp;</operator> <name><name>tail</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>start</name> <operator>&amp;&amp;</operator> <name><name>tail</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>components</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>p</name> <operator>==</operator> <name>start</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>relative</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>start</name> <operator>+</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tail</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>components</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getnextcomp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>;</do>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>f_simplify</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>simplify_filename</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
