<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\optiondefs.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BOTH</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_WIN</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BUF</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_MASK</name></cpp:macro> <cpp:value>0x0fff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_WIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(idopt_T)(PV_WIN + (int)(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BUF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(idopt_T)(PV_BUF + (int)(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOTH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(idopt_T)(PV_BOTH + (int)(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_AI</name></cpp:macro> <cpp:value>OPT_BUF(BV_AI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_AR</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_AR))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BKC</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_BKC))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BH</name></cpp:macro> <cpp:value>OPT_BUF(BV_BH)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BT</name></cpp:macro> <cpp:value>OPT_BUF(BV_BT)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_EFM</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_EFM))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_GP</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_GP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_MP</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_MP))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BIN</name></cpp:macro> <cpp:value>OPT_BUF(BV_BIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BL</name></cpp:macro> <cpp:value>OPT_BUF(BV_BL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BOMB</name></cpp:macro> <cpp:value>OPT_BUF(BV_BOMB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CI</name></cpp:macro> <cpp:value>OPT_BUF(BV_CI)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CIN</name></cpp:macro> <cpp:value>OPT_BUF(BV_CIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CINK</name></cpp:macro> <cpp:value>OPT_BUF(BV_CINK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CINO</name></cpp:macro> <cpp:value>OPT_BUF(BV_CINO)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CINW</name></cpp:macro> <cpp:value>OPT_BUF(BV_CINW)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CM</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_CM))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CMS</name></cpp:macro> <cpp:value>OPT_BUF(BV_CMS)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_COM</name></cpp:macro> <cpp:value>OPT_BUF(BV_COM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CPT</name></cpp:macro> <cpp:value>OPT_BUF(BV_CPT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_DICT</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_DICT))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_TSR</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_TSR))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CSL</name></cpp:macro> <cpp:value>OPT_BUF(BV_CSL)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CFU</name></cpp:macro> <cpp:value>OPT_BUF(BV_CFU)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_DEF</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_DEF))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_INC</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_INC))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_EOL</name></cpp:macro> <cpp:value>OPT_BUF(BV_EOL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FIXEOL</name></cpp:macro> <cpp:value>OPT_BUF(BV_FIXEOL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_EP</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_EP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_ET</name></cpp:macro> <cpp:value>OPT_BUF(BV_ET)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FENC</name></cpp:macro> <cpp:value>OPT_BUF(BV_FENC)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BEXPR</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_BEXPR))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FP</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_FP))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FEX</name></cpp:macro> <cpp:value>OPT_BUF(BV_FEX)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FF</name></cpp:macro> <cpp:value>OPT_BUF(BV_FF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FLP</name></cpp:macro> <cpp:value>OPT_BUF(BV_FLP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FO</name></cpp:macro> <cpp:value>OPT_BUF(BV_FO)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FT</name></cpp:macro> <cpp:value>OPT_BUF(BV_FT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_IMI</name></cpp:macro> <cpp:value>OPT_BUF(BV_IMI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_IMS</name></cpp:macro> <cpp:value>OPT_BUF(BV_IMS)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_INDE</name></cpp:macro> <cpp:value>OPT_BUF(BV_INDE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_INDK</name></cpp:macro> <cpp:value>OPT_BUF(BV_INDK)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_INEX</name></cpp:macro> <cpp:value>OPT_BUF(BV_INEX)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_INF</name></cpp:macro> <cpp:value>OPT_BUF(BV_INF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_ISK</name></cpp:macro> <cpp:value>OPT_BUF(BV_ISK)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_KEY</name></cpp:macro> <cpp:value>OPT_BUF(BV_KEY)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_KMAP</name></cpp:macro> <cpp:value>OPT_BUF(BV_KMAP)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_KP</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_KP))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_LISP</name></cpp:macro> <cpp:value>OPT_BUF(BV_LISP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_LW</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_LW))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_MENC</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_MENC))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_MA</name></cpp:macro> <cpp:value>OPT_BUF(BV_MA)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_ML</name></cpp:macro> <cpp:value>OPT_BUF(BV_ML)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_MOD</name></cpp:macro> <cpp:value>OPT_BUF(BV_MOD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_MPS</name></cpp:macro> <cpp:value>OPT_BUF(BV_MPS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_NF</name></cpp:macro> <cpp:value>OPT_BUF(BV_NF)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_OFU</name></cpp:macro> <cpp:value>OPT_BUF(BV_OFU)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_PATH</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_PATH))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_PI</name></cpp:macro> <cpp:value>OPT_BUF(BV_PI)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEXTOBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_QE</name></cpp:macro> <cpp:value>OPT_BUF(BV_QE)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_RO</name></cpp:macro> <cpp:value>OPT_BUF(BV_RO)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SI</name></cpp:macro> <cpp:value>OPT_BUF(BV_SI)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SN</name></cpp:macro> <cpp:value>OPT_BUF(BV_SN)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SMC</name></cpp:macro> <cpp:value>OPT_BUF(BV_SMC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SYN</name></cpp:macro> <cpp:value>OPT_BUF(BV_SYN)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SPC</name></cpp:macro> <cpp:value>OPT_BUF(BV_SPC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SPF</name></cpp:macro> <cpp:value>OPT_BUF(BV_SPF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SPL</name></cpp:macro> <cpp:value>OPT_BUF(BV_SPL)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_STS</name></cpp:macro> <cpp:value>OPT_BUF(BV_STS)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SUA</name></cpp:macro> <cpp:value>OPT_BUF(BV_SUA)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SW</name></cpp:macro> <cpp:value>OPT_BUF(BV_SW)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SWF</name></cpp:macro> <cpp:value>OPT_BUF(BV_SWF)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_TFU</name></cpp:macro> <cpp:value>OPT_BUF(BV_TFU)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_TAGS</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_TAGS))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_TC</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_TC))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_TS</name></cpp:macro> <cpp:value>OPT_BUF(BV_TS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_TW</name></cpp:macro> <cpp:value>OPT_BUF(BV_TW)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_TX</name></cpp:macro> <cpp:value>OPT_BUF(BV_TX)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERSISTENT_UNDO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_UDF</name></cpp:macro> <cpp:value>OPT_BUF(BV_UDF)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_WM</name></cpp:macro> <cpp:value>OPT_BUF(BV_WM)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_VSTS</name></cpp:macro> <cpp:value>OPT_BUF(BV_VSTS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_VTS</name></cpp:macro> <cpp:value>OPT_BUF(BV_VTS)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_LIST</name></cpp:macro> <cpp:value>OPT_WIN(WV_LIST)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_ARAB</name></cpp:macro> <cpp:value>OPT_WIN(WV_ARAB)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BRI</name></cpp:macro> <cpp:value>OPT_WIN(WV_BRI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BRIOPT</name></cpp:macro> <cpp:value>OPT_WIN(WV_BRIOPT)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_WCR</name></cpp:macro> <cpp:value>OPT_WIN(WV_WCR)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_DIFF</name></cpp:macro> <cpp:value>OPT_WIN(WV_DIFF)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FDC</name></cpp:macro> <cpp:value>OPT_WIN(WV_FDC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FEN</name></cpp:macro> <cpp:value>OPT_WIN(WV_FEN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FDI</name></cpp:macro> <cpp:value>OPT_WIN(WV_FDI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FDL</name></cpp:macro> <cpp:value>OPT_WIN(WV_FDL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FDM</name></cpp:macro> <cpp:value>OPT_WIN(WV_FDM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FML</name></cpp:macro> <cpp:value>OPT_WIN(WV_FML)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FDN</name></cpp:macro> <cpp:value>OPT_WIN(WV_FDN)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FDE</name></cpp:macro> <cpp:value>OPT_WIN(WV_FDE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FDT</name></cpp:macro> <cpp:value>OPT_WIN(WV_FDT)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_FMR</name></cpp:macro> <cpp:value>OPT_WIN(WV_FMR)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_LBR</name></cpp:macro> <cpp:value>OPT_WIN(WV_LBR)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_NU</name></cpp:macro> <cpp:value>OPT_WIN(WV_NU)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_RNU</name></cpp:macro> <cpp:value>OPT_WIN(WV_RNU)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_NUW</name></cpp:macro> <cpp:value>OPT_WIN(WV_NUW)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_PVW</name></cpp:macro> <cpp:value>OPT_WIN(WV_PVW)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_RL</name></cpp:macro> <cpp:value>OPT_WIN(WV_RL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_RLC</name></cpp:macro> <cpp:value>OPT_WIN(WV_RLC)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SCBIND</name></cpp:macro> <cpp:value>OPT_WIN(WV_SCBIND)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SCROLL</name></cpp:macro> <cpp:value>OPT_WIN(WV_SCROLL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SISO</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_WIN(WV_SISO))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SO</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_WIN(WV_SO))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SPELL</name></cpp:macro> <cpp:value>OPT_WIN(WV_SPELL)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CUC</name></cpp:macro> <cpp:value>OPT_WIN(WV_CUC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CUL</name></cpp:macro> <cpp:value>OPT_WIN(WV_CUL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CULOPT</name></cpp:macro> <cpp:value>OPT_WIN(WV_CULOPT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CC</name></cpp:macro> <cpp:value>OPT_WIN(WV_CC)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SBR</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_WIN(WV_SBR))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_STL</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_WIN(WV_STL))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_UL</name></cpp:macro> <cpp:value>OPT_BOTH(OPT_BUF(BV_UL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_WFH</name></cpp:macro> <cpp:value>OPT_WIN(WV_WFH)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_WFW</name></cpp:macro> <cpp:value>OPT_WIN(WV_WFW)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_WRAP</name></cpp:macro> <cpp:value>OPT_WIN(WV_WRAP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_CRBIND</name></cpp:macro> <cpp:value>OPT_WIN(WV_CRBIND)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_COCU</name></cpp:macro> <cpp:value>OPT_WIN(WV_COCU)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_COLE</name></cpp:macro> <cpp:value>OPT_WIN(WV_COLE)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_TWK</name></cpp:macro> <cpp:value>OPT_WIN(WV_TWK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_TWS</name></cpp:macro> <cpp:value>OPT_WIN(WV_TWS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_TWSL</name></cpp:macro> <cpp:value>OPT_BUF(BV_TWSL)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_SCL</name></cpp:macro> <cpp:value>OPT_WIN(WV_SCL)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>PV_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PV_MAXVAL</name> <init>= <expr><literal type="number">0xffff</literal></expr></init></decl> 

}</block></enum></type> <name>idopt_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_WIN</name></cpp:macro> <cpp:value>((char_u *)-1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_et_nobin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_ml_nobin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_tw_nobin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_wm_nobin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_ai_nopaste</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_et_nopaste</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_sts_nopaste</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_tw_nopaste</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_wm_nopaste</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_vsts_nopaste</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>vimoption</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shortname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long_u</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>idopt_T</name></type> <name>indir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name><name>def_val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>sctx_T</name></type> <name>script_ctx</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCTX_INIT</name></cpp:macro> <cpp:value>, {0, 0, 0, 1}</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCTX_INIT</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VI_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIM_DEFAULT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISK_LATIN1</name></cpp:macro> <cpp:value>(char_u *)"@,48-57,_,192-255"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISP_LATIN1</name></cpp:macro> <cpp:value>(char_u *)"@,~-255"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISP_LATIN1</name></cpp:macro> <cpp:value>(char_u *)"@,161-255"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIGHLIGHT_INIT</name></cpp:macro> <cpp:value>"8:SpecialKey,~:EndOfBuffer,@:NonText,d:Directory,e:ErrorMsg,i:IncSearch,l:Search,m:MoreMsg,M:ModeMsg,n:LineNr,a:LineNrAbove,b:LineNrBelow,N:CursorLineNr,r:Question,s:StatusLine,S:StatusLineNC,c:VertSplit,t:Title,v:Visual,V:VisualNOS,w:WarningMsg,W:WildMenu,f:Folded,F:FoldColumn,A:DiffAdd,C:DiffChange,D:DiffDelete,T:DiffText,&gt;:SignColumn,-:Conceal,B:SpellBad,P:SpellCap,R:SpellRare,L:SpellLocal,+:Pmenu,=:PmenuSel,x:PmenuSbar,X:PmenuThumb,*:TabLine,#:TabLineSel,_:TabLineFill,!:CursorColumn,.:CursorLine,o:ColorColumn,q:QuickFixLine,z:StatusLineTerm,Z:StatusLineTermNC"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PYTHON_VER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PYTHON_VER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PYTHON_VER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PYTHON_VER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENTKEYS_DEFAULT</name></cpp:macro> <cpp:value>(char_u *)"0{,0},0),0],:,0#,!^F,o,O,e"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vimoption</name></name></type> <name><name>options</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"aleph"</literal></expr>, <expr><literal type="string">"al"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_CURSWANT</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_aleph</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">128L</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">224L</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"antialias"</literal></expr>, <expr><literal type="string">"anti"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RCLR</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_antialias</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"arabic"</literal></expr>, <expr><literal type="string">"arab"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_CURSWANT</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_ARAB</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"arabicshape"</literal></expr>, <expr><literal type="string">"arshape"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RCLR</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_arshape</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"allowrevins"</literal></expr>, <expr><literal type="string">"ari"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ari</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"altkeymap"</literal></expr>, <expr><literal type="string">"akm"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ambiwidth"</literal></expr>, <expr><literal type="string">"ambw"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ambw</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"single"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"autochdir"</literal></expr>, <expr><literal type="string">"acd"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_AUTOCHDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_acd</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"autoindent"</literal></expr>, <expr><literal type="string">"ai"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ai</name></expr>, <expr><name>PV_AI</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"autoprint"</literal></expr>, <expr><literal type="string">"ap"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"autoread"</literal></expr>, <expr><literal type="string">"ar"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ar</name></expr>, <expr><name>PV_AR</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"autowrite"</literal></expr>, <expr><literal type="string">"aw"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_aw</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"autowriteall"</literal></expr>,<expr><literal type="string">"awa"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_awa</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"background"</literal></expr>, <expr><literal type="string">"bg"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bg</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dark"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"light"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"backspace"</literal></expr>, <expr><literal type="string">"bs"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bs</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"backup"</literal></expr>, <expr><literal type="string">"bk"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bk</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"backupcopy"</literal></expr>, <expr><literal type="string">"bkc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bkc</name></expr>, <expr><name>PV_BKC</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"yes"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"auto"</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"auto"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"auto"</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"backupdir"</literal></expr>, <expr><literal type="string">"bdir"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name>

<operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bdir</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_BDIR</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"backupext"</literal></expr>, <expr><literal type="string">"bex"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NFNAME</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bex</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"_"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"~"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"backupskip"</literal></expr>, <expr><literal type="string">"bsk"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bsk</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"balloondelay"</literal></expr>,<expr><literal type="string">"bdlay"</literal></expr>,<expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bdlay</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">600L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ballooneval"</literal></expr>, <expr><literal type="string">"beval"</literal></expr>,<expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NO_MKRC</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_beval</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"balloonevalterm"</literal></expr>, <expr><literal type="string">"bevalterm"</literal></expr>,<expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NO_MKRC</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bevalterm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"balloonexpr"</literal></expr>, <expr><literal type="string">"bexpr"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bexpr</name></expr>, <expr><name>PV_BEXPR</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"beautify"</literal></expr>, <expr><literal type="string">"bf"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"belloff"</literal></expr>, <expr><literal type="string">"bo"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_COMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bo</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"binary"</literal></expr>, <expr><literal type="string">"bin"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bin</name></expr>, <expr><name>PV_BIN</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bioskey"</literal></expr>, <expr><literal type="string">"biosk"</literal></expr>,<expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bomb"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_NO_MKRC</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bomb</name></expr>, <expr><name>PV_BOMB</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"breakat"</literal></expr>, <expr><literal type="string">"brk"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name><operator>|</operator><name>P_FLAGLIST</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_breakat</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" \t!@*-+;:,./?"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"breakindent"</literal></expr>, <expr><literal type="string">"bri"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_BRI</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"breakindentopt"</literal></expr>, <expr><literal type="string">"briopt"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RBUF</name>

<operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_BRIOPT</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"browsedir"</literal></expr>, <expr><literal type="string">"bsdir"</literal></expr>,<expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bsdir</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"last"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bufhidden"</literal></expr>, <expr><literal type="string">"bh"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NOGLOB</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bh</name></expr>, <expr><name>PV_BH</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"buflisted"</literal></expr>, <expr><literal type="string">"bl"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NOGLOB</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bl</name></expr>, <expr><name>PV_BL</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"buftype"</literal></expr>, <expr><literal type="string">"bt"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NOGLOB</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bt</name></expr>, <expr><name>PV_BT</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"casemap"</literal></expr>, <expr><literal type="string">"cmp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cmp</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"internal,keepascii"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cdpath"</literal></expr>, <expr><literal type="string">"cd"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name><operator>|</operator><name>P_COMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cdpath</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">",,"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cedit"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cedit</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CTRL_F_STR</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"charconvert"</literal></expr>, <expr><literal type="string">"ccv"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ccv</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cindent"</literal></expr>, <expr><literal type="string">"cin"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cin</name></expr>, <expr><name>PV_CIN</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cinkeys"</literal></expr>, <expr><literal type="string">"cink"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cink</name></expr>, <expr><name>PV_CINK</name></expr>,

<expr><block>{<expr><name>INDENTKEYS_DEFAULT</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cinoptions"</literal></expr>, <expr><literal type="string">"cino"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cino</name></expr>, <expr><name>PV_CINO</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cinwords"</literal></expr>, <expr><literal type="string">"cinw"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cinw</name></expr>, <expr><name>PV_CINW</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"if,else,while,do,for,switch"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"clipboard"</literal></expr>, <expr><literal type="string">"cb"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cb</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"autoselect,exclude:cons\\|linux"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmdheight"</literal></expr>, <expr><literal type="string">"ch"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ch</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmdwinheight"</literal></expr>, <expr><literal type="string">"cwh"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cwh</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">7L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"colorcolumn"</literal></expr>, <expr><literal type="string">"cc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_CC</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"columns"</literal></expr>, <expr><literal type="string">"co"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_NODEFAULT</name><operator>|</operator><name>P_NO_MKRC</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>Columns</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">80L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"comments"</literal></expr>, <expr><literal type="string">"com"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name>

<operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_CURSWANT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_com</name></expr>, <expr><name>PV_COM</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:&gt;,fb:-"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"commentstring"</literal></expr>, <expr><literal type="string">"cms"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_CURSWANT</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cms</name></expr>, <expr><name>PV_CMS</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"/*%s*/"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"compatible"</literal></expr>, <expr><literal type="string">"cp"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_RALL</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cp</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"complete"</literal></expr>, <expr><literal type="string">"cpt"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cpt</name></expr>, <expr><name>PV_CPT</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".,w,b,u,t,i"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"concealcursor"</literal></expr>,<expr><literal type="string">"cocu"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_RWIN</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_COCU</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"conceallevel"</literal></expr>,<expr><literal type="string">"cole"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_RWIN</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_COLE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"completefunc"</literal></expr>, <expr><literal type="string">"cfu"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cfu</name></expr>, <expr><name>PV_CFU</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"completeopt"</literal></expr>, <expr><literal type="string">"cot"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cot</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"menu,preview"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"completepopup"</literal></expr>, <expr><literal type="string">"cpp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_COMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cpp</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"completeslash"</literal></expr>, <expr><literal type="string">"csl"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_csl</name></expr>, <expr><name>PV_CSL</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"confirm"</literal></expr>, <expr><literal type="string">"cf"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_confirm</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"conskey"</literal></expr>, <expr><literal type="string">"consk"</literal></expr>,<expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"copyindent"</literal></expr>, <expr><literal type="string">"ci"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ci</name></expr>, <expr><name>PV_CI</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cpoptions"</literal></expr>, <expr><literal type="string">"cpo"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RALL</name><operator>|</operator><name>P_FLAGLIST</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cpo</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CPO_VI</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CPO_VIM</name></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cryptmethod"</literal></expr>, <expr><literal type="string">"cm"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cm</name></expr>, <expr><name>PV_CM</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"blowfish2"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cscopepathcomp"</literal></expr>, <expr><literal type="string">"cspc"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CSCOPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cspc</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cscopeprg"</literal></expr>, <expr><literal type="string">"csprg"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CSCOPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_csprg</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cscope"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cscopequickfix"</literal></expr>, <expr><literal type="string">"csqf"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CSCOPE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_csqf</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cscoperelative"</literal></expr>, <expr><literal type="string">"csre"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CSCOPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_csre</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cscopetag"</literal></expr>, <expr><literal type="string">"cst"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CSCOPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cst</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cscopetagorder"</literal></expr>, <expr><literal type="string">"csto"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CSCOPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_csto</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cscopeverbose"</literal></expr>, <expr><literal type="string">"csverb"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CSCOPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_csverbose</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cursorbind"</literal></expr>, <expr><literal type="string">"crb"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_CRBIND</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cursorcolumn"</literal></expr>, <expr><literal type="string">"cuc"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWINONLY</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_CUC</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cursorline"</literal></expr>, <expr><literal type="string">"cul"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWINONLY</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_CUL</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cursorlineopt"</literal></expr>, <expr><literal type="string">"culopt"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_CULOPT</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"both"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"debug"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_debug</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"define"</literal></expr>, <expr><literal type="string">"def"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_CURSWANT</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_def</name></expr>, <expr><name>PV_DEF</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"^\\s*#\\s*define"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"delcombine"</literal></expr>, <expr><literal type="string">"deco"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_deco</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dictionary"</literal></expr>, <expr><literal type="string">"dict"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_NDNAME</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_dict</name></expr>, <expr><name>PV_DICT</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"diff"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name><operator>|</operator><name>P_NOGLOB</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_DIFF</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"diffexpr"</literal></expr>, <expr><literal type="string">"dex"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name><operator>|</operator><name>P_CURSWANT</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_dex</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"diffopt"</literal></expr>, <expr><literal type="string">"dip"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name><operator>|</operator><name>P_ONECOMMA</name>

<operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_dip</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"internal,filler,closeoff"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"digraph"</literal></expr>, <expr><literal type="string">"dg"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_dg</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"directory"</literal></expr>, <expr><literal type="string">"dir"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name>

<operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_dir</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_DIR</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"display"</literal></expr>, <expr><literal type="string">"dy"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_RALL</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_dy</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"eadirection"</literal></expr>, <expr><literal type="string">"ead"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ead</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"both"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"edcompatible"</literal></expr>,<expr><literal type="string">"ed"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ed</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"emoji"</literal></expr>, <expr><literal type="string">"emo"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_emoji</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"encoding"</literal></expr>, <expr><literal type="string">"enc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name><operator>|</operator><name>P_NO_ML</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_enc</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>ENC_DFLT</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"endofline"</literal></expr>, <expr><literal type="string">"eol"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_NO_MKRC</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_eol</name></expr>, <expr><name>PV_EOL</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"equalalways"</literal></expr>, <expr><literal type="string">"ea"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ea</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"equalprg"</literal></expr>, <expr><literal type="string">"ep"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ep</name></expr>, <expr><name>PV_EP</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"errorbells"</literal></expr>, <expr><literal type="string">"eb"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_eb</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"errorfile"</literal></expr>, <expr><literal type="string">"ef"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ef</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_ERRORFILE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"errorformat"</literal></expr>, <expr><literal type="string">"efm"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_efm</name></expr>, <expr><name>PV_EFM</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_EFM</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"esckeys"</literal></expr>, <expr><literal type="string">"ek"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ek</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"eventignore"</literal></expr>, <expr><literal type="string">"ei"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ei</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"expandtab"</literal></expr>, <expr><literal type="string">"et"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_et</name></expr>, <expr><name>PV_ET</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"exrc"</literal></expr>, <expr><literal type="string">"ex"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_exrc</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fileencoding"</literal></expr>,<expr><literal type="string">"fenc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name><operator>|</operator><name>P_RBUF</name>

<operator>|</operator><name>P_NO_MKRC</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fenc</name></expr>, <expr><name>PV_FENC</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fileencodings"</literal></expr>,<expr><literal type="string">"fencs"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fencs</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ucs-bom"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fileformat"</literal></expr>, <expr><literal type="string">"ff"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name><operator>|</operator><name>P_NO_MKRC</name>

<operator>|</operator><name>P_CURSWANT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ff</name></expr>, <expr><name>PV_FF</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_FF</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fileformats"</literal></expr>, <expr><literal type="string">"ffs"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ffs</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_FFS_VI</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_FFS_VIM</name></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fileignorecase"</literal></expr>, <expr><literal type="string">"fic"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fic</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CASE_INSENSITIVE_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"filetype"</literal></expr>, <expr><literal type="string">"ft"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NOGLOB</name><operator>|</operator><name>P_NFNAME</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ft</name></expr>, <expr><name>PV_FT</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fillchars"</literal></expr>, <expr><literal type="string">"fcs"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fcs</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"vert:|,fold:-"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fixendofline"</literal></expr>, <expr><literal type="string">"fixeol"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fixeol</name></expr>, <expr><name>PV_FIXEOL</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fkmap"</literal></expr>, <expr><literal type="string">"fk"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"flash"</literal></expr>, <expr><literal type="string">"fl"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldclose"</literal></expr>, <expr><literal type="string">"fcl"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fcl</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldcolumn"</literal></expr>, <expr><literal type="string">"fdc"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_FDC</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldenable"</literal></expr>, <expr><literal type="string">"fen"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_FEN</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldexpr"</literal></expr>, <expr><literal type="string">"fde"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_FDE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"0"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldignore"</literal></expr>, <expr><literal type="string">"fdi"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_FDI</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"#"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldlevel"</literal></expr>, <expr><literal type="string">"fdl"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_FDL</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldlevelstart"</literal></expr>,<expr><literal type="string">"fdls"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_CURSWANT</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fdls</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldmarker"</literal></expr>, <expr><literal type="string">"fmr"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator>

<name>P_RWIN</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_FMR</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"{{{,}}}"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldmethod"</literal></expr>, <expr><literal type="string">"fdm"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_FDM</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"manual"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldminlines"</literal></expr>,<expr><literal type="string">"fml"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_FML</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldnestmax"</literal></expr>, <expr><literal type="string">"fdn"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_FDN</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">20L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldopen"</literal></expr>, <expr><literal type="string">"fdo"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_CURSWANT</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fdo</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"block,hor,mark,percent,quickfix,search,tag,undo"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldtext"</literal></expr>, <expr><literal type="string">"fdt"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_FDT</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"foldtext()"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"formatexpr"</literal></expr>, <expr><literal type="string">"fex"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fex</name></expr>, <expr><name>PV_FEX</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"formatoptions"</literal></expr>,<expr><literal type="string">"fo"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_FLAGLIST</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fo</name></expr>, <expr><name>PV_FO</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_FO_VI</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_FO_VIM</name></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"formatlistpat"</literal></expr>,<expr><literal type="string">"flp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_flp</name></expr>, <expr><name>PV_FLP</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"^\\s*\\d\\+[\\]:.)}\\t ]\\s*"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"formatprg"</literal></expr>, <expr><literal type="string">"fp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fp</name></expr>, <expr><name>PV_FP</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fsync"</literal></expr>, <expr><literal type="string">"fs"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_SECURE</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_fs</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gdefault"</literal></expr>, <expr><literal type="string">"gd"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_gd</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"graphic"</literal></expr>, <expr><literal type="string">"gr"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"grepformat"</literal></expr>, <expr><literal type="string">"gfm"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_gefm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_GREPFORMAT</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"grepprg"</literal></expr>, <expr><literal type="string">"gp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_gp</name></expr>, <expr><name>PV_GP</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"findstr /n"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"grep -n $* /dev/null"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"SEARCH/NUMBERS "</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"grep -n "</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"guicursor"</literal></expr>, <expr><literal type="string">"gcr"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_guicursor</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"n-v-c:block-Cursor/lCursor,ve:ver35-Cursor,o:hor50-Cursor,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor,sm:block-Cursor-blinkwait175-blinkoff150-blinkon175"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"n-v-c:block,o:hor50,i-ci:hor15,r-cr:hor30,sm:block"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"guifont"</literal></expr>, <expr><literal type="string">"gfn"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_guifont</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"guifontset"</literal></expr>, <expr><literal type="string">"gfs"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name><operator>|</operator><name>P_ONECOMMA</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_guifontset</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"guifontwide"</literal></expr>, <expr><literal type="string">"gfw"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_guifontwide</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"guiheadroom"</literal></expr>, <expr><literal type="string">"ghr"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ghr</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">50L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"guioptions"</literal></expr>, <expr><literal type="string">"go"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name><operator>|</operator><name>P_FLAGLIST</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_go</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"aegimrLtT"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"egmrLtT"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"guipty"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_guipty</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"guitablabel"</literal></expr>, <expr><literal type="string">"gtl"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_gtl</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"guitabtooltip"</literal></expr>, <expr><literal type="string">"gtt"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_gtt</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hardtabs"</literal></expr>, <expr><literal type="string">"ht"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"helpfile"</literal></expr>, <expr><literal type="string">"hf"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_hf</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_HELPFILE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"helpheight"</literal></expr>, <expr><literal type="string">"hh"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_hh</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">20L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"helplang"</literal></expr>, <expr><literal type="string">"hlg"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_hlg</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hidden"</literal></expr>, <expr><literal type="string">"hid"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_hid</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"highlight"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_hl</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>HIGHLIGHT_INIT</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"history"</literal></expr>, <expr><literal type="string">"hi"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_hi</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">50L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hkmap"</literal></expr>, <expr><literal type="string">"hk"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_hkmap</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hkmapp"</literal></expr>, <expr><literal type="string">"hkp"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_hkmapp</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hlsearch"</literal></expr>, <expr><literal type="string">"hls"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RALL</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_hls</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"icon"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_icon</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iconstring"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_iconstring</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ignorecase"</literal></expr>, <expr><literal type="string">"ic"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ic</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imactivatefunc"</literal></expr>,<expr><literal type="string">"imaf"</literal></expr>,<expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_imaf</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imactivatekey"</literal></expr>,<expr><literal type="string">"imak"</literal></expr>,<expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_imak</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imcmdline"</literal></expr>, <expr><literal type="string">"imc"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_imcmdline</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imdisable"</literal></expr>, <expr><literal type="string">"imd"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_imdisable</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iminsert"</literal></expr>, <expr><literal type="string">"imi"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_iminsert</name></expr>, <expr><name>PV_IMI</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>B_IMODE_NONE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imsearch"</literal></expr>, <expr><literal type="string">"ims"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_imsearch</name></expr>, <expr><name>PV_IMS</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>B_IMODE_USE_INSERT</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imstatusfunc"</literal></expr>,<expr><literal type="string">"imsf"</literal></expr>,<expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_imsf</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imstyle"</literal></expr>, <expr><literal type="string">"imst"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_imst</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>IM_OVER_THE_SPOT</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"include"</literal></expr>, <expr><literal type="string">"inc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_inc</name></expr>, <expr><name>PV_INC</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"^\\s*#\\s*include"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"includeexpr"</literal></expr>, <expr><literal type="string">"inex"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_inex</name></expr>, <expr><name>PV_INEX</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"incsearch"</literal></expr>, <expr><literal type="string">"is"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_is</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"indentexpr"</literal></expr>, <expr><literal type="string">"inde"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_inde</name></expr>, <expr><name>PV_INDE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"indentkeys"</literal></expr>, <expr><literal type="string">"indk"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_indk</name></expr>, <expr><name>PV_INDK</name></expr>,

<expr><block>{<expr><name>INDENTKEYS_DEFAULT</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"infercase"</literal></expr>, <expr><literal type="string">"inf"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_inf</name></expr>, <expr><name>PV_INF</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"insertmode"</literal></expr>, <expr><literal type="string">"im"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_im</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"isfname"</literal></expr>, <expr><literal type="string">"isf"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_COMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_isf</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,48-57,/,\\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,="</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,48-57,/,.,-,_,+,,,$,:"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,48-57,/,.,-,_,+,,,#,$,%,&lt;,&gt;,[,],:,;,~"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,240-249,/,.,-,_,+,,,#,$,%,~,="</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,48-57,/,.,-,_,+,,,#,$,%,~,="</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"isident"</literal></expr>, <expr><literal type="string">"isi"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_COMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_isi</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,48-57,_,128-167,224-235"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,240-249,_,66-73,81-89,98-105,"</literal>

<literal type="string">"112-120,128,140-142,156,158,172,"</literal>

<literal type="string">"174,186,191,203-207,219-225,235-239,"</literal>

<literal type="string">"251-254"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,48-57,_,192-255"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iskeyword"</literal></expr>, <expr><literal type="string">"isk"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_COMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_isk</name></expr>, <expr><name>PV_ISK</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,240-249,_"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,240-249,_,66-73,81-89,98-105,"</literal>

<literal type="string">"112-120,128,140-142,156,158,172,"</literal>

<literal type="string">"174,186,191,203-207,219-225,235-239,"</literal>

<literal type="string">"251-254"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,48-57,_"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,48-57,_,128-167,224-235"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>ISK_LATIN1</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"isprint"</literal></expr>, <expr><literal type="string">"isp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name><operator>|</operator><name>P_COMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_isp</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@,~-255"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"63-255"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><name>ISP_LATIN1</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"joinspaces"</literal></expr>, <expr><literal type="string">"js"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_js</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"key"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NO_MKRC</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_key</name></expr>, <expr><name>PV_KEY</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"keymap"</literal></expr>, <expr><literal type="string">"kmp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RBUF</name><operator>|</operator><name>P_RSTAT</name><operator>|</operator><name>P_NFNAME</name><operator>|</operator><name>P_PRI_MKRC</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_keymap</name></expr>, <expr><name>PV_KMAP</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"keymodel"</literal></expr>, <expr><literal type="string">"km"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_km</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"keywordprg"</literal></expr>, <expr><literal type="string">"kp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_kp</name></expr>, <expr><name>PV_KP</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":help"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"help"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USEMAN_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"man -s"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"man"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"langmap"</literal></expr>, <expr><literal type="string">"lmap"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_langmap</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"langmenu"</literal></expr>, <expr><literal type="string">"lm"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NFNAME</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_lm</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"langnoremap"</literal></expr>, <expr><literal type="string">"lnr"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_lnr</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"langremap"</literal></expr>, <expr><literal type="string">"lrm"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_lrm</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"laststatus"</literal></expr>, <expr><literal type="string">"ls"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ls</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lazyredraw"</literal></expr>, <expr><literal type="string">"lz"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_lz</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"linebreak"</literal></expr>, <expr><literal type="string">"lbr"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_LBR</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lines"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_NODEFAULT</name><operator>|</operator><name>P_NO_MKRC</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>Rows</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">25L</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">24L</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"linespace"</literal></expr>, <expr><literal type="string">"lsp"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_linespace</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lisp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_lisp</name></expr>, <expr><name>PV_LISP</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lispwords"</literal></expr>, <expr><literal type="string">"lw"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_lispwords</name></expr>, <expr><name>PV_LW</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>LISPWORD_VALUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"list"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_LIST</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"listchars"</literal></expr>, <expr><literal type="string">"lcs"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_lcs</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"eol:$"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"loadplugins"</literal></expr>, <expr><literal type="string">"lpl"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_lpl</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"luadll"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_LUA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_luadll</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DYNAMIC_LUA_DLL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"macatsui"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_macatsui</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"magic"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_magic</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"makeef"</literal></expr>, <expr><literal type="string">"mef"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mef</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"makeencoding"</literal></expr>,<expr><literal type="string">"menc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_menc</name></expr>, <expr><name>PV_MENC</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"makeprg"</literal></expr>, <expr><literal type="string">"mp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mp</name></expr>, <expr><name>PV_MP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"MMS"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"make"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"matchpairs"</literal></expr>, <expr><literal type="string">"mps"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mps</name></expr>, <expr><name>PV_MPS</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"(:),{:},[:]"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"matchtime"</literal></expr>, <expr><literal type="string">"mat"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mat</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">5L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"maxcombine"</literal></expr>, <expr><literal type="string">"mco"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_CURSWANT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mco</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">2</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"maxfuncdepth"</literal></expr>, <expr><literal type="string">"mfd"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mfd</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">100L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"maxmapdepth"</literal></expr>, <expr><literal type="string">"mmd"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mmd</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1000L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"maxmem"</literal></expr>, <expr><literal type="string">"mm"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_MAXMEM</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"maxmempattern"</literal></expr>,<expr><literal type="string">"mmp"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mmp</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1000L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"maxmemtot"</literal></expr>, <expr><literal type="string">"mmt"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mmt</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_MAXMEMTOT</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"menuitems"</literal></expr>, <expr><literal type="string">"mis"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mis</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">25L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mesg"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mkspellmem"</literal></expr>, <expr><literal type="string">"msm"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_msm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"460000,2000,500"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"modeline"</literal></expr>, <expr><literal type="string">"ml"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ml</name></expr>, <expr><name>PV_ML</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"modelineexpr"</literal></expr>, <expr><literal type="string">"mle"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mle</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"modelines"</literal></expr>, <expr><literal type="string">"mls"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mls</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">5L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"modifiable"</literal></expr>, <expr><literal type="string">"ma"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NOGLOB</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ma</name></expr>, <expr><name>PV_MA</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"modified"</literal></expr>, <expr><literal type="string">"mod"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_NO_MKRC</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mod</name></expr>, <expr><name>PV_MOD</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"more"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_more</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mouse"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_FLAGLIST</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mouse</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"a"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mousefocus"</literal></expr>, <expr><literal type="string">"mousef"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mousef</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mousehide"</literal></expr>, <expr><literal type="string">"mh"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mh</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mousemodel"</literal></expr>, <expr><literal type="string">"mousem"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mousem</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"popup"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"popup_setpos"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"extend"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mouseshape"</literal></expr>, <expr><literal type="string">"mouses"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mouseshape</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"i-r:beam,s:updown,sd:udsizing,vs:leftright,vd:lrsizing,m:no,ml:up-arrow,v:rightup-arrow"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mousetime"</literal></expr>, <expr><literal type="string">"mouset"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mouset</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">500L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mzschemedll"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mzschemedll</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DYNAMIC_MZSCH_DLL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mzschemegcdll"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mzschemegcdll</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DYNAMIC_MZGC_DLL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mzquantum"</literal></expr>, <expr><literal type="string">"mzq"</literal></expr>, <expr><name>P_NUM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_mzq</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">100L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">100L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"novice"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"nrformats"</literal></expr>, <expr><literal type="string">"nf"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_nf</name></expr>, <expr><name>PV_NF</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bin,octal,hex"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"nu"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_NU</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"numberwidth"</literal></expr>, <expr><literal type="string">"nuw"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_RWIN</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_NUW</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">8L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">4L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"omnifunc"</literal></expr>, <expr><literal type="string">"ofu"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ofu</name></expr>, <expr><name>PV_OFU</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"open"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"opendevice"</literal></expr>, <expr><literal type="string">"odev"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_odev</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"operatorfunc"</literal></expr>, <expr><literal type="string">"opfunc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_opfunc</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"optimize"</literal></expr>, <expr><literal type="string">"opt"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"osfiletype"</literal></expr>, <expr><literal type="string">"oft"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"packpath"</literal></expr>, <expr><literal type="string">"pp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name>

<operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pp</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_RUNTIMEPATH</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"paragraphs"</literal></expr>, <expr><literal type="string">"para"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_para</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"IPLPPPQPP TPHPLIPpLpItpplpipbp"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"paste"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_PRI_MKRC</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_paste</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pastetoggle"</literal></expr>, <expr><literal type="string">"pt"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pt</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"patchexpr"</literal></expr>, <expr><literal type="string">"pex"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pex</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"patchmode"</literal></expr>, <expr><literal type="string">"pm"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NFNAME</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"path"</literal></expr>, <expr><literal type="string">"pa"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_COMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_path</name></expr>, <expr><name>PV_PATH</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".,,"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".,/usr/include,,"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"perldll"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PERL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_perldll</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DYNAMIC_PERL_DLL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"preserveindent"</literal></expr>, <expr><literal type="string">"pi"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pi</name></expr>, <expr><name>PV_PI</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"previewheight"</literal></expr>, <expr><literal type="string">"pvh"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pvh</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">12L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"previewpopup"</literal></expr>, <expr><literal type="string">"pvp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_COMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pvp</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"previewwindow"</literal></expr>, <expr><literal type="string">"pvw"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name><operator>|</operator><name>P_NOGLOB</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_PVW</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"printdevice"</literal></expr>, <expr><literal type="string">"pdev"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pdev</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"printencoding"</literal></expr>, <expr><literal type="string">"penc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_penc</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"printexpr"</literal></expr>, <expr><literal type="string">"pexpr"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pexpr</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"printfont"</literal></expr>, <expr><literal type="string">"pfn"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pfn</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Courier_New:h10"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"courier"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"printheader"</literal></expr>, <expr><literal type="string">"pheader"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_GETTEXT</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_header</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"%&lt;%f%h%m%=Page %N"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"printmbcharset"</literal></expr>, <expr><literal type="string">"pmbcs"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pmcs</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"printmbfont"</literal></expr>, <expr><literal type="string">"pmbfn"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pmfn</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"printoptions"</literal></expr>, <expr><literal type="string">"popt"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_popt</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"prompt"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_prompt</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pumheight"</literal></expr>, <expr><literal type="string">"ph"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ph</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pumwidth"</literal></expr>, <expr><literal type="string">"pw"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pw</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">15L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">15L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pythonthreedll"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_py3dll</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DYNAMIC_PYTHON3_DLL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pythonthreehome"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_py3home</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pythondll"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pydll</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DYNAMIC_PYTHON_DLL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pythonhome"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pyhome</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pyxversion"</literal></expr>, <expr><literal type="string">"pyx"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pyx</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DEFAULT_PYTHON_VER</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"quoteescape"</literal></expr>, <expr><literal type="string">"qe"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEXTOBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_qe</name></expr>, <expr><name>PV_QE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"readonly"</literal></expr>, <expr><literal type="string">"ro"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name><operator>|</operator><name>P_NOGLOB</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ro</name></expr>, <expr><name>PV_RO</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"redraw"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"redrawtime"</literal></expr>, <expr><literal type="string">"rdt"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_rdt</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">2000L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"regexpengine"</literal></expr>, <expr><literal type="string">"re"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_re</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"relativenumber"</literal></expr>, <expr><literal type="string">"rnu"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_RNU</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"remap"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_remap</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"renderoptions"</literal></expr>, <expr><literal type="string">"rop"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_RCLR</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RENDER_OPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_rop</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"report"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_report</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">2L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"restorescreen"</literal></expr>, <expr><literal type="string">"rs"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_rs</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"revins"</literal></expr>, <expr><literal type="string">"ri"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ri</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rightleft"</literal></expr>, <expr><literal type="string">"rl"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_RL</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rightleftcmd"</literal></expr>, <expr><literal type="string">"rlc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_RLC</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"search"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rubydll"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_rubydll</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DYNAMIC_RUBY_DLL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ruler"</literal></expr>, <expr><literal type="string">"ru"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RSTAT</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ru</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rulerformat"</literal></expr>, <expr><literal type="string">"ruf"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_RSTAT</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ruf</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"runtimepath"</literal></expr>, <expr><literal type="string">"rtp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name>

<operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_rtp</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_RUNTIMEPATH</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"scroll"</literal></expr>, <expr><literal type="string">"scr"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_NO_MKRC</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_SCROLL</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"scrollbind"</literal></expr>, <expr><literal type="string">"scb"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_SCBIND</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"scrollfocus"</literal></expr>, <expr><literal type="string">"scf"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_scf</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"scrolljump"</literal></expr>, <expr><literal type="string">"sj"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sj</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"scrolloff"</literal></expr>, <expr><literal type="string">"so"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RALL</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_so</name></expr>, <expr><name>PV_SO</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"scrollopt"</literal></expr>, <expr><literal type="string">"sbo"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sbo</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ver,jump"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sections"</literal></expr>, <expr><literal type="string">"sect"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sections</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"SHNHH HUnhsh"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"secure"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_secure</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"selection"</literal></expr>, <expr><literal type="string">"sel"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sel</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"inclusive"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"selectmode"</literal></expr>, <expr><literal type="string">"slm"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_slm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sessionoptions"</literal></expr>, <expr><literal type="string">"ssop"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ssop</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"blank,buffers,curdir,folds,help,options,tabpages,winsize,terminal"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shell"</literal></expr>, <expr><literal type="string">"sh"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sh</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"-"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"sh"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shellcmdflag"</literal></expr>,<expr><literal type="string">"shcf"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_shcf</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"/c"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"-c"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shellpipe"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sp</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"| tee"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&gt;"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shellquote"</literal></expr>, <expr><literal type="string">"shq"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_shq</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shellredir"</literal></expr>, <expr><literal type="string">"srr"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_srr</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&gt;"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shellslash"</literal></expr>, <expr><literal type="string">"ssl"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ssl</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shelltemp"</literal></expr>, <expr><literal type="string">"stmp"</literal></expr>, <expr><name>P_BOOL</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_stmp</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shelltype"</literal></expr>, <expr><literal type="string">"st"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_st</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shellxquote"</literal></expr>, <expr><literal type="string">"sxq"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sxq</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\""</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shellxescape"</literal></expr>, <expr><literal type="string">"sxe"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sxe</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\"&amp;|&lt;&gt;()@^"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shiftround"</literal></expr>, <expr><literal type="string">"sr"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sr</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shiftwidth"</literal></expr>, <expr><literal type="string">"sw"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sw</name></expr>, <expr><name>PV_SW</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">8L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shortmess"</literal></expr>, <expr><literal type="string">"shm"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_FLAGLIST</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_shm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"S"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"filnxtToOS"</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shortname"</literal></expr>, <expr><literal type="string">"sn"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sn</name></expr>, <expr><name>PV_SN</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"showbreak"</literal></expr>, <expr><literal type="string">"sbr"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sbr</name></expr>, <expr><name>PV_SBR</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"showcmd"</literal></expr>, <expr><literal type="string">"sc"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sc</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><macro><name>FALSE</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument_list>(<argument>char_u *</argument>)</argument_list></macro><name>TRUE</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"showfulltag"</literal></expr>, <expr><literal type="string">"sft"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sft</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"showmatch"</literal></expr>, <expr><literal type="string">"sm"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"showmode"</literal></expr>, <expr><literal type="string">"smd"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_smd</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"showtabline"</literal></expr>, <expr><literal type="string">"stal"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_stal</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sidescroll"</literal></expr>, <expr><literal type="string">"ss"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ss</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sidescrolloff"</literal></expr>, <expr><literal type="string">"siso"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RBUF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_siso</name></expr>, <expr><name>PV_SISO</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"signcolumn"</literal></expr>, <expr><literal type="string">"scl"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_SCL</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"auto"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"slowopen"</literal></expr>, <expr><literal type="string">"slow"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"smartcase"</literal></expr>, <expr><literal type="string">"scs"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_scs</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"smartindent"</literal></expr>, <expr><literal type="string">"si"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_si</name></expr>, <expr><name>PV_SI</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"smarttab"</literal></expr>, <expr><literal type="string">"sta"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sta</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"softtabstop"</literal></expr>, <expr><literal type="string">"sts"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sts</name></expr>, <expr><name>PV_STS</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sourceany"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"spell"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_SPELL</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"spellcapcheck"</literal></expr>, <expr><literal type="string">"spc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RBUF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_spc</name></expr>, <expr><name>PV_SPC</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"[.?!]\\_[\\])'\" ]\\+"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"spellfile"</literal></expr>, <expr><literal type="string">"spf"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name>

<operator>|</operator><name>P_ONECOMMA</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_spf</name></expr>, <expr><name>PV_SPF</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"spelllang"</literal></expr>, <expr><literal type="string">"spl"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name>

<operator>|</operator><name>P_RBUF</name><operator>|</operator><name>P_EXPAND</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_spl</name></expr>, <expr><name>PV_SPL</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"en"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"spellsuggest"</literal></expr>, <expr><literal type="string">"sps"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_SECURE</name><operator>|</operator><name>P_ONECOMMA</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sps</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"best"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"splitbelow"</literal></expr>, <expr><literal type="string">"sb"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sb</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"splitright"</literal></expr>, <expr><literal type="string">"spr"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_spr</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"startofline"</literal></expr>, <expr><literal type="string">"sol"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sol</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"statusline"</literal></expr> ,<expr><literal type="string">"stl"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_RSTAT</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_stl</name></expr>, <expr><name>PV_STL</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"suffixes"</literal></expr>, <expr><literal type="string">"su"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_su</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".bak,~,.o,.h,.info,.swp,.obj"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"suffixesadd"</literal></expr>, <expr><literal type="string">"sua"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sua</name></expr>, <expr><name>PV_SUA</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"swapfile"</literal></expr>, <expr><literal type="string">"swf"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_swf</name></expr>, <expr><name>PV_SWF</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"swapsync"</literal></expr>, <expr><literal type="string">"sws"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sws</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"fsync"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"switchbuf"</literal></expr>, <expr><literal type="string">"swb"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_swb</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"synmaxcol"</literal></expr>, <expr><literal type="string">"smc"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RBUF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_smc</name></expr>, <expr><name>PV_SMC</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">3000L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"syntax"</literal></expr>, <expr><literal type="string">"syn"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NOGLOB</name><operator>|</operator><name>P_NFNAME</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_syn</name></expr>, <expr><name>PV_SYN</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tabline"</literal></expr>, <expr><literal type="string">"tal"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tal</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tabpagemax"</literal></expr>, <expr><literal type="string">"tpm"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tpm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">10L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tabstop"</literal></expr>, <expr><literal type="string">"ts"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RBUF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ts</name></expr>, <expr><name>PV_TS</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">8L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tagbsearch"</literal></expr>, <expr><literal type="string">"tbs"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tbs</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tagcase"</literal></expr>, <expr><literal type="string">"tc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tc</name></expr>, <expr><name>PV_TC</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"followic"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"followic"</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tagfunc"</literal></expr>, <expr><literal type="string">"tfu"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tfu</name></expr>, <expr><name>PV_TFU</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"taglength"</literal></expr>, <expr><literal type="string">"tl"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tl</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tagrelative"</literal></expr>, <expr><literal type="string">"tr"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tr</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tags"</literal></expr>, <expr><literal type="string">"tag"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tags</name></expr>, <expr><name>PV_TAGS</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EMACS_TAGS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CASE_INSENSITIVE_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"./tags,./TAGS,tags,TAGS"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"./tags,tags"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tagstack"</literal></expr>, <expr><literal type="string">"tgst"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tgst</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tcldll"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_TCL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tcldll</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DYNAMIC_TCL_DLL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"term"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_NODEFAULT</name><operator>|</operator><name>P_NO_MKRC</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>T_NAME</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"termbidi"</literal></expr>, <expr><literal type="string">"tbidi"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tbidi</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"termencoding"</literal></expr>, <expr><literal type="string">"tenc"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tenc</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"termguicolors"</literal></expr>, <expr><literal type="string">"tgc"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RCLR</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tgc</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name><operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"termwinkey"</literal></expr>, <expr><literal type="string">"twk"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_RWIN</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_TWK</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"termwinscroll"</literal></expr>, <expr><literal type="string">"twsl"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RBUF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_twsl</name></expr>, <expr><name>PV_TWSL</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">10000L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">10000L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"termwinsize"</literal></expr>, <expr><literal type="string">"tws"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_RWIN</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_TWS</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"termwintype"</literal></expr>, <expr><literal type="string">"twt"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_twt</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"terse"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_terse</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"textauto"</literal></expr>, <expr><literal type="string">"ta"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ta</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_TEXTAUTO</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"textmode"</literal></expr>, <expr><literal type="string">"tx"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NO_MKRC</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tx</name></expr>, <expr><name>PV_TX</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CRNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"textwidth"</literal></expr>, <expr><literal type="string">"tw"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RBUF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tw</name></expr>, <expr><name>PV_TW</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"thesaurus"</literal></expr>, <expr><literal type="string">"tsr"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_NDNAME</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tsr</name></expr>, <expr><name>PV_TSR</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tildeop"</literal></expr>, <expr><literal type="string">"top"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_to</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"timeout"</literal></expr>, <expr><literal type="string">"to"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_timeout</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"timeoutlen"</literal></expr>, <expr><literal type="string">"tm"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1000L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"title"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_title</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"titlelen"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_titlelen</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">85L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"titleold"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_GETTEXT</name><operator>|</operator><name>P_SECURE</name><operator>|</operator><name>P_NO_MKRC</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_titleold</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Thanks for flying Vim"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"titlestring"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_MLE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_titlestring</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"toolbar"</literal></expr>, <expr><literal type="string">"tb"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_toolbar</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"icons,tooltips"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"toolbariconsize"</literal></expr>, <expr><literal type="string">"tbis"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tbis</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"small"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ttimeout"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ttimeout</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ttimeoutlen"</literal></expr>, <expr><literal type="string">"ttm"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ttm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ttybuiltin"</literal></expr>, <expr><literal type="string">"tbi"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tbi</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ttyfast"</literal></expr>, <expr><literal type="string">"tf"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_NO_MKRC</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tf</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ttymouse"</literal></expr>, <expr><literal type="string">"ttym"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_NODEFAULT</name><operator>|</operator><name>P_NO_MKRC</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ttym</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ttyscroll"</literal></expr>, <expr><literal type="string">"tsl"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ttyscroll</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">999L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ttytype"</literal></expr>, <expr><literal type="string">"tty"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_NODEFAULT</name><operator>|</operator><name>P_NO_MKRC</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RALL</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>T_NAME</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"undodir"</literal></expr>, <expr><literal type="string">"udir"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_SECURE</name>

<operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERSISTENT_UNDO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_udir</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"undofile"</literal></expr>, <expr><literal type="string">"udf"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERSISTENT_UNDO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_udf</name></expr>, <expr><name>PV_UDF</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"undolevels"</literal></expr>, <expr><literal type="string">"ul"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ul</name></expr>, <expr><name>PV_UL</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1000L</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">100L</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"undoreload"</literal></expr>, <expr><literal type="string">"ur"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ur</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{ <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">10000L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"updatecount"</literal></expr>, <expr><literal type="string">"uc"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_uc</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">200L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"updatetime"</literal></expr>, <expr><literal type="string">"ut"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ut</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">4000L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"varsofttabstop"</literal></expr>, <expr><literal type="string">"vsts"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_COMMA</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_vsts</name></expr>, <expr><name>PV_VSTS</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vartabstop"</literal></expr>, <expr><literal type="string">"vts"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_RBUF</name><operator>|</operator><name>P_COMMA</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_vts</name></expr>, <expr><name>PV_VTS</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"verbose"</literal></expr>, <expr><literal type="string">"vbs"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_verbose</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"verbosefile"</literal></expr>, <expr><literal type="string">"vfile"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_vfile</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"viewdir"</literal></expr>, <expr><literal type="string">"vdir"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_vdir</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_VDIR</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"viewoptions"</literal></expr>, <expr><literal type="string">"vop"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_vop</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"folds,options,cursor,curdir"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"viminfo"</literal></expr>, <expr><literal type="string">"vi"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VIMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_viminfo</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"'100,&lt;50,s10,h,rA:,rB:"</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"'100,&lt;50,s10,h,rdf0:,rdf1:,rdf2:"</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"'100,&lt;50,s10,h"</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"viminfofile"</literal></expr>, <expr><literal type="string">"vif"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name>

<operator>|</operator><name>P_SECURE</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VIMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_viminfofile</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"virtualedit"</literal></expr>, <expr><literal type="string">"ve"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name><operator>|</operator><name>P_VI_DEF</name>

<operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_CURSWANT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ve</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"visualbell"</literal></expr>, <expr><literal type="string">"vb"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_vb</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w300"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w1200"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w9600"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"warn"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_warn</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"weirdinvert"</literal></expr>, <expr><literal type="string">"wiv"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RCLR</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wiv</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"whichwrap"</literal></expr>, <expr><literal type="string">"ww"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VIM</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_FLAGLIST</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ww</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"b,s"</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wildchar"</literal></expr>, <expr><literal type="string">"wc"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wc</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>Ctrl_E</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>TAB</name></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wildcharm"</literal></expr>, <expr><literal type="string">"wcm"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wcm</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wildignore"</literal></expr>, <expr><literal type="string">"wig"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wig</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wildignorecase"</literal></expr>, <expr><literal type="string">"wic"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wic</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wildmenu"</literal></expr>, <expr><literal type="string">"wmnu"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wmnu</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wildmode"</literal></expr>, <expr><literal type="string">"wim"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_ONECOMMA</name><operator>|</operator><name>P_NODUP</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wim</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"full"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wildoptions"</literal></expr>, <expr><literal type="string">"wop"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wop</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winaltkeys"</literal></expr>, <expr><literal type="string">"wak"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wak</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"menu"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wincolor"</literal></expr>, <expr><literal type="string">"wcr"</literal></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_ALLOCED</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_WCR</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>}</block>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"window"</literal></expr>, <expr><literal type="string">"wi"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_window</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winheight"</literal></expr>, <expr><literal type="string">"wh"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wh</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winfixheight"</literal></expr>, <expr><literal type="string">"wfh"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_WFH</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winfixwidth"</literal></expr>, <expr><literal type="string">"wfw"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RSTAT</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_WFW</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winminheight"</literal></expr>, <expr><literal type="string">"wmh"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wmh</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winminwidth"</literal></expr>, <expr><literal type="string">"wmw"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wmw</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winptydll"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_STRING</name><operator>|</operator><name>P_EXPAND</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_SECURE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_winptydll</name></expr>, <expr><name>PV_NONE</name></expr>, <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"winpty64.dll"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"winpty32.dll"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winwidth"</literal></expr>, <expr><literal type="string">"wiw"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wiw</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">20L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wrap"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_RWIN</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VAR_WIN</name></expr>, <expr><name>PV_WRAP</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wrapmargin"</literal></expr>, <expr><literal type="string">"wm"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wm</name></expr>, <expr><name>PV_WM</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wrapscan"</literal></expr>, <expr><literal type="string">"ws"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ws</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"write"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_write</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"writeany"</literal></expr>, <expr><literal type="string">"wa"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wa</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"writebackup"</literal></expr>, <expr><literal type="string">"wb"</literal></expr>, <expr><name>P_BOOL</name><operator>|</operator><name>P_VI_DEF</name><operator>|</operator><name>P_VIM</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wb</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WRITEBACKUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TRUE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FALSE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"writedelay"</literal></expr>, <expr><literal type="string">"wd"</literal></expr>, <expr><name>P_NUM</name><operator>|</operator><name>P_VI_DEF</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_wd</name></expr>, <expr><name>PV_NONE</name></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">0L</literal></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_term</name><parameter_list>(<parameter><type><name>sss</name></type></parameter>, <parameter><type><name>vvv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{sss, NULL, P_STRING|P_VI_DEF|P_RALL|P_SECURE, (char_u *)&amp;vvv, PV_NONE, {(char_u *)"", (char_u *)0L} SCTX_INIT},</cpp:value></cpp:define>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_AB"</literal></argument>, <argument>T_CAB</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_AF"</literal></argument>, <argument>T_CAF</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_AL"</literal></argument>, <argument>T_CAL</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_al"</literal></argument>, <argument>T_AL</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_bc"</literal></argument>, <argument>T_BC</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_BE"</literal></argument>, <argument>T_BE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_BD"</literal></argument>, <argument>T_BD</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_cd"</literal></argument>, <argument>T_CD</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ce"</literal></argument>, <argument>T_CE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_cl"</literal></argument>, <argument>T_CL</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_cm"</literal></argument>, <argument>T_CM</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_Ce"</literal></argument>, <argument>T_UCE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_Co"</literal></argument>, <argument>T_CCO</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_CS"</literal></argument>, <argument>T_CCS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_Cs"</literal></argument>, <argument>T_UCS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_cs"</literal></argument>, <argument>T_CS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_CV"</literal></argument>, <argument>T_CSV</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_da"</literal></argument>, <argument>T_DA</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_db"</literal></argument>, <argument>T_DB</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_DL"</literal></argument>, <argument>T_CDL</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_dl"</literal></argument>, <argument>T_DL</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_EC"</literal></argument>, <argument>T_CEC</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_EI"</literal></argument>, <argument>T_CEI</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_fs"</literal></argument>, <argument>T_FS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_GP"</literal></argument>, <argument>T_CGP</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_IE"</literal></argument>, <argument>T_CIE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_IS"</literal></argument>, <argument>T_CIS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ke"</literal></argument>, <argument>T_KE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ks"</literal></argument>, <argument>T_KS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_le"</literal></argument>, <argument>T_LE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_mb"</literal></argument>, <argument>T_MB</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_md"</literal></argument>, <argument>T_MD</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_me"</literal></argument>, <argument>T_ME</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_mr"</literal></argument>, <argument>T_MR</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ms"</literal></argument>, <argument>T_MS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_nd"</literal></argument>, <argument>T_ND</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_op"</literal></argument>, <argument>T_OP</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_RF"</literal></argument>, <argument>T_RFG</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_RB"</literal></argument>, <argument>T_RBG</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_RC"</literal></argument>, <argument>T_CRC</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_RI"</literal></argument>, <argument>T_CRI</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_Ri"</literal></argument>, <argument>T_SRI</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_RS"</literal></argument>, <argument>T_CRS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_RT"</literal></argument>, <argument>T_CRT</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_RV"</literal></argument>, <argument>T_CRV</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_Sb"</literal></argument>, <argument>T_CSB</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_SC"</literal></argument>, <argument>T_CSC</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_se"</literal></argument>, <argument>T_SE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_Sf"</literal></argument>, <argument>T_CSF</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_SH"</literal></argument>, <argument>T_CSH</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_SI"</literal></argument>, <argument>T_CSI</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_Si"</literal></argument>, <argument>T_SSI</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_so"</literal></argument>, <argument>T_SO</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_SR"</literal></argument>, <argument>T_CSR</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_sr"</literal></argument>, <argument>T_SR</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ST"</literal></argument>, <argument>T_CST</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_Te"</literal></argument>, <argument>T_STE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_te"</literal></argument>, <argument>T_TE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_TE"</literal></argument>, <argument>T_CTE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ti"</literal></argument>, <argument>T_TI</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_TI"</literal></argument>, <argument>T_CTI</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_Ts"</literal></argument>, <argument>T_STS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ts"</literal></argument>, <argument>T_TS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_u7"</literal></argument>, <argument>T_U7</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ue"</literal></argument>, <argument>T_UE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_us"</literal></argument>, <argument>T_US</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ut"</literal></argument>, <argument>T_UT</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_vb"</literal></argument>, <argument>T_VB</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ve"</literal></argument>, <argument>T_VE</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_vi"</literal></argument>, <argument>T_VI</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_VS"</literal></argument>, <argument>T_CVS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_vs"</literal></argument>, <argument>T_VS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_WP"</literal></argument>, <argument>T_CWP</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_WS"</literal></argument>, <argument>T_CWS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_xn"</literal></argument>, <argument>T_XN</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_xs"</literal></argument>, <argument>T_XS</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ZH"</literal></argument>, <argument>T_CZH</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_ZR"</literal></argument>, <argument>T_CZR</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_8f"</literal></argument>, <argument>T_8F</argument>)</argument_list></macro>

<macro><name>p_term</name><argument_list>(<argument><literal type="string">"t_8b"</literal></argument>, <argument>T_8B</argument>)</argument_list></macro>

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>PV_NONE</name></expr>, <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block> <name>SCTX_INIT</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTION_COUNT</name></cpp:macro> <cpp:value>(sizeof(options) / sizeof(struct vimoption))</cpp:value></cpp:define>

</unit>
