<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\profiler.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>profile_start</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>profile_end</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>now</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>QuadPart</name></name> <operator>-</operator> <name><name>tm</name><operator>-&gt;</operator><name>QuadPart</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>+=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>profile_sub</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>-=</operator> <name><name>tm2</name><operator>-&gt;</operator><name>QuadPart</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-=</operator> <name><name>tm2</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-=</operator> <name><name>tm2</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>+=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>profile_msg</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>fr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%10.6lf"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>tm</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>fr</name><operator>.</operator><name>QuadPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%3ld.%06ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>float_T</name></type>

<name>profile_float</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>fr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>float_T</name><operator>)</operator><name><name>tm</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>/</operator> <operator>(</operator><name>float_T</name><operator>)</operator><name><name>fr</name><operator>.</operator><name>QuadPart</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><name>float_T</name><operator>)</operator><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>+</operator> <operator>(</operator><name>float_T</name><operator>)</operator><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000.0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>profile_setlimit</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>msec</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>fr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>+=</operator> <operator>(</operator><name>LONGLONG</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>msec</name> <operator>/</operator> <literal type="number">1000.0</literal> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>fr</name><operator>.</operator><name>QuadPart</name></name><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>long</name></type> <name>usec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>usec</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator><name>msec</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <name>usec</name> <operator>%</operator> <literal type="number">1000000L</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>+=</operator> <name>usec</name> <operator>/</operator> <literal type="number">1000000L</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>profile_passed_limit</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>now</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>now</name><operator>.</operator><name>QuadPart</name></name> <operator>&gt;</operator> <name><name>tm</name><operator>-&gt;</operator><name>QuadPart</name></name><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name>

<operator>||</operator> <operator>(</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&amp;&amp;</operator> <name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>&gt;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>)</operator><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>profile_zero</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>profile_divide</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><name>tm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tm2</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>/</operator> <name>count</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>double</name></type> <name>usec</name> <init>= <expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000.0</literal> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <name>count</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tm2</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>usec</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm2</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <call><name>vim_round</name><argument_list>(<argument><expr><name>usec</name> <operator>-</operator> <operator>(</operator><name><name>tm2</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>proftime_T</name></type> <name>prof_wait_time</name></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>profile_add</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>+=</operator> <name><name>tm2</name><operator>-&gt;</operator><name>QuadPart</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>+=</operator> <name><name>tm2</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>+=</operator> <name><name>tm2</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&gt;=</operator> <literal type="number">1000000</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>profile_self</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>total</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>children</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>total</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>&lt;=</operator> <name><name>children</name><operator>-&gt;</operator><name>QuadPart</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>total</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&lt;</operator> <name><name>children</name><operator>-&gt;</operator><name>tv_sec</name></name>

<operator>||</operator> <operator>(</operator><name><name>total</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>==</operator> <name><name>children</name><operator>-&gt;</operator><name>tv_sec</name></name>

<operator>&amp;&amp;</operator> <name><name>total</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&lt;=</operator> <name><name>children</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>profile_add</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_sub</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>profile_get_wait</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tm</name> <operator>=</operator> <name>prof_wait_time</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>profile_sub_wait</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>tm3</name> <init>= <expr><name>prof_wait_time</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>profile_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm3</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_sub</name><argument_list>(<argument><expr><name>tma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>profile_equal</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm1</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name><name>tm1</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>==</operator> <name><name>tm2</name><operator>-&gt;</operator><name>QuadPart</name></name><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><name><name>tm1</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>==</operator> <name><name>tm2</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&amp;&amp;</operator> <name><name>tm1</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>==</operator> <name><name>tm2</name><operator>-&gt;</operator><name>tv_sec</name></name><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>profile_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>proftime_T</name> <modifier>*</modifier></type><name>tm1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>proftime_T</name> <modifier>*</modifier></type><name>tm2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>tm2</name><operator>-&gt;</operator><name>QuadPart</name></name> <operator>-</operator> <name><name>tm1</name><operator>-&gt;</operator><name>QuadPart</name></name><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>tm1</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>==</operator> <name><name>tm2</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>tm2</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>tm1</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>tm2</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>tm1</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>profile_fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>proftime_T</name></type> <name>pause_time</name></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>ex_profile</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>e</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>profile_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>profile_fname</name> <operator>=</operator> <call><name>expand_env_save_opt</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_profiling</name> <operator>=</operator> <name>PROF_YES</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prof_wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_PROFILING</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>do_profiling</name> <operator>==</operator> <name>PROF_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E750: First use \":profile start {fname}\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"pause"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_profiling</name> <operator>==</operator> <name>PROF_YES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pause_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>do_profiling</name> <operator>=</operator> <name>PROF_PAUSED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"continue"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_profiling</name> <operator>==</operator> <name>PROF_PAUSED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pause_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prof_wait_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pause_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>do_profiling</name> <operator>=</operator> <name>PROF_YES</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ex_breakadd</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<enum><specifier>static</specifier> enum

<block>{

<decl><name>PEXP_SUBCMD</name></decl>, 

<decl><name>PEXP_FUNC</name></decl> 

}</block> <decl><name>pexpand_what</name></decl>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>pexpand_cmds</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"start"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFCMD_START</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<expr><literal type="string">"pause"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFCMD_PAUSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<expr><literal type="string">"continue"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFCMD_CONTINUE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<expr><literal type="string">"func"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFCMD_FUNC</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<expr><literal type="string">"file"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFCMD_FILE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<expr><name>NULL</name></expr>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFCMD_LAST</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_profile_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>pexpand_what</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>PEXP_SUBCMD</name></expr>:</case>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>pexpand_cmds</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>set_context_in_profile_cmd</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end_subcmd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_PROFILE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pexpand_what</name> <operator>=</operator> <name>PEXP_SUBCMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_subcmd</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end_subcmd</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_subcmd</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_FILES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>end_subcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>proftime_T</name></type> <name>inchar_time</name></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>prof_inchar_enter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inchar_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>prof_inchar_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inchar_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prof_wait_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inchar_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>prof_def_func</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>sn_pr_force</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>prof_func_line</name><parameter_list>(

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>total</name></decl></parameter>,

<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prefer_self</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%5d "</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefer_self</name> <operator>&amp;&amp;</operator> <call><name>profile_equal</name><argument_list>(<argument><expr><name>total</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prefer_self</name> <operator>&amp;&amp;</operator> <call><name>profile_equal</name><argument_list>(<argument><expr><name>total</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>prof_sort_list</name><parameter_list>(

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,

<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>sorttab</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>st_len</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prefer_self</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"FUNCTIONS SORTED ON %s TIME\n"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"count total (s) self (s) function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>st_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>sorttab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prof_func_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_count</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_total</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_self</name></name></expr></argument>,

<argument><expr><name>prefer_self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" &lt;SNR&gt;%s()\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" %s()\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>prof_total_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s2</name></expr>;</expr_stmt>

<return>return <expr><call><name>profile_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p1</name><operator>-&gt;</operator><name>uf_tm_total</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p2</name><operator>-&gt;</operator><name>uf_tm_total</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>prof_self_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ufunc_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s2</name></expr>;</expr_stmt>

<return>return <expr><call><name>profile_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p1</name><operator>-&gt;</operator><name>uf_tm_self</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p2</name><operator>-&gt;</operator><name>uf_tm_self</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>func_do_profile</name><parameter_list>(<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>uf_lines</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_prof_initialized</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_count</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_count</name></name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_total</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_total</name></name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>proftime_T</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_self</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_self</name></name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>proftime_T</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_count</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_tml_total</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_tml_self</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_prof_initialized</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>prof_child_enter</name><parameter_list>(

<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><call><name>get_current_funccal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fc</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_profiling</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>script_prof_save</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>prof_child_exit</name><parameter_list>(

<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><call><name>get_current_funccal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fc</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_profiling</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_sub_wait</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>profile_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_tm_children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>uf_tml_children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fc</name><operator>-&gt;</operator><name>prof_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>script_prof_restore</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>func_line_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fcp</name> <init>= <expr><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>fcp</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name> <operator>&amp;&amp;</operator> <name>SOURCING_LNUM</name> <operator>&gt;=</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>SOURCING_LNUM</name> <operator>&lt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_lines</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>=</operator> <name>SOURCING_LNUM</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FUNCLINE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_execed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_get_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>func_line_exec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fcp</name> <init>= <expr><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>fcp</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_execed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>func_line_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>funccall_T</name> <modifier>*</modifier></type><name>fcp</name> <init>= <expr><operator>(</operator><name>funccall_T</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>fcp</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_profiling</name></name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_execed</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_count</name><index>[<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_sub_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_total</name><index>[<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_self</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_self</name><index>[<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_start</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>func_dump_profile</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>functbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>sorttab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>st_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>functbl</name> <operator>=</operator> <call><name>func_tbl_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>functbl</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>sorttab</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>ufunc_T</name> <operator>*</operator></expr></argument>, <argument><expr><name>todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>functbl</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>HI2UF</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_prof_initialized</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sorttab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sorttab</name><index>[<expr><name>st_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"FUNCTION &lt;SNR&gt;%s()\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"FUNCTION %s()\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>home_replace_save</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>get_scriptname</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" Defined: %s:%ld\n"</literal></expr></argument>,

<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_script_ctx</name><operator>.</operator><name>sc_lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Called 1 time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Called %d times\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Total time: %s\n"</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_total</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" Self time: %s\n"</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tm_self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"count total (s) self (s)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>uf_lines</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FUNCLINE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prof_func_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_count</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_total</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>uf_tml_self</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>FUNCLINE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sorttab</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>st_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sorttab</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>st_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ufunc_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>prof_total_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prof_sort_list</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sorttab</name></expr></argument>, <argument><expr><name>st_len</name></expr></argument>, <argument><expr><literal type="string">"TOTAL"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sorttab</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>st_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ufunc_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>prof_self_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prof_sort_list</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sorttab</name></expr></argument>, <argument><expr><name>st_len</name></expr></argument>, <argument><expr><literal type="string">"SELF"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sorttab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>script_do_profile</name><parameter_list>(<parameter><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>sn_pr_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_pr_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_pr_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_ga</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sn_prl_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>sn_prl_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>sn_prof_on</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>sn_pr_nest</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>script_prof_save</name><parameter_list>(

<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&lt;=</operator> <name><name>script_items</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>sn_prof_on</name></name> <operator>&amp;&amp;</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_pr_nest</name></name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_pr_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>profile_get_wait</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>script_prof_restore</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&lt;=</operator> <name><name>script_items</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>sn_prof_on</name></name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>si</name><operator>-&gt;</operator><name>sn_pr_nest</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_pr_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_sub_wait</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_pr_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>profile_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_pr_children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_pr_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_pr_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>script_dump_profile</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>sfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sn_prl_T</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;=</operator> <name><name>script_items</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>id</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>sn_prof_on</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"SCRIPT %s\n"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>sn_pr_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Sourced 1 time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Sourced %d times\n"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_pr_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Total time: %s\n"</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_pr_total</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" Self time: %s\n"</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_pr_self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"count total (s) self (s)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sfd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>si</name><operator>-&gt;</operator><name>sn_name</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sfd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"Cannot open file!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_fgets</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><name>sfd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>IObuff</name><index>[<expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>IObuff</name><index>[<expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>IObuff</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <call><name>mb_head_off</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IObuff</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_prl_ga</name><operator>.</operator><name>ga_len</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name>PRL_ITEM</name><operator>(</operator><name>si</name>, <name>i</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>snp_count</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%5d "</literal></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>snp_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>profile_equal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>sn_prl_total</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>sn_prl_self</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>sn_prl_total</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>sn_prl_self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>sfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>profile_dump</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>profile_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>profile_fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>profile_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>script_dump_profile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_dump_profile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>script_line_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sn_prl_T</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&gt;</operator> <name><name>script_items</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>sn_prof_on</name></name> <operator>&amp;&amp;</operator> <name>SOURCING_LNUM</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_ga</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>SOURCING_LNUM</name> <operator>-</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_prl_ga</name><operator>.</operator><name>ga_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>sn_prl_idx</name></name> <operator>=</operator> <name>SOURCING_LNUM</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>sn_prl_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&lt;=</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_prl_idx</name></name>

<operator>&amp;&amp;</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_prl_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_prl_ga</name><operator>.</operator><name>ga_maxlen</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><call><name>PRL_ITEM</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_prl_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>snp_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>sn_prl_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>sn_prl_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>sn_prl_execed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_get_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>script_line_exec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&gt;</operator> <name><name>script_items</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>sn_prof_on</name></name> <operator>&amp;&amp;</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_prl_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>sn_prl_execed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>script_line_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sn_prl_T</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&gt;</operator> <name><name>script_items</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>sn_prof_on</name></name> <operator>&amp;&amp;</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_prl_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_prl_idx</name></name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_prl_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>sn_prl_execed</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><call><name>PRL_ITEM</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_prl_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>pp</name><operator>-&gt;</operator><name>snp_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_sub_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>sn_prl_total</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_self</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>sn_prl_self</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_start</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_prl_children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>sn_prl_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
