<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\gui_w32.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_dwrite.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>DWriteContext</name> <modifier>*</modifier></type><name>s_dwc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_directx_enabled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_directx_load_attempted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ENABLE_DIRECTX</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(s_directx_enabled &amp;&amp; s_dwc != NULL &amp;&amp; enc_utf8)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>directx_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>directx_binddc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gui_mswin_get_menu_height</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fix_window</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RENDER_OPTIONS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>gui_mch_set_rendering_options</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dx_enable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dx_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx_gamma</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx_contrast</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx_level</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dx_geom</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dx_renmode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dx_taamode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>item</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>value</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>&amp;</operator><name><name>item</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"directx"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dx_enable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dx_flags</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dx_gamma</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>atof</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"contrast"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dx_flags</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dx_contrast</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>atof</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dx_flags</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dx_level</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>atof</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"geom"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dx_flags</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dx_geom</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dx_geom</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>dx_geom</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"renmode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dx_flags</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dx_renmode</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dx_renmode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>dx_renmode</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"taamode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dx_flags</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dx_taamode</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dx_taamode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>dx_taamode</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"scrlines"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>dx_enable</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>directx_enabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DWriteContext_SetRenderingParams</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dx_flags</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWriteRenderingParams</name></type> <name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DWriteContext_GetRenderingParams</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dx_flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>gamma</name></name> <operator>=</operator> <name>dx_gamma</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dx_flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>enhancedContrast</name></name> <operator>=</operator> <name>dx_contrast</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dx_flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>clearTypeLevel</name></name> <operator>=</operator> <name>dx_level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dx_flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>pixelGeometry</name></name> <operator>=</operator> <name>dx_geom</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dx_flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>renderingMode</name></name> <operator>=</operator> <name>dx_renmode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dx_flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>textAntialiasMode</name></name> <operator>=</operator> <name>dx_taamode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DWriteContext_SetRenderingParams</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s_directx_enabled</name> <operator>=</operator> <name>dx_enable</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>FAIL</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_XBUTTONUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_XBUTTONUP</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_XBUTTONDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_XBUTTONDOWN</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), FALSE, (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_XBUTTONDBLCLK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_XBUTTONDBLCLK</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), TRUE, (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tchar.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commctrl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windowsx.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLOBAL_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glbl_ime.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENUHINTS</name></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_PADDING_X</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_PADDING_Y</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_OLD_STYLE_PADDING_X</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_OLD_STYLE_PADDING_Y</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_VERT_PADDING_X</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_VERT_PADDING_Y</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_ICON_WIDTH</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_ICON_HEIGHT</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_MIN_WIDTH</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_FONT_NAME</name></cpp:macro> <cpp:value>"MS Sans Serif"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_FONT_POINT_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_MIN_MAX_WIDTH</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_MIN_MAX_HEIGHT</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_NONBUTTON_CONTROL</name></cpp:macro> <cpp:value>5000</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WM_XBUTTONDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_XBUTTONDOWN</name></cpp:macro> <cpp:value>0x020B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_XBUTTONUP</name></cpp:macro> <cpp:value>0x020C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_XBUTTONDBLCLK</name></cpp:macro> <cpp:value>0x020D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MK_XBUTTON1</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MK_XBUTTON2</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALLBACK</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAR</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEAR</name></cpp:macro></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_cdecl</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_cdecl</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>BOOL</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>BYTE</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>DWORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>WCHAR</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>ENUMLOGFONT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>FINDREPLACE</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HANDLE</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HBITMAP</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HBRUSH</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HDROP</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>INT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name><name>LOGFONTW</name><index>[]</index></name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPARAM</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPCREATESTRUCT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPCSTR</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPCTSTR</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPRECT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPSTR</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPWINDOWPOS</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPWORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LRESULT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HRESULT</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MSG</name></cpp:undef>

<typedef>typedef <type><name>int</name></type> <name>MSG</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>NEWTEXTMETRIC</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>OSVERSIONINFO</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>PWORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>RECT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>UINT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>WORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>WPARAM</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>POINT</name>;</typedef>

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>HINSTANCE</name>;</typedef>

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>HMENU</name>;</typedef>

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>HWND</name>;</typedef>

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>HDC</name>;</typedef>

<typedef>typedef <type><name>void</name></type> <name>VOID</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPNMHDR</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LONG</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>WNDPROC</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>UINT_PTR</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>COLORREF</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HCURSOR</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GET_X_LPARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_X_LPARAM</name><parameter_list>(<parameter><type><name>lp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(short)LOWORD(lp))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_OnPaint</name><parameter_list>( <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fill_rect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>, <parameter><decl><type><name>HBRUSH</name></type> <name>hbr</name></decl></parameter>, <parameter><decl><type><name>COLORREF</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clear_rect</name><parameter_list>(<parameter><decl><type><name>RECT</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>WORD</name></type> <name>s_dlgfntheight</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>WORD</name></type> <name>s_dlgfntwidth</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>HMENU</name></type> <name>s_menuBar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rebuild_tearoff</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>HBITMAP</name></type> <name>s_htearbitmap</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_busy_processing</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>destroying</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN_FIND_REPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>UINT</name></type> <name>s_findrep_msg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>FINDREPLACEW</name></type> <name>s_findrep_struct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HWND</name></type> <name>s_findrep_hwnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_findrep_is_find</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>HWND</name></type> <name>s_hwnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HDC</name></type> <name>s_hdc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HBRUSH</name></type> <name>s_brush</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>HWND</name></type> <name>s_toolbarhwnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>WNDPROC</name></type> <name>s_toolbar_wndproc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>HWND</name></type> <name>s_tabhwnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>WNDPROC</name></type> <name>s_tabline_wndproc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>showing_tabline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>WPARAM</name></type> <name>s_wParam</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>LPARAM</name></type> <name>s_lParam</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HWND</name></type> <name>s_textArea</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>UINT</name></type> <name>s_uMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s_textfield</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_need_activate</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>allow_scrollbar</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLOBAL_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MyTranslateMessage</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>global_ime_TranslateMessage(x)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MyTranslateMessage</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TranslateMessage(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>directx_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s_dwc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>s_directx_load_attempted</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DWrite_Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_directx_load_attempted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s_dwc</name> <operator>=</operator> <call><name>DWriteContext_Open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>directx_binddc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>s_dwc</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>directx_binddc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s_textArea</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DWriteContext_BindDC</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>, <argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MyWindowProc</name></cpp:macro> <cpp:value>vim_WindowProc</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>current_font_height</name></decl>;</decl_stmt> 

<struct><specifier>static</specifier> struct

<block>{

<decl_stmt><decl><type><name>UINT</name></type> <name>key_sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>vim_code0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>vim_code1</name></decl>;</decl_stmt>

}</block> <decl><name><name>special_keys</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>VK_UP</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'u'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_DOWN</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_LEFT</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_RIGHT</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'r'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F1</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F2</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'2'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F3</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F4</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F5</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F6</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F7</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F8</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F9</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F10</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">';'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F11</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F12</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'2'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F13</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F14</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F15</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F16</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F17</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F18</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F19</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F20</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'A'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F21</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'B'</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VK_PAUSE</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'B'</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>VK_F22</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'C'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F23</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_F24</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'E'</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>VK_HELP</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_BACK</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'b'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_INSERT</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'I'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_DELETE</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_HOME</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_END</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_PRIOR</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_NEXT</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'N'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_PRINT</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_ADD</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_SUBTRACT</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_DIVIDE</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_MULTIPLY</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_SEPARATOR</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'A'</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>VK_DECIMAL</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'B'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_NUMPAD0</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'C'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_NUMPAD1</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_NUMPAD2</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'E'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_NUMPAD3</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'F'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_NUMPAD4</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'G'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_NUMPAD5</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'H'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_NUMPAD6</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'I'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_NUMPAD7</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'J'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_NUMPAD8</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'K'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_NUMPAD9</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VK_SPACE</name></expr>, <expr><literal type="char">' '</literal></expr>, <expr><name>NUL</name></expr>}</block></expr>,

<expr><block>{<expr><name>VK_TAB</name></expr>, <expr><name>TAB</name></expr>, <expr><name>NUL</name></expr>}</block></expr>,

<expr><block>{<expr><name>VK_ESCAPE</name></expr>, <expr><name>ESC</name></expr>, <expr><name>NUL</name></expr>}</block></expr>,

<expr><block>{<expr><name>NL</name></expr>, <expr><name>NL</name></expr>, <expr><name>NUL</name></expr>}</block></expr>,

<expr><block>{<expr><name>CAR</name></expr>, <expr><name>CAR</name></expr>, <expr><name>NUL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_button_pending</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_getting_focus</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_x_pending</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_y_pending</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>UINT</name></type> <name>s_kFlags_pending</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>UINT</name></type> <name>s_wait_timer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_timed_out</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dead_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>UINT</name></type> <name>surrogate_pending_ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Handle_WM_Notify</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>LPNMHDR</name></type> <name>pnmh</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TrackUserActivity</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLOBAL_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>LOGFONTW</name></type> <name>norm_logfont</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>LOGFONTW</name></type> <name>sub_logfont</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>LRESULT</name></type> <name>_OnImeNotify</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>dwCommand</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>dwData</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>convert_filter</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PRINT_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>print_windows_error</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpMsgBuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> <operator>|</operator> <name>FORMAT_MESSAGE_FROM_SYSTEM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_NEUTRAL</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>LPTSTR</name><operator>)</operator> <operator>&amp;</operator><name>lpMsgBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACE1</name><argument_list>(<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><name>lpMsgBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>lpMsgBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLINK_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLINK_OFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLINK_ON</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>blink_state</name> <init>= <expr><name>BLINK_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_waittime</name> <init>= <expr><literal type="number">700</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_ontime</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_offtime</name> <init>= <expr><literal type="number">250</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>UINT</name></type> <name>blink_timer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>gui_mch_is_blinking</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>blink_state</name> <operator>!=</operator> <name>BLINK_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_is_blink_off</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>blink_state</name> <operator>==</operator> <name>BLINK_OFF</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_blinking</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>on</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>blink_waittime</name> <operator>=</operator> <name>wait</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_ontime</name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_offtime</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VOID</name> <name>CALLBACK</name></type>

<name>_OnBlinkTimer</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>UINT</name> <name>uMsg</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>idEvent</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name> <name>dwTime</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>KillTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>idEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>pPeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_TIMER</name></expr></argument>, <argument><expr><name>WM_TIMER</name></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>==</operator> <name>BLINK_ON</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_undraw_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_OFF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <operator>(</operator><name>UINT</name><operator>)</operator> <call><name>SetTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>blink_offtime</name></expr></argument>,

<argument><expr><operator>(</operator><name>TIMERPROC</name><operator>)</operator><name>_OnBlinkTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_ON</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <operator>(</operator><name>UINT</name><operator>)</operator> <call><name>SetTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>blink_ontime</name></expr></argument>,

<argument><expr><operator>(</operator><name>TIMERPROC</name><operator>)</operator><name>_OnBlinkTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mswin_rm_blink_timer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blink_timer</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>KillTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>blink_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>pPeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>WM_TIMER</name></expr></argument>, <argument><expr><name>WM_TIMER</name></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_stop_blink</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>may_call_gui_update_cursor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mswin_rm_blink_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>==</operator> <name>BLINK_OFF</name> <operator>&amp;&amp;</operator> <name>may_call_gui_update_cursor</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_NONE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_start_blink</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mswin_rm_blink_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blink_waittime</name> <operator>&amp;&amp;</operator> <name>blink_ontime</name> <operator>&amp;&amp;</operator> <name>blink_offtime</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <operator>(</operator><name>UINT</name><operator>)</operator><call><name>SetTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>blink_waittime</name></expr></argument>,

<argument><expr><operator>(</operator><name>TIMERPROC</name><operator>)</operator><name>_OnBlinkTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_ON</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VOID</name> <name>CALLBACK</name></type>

<name>_OnTimer</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>UINT</name> <name>uMsg</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>idEvent</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name> <name>dwTime</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>KillTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>idEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_timed_out</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>pPeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_TIMER</name></expr></argument>, <argument><expr><name>WM_TIMER</name></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>idEvent</name> <operator>==</operator> <name>s_wait_timer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s_wait_timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnDeadChar</name><parameter_list>(

<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>UINT</name> <name>ch</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>cRepeat</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>dead_key</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>char_to_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>had_alt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wstring</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>surrogate_pending_ch</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>wstring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>surrogate_pending_ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wstring</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>surrogate_pending_ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0xD800</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">0xDBFF</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>surrogate_pending_ch</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>wstring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_codepage</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>enc_codepage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wstring</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>string</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>had_alt</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>wstring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ch</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>enc_codepage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wstring</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>string</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ws</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>wstring</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ws</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>slen</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CSI</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <name>slen</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>string</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnChar</name><parameter_list>(

<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>ch</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>cRepeat</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>string</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dead_key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>char_to_string</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>Ctrl_C</name> <operator>&amp;&amp;</operator> <name>ctrl_c_interrupts</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>trash_input_buf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnSysChar</name><parameter_list>(

<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>cch</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>cRepeat</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>string</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name>cch</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>dead_key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <name>MOD_MASK_ALT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_SHIFT</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_CONTROL</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>simplify_key</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isprint</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>extract_modifiers</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CSI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>K_CSI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>char_to_string</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>string</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">40</literal> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnMouseEvent</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>repeated_click</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>keyFlags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vim_modifiers</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s_getting_focus</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyFlags</name> <operator>&amp;</operator> <name>MK_SHIFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vim_modifiers</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keyFlags</name> <operator>&amp;</operator> <name>MK_CONTROL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vim_modifiers</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vim_modifiers</name> <operator>|=</operator> <name>MOUSE_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>repeated_click</name></expr></argument>, <argument><expr><name>vim_modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnMouseButtonDown</name><parameter_list>(

<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name> <name>fDoubleClick</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>keyFlags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>LONG</name></type> <name>s_prevTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>currentTime</name> <init>= <expr><call><name>GetMessageTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>button</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>repeated_click</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFocus</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_uMsg</name> <operator>==</operator> <name>WM_LBUTTONDOWN</name> <operator>||</operator> <name>s_uMsg</name> <operator>==</operator> <name>WM_LBUTTONDBLCLK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>s_uMsg</name> <operator>==</operator> <name>WM_MBUTTONDOWN</name> <operator>||</operator> <name>s_uMsg</name> <operator>==</operator> <name>WM_MBUTTONDBLCLK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>s_uMsg</name> <operator>==</operator> <name>WM_RBUTTONDOWN</name> <operator>||</operator> <name>s_uMsg</name> <operator>==</operator> <name>WM_RBUTTONDBLCLK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>s_uMsg</name> <operator>==</operator> <name>WM_XBUTTONDOWN</name> <operator>||</operator> <name>s_uMsg</name> <operator>==</operator> <name>WM_XBUTTONDBLCLK</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GET_XBUTTON_WPARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_XBUTTON_WPARAM</name><parameter_list>(<parameter><type><name>wParam</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HIWORD(wParam))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>button</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>GET_XBUTTON_WPARAM</name><argument_list>(<argument><expr><name>s_wParam</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>MOUSE_X1</name></expr> </then><else>: <expr><name>MOUSE_X2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>s_uMsg</name> <operator>==</operator> <name>WM_CAPTURECHANGED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s_button_pending</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>repeated_click</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>currentTime</name> <operator>-</operator> <name>s_prevTime</name><operator>)</operator> <operator>&lt;</operator> <name>p_mouset</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>repeated_click</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>button</name> <operator>==</operator> <name>MOUSE_LEFT</name> <operator>&amp;&amp;</operator> <name>s_button_pending</name> <operator>==</operator> <name>MOUSE_RIGHT</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>button</name> <operator>==</operator> <name>MOUSE_RIGHT</name>

<operator>&amp;&amp;</operator> <name>s_button_pending</name> <operator>==</operator> <name>MOUSE_LEFT</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>MOUSE_RELEASE</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>repeated_click</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_button_pending</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_OnMouseEvent</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>repeated_click</name></expr></argument>, <argument><expr><name>keyFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>repeated_click</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><call><name>mouse_model_popup</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>button</name> <operator>==</operator> <name>MOUSE_RIGHT</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s_button_pending</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_OnMouseEvent</name><argument_list>(<argument><expr><name>s_button_pending</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>keyFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_button_pending</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_OnMouseEvent</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>repeated_click</name></expr></argument>, <argument><expr><name>keyFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>s_button_pending</name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_x_pending</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_y_pending</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_kFlags_pending</name> <operator>=</operator> <name>keyFlags</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s_prevTime</name> <operator>=</operator> <name>currentTime</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnMouseMoveOrRelease</name><parameter_list>(

<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>keyFlags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s_getting_focus</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_button_pending</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_OnMouseEvent</name><argument_list>(<argument><expr><name>s_button_pending</name></expr></argument>, <argument><expr><name>s_x_pending</name></expr></argument>,

<argument><expr><name>s_y_pending</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>s_kFlags_pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_button_pending</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s_uMsg</name> <operator>==</operator> <name>WM_MOUSEMOVE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>keyFlags</name> <operator>&amp;</operator> <operator>(</operator><name>MK_LBUTTON</name> <operator>|</operator> <name>MK_MBUTTON</name> <operator>|</operator> <name>MK_RBUTTON</name>

<operator>|</operator> <name>MK_XBUTTON1</name> <operator>|</operator> <name>MK_XBUTTON2</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mouse_moved</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetCapture</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_DRAG</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ReleaseCapture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_RELEASE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_OnMouseEvent</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>keyFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnSizeTextArea</name><parameter_list>(

<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>UINT</name> <name>state</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>cx</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>cy</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>directx_binddc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type>

<name>gui_mswin_find_menu</name><parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>pMenu</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>pChildMenu</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pMenu</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pMenu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <operator>(</operator><name>UINT</name><operator>)</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMenu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pChildMenu</name> <operator>=</operator> <call><name>gui_mswin_find_menu</name><argument_list>(<argument><expr><name><name>pMenu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pChildMenu</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pMenu</name> <operator>=</operator> <name>pChildMenu</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pMenu</name> <operator>=</operator> <name><name>pMenu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>pMenu</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnMenu</name><parameter_list>(

<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>HWND</name> <name>hwndCtl</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>UINT</name> <name>codeNotify</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>pMenu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pMenu</name> <operator>=</operator> <call><name>gui_mswin_find_menu</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pMenu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_menu_cb</name><argument_list>(<argument><expr><name>pMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN_FIND_REPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnFindRepl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>down</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s_findrep_struct</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>FR_DIALOGTERM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFocus</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s_findrep_struct</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>FR_FINDNEXT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>FRD_FINDNEXT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFocus</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s_findrep_struct</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>FR_REPLACE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>FRD_REPLACE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFocus</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s_findrep_struct</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>FR_REPLACEALL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>FRD_REPLACEALL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s_findrep_struct</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>FR_WHOLEWORD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FRD_WHOLE_WORD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s_findrep_struct</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>FR_MATCHCASE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FRD_MATCH_CASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>down</name> <operator>=</operator> <operator>(</operator><name><name>s_findrep_struct</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>FR_DOWN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name><name>s_findrep_struct</name><operator>.</operator><name>lpstrFindWhat</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name><name>s_findrep_struct</name><operator>.</operator><name>lpstrReplaceWith</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_do_findrepl</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>HandleMouseHide</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>LPARAM</name></type> <name>last_lParam</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uMsg</name> <operator>==</operator> <name>WM_MOUSEMOVE</name> <operator>||</operator> <name>uMsg</name> <operator>==</operator> <name>WM_NCMOUSEMOVE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lParam</name> <operator>==</operator> <name>last_lParam</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_lParam</name> <operator>=</operator> <name>lParam</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>uMsg</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>WM_KEYUP</name></expr>:</case>

<case>case <expr><name>WM_CHAR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>p_mh</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>WM_SYSKEYUP</name></expr>:</case> 

<case>case <expr><name>WM_SYSCHAR</name></expr>:</case>

<case>case <expr><name>WM_MOUSEMOVE</name></expr>:</case> 

<case>case <expr><name>WM_LBUTTONDOWN</name></expr>:</case>

<case>case <expr><name>WM_LBUTTONUP</name></expr>:</case>

<case>case <expr><name>WM_MBUTTONDOWN</name></expr>:</case>

<case>case <expr><name>WM_MBUTTONUP</name></expr>:</case>

<case>case <expr><name>WM_RBUTTONDOWN</name></expr>:</case>

<case>case <expr><name>WM_RBUTTONUP</name></expr>:</case>

<case>case <expr><name>WM_XBUTTONDOWN</name></expr>:</case>

<case>case <expr><name>WM_XBUTTONUP</name></expr>:</case>

<case>case <expr><name>WM_NCMOUSEMOVE</name></expr>:</case>

<case>case <expr><name>WM_NCLBUTTONDOWN</name></expr>:</case>

<case>case <expr><name>WM_NCLBUTTONUP</name></expr>:</case>

<case>case <expr><name>WM_NCMBUTTONDOWN</name></expr>:</case>

<case>case <expr><name>WM_NCMBUTTONUP</name></expr>:</case>

<case>case <expr><name>WM_NCRBUTTONDOWN</name></expr>:</case>

<case>case <expr><name>WM_NCRBUTTONUP</name></expr>:</case>

<case>case <expr><name>WM_KILLFOCUS</name></expr>:</case>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type>

<name>_TextAreaWndProc</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>,

<parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>HandleMouseHide</name><argument_list>(<argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_uMsg</name> <operator>=</operator> <name>uMsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_wParam</name> <operator>=</operator> <name>wParam</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_lParam</name> <operator>=</operator> <name>lParam</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>TrackUserActivity</name><argument_list>(<argument><expr><name>uMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>uMsg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_LBUTTONDBLCLK</name></expr></argument>,<argument><expr><name>_OnMouseButtonDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_LBUTTONDOWN</name></expr></argument>,<argument><expr><name>_OnMouseButtonDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_LBUTTONUP</name></expr></argument>, <argument><expr><name>_OnMouseMoveOrRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_MBUTTONDBLCLK</name></expr></argument>,<argument><expr><name>_OnMouseButtonDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_MBUTTONDOWN</name></expr></argument>,<argument><expr><name>_OnMouseButtonDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_MBUTTONUP</name></expr></argument>, <argument><expr><name>_OnMouseMoveOrRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_MOUSEMOVE</name></expr></argument>, <argument><expr><name>_OnMouseMoveOrRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_PAINT</name></expr></argument>, <argument><expr><name>_OnPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_RBUTTONDBLCLK</name></expr></argument>,<argument><expr><name>_OnMouseButtonDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_RBUTTONDOWN</name></expr></argument>,<argument><expr><name>_OnMouseButtonDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_RBUTTONUP</name></expr></argument>, <argument><expr><name>_OnMouseMoveOrRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_XBUTTONDBLCLK</name></expr></argument>,<argument><expr><name>_OnMouseButtonDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_XBUTTONDOWN</name></expr></argument>,<argument><expr><name>_OnMouseButtonDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_XBUTTONUP</name></expr></argument>, <argument><expr><name>_OnMouseMoveOrRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_SIZE</name></expr></argument>, <argument><expr><name>_OnSizeTextArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>WM_NOTIFY</name></expr>:</case> <expr_stmt><expr><call><name>Handle_WM_Notify</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>(</operator><name>LPNMHDR</name><operator>)</operator><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>WINAPI</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>LRESULT</name> <name>WINAPI</name></type>

<name>vim_WindowProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLOBAL_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>global_ime_DefWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>DefWindowProcW</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_new_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HBRUSH</name></type> <name>prevBrush</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s_brush</name> <operator>=</operator> <call><name>CreateSolidBrush</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prevBrush</name> <operator>=</operator> <operator>(</operator><name>HBRUSH</name><operator>)</operator><call><name>SetClassLongPtr</name><argument_list>(

<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>GCLP_HBRBACKGROUND</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator><name>s_brush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InvalidateRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>prevBrush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_def_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>=</operator> <call><name>GetSysColor</name><argument_list>(<argument><expr><name>COLOR_WINDOWTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>=</operator> <call><name>GetSysColor</name><argument_list>(<argument><expr><name>COLOR_WINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsWindowVisible</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>SW_SHOWDEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN_FIND_REPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>lpstrReplaceWith</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_get_winpos</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_winpos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOACTIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_text_area_pos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>oldx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>oldy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOACTIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>WM_SIZE</name></expr></argument>,

<argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>(</operator><name>w</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>TOOLBAR_BUTTON_HEIGHT</name><operator>+</operator><literal type="number">8</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>showing_tabline</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>TOOLBAR_BUTTON_HEIGHT</name> <operator>+</operator> <name>TOOLBAR_BORDER_HEIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MoveWindow</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>tabline_height</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>oldx</name> <operator>!=</operator> <name>x</name> <operator>||</operator> <name>oldy</name> <operator>!=</operator> <name>y</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InvalidateRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldy</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_enable_scrollbar</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ShowScrollBar</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>SB_CTL</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_scrollbar_pos</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOACTIVATE</name> <operator>|</operator> <name>SWP_SHOWWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_create_scrollbar</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>orient</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>CreateWindow</name><argument_list>(

<argument><expr><literal type="string">"SCROLLBAR"</literal></expr></argument>, <argument><expr><literal type="string">"Scrollbar"</literal></expr></argument>,

<argument><expr><name>WS_CHILD</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>orient</name> <operator>==</operator> <name>SBAR_VERT</name><operator>)</operator></expr> ?</condition><then> <expr><name>SBS_VERT</name></expr> </then><else>: <expr><name>SBS_HORZ</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">10</literal></expr></argument>, 

<argument><expr><literal type="number">10</literal></expr></argument>, 

<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>scrollbar_T</name> <modifier>*</modifier></type>

<name>gui_mswin_find_scrollbar</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>bottom_sbar</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>hwnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>bottom_sbar</name></name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>hwnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>hwnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>GetFontSize</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name> <init>= <expr><call><name>GetWindowDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HFONT</name></type> <name>hfntOld</name> <init>= <expr><call><name>SelectFont</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>(</operator><name>HFONT</name><operator>)</operator><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIZE</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TEXTMETRIC</name></type> <name>tm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTextMetrics</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetTextExtentPoint</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>,

<argument><expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</literal></expr></argument>,

<argument><expr><literal type="number">52</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>=</operator> <operator>(</operator><name><name>size</name><operator>.</operator><name>cx</name></name> <operator>/</operator> <literal type="number">26</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>tm</name><operator>.</operator><name>tmOverhang</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tmHeight</name></name> <operator>+</operator> <name>p_linespace</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectFont</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>hfntOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_adjust_charheight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>GetFontSize</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GuiFont</name></type>

<name>get_font_handle</name><parameter_list>(<parameter><decl><type><name>LOGFONTW</name> <modifier>*</modifier></type><name>lf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HFONT</name></type> <name>font</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>CreateFontIndirectW</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NOFONT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>GuiFont</name><operator>)</operator><name>font</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>pixels_to_points</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertical</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>points</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>GetWindowDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>points</name> <operator>=</operator> <call><name>MulDiv</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>,

<argument><expr><call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>vertical</name></expr> ?</condition><then> <expr><name>LOGPIXELSY</name></expr> </then><else>: <expr><name>LOGPIXELSX</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>points</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GuiFont</name></type>

<name>gui_mch_get_font</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>giveErrorIfMissing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOGFONTW</name></type> <name>lf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GuiFont</name></type> <name>font</name> <init>= <expr><name>NOFONT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_logfont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>giveErrorIfMissing</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>get_font_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NOFONT</name> <operator>&amp;&amp;</operator> <name>giveErrorIfMissing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_font</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>font</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_mch_get_fontname</name><parameter_list>(<parameter><decl><type><name>GuiFont</name> <name>font</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_free_font</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>font</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><operator>(</operator><name>HFONT</name><operator>)</operator><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>SysColorTable</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>

}</block></struct></type> <name>SysColorTable</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>SysColorTable</name></type> <name><name>sys_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"SYS_3DDKSHADOW"</literal></expr>, <expr><name>COLOR_3DDKSHADOW</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_3DHILIGHT"</literal></expr>, <expr><name>COLOR_3DHILIGHT</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLOR_3DHIGHLIGHT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"SYS_3DHIGHLIGHT"</literal></expr>, <expr><name>COLOR_3DHIGHLIGHT</name></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"SYS_BTNHILIGHT"</literal></expr>, <expr><name>COLOR_BTNHILIGHT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_BTNHIGHLIGHT"</literal></expr>, <expr><name>COLOR_BTNHIGHLIGHT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_3DLIGHT"</literal></expr>, <expr><name>COLOR_3DLIGHT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_3DSHADOW"</literal></expr>, <expr><name>COLOR_3DSHADOW</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_DESKTOP"</literal></expr>, <expr><name>COLOR_DESKTOP</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_INFOBK"</literal></expr>, <expr><name>COLOR_INFOBK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_INFOTEXT"</literal></expr>, <expr><name>COLOR_INFOTEXT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_3DFACE"</literal></expr>, <expr><name>COLOR_3DFACE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_BTNFACE"</literal></expr>, <expr><name>COLOR_BTNFACE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_BTNSHADOW"</literal></expr>, <expr><name>COLOR_BTNSHADOW</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_ACTIVEBORDER"</literal></expr>, <expr><name>COLOR_ACTIVEBORDER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_ACTIVECAPTION"</literal></expr>, <expr><name>COLOR_ACTIVECAPTION</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_APPWORKSPACE"</literal></expr>, <expr><name>COLOR_APPWORKSPACE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_BACKGROUND"</literal></expr>, <expr><name>COLOR_BACKGROUND</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_BTNTEXT"</literal></expr>, <expr><name>COLOR_BTNTEXT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_CAPTIONTEXT"</literal></expr>, <expr><name>COLOR_CAPTIONTEXT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_GRAYTEXT"</literal></expr>, <expr><name>COLOR_GRAYTEXT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_HIGHLIGHT"</literal></expr>, <expr><name>COLOR_HIGHLIGHT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_HIGHLIGHTTEXT"</literal></expr>, <expr><name>COLOR_HIGHLIGHTTEXT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_INACTIVEBORDER"</literal></expr>, <expr><name>COLOR_INACTIVEBORDER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_INACTIVECAPTION"</literal></expr>, <expr><name>COLOR_INACTIVECAPTION</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_INACTIVECAPTIONTEXT"</literal></expr>, <expr><name>COLOR_INACTIVECAPTIONTEXT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_MENU"</literal></expr>, <expr><name>COLOR_MENU</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_MENUTEXT"</literal></expr>, <expr><name>COLOR_MENUTEXT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_SCROLLBAR"</literal></expr>, <expr><name>COLOR_SCROLLBAR</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_WINDOW"</literal></expr>, <expr><name>COLOR_WINDOW</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_WINDOWFRAME"</literal></expr>, <expr><name>COLOR_WINDOWFRAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SYS_WINDOWTEXT"</literal></expr>, <expr><name>COLOR_WINDOWTEXT</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sys_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sys_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>sys_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GetSysColor</name><argument_list>(<argument><expr><name><name>sys_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><call><name>gui_get_color_cmn</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_rgb_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gui_get_rgb_color_cmn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_haskey</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name> <operator>&amp;&amp;</operator>

<name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_beep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MessageBeep</name><argument_list>(<argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_invert_rectangle</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DWriteContext_Flush</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name>nc</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>nr</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InvertRect</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_iconify</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>SW_MINIMIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_draw_hollow_cursor</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HBRUSH</name></type> <name>hbr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DWriteContext_Flush</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_lefthalve</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hbr</name> <operator>=</operator> <call><name>CreateSolidBrush</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FrameRect</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>hbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteBrush</name><argument_list>(<argument><expr><name>hbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_draw_part_cursor</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name>CURSOR_BAR_RIGHT</name></expr> ?</condition><then> <expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>w</name></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>outputDeadKey_rePost</name><parameter_list>(<parameter><decl><type><name>MSG</name></type> <name>originalMsg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>MSG</name></type> <name>deadCharExpel</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dead_key</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dead_key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deadCharExpel</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name><name>originalMsg</name><operator>.</operator><name>message</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deadCharExpel</name><operator>.</operator><name>hwnd</name></name> <operator>=</operator> <name><name>originalMsg</name><operator>.</operator><name>hwnd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deadCharExpel</name><operator>.</operator><name>wParam</name></name> <operator>=</operator> <name>VK_SPACE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MyTranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>deadCharExpel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name><name>originalMsg</name><operator>.</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name><name>originalMsg</name><operator>.</operator><name>message</name></name></expr></argument>, <argument><expr><name><name>originalMsg</name><operator>.</operator><name>wParam</name></name></expr></argument>,

<argument><expr><name><name>originalMsg</name><operator>.</operator><name>lParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>process_message</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>vk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>string</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>k10</name><index>[]</index></name> <init>= <expr><block>{<expr><name>K_SPECIAL</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">';'</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>pGetMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_OLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_OLE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>msg</name><operator>.</operator><name>lParam</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pDispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN_FIND_REPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>s_findrep_hwnd</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>pIsDialogMessage</name><argument_list>(<argument><expr><name>s_findrep_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>HandleMouseHide</name><argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>message</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>lParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_KEYDOWN</name> <operator>||</operator> <name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_SYSKEYDOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>vk</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>msg</name><operator>.</operator><name>wParam</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dead_key</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vk</name> <operator>==</operator> <name>VK_SPACE</name> <operator>||</operator> <name>vk</name> <operator>==</operator> <name>VK_BACK</name> <operator>||</operator> <name>vk</name> <operator>==</operator> <name>VK_ESCAPE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dead_key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MyTranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name> <operator>|</operator> <name>CMDLINE</name> <operator>|</operator> <name>SELECTMODE</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>outputDeadKey_rePost</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vk</name> <operator>==</operator> <name>VK_CANCEL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>trash_input_buf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctrl_break_was_pressed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>==</operator> <name>vk</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>vk</name> <operator>!=</operator> <name>VK_SPACE</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dead_key</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name> <operator>==</operator> <literal type="char">'K'</literal>

<operator>||</operator> <name>vk</name> <operator>==</operator> <name>VK_TAB</name> <operator>||</operator> <name>vk</name> <operator>==</operator> <name>CAR</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>outputDeadKey_rePost</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>vk</name> <operator>==</operator> <name>VK_F10</name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>menu_is_active</name></name>

<operator>&amp;&amp;</operator> <call><name>check_map</name><argument_list>(<argument><expr><name>k10</name></expr></argument>, <argument><expr><name>State</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_SHIFT</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_CONTROL</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name></expr></argument>,

<argument><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>simplify_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>CSI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>K_CSI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>char_to_string</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vk</name> <operator>!=</operator> <literal type="number">0xff</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_CONTROL</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_SHIFT</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vk</name> <operator>==</operator> <literal type="char">'6'</literal> <operator>||</operator> <call><name>MapVirtualKey</name><argument_list>(<argument><expr><name>vk</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>UINT</name><operator>)</operator><literal type="char">'^'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Ctrl_HAT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>vk</name> <operator>==</operator> <literal type="number">0xBD</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Ctrl__</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>vk</name> <operator>==</operator> <literal type="char">'2'</literal> <operator>||</operator> <call><name>MapVirtualKey</name><argument_list>(<argument><expr><name>vk</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>UINT</name><operator>)</operator><literal type="char">'@'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Ctrl_AT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MyTranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MyTranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_IME_NOTIFY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_OnImeNotify</name><argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>hwnd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name><name>msg</name><operator>.</operator><name>wParam</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name><name>msg</name><operator>.</operator><name>lParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_KEYUP</name> <operator>&amp;&amp;</operator> <call><name>im_get_status</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MyTranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLOBAL_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_IME_STARTCOMPOSITION</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>point</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>global_ime_set_font</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm_logfont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MapWindowPoints</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>global_ime_set_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>vk</name> <operator>!=</operator> <name>VK_F10</name> <operator>||</operator> <call><name>check_map</name><argument_list>(<argument><expr><name>k10</name></expr></argument>, <argument><expr><name>State</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>pDispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s_busy_processing</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>pPeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_NOREMOVE</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_is_input_buf_full</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>process_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>remove_any_timer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s_wait_timer</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>s_timed_out</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>KillTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s_wait_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>pPeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>WM_TIMER</name></expr></argument>, <argument><expr><name>WM_TIMER</name></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>s_wait_timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_wait_for_chars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>wtime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>focus</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s_timed_out</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wtime</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s_busy_processing</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s_wait_timer</name> <operator>=</operator> <operator>(</operator><name>UINT</name><operator>)</operator><call><name>SetTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>wtime</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>wtime</name></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>TIMERPROC</name><operator>)</operator><name>_OnTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>allow_scrollbar</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>focus</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>s_timed_out</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name> <operator>!=</operator> <name>focus</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_start_blink</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_stop_blink</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>focus</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s_need_activate</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_need_activate</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>did_add_timer</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MESSAGE_QUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parse_queued_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>did_add_timer</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>pPeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_NOREMOVE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>process_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>input_available</name><argument_list>()</argument_list></call>

<operator>||</operator> <call><name>MsgWaitForMultipleObjects</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>,

<argument><expr><name>QS_ALLINPUT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WAIT_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>process_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>input_available</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>remove_any_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>allow_scrollbar</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s_getting_focus</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s_button_pending</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>did_add_timer</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>remove_any_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></while>

<expr_stmt><expr><name>allow_scrollbar</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_clear_block</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>row1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>col2</name> <operator>==</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_clear_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>Columns</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name>Rows</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_enable_menu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetMenu</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>flag</name></expr> ?</condition><then> <expr><name>s_menuBar</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_menu_pos</name><parameter_list>(

<parameter><decl><type><name>int</name> <name>x</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>y</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>h</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_menu_hidden</name><parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hidden</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_menu_grey</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>hidden</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_draw_menubar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawMenuBar</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_rgb</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>pixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>GetRValue</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>GetGValue</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>

<operator>+</operator> <call><name>GetBValue</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>WORD</name></type>

<name>PixelToDialogX</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numPixels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><operator>(</operator><name>numPixels</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <name>s_dlgfntwidth</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WORD</name></type>

<name>PixelToDialogY</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numPixels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><operator>(</operator><name>numPixels</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <name>s_dlgfntheight</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>GetTextWidth</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SIZE</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTextExtentPoint</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>size</name><operator>.</operator><name>cx</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>GetTextWidthEnc</name><parameter_list>(<parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SIZE</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wlen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wstr</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>GetTextExtentPointW</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>wstr</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>size</name><operator>.</operator><name>cx</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_work_area</name><parameter_list>(<parameter><decl><type><name>RECT</name> <modifier>*</modifier></type><name>spi_rect</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>CenterWindow</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwndChild</name></decl></parameter>,

<parameter><decl><type><name>HWND</name></type> <name>hwndParent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HMONITOR</name></type> <name>mon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MONITORINFO</name></type> <name>moninfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rChild</name></decl>, <decl><type ref="prev"/><name>rParent</name></decl>, <decl><type ref="prev"/><name>rScreen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wChild</name></decl>, <decl><type ref="prev"/><name>hChild</name></decl>, <decl><type ref="prev"/><name>wParent</name></decl>, <decl><type ref="prev"/><name>hParent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xNew</name></decl>, <decl><type ref="prev"/><name>yNew</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>hwndChild</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wChild</name> <operator>=</operator> <name><name>rChild</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rChild</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hChild</name> <operator>=</operator> <name><name>rChild</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rChild</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hwndParent</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>IsMinimized</name><argument_list>(<argument><expr><name>hwndParent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_work_area</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>hwndParent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>wParent</name> <operator>=</operator> <name><name>rParent</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rParent</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hParent</name> <operator>=</operator> <name><name>rParent</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rParent</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>moninfo</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MONITORINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>MonitorFromWindow</name><argument_list>(<argument><expr><name>hwndChild</name></expr></argument>, <argument><expr><name>MONITOR_DEFAULTTOPRIMARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mon</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>GetMonitorInfo</name><argument_list>(<argument><expr><name>mon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>moninfo</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>rScreen</name> <operator>=</operator> <name><name>moninfo</name><operator>.</operator><name>rcWork</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name>hwndChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rScreen</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rScreen</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rScreen</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>HORZRES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rScreen</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>VERTRES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>hwndChild</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>xNew</name> <operator>=</operator> <name><name>rParent</name><operator>.</operator><name>left</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>wParent</name> <operator>-</operator> <name>wChild</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xNew</name> <operator>&lt;</operator> <name><name>rScreen</name><operator>.</operator><name>left</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>xNew</name> <operator>=</operator> <name><name>rScreen</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>xNew</name> <operator>+</operator> <name>wChild</name><operator>)</operator> <operator>&gt;</operator> <name><name>rScreen</name><operator>.</operator><name>right</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>xNew</name> <operator>=</operator> <name><name>rScreen</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name>wChild</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>yNew</name> <operator>=</operator> <name><name>rParent</name><operator>.</operator><name>top</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>hParent</name> <operator>-</operator> <name>hChild</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yNew</name> <operator>&lt;</operator> <name><name>rScreen</name><operator>.</operator><name>top</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>yNew</name> <operator>=</operator> <name><name>rScreen</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>yNew</name> <operator>+</operator> <name>hChild</name><operator>)</operator> <operator>&gt;</operator> <name><name>rScreen</name><operator>.</operator><name>bottom</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>yNew</name> <operator>=</operator> <name><name>rScreen</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name>hChild</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>hwndChild</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xNew</name></expr></argument>, <argument><expr><name>yNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOZORDER</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_show_toolbar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>showit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s_toolbarhwnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>showit</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TB_SETUNICODEFORMAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TB_SETUNICODEFORMAT</name></cpp:macro> <cpp:value>0x2005</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>TB_SETUNICODEFORMAT</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>TRUE</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOOLBAR_BITMAP_COUNT</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_tabline_popup_menu_entry</name><parameter_list>(<parameter><decl><type><name>HMENU</name></type> <name>pmenu</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>item_id</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>item_text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MENUITEMINFOW</name></type> <name>infow</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>item_text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>infow</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>fMask</name></name> <operator>=</operator> <name>MIIM_TYPE</name> <operator>|</operator> <name>MIIM_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>wID</name></name> <operator>=</operator> <name>item_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>fType</name></name> <operator>=</operator> <name>MFT_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>dwTypeData</name></name> <operator>=</operator> <name>wn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>cch</name></name> <operator>=</operator> <operator>(</operator><name>UINT</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InsertMenuItemW</name><argument_list>(<argument><expr><name>pmenu</name></expr></argument>, <argument><expr><name>item_id</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>show_tabline_popup_menu</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HMENU</name></type> <name>tab_pmenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>rval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_gui_events</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tab_pmenu</name> <operator>=</operator> <call><name>CreatePopupMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tab_pmenu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_tabline_popup_menu_entry</name><argument_list>(<argument><expr><name>tab_pmenu</name></expr></argument>,

<argument><expr><name>TABLINE_MENU_CLOSE</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Close tab"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_tabline_popup_menu_entry</name><argument_list>(<argument><expr><name>tab_pmenu</name></expr></argument>,

<argument><expr><name>TABLINE_MENU_NEW</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"New tab"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_tabline_popup_menu_entry</name><argument_list>(<argument><expr><name>tab_pmenu</name></expr></argument>,

<argument><expr><name>TABLINE_MENU_OPEN</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Open tab..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>TrackPopupMenuEx</name><argument_list>(<argument><expr><name>tab_pmenu</name></expr></argument>, <argument><expr><name>TPM_RETURNCMD</name></expr></argument>, <argument><expr><name><name>pt</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>s_tabhwnd</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DestroyMenu</name><argument_list>(<argument><expr><name>tab_pmenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>TCHITTESTINFO</name></type> <name>htinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ScreenToClient</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>htinfo</name><operator>.</operator><name>pt</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>pt</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>htinfo</name><operator>.</operator><name>pt</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>pt</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>TabCtrl_HitTest</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>send_tabline_menu_event</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_show_tabline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>showit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s_tabhwnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showit</name> <operator>!=</operator> <operator>!</operator><name>showing_tabline</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>showit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>showing_tabline</name> <operator>=</operator> <name>showit</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_showing_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>s_tabhwnd</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>showing_tabline</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_update_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCITEM</name></type> <name>tie</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curtabidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tabadded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s_tabhwnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CCM_SETUNICODEFORMAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCM_SETUNICODEFORMAT</name></cpp:macro> <cpp:value>0x2005</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>CCM_SETUNICODEFORMAT</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>TRUE</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tie</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <name>TCIF_TEXT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tie</name><operator>.</operator><name>iImage</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>WM_SETREDRAW</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>nr</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curtabidx</name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;=</operator> <call><name>TabCtrl_GetItemCount</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tie</name><operator>.</operator><name>pszText</name></name> <operator>=</operator> <literal type="string">"-Empty-"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TabCtrl_InsertItem</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tabadded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_tabline_label</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tie</name><operator>.</operator><name>pszText</name></name> <operator>=</operator> <operator>(</operator><name>LPSTR</name><operator>)</operator><name>NameBuff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wstr</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>TCITEMW</name></type> <name>tiw</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tiw</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <name>TCIF_TEXT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tiw</name><operator>.</operator><name>iImage</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tiw</name><operator>.</operator><name>pszText</name></name> <operator>=</operator> <name>wstr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>TCM_SETITEMW</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>nr</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>&amp;</operator><name>tiw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>nr</name> <operator>&lt;</operator> <call><name>TabCtrl_GetItemCount</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TabCtrl_DeleteItem</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tabadded</name> <operator>&amp;&amp;</operator> <call><name>TabCtrl_GetCurSel</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>curtabidx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TabCtrl_SetCurSel</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>curtabidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>WM_SETREDRAW</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RedrawWindow</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>RDW_ERASE</name> <operator>|</operator> <name>RDW_FRAME</name> <operator>|</operator> <name>RDW_INVALIDATE</name> <operator>|</operator> <name>RDW_ALLCHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tabadded</name> <operator>&amp;&amp;</operator> <call><name>TabCtrl_GetCurSel</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>curtabidx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TabCtrl_SetCurSel</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>curtabidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_curtab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s_tabhwnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TabCtrl_GetCurSel</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nr</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TabCtrl_SetCurSel</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>nr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>ex_simalt</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keys</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fill_typebuf</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>key_name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>WM_SYSCOMMAND</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>SC_KEYMENU</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>keys</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keys</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>keys</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>WM_CHAR</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><operator>*</operator><name>keys</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keys</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fill_typebuf</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>fill_typebuf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KE_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>typebuf_was_filled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><name>REMAP_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN_FIND_REPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>initialise_findrep</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>initial_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wword</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mcase</name> <init>= <expr><operator>!</operator><name>p_ic</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>entry_text</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry_text</name> <operator>=</operator> <call><name>get_find_dialog_text</name><argument_list>(<argument><expr><name>initial_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wword</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>hwndOwner</name></name> <operator>=</operator> <name>s_hwnd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>Flags</name></name> <operator>=</operator> <name>FR_DOWN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mcase</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>Flags</name></name> <operator>|=</operator> <name>FR_MATCHCASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wword</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>Flags</name></name> <operator>|=</operator> <name>FR_WHOLEWORD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>entry_text</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>entry_text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>s_findrep_struct</name><operator>.</operator><name>wFindWhatLen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wcsncpy</name><argument_list>(<argument><expr><name><name>s_findrep_struct</name><operator>.</operator><name>lpstrFindWhat</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>lpstrFindWhat</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>entry_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_window_title</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wbuf</name> <operator>=</operator> <operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>title</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetWindowTextW</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetWindowTextW</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_find_dialog</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN_FIND_REPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>s_findrep_msg</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name>s_findrep_hwnd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>s_findrep_is_find</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>s_findrep_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsWindow</name><argument_list>(<argument><expr><name>s_findrep_hwnd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>initialise_findrep</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_findrep_hwnd</name> <operator>=</operator> <call><name>FindTextW</name><argument_list>(<argument><expr><operator>(</operator><name>LPFINDREPLACEW</name><operator>)</operator> <operator>&amp;</operator><name>s_findrep_struct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_window_title</name><argument_list>(<argument><expr><name>s_findrep_hwnd</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Find string"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFocus</name><argument_list>(<argument><expr><name>s_findrep_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_findrep_is_find</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_replace_dialog</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN_FIND_REPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>s_findrep_msg</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name>s_findrep_hwnd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>s_findrep_is_find</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>s_findrep_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsWindow</name><argument_list>(<argument><expr><name>s_findrep_hwnd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>initialise_findrep</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_findrep_hwnd</name> <operator>=</operator> <call><name>ReplaceTextW</name><argument_list>(<argument><expr><operator>(</operator><name>LPFINDREPLACEW</name><operator>)</operator> <operator>&amp;</operator><name>s_findrep_struct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_window_title</name><argument_list>(<argument><expr><name>s_findrep_hwnd</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Find &amp; Replace"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFocus</name><argument_list>(<argument><expr><name>s_findrep_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_findrep_is_find</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_mousehide</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hide</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hide</name> <operator>!=</operator> <name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ShowCursor</name><argument_list>(<argument><expr><operator>!</operator><name>hide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name> <operator>=</operator> <name>hide</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mch_show_popupmenu_at</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>TrackPopupMenu</name><argument_list>(

<argument><expr><operator>(</operator><name>HMENU</name><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>,

<argument><expr><name>TPM_LEFTALIGN</name> <operator>|</operator> <name>TPM_LEFTBUTTON</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>s_hwnd</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnEndSession</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>getout_preserve_modified</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnClose</name><parameter_list>(<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_shell_closed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnDestroy</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>destroying</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_OnClose</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnPaint</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsMinimized</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PAINTSTRUCT</name></type> <name>ps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>BeginPaint</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>.</operator><name>rcPaint</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>.</operator><name>rcPaint</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsRectEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>.</operator><name>rcPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_redraw</name><argument_list>(<argument><expr><name><name>ps</name><operator>.</operator><name>rcPaint</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>.</operator><name>rcPaint</name><operator>.</operator><name>top</name></name></expr></argument>,

<argument><expr><name><name>ps</name><operator>.</operator><name>rcPaint</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>ps</name><operator>.</operator><name>rcPaint</name><operator>.</operator><name>left</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ps</name><operator>.</operator><name>rcPaint</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>ps</name><operator>.</operator><name>rcPaint</name><operator>.</operator><name>top</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EndPaint</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnSize</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>UINT</name> <name>state</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsMinimized</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mswin_get_menu_height</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnSetFocus</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>HWND</name></type> <name>hwndOldFocus</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_getting_focus</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_SETFOCUS</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>hwndOldFocus</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnKillFocus</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>HWND</name></type> <name>hwndNewFocus</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_getting_focus</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_KILLFOCUS</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>hwndNewFocus</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name></type>

<name>_OnActivateApp</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name></type> <name>fActivate</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>dwThreadId</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_ACTIVATEAPP</name></expr></argument>, <argument><expr><name>fActivate</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>dwThreadId</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_getmouse</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POINT</name></type> <name>mp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>(</operator><name>LPPOINT</name><operator>)</operator><operator>&amp;</operator><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>mp</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>rct</name><operator>.</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>mp</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>rct</name><operator>.</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_setmouse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rct</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetCursorPos</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>+</operator> <name><name>rct</name><operator>.</operator><name>left</name></name></expr></argument>,

<argument><expr><name>y</name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>+</operator> <name><name>rct</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mswin_get_valid_dimensions</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid_w</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valid_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>base_width</name></decl>, <decl><type ref="prev"/><name>base_height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>base_width</name> <operator>=</operator> <call><name>gui_get_base_width</name><argument_list>()</argument_list></call>

<operator>+</operator> <operator>(</operator><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXFRAME</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXPADDEDBORDER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>base_height</name> <operator>=</operator> <call><name>gui_get_base_height</name><argument_list>()</argument_list></call>

<operator>+</operator> <operator>(</operator><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYFRAME</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXPADDEDBORDER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal>

<operator>+</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYCAPTION</name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <call><name>gui_mswin_get_menu_height</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>valid_w</name> <operator>=</operator> <name>base_width</name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>w</name> <operator>-</operator> <name>base_width</name><operator>)</operator> <operator>/</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>valid_h</name> <operator>=</operator> <name>base_height</name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <name>base_height</name><operator>)</operator> <operator>/</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_flash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>msec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DWriteContext_Flush</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_rows</name></name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InvertRect</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>msec</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>InvertRect</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_scroll_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rcVim</name></decl>, <decl><type ref="prev"/><name>rcOther</name></decl>, <decl><type ref="prev"/><name>rcDest</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcVim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rcVim</name><operator>.</operator><name>top</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rcVim</name><operator>.</operator><name>bottom</name></name> <operator>&gt;</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYFULLSCREEN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SW_INVALIDATE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>hwnd</name> <operator>=</operator> <name>s_hwnd</name></expr>;</init> <condition><expr><operator>(</operator><name>hwnd</name> <operator>=</operator> <call><name>GetWindow</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GW_HWNDPREV</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>HWND</name><operator>)</operator><literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsWindowVisible</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcOther</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IntersectRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rcDest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcVim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcOther</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SW_INVALIDATE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>intel_gpu_workaround</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>GetPixel</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_delete_lines</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DWriteContext_Scroll</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>num_lines</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DWriteContext_Flush</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>intel_gpu_workaround</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScrollWindowEx</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>num_lines</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>get_scroll_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateWindow</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_insert_lines</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DWriteContext_Scroll</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_lines</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DWriteContext_Flush</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>intel_gpu_workaround</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScrollWindowEx</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_lines</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>get_scroll_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateWindow</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_exit</name><parameter_list>(<parameter><decl><type><name>int</name> <name>rc</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>DWriteContext_Close</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DWrite_Final</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_dwc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><name>s_hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>s_brush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>DeleteObject</name><argument_list>(<argument><expr><operator>(</operator><name>HGDIOBJ</name><operator>)</operator><name>s_htearbitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>s_hwnd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>destroying</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLOBAL_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>global_ime_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>logfont2name</name><parameter_list>(<parameter><decl><type><name>LOGFONTW</name></type> <name>lf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>charset_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quality_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>font_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>points</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>utf16_to_enc</name><argument_list>(<argument><expr><name><name>lf</name><operator>.</operator><name>lfFaceName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>charset_name</name> <operator>=</operator> <call><name>charset_id2name</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>lf</name><operator>.</operator><name>lfCharSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>quality_name</name> <operator>=</operator> <call><name>quality_id2name</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>lf</name><operator>.</operator><name>lfQuality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">30</literal>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>charset_name</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>charset_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>quality_name</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>quality_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name>points</name> <operator>=</operator> <call><name>pixels_to_points</name><argument_list>(

<argument><expr><ternary><condition><expr><name><name>lf</name><operator>.</operator><name>lfHeight</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name><name>lf</name><operator>.</operator><name>lfHeight</name></name></expr> </then><else>: <expr><name><name>lf</name><operator>.</operator><name>lfHeight</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>.</operator><name>lfWeight</name></name> <operator>==</operator> <name>FW_NORMAL</name> <operator>||</operator> <name><name>lf</name><operator>.</operator><name>lfWeight</name></name> <operator>==</operator> <name>FW_BOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s:h%d"</literal></expr></argument>, <argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s:h%d:W%ld"</literal></expr></argument>, <argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><name><name>lf</name><operator>.</operator><name>lfWeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>.</operator><name>lfItalic</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>.</operator><name>lfWeight</name></name> <operator>==</operator> <name>FW_BOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>.</operator><name>lfUnderline</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":u"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>.</operator><name>lfStrikeOut</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>charset_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>charset_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>quality_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>quality_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>update_im_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOGFONTW</name></type> <name>lf_wide</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_guifontwide</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_guifontwide</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>wide_font</name></name> <operator>!=</operator> <name>NOFONT</name>

<operator>&amp;&amp;</operator> <call><name>GetObjectW</name><argument_list>(<argument><expr><operator>(</operator><name>HFONT</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>wide_font</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lf_wide</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>lf_wide</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>norm_logfont</name> <operator>=</operator> <name>lf_wide</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>norm_logfont</name> <operator>=</operator> <name>sub_logfont</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>im_set_font</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm_logfont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_wide_font_changed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOGFONTW</name></type> <name>lf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>update_im_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>wide_ital_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_ital_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>wide_bold_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_bold_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>wide_boldital_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_boldital_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name>

<operator>&amp;&amp;</operator> <call><name>GetObjectW</name><argument_list>(<argument><expr><operator>(</operator><name>HFONT</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>wide_font</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lf</name><operator>.</operator><name>lfItalic</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>lf</name><operator>.</operator><name>lfItalic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_ital_font</name></name> <operator>=</operator> <call><name>get_font_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lf</name><operator>.</operator><name>lfItalic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>.</operator><name>lfWeight</name></name> <operator>&lt;</operator> <name>FW_BOLD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>lf</name><operator>.</operator><name>lfWeight</name></name> <operator>=</operator> <name>FW_BOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_bold_font</name></name> <operator>=</operator> <call><name>get_font_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lf</name><operator>.</operator><name>lfItalic</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>lf</name><operator>.</operator><name>lfItalic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_boldital_font</name></name> <operator>=</operator> <call><name>get_font_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_init_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_name</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>fontset</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOGFONTW</name></type> <name>lf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GuiFont</name></type> <name>font</name> <init>= <expr><name>NOFONT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_logfont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>, <argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>get_font_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NOFONT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font_name</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>lf</name><operator>.</operator><name>lfFaceName</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLOBAL_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>norm_logfont</name> <operator>=</operator> <name>lf</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sub_logfont</name> <operator>=</operator> <name>lf</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>update_im_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_font_height</name> <operator>=</operator> <name><name>lf</name><operator>.</operator><name>lfHeight</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetFontSize</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>logfont2name</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>hl_set_font_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_guifont</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_guifont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_guifont</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>ital_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ital_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>boldital_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>boldital_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lf</name><operator>.</operator><name>lfItalic</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>lf</name><operator>.</operator><name>lfItalic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ital_font</name></name> <operator>=</operator> <call><name>get_font_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lf</name><operator>.</operator><name>lfItalic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>.</operator><name>lfWeight</name></name> <operator>&lt;</operator> <name>FW_BOLD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>lf</name><operator>.</operator><name>lfWeight</name></name> <operator>=</operator> <name>FW_BOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name> <operator>=</operator> <call><name>get_font_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lf</name><operator>.</operator><name>lfItalic</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>lf</name><operator>.</operator><name>lfItalic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>boldital_font</name></name> <operator>=</operator> <call><name>get_font_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WPF_RESTORETOMAXIMIZED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WPF_RESTORETOMAXIMIZED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>gui_mch_maximized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WINDOWPLACEMENT</name></type> <name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wp</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WINDOWPLACEMENT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetWindowPlacement</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>wp</name><operator>.</operator><name>showCmd</name></name> <operator>==</operator> <name>SW_SHOWMAXIMIZED</name>

<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>.</operator><name>showCmd</name></name> <operator>==</operator> <name>SW_SHOWMINIMIZED</name>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <name>WPF_RESTORETOMAXIMIZED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_newfont</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>win_socket_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name>

<operator>-</operator> <operator>(</operator><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXFRAME</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXPADDEDBORDER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name>

<operator>-</operator> <operator>(</operator><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYFRAME</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXPADDEDBORDER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal>

<operator>-</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYCAPTION</name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>-</operator> <call><name>gui_mswin_get_menu_height</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>,

<argument><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>-</operator> <call><name>gui_mswin_get_menu_height</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_settitle</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>icon</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_window_title</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>title</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"VIM"</literal></expr> </then><else>: <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>title</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>LPCSTR</name></type> <name><name>mshape_idcs</name><index>[]</index></name> <init>=

<expr><block>{

<expr><name>IDC_ARROW</name></expr>, 

<expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 

<expr><name>IDC_IBEAM</name></expr>, 

<expr><name>IDC_SIZENS</name></expr>, 

<expr><name>IDC_SIZENS</name></expr>, 

<expr><name>IDC_SIZEWE</name></expr>, 

<expr><name>IDC_SIZEWE</name></expr>, 

<expr><name>IDC_WAIT</name></expr>, 

<expr><name>IDC_NO</name></expr>, 

<expr><name>IDC_ARROW</name></expr>, 

<expr><name>IDC_ARROW</name></expr>, 

<expr><name>IDC_ARROW</name></expr>, 

<expr><name>IDC_ARROW</name></expr>, 

<expr><name>IDC_ARROW</name></expr>, 

<expr><name>IDC_ARROW</name></expr>, 

<expr><name>IDC_UPARROW</name></expr>, 

<expr><name>IDC_ARROW</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>mch_set_mouse_shape</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>shape</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LPCSTR</name></type> <name>idc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>==</operator> <name>MSHAPE_HIDE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ShowCursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>&gt;=</operator> <name>MSHAPE_NUMBERED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idc</name> <operator>=</operator> <name>IDC_ARROW</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idc</name> <operator>=</operator> <name><name>mshape_idcs</name><index>[<expr><name>shape</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>SetClassLongPtr</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><name>GCLP_HCURSOR</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>idc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_mh</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>mp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>(</operator><name>LPPOINT</name><operator>)</operator><operator>&amp;</operator><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetCursorPos</name><argument_list>(<argument><expr><name><name>mp</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ShowCursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>WCHAR</name> <modifier>*</modifier></type>

<name>convert_filterW</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>convert_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_mch_browse</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>saving</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dflt</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>initdir</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OPENFILENAMEW</name></type> <name>fileStruct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>fileBuf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>titlep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>extp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>initdirp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>filterp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dflt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fileBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>dflt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fileBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>wp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAXPATHL</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fileBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>fileBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>filterp</name> <operator>=</operator> <call><name>convert_filterW</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fileStruct</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OPENFILENAMEW</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENFILENAME_SIZE_VERSION_400W</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>fileStruct</name><operator>.</operator><name>lStructSize</name></name> <operator>=</operator> <name>OPENFILENAME_SIZE_VERSION_400W</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>fileStruct</name><operator>.</operator><name>lStructSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fileStruct</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>titlep</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fileStruct</name><operator>.</operator><name>lpstrTitle</name></name> <operator>=</operator> <name>titlep</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>extp</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fileStruct</name><operator>.</operator><name>lpstrDefExt</name></name> <operator>=</operator> <name>extp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fileStruct</name><operator>.</operator><name>lpstrFile</name></name> <operator>=</operator> <name>fileBuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fileStruct</name><operator>.</operator><name>nMaxFile</name></name> <operator>=</operator> <name>MAXPATHL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fileStruct</name><operator>.</operator><name>lpstrFilter</name></name> <operator>=</operator> <name>filterp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fileStruct</name><operator>.</operator><name>hwndOwner</name></name> <operator>=</operator> <name>s_hwnd</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>initdir</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>initdir</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>initdirp</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>initdir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>initdirp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>initdirp</name></expr>;</init> <condition><expr><operator>*</operator><name>wp</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>wp</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>wp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fileStruct</name><operator>.</operator><name>lpstrInitialDir</name></name> <operator>=</operator> <name>initdirp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fileStruct</name><operator>.</operator><name>Flags</name></name> <operator>=</operator> <operator>(</operator><name>OFN_NOCHANGEDIR</name> <operator>|</operator> <name>OFN_PATHMUSTEXIST</name> <operator>|</operator> <name>OFN_HIDEREADONLY</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SHORTCUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fileStruct</name><operator>.</operator><name>Flags</name></name> <operator>|=</operator> <name>OFN_NODEREFERENCELINKS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>saving</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetSaveFileNameW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fileStruct</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetOpenFileNameW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fileStruct</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>filterp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>initdirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>titlep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>extp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>fileBuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetFocus</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>shorten_fname1</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>q</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>convert_filter</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>s_len</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>s_len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>s_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>s_len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>s_len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>s_len</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_mch_browsedir</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>initdir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gui_mch_browse</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Not Used"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>initdir</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Directory\t*.nothing\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnDropFiles</name><parameter_list>(

<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>HDROP</name></type> <name>hDrop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFPATHLEN</name></cpp:macro> <cpp:value>_MAX_PATH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAGQVAL</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wszFile</name><index>[<expr><name>BUFPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>szFile</name><index>[<expr><name>BUFPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>cFiles</name> <init>= <expr><call><name>DragQueryFile</name><argument_list>(<argument><expr><name>hDrop</name></expr></argument>, <argument><expr><name>DRAGQVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fnames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DragQueryPoint</name><argument_list>(<argument><expr><name>hDrop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MapWindowPoints</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_VIsual</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fnames</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>cFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fnames</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cFiles</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>DragQueryFileW</name><argument_list>(<argument><expr><name>hDrop</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>wszFile</name></expr></argument>, <argument><expr><name>BUFPATHLEN</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>wszFile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>DragQueryFile</name><argument_list>(<argument><expr><name>hDrop</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>szFile</name></expr></argument>, <argument><expr><name>BUFPATHLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>szFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DragFinish</name><argument_list>(<argument><expr><name>hDrop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fnames</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_SHIFT</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_CONTROL</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOUSE_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_handle_drop</name><argument_list>(<argument><expr><name><name>pt</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>fnames</name></expr></argument>, <argument><expr><name>cFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_need_activate</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>_OnScroll</name><parameter_list>(

<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>HWND</name></type> <name>hwndCtl</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>code</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>UINT</name></type> <name>prev_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sb_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dragging</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dont_scroll_save</name> <init>= <expr><name>dont_scroll</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SCROLLINFO</name></type> <name>si</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>fMask</name></name> <operator>=</operator> <name>SIF_POS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>gui_mswin_find_scrollbar</name><argument_list>(<argument><expr><name>hwndCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>sb_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>sb_info</name> <operator>=</operator> <name>sb</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>SB_THUMBTRACK</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dragging</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>scroll_shift</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>&lt;&lt;=</operator> <name><name>sb</name><operator>-&gt;</operator><name>scroll_shift</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>SB_LINEDOWN</name></expr>:</case>

<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SB_LINEUP</name></expr>:</case>

<expr_stmt><expr><name>val</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SB_PAGEDOWN</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SB_PAGEUP</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>-=</operator> <operator>(</operator><ternary><condition><expr><name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SB_TOP</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SB_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SB_ENDSCROLL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>prev_code</name> <operator>==</operator> <name>SB_THUMBTRACK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>GetScrollPos</name><argument_list>(<argument><expr><name>hwndCtl</name></expr></argument>, <argument><expr><name>SB_CTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>scroll_shift</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>&lt;&lt;=</operator> <name><name>sb</name><operator>-&gt;</operator><name>scroll_shift</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>prev_code</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>nPos</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>scroll_shift</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>val</name> <operator>&gt;&gt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>scroll_shift</name></name></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetScrollInfo</name><argument_list>(<argument><expr><name>hwndCtl</name></expr></argument>, <argument><expr><name>SB_CTL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sba</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>id</name> <init>= <expr><name><name>sba</name><index>[ <expr><ternary><condition><expr><operator>(</operator><name>sb</name> <operator>==</operator> <name>sba</name> <operator>+</operator> <name>SBAR_LEFT</name><operator>)</operator></expr> ?</condition><then> <expr><name>SBAR_RIGHT</name></expr> </then><else>: <expr><name>SBAR_LEFT</name></expr></else></ternary></expr>]</index></name><operator>.</operator><name>id</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetScrollInfo</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>SB_CTL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s_busy_processing</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <operator>!</operator><name>allow_scrollbar</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_disable_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_drag_scrollbar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dragging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_enable_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_may_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_busy_processing</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <name>dont_scroll_save</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XPM_W32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xpm_w32.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINAPI</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IsMinimized</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsMinimized</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IsIconic(hwnd)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IsMaximized</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsMaximized</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IsZoomed(hwnd)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SelectFont</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SelectFont</name><parameter_list>(<parameter><type><name>hdc</name></type></parameter>, <parameter><type><name>hfont</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((HFONT)SelectObject((hdc), (HGDIOBJ)(HFONT)(hfont)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GetStockBrush</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetStockBrush</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((HBRUSH)GetStockObject(i))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DeleteBrush</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DeleteBrush</name><parameter_list>(<parameter><type><name>hbr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DeleteObject((HGDIOBJ)(HBRUSH)(hbr))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_RBUTTONDBLCLK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_RBUTTONDBLCLK</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), TRUE, (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_MBUTTONUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_MBUTTONUP</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_MBUTTONDBLCLK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_MBUTTONDBLCLK</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), TRUE, (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_LBUTTONDBLCLK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_LBUTTONDBLCLK</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), TRUE, (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_RBUTTONDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_RBUTTONDOWN</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), FALSE, (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_MOUSEMOVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_MOUSEMOVE</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_RBUTTONUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_RBUTTONUP</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_MBUTTONDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_MBUTTONDOWN</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), FALSE, (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_LBUTTONUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_LBUTTONUP</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_LBUTTONDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_LBUTTONDOWN</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), FALSE, (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam), (UINT)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_SYSCHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_SYSCHAR</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (TCHAR)(wParam), (int)(short)LOWORD(lParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_ACTIVATEAPP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_ACTIVATEAPP</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (BOOL)(wParam), (DWORD)(lParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_WINDOWPOSCHANGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_WINDOWPOSCHANGING</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LRESULT)(DWORD)(BOOL)(fn)((hwnd), (LPWINDOWPOS)(lParam))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_VSCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_VSCROLL</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (HWND)(lParam), (UINT)(LOWORD(wParam)), (int)(short)HIWORD(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_SETFOCUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_SETFOCUS</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (HWND)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_KILLFOCUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_KILLFOCUS</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (HWND)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_HSCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_HSCROLL</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (HWND)(lParam), (UINT)(LOWORD(wParam)), (int)(short)HIWORD(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_DROPFILES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_DROPFILES</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (HDROP)(wParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_CHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_CHAR</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (TCHAR)(wParam), (int)(short)LOWORD(lParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_SYSDEADCHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_SYSDEADCHAR</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (TCHAR)(wParam), (int)(short)LOWORD(lParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HANDLE_WM_DEADCHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_WM_DEADCHAR</name><parameter_list>(<parameter><type><name>hwnd</name></type></parameter>, <parameter><type><name>wParam</name></type></parameter>, <parameter><type><name>lParam</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fn)((hwnd), (TCHAR)(wParam), (int)(short)LOWORD(lParam)), 0L)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAROFF_PADDING_X</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAROFF_BUTTON_PAD_X</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAROFF_MIN_WIDTH</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAROFF_SUBMENU_LABEL</name></cpp:macro> <cpp:value>"&gt;&gt;"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAROFF_COLUMN_PADDING</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WM_MOUSEWHEEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_MOUSEWHEEL</name></cpp:macro> <cpp:value>0x20a</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_BEVAL_TOOLTIP</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEVAL_TEXT_LEN</name></cpp:macro> <cpp:value>MAXPATHL</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1300</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAXULONG_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UINT_PTR</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_PTR</name></cpp:macro> <cpp:value>UINT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>BalloonEval</name> <modifier>*</modifier></type><name>cur_beval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>UINT_PTR</name></type> <name>BevalTimerId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>LastActivity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pshpack1.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>_DllVersionInfo</name>

<block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>cbSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwMajorVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwMinorVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBuildNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPlatformID</name></decl>;</decl_stmt>

}</block></struct></type> <name>DLLVERSIONINFO</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poppack.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>tagTOOLINFOA_NEW</name>

<block>{

<decl_stmt><decl><type><name>UINT</name></type> <name>cbSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>uFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT_PTR</name></type> <name>uId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hinst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPSTR</name></type> <name>lpszText</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPARAM</name></type> <name>lParam</name></decl>;</decl_stmt>

}</block></struct></type> <name>TOOLINFO_NEW</name>;</typedef>

<typedef>typedef <type><struct>struct <name>tagNMTTDISPINFO_NEW</name>

<block>{

<decl_stmt><decl><type><name>NMHDR</name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPSTR</name></type> <name>lpszText</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>szText</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hinst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>uFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPARAM</name></type> <name>lParam</name></decl>;</decl_stmt>

}</block></struct></type> <name>NMTTDISPINFO_NEW</name>;</typedef>

<typedef>typedef <type><struct>struct <name>tagTOOLINFOW_NEW</name>

<block>{

<decl_stmt><decl><type><name>UINT</name></type> <name>cbSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>uFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT_PTR</name></type> <name>uId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hinst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>lpszText</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPARAM</name></type> <name>lParam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lpReserved</name></decl>;</decl_stmt>

}</block></struct></type> <name>TOOLINFOW_NEW</name>;</typedef>

<typedef>typedef <type><struct>struct <name>tagNMTTDISPINFOW_NEW</name>

<block>{

<decl_stmt><decl><type><name>NMHDR</name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>lpszText</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>szText</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hinst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>uFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPARAM</name></type> <name>lParam</name></decl>;</decl_stmt>

}</block></struct></type> <name>NMTTDISPINFOW_NEW</name>;</typedef>

<typedef>typedef <function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name><modifier>*</modifier> <name>DLLGETVERSIONPROC</name>)<parameter_list>(<parameter><decl><type><name>DLLVERSIONINFO</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TTM_SETMAXTIPWIDTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTM_SETMAXTIPWIDTH</name></cpp:macro> <cpp:value>(WM_USER+24)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TTF_DI_SETITEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTF_DI_SETITEM</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TTN_GETDISPINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTN_GETDISPINFO</name></cpp:macro> <cpp:value>(TTN_FIRST - 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LPNMTTDISPINFO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>tagNMTTDISPINFOA</name> <block>{

<decl_stmt><decl><type><name>NMHDR</name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPSTR</name></type> <name>lpszText</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>szText</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hinst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>uFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPARAM</name></type> <name>lParam</name></decl>;</decl_stmt>

}</block></struct></type> <name>NMTTDISPINFOA</name><operator>,</operator> *<name>LPNMTTDISPINFOA</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPNMTTDISPINFO</name></cpp:macro> <cpp:value>LPNMTTDISPINFOA</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>tagNMTTDISPINFOW</name> <block>{

<decl_stmt><decl><type><name>NMHDR</name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>lpszText</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>szText</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hinst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>uFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPARAM</name></type> <name>lParam</name></decl>;</decl_stmt>

}</block></struct></type> <name>NMTTDISPINFOW</name><operator>,</operator> *<name>LPNMTTDISPINFOW</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TTN_GETDISPINFOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTN_GETDISPINFOW</name></cpp:macro> <cpp:value>(TTN_FIRST - 10)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>UINT</name></type> <name>s_menu_id</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SYSMENU_FONT</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIM_NAME</name></cpp:macro> <cpp:value>"vim"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIM_CLASSW</name></cpp:macro> <cpp:value>L"Vim"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_ALLOC_SIZE</name></cpp:macro> <cpp:value>16 * 1024</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>PWORD</name></type>

<name>add_dialog_element</name><parameter_list>(

<parameter><decl><type><name>PWORD</name></type> <name>p</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>lStyle</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>Id</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>clss</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>caption</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LPWORD</name></type> <name>lpwAlign</name><parameter_list>(<parameter><decl><type><name>LPWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>nCopyAnsiToWideChar</name><parameter_list>(<parameter><decl><type><name>LPWORD</name></type></decl></parameter>, <parameter><decl><type><name>LPSTR</name></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_mch_tearoff</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initY</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_dialog_font_metrics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dialog_default_button</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouse_scroll_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_usenewlook</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>initialise_toolbar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>toolbar_wndproc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_toolbar_bitmap</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>initialise_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>tabline_wndproc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>LRESULT</name></type> <name>_OnImeComposition</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>dbcs</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>GetResultStr</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>GCS</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>tagCOMPOSITIONFORM</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwStyle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POINT</name></type> <name>ptCurrentPos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rcArea</name></decl>;</decl_stmt>

}</block></struct></type> <name>COMPOSITIONFORM</name><operator>,</operator> *<name>PCOMPOSITIONFORM</name><operator>,</operator> <name>NEAR</name> <modifier>*</modifier><name>NPCOMPOSITIONFORM</name><operator>,</operator> <name>FAR</name> <modifier>*</modifier><name>LPCOMPOSITIONFORM</name>;</typedef>

<typedef>typedef <type><name>HANDLE</name></type> <name>HIMC</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>hLibImm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>LONG</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmGetCompositionStringA</name>)<parameter_list>(<parameter><decl><type><name>HIMC</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LONG</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmGetCompositionStringW</name>)<parameter_list>(<parameter><decl><type><name>HIMC</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HIMC</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmGetContext</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HIMC</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmAssociateContext</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type></decl></parameter>, <parameter><decl><type><name>HIMC</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmReleaseContext</name>)<parameter_list>(<parameter><decl><type><name>HWND</name></type></decl></parameter>, <parameter><decl><type><name>HIMC</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmGetOpenStatus</name>)<parameter_list>(<parameter><decl><type><name>HIMC</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmSetOpenStatus</name>)<parameter_list>(<parameter><decl><type><name>HIMC</name></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmGetCompositionFontW</name>)<parameter_list>(<parameter><decl><type><name>HIMC</name></type></decl></parameter>, <parameter><decl><type><name>LPLOGFONTW</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmSetCompositionFontW</name>)<parameter_list>(<parameter><decl><type><name>HIMC</name></type></decl></parameter>, <parameter><decl><type><name>LPLOGFONTW</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmSetCompositionWindow</name>)<parameter_list>(<parameter><decl><type><name>HIMC</name></type></decl></parameter>, <parameter><decl><type><name>LPCOMPOSITIONFORM</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmGetConversionStatus</name>)<parameter_list>(<parameter><decl><type><name>HIMC</name></type></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pImmSetConversionStatus</name>)<parameter_list>(<parameter><decl><type><name>HIMC</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dyn_imm_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmGetCompositionStringA</name></cpp:macro> <cpp:value>ImmGetCompositionStringA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmGetCompositionStringW</name></cpp:macro> <cpp:value>ImmGetCompositionStringW</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmGetContext</name></cpp:macro> <cpp:value>ImmGetContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmAssociateContext</name></cpp:macro> <cpp:value>ImmAssociateContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmReleaseContext</name></cpp:macro> <cpp:value>ImmReleaseContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmGetOpenStatus</name></cpp:macro> <cpp:value>ImmGetOpenStatus</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmSetOpenStatus</name></cpp:macro> <cpp:value>ImmSetOpenStatus</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmGetCompositionFontW</name></cpp:macro> <cpp:value>ImmGetCompositionFontW</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmSetCompositionFontW</name></cpp:macro> <cpp:value>ImmSetCompositionFontW</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmSetCompositionWindow</name></cpp:macro> <cpp:value>ImmSetCompositionWindow</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmGetConversionStatus</name></cpp:macro> <cpp:value>ImmGetConversionStatus</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pImmSetConversionStatus</name></cpp:macro> <cpp:value>ImmSetConversionStatus</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_mswin_get_menu_height</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>fix_window</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_menu_height</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rc1</name></decl>, <decl><type ref="prev"/><name>rc2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>menu_height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>GetMenuItemCount</name><argument_list>(<argument><expr><name>s_menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menu_height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsMinimized</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>menu_height</name> <operator>=</operator> <ternary><condition><expr><name>old_menu_height</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>old_menu_height</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>GetMenuItemRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>s_menuBar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menu_height</name> <operator>=</operator> <name><name>rc1</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rc1</name><operator>.</operator><name>top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>GetMenuItemRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>s_menuBar</name></expr></argument>, <argument><expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menu_height</name> <operator>=</operator> <name><name>rc2</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rc1</name><operator>.</operator><name>top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fix_window</name> <operator>&amp;&amp;</operator> <name>menu_height</name> <operator>!=</operator> <name>old_menu_height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_menu_height</name> <operator>=</operator> <name>menu_height</name></expr>;</expr_stmt>

<return>return <expr><name>menu_height</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_mouse_wheel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SPI_GETWHEELSCROLLLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPI_GETWHEELSCROLLLINES</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SPI_SETWHEELSCROLLLINES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPI_SETWHEELSCROLLLINES</name></cpp:macro> <cpp:value>105</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMOUSEZ_CLASSNAME</name></cpp:macro> <cpp:value>"MouseZ"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMOUSEZ_TITLE</name></cpp:macro> <cpp:value>"Magellan MSWHEEL"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMSH_MOUSEWHEEL</name></cpp:macro> <cpp:value>"MSWHEEL_ROLLMSG"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMSH_SCROLL_LINES</name></cpp:macro> <cpp:value>"MSH_SCROLL_LINES_MSG"</cpp:value></cpp:define>

<expr_stmt><expr><name>mouse_scroll_lines</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SystemParametersInfo</name><argument_list>(<argument><expr><name>SPI_GETWHEELSCROLLLINES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>mouse_scroll_lines</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnMouseWheel</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name>zDelta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwndCtl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mouse_scroll_lines</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>init_mouse_wheel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>gui_mouse_window</name><argument_list>(<argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>popup_is_popup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>cmdarg_T</name></type> <name>cap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>oparg_T</name></type> <name>oa</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <ternary><condition><expr><name>zDelta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>MSCR_UP</name></expr> </then><else>: <expr><name>MSCR_DOWN</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <ternary><condition><expr><name>zDelta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>K_MOUSEUP</name></expr> </then><else>: <expr><name>K_MOUSEDOWN</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_oparg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>.</operator><name>oap</name></name> <operator>=</operator> <operator>&amp;</operator><name>oa</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_mousescroll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>p_scf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hwndCtl</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hwndCtl</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_disable_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mouse_scroll_lines</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>mouse_scroll_lines</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>mouse_scroll_lines</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_OnScroll</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>hwndCtl</name></expr></argument>, <argument><expr><ternary><condition><expr><name>zDelta</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>SB_LINEUP</name></expr> </then><else>: <expr><name>SB_LINEDOWN</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_OnScroll</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>hwndCtl</name></expr></argument>, <argument><expr><ternary><condition><expr><name>zDelta</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>SB_PAGEUP</name></expr> </then><else>: <expr><name>SB_PAGEDOWN</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>mch_enable_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_may_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_w32_get_menu_font</name><parameter_list>(<parameter><decl><type><name>LOGFONTW</name> <modifier>*</modifier></type><name>lf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NONCLIENTMETRICSW</name></type> <name>nm</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nm</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NONCLIENTMETRICSW</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SystemParametersInfoW</name><argument_list>(

<argument><expr><name>SPI_GETNONCLIENTMETRICS</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NONCLIENTMETRICSW</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>nm</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lf</name> <operator>=</operator> <name><name>nm</name><operator>.</operator><name>lfMenuFont</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_tabline_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOGFONTW</name></type> <name>lfSysmenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HFONT</name></type> <name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HFONT</name></type> <name>hfntOld</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TEXTMETRIC</name></type> <name>tm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_w32_get_menu_font</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lfSysmenu</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>CreateFontIndirectW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lfSysmenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>WM_SETFONT</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>font</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>GetWindowDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hfntOld</name> <operator>=</operator> <call><name>SelectFont</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetTextMetrics</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectFont</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>hfntOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tabline_height</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tmHeight</name></name> <operator>+</operator> <name><name>tm</name><operator>.</operator><name>tmInternalLeading</name></name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type>

<name>_OnSettingChange</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>SPI_SETWHEELSCROLLLINES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SystemParametersInfo</name><argument_list>(<argument><expr><name>SPI_GETWHEELSCROLLLINES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>mouse_scroll_lines</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>SPI_SETNONCLIENTMETRICS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_tabline_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>_OnWindowPosChanged</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>LPWINDOWPOS</name></type> <name>lpwpos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>WSInitialized</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>WSInitialized</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lpwpos</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name>x</name> <operator>||</operator> <name><name>lpwpos</name><operator>-&gt;</operator><name>y</name></name> <operator>!=</operator> <name>y</name>

<operator>||</operator> <name><name>lpwpos</name><operator>-&gt;</operator><name>cx</name></name> <operator>!=</operator> <name>cx</name> <operator>||</operator> <name><name>lpwpos</name><operator>-&gt;</operator><name>cy</name></name> <operator>!=</operator> <name>cy</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>lpwpos</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>lpwpos</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cx</name> <operator>=</operator> <name><name>lpwpos</name><operator>-&gt;</operator><name>cx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cy</name> <operator>=</operator> <name><name>lpwpos</name><operator>-&gt;</operator><name>cy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_frame_moved</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FORWARD_WM_WINDOWPOSCHANGED</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>lpwpos</name></expr></argument>, <argument><expr><name>MyWindowProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>_DuringSizing</name><parameter_list>(

<parameter><decl><type><name>UINT</name></type> <name>fwSide</name></decl></parameter>,

<parameter><decl><type><name>LPRECT</name></type> <name>lprc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>valid_w</name></decl>, <decl><type ref="prev"/><name>valid_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_offset</name></decl>, <decl><type ref="prev"/><name>h_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>lprc</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name><name>lprc</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>lprc</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name><name>lprc</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mswin_get_valid_dimensions</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valid_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valid_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w_offset</name> <operator>=</operator> <name>w</name> <operator>-</operator> <name>valid_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h_offset</name> <operator>=</operator> <name>h</name> <operator>-</operator> <name>valid_h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fwSide</name> <operator>==</operator> <name>WMSZ_LEFT</name> <operator>||</operator> <name>fwSide</name> <operator>==</operator> <name>WMSZ_TOPLEFT</name>

<operator>||</operator> <name>fwSide</name> <operator>==</operator> <name>WMSZ_BOTTOMLEFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lprc</name><operator>-&gt;</operator><name>left</name></name> <operator>+=</operator> <name>w_offset</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>fwSide</name> <operator>==</operator> <name>WMSZ_RIGHT</name> <operator>||</operator> <name>fwSide</name> <operator>==</operator> <name>WMSZ_TOPRIGHT</name>

<operator>||</operator> <name>fwSide</name> <operator>==</operator> <name>WMSZ_BOTTOMRIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lprc</name><operator>-&gt;</operator><name>right</name></name> <operator>-=</operator> <name>w_offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fwSide</name> <operator>==</operator> <name>WMSZ_TOP</name> <operator>||</operator> <name>fwSide</name> <operator>==</operator> <name>WMSZ_TOPLEFT</name>

<operator>||</operator> <name>fwSide</name> <operator>==</operator> <name>WMSZ_TOPRIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lprc</name><operator>-&gt;</operator><name>top</name></name> <operator>+=</operator> <name>h_offset</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>fwSide</name> <operator>==</operator> <name>WMSZ_BOTTOM</name> <operator>||</operator> <name>fwSide</name> <operator>==</operator> <name>WMSZ_BOTTOMLEFT</name>

<operator>||</operator> <name>fwSide</name> <operator>==</operator> <name>WMSZ_BOTTOMRIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lprc</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-=</operator> <name>h_offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type>

<name>_WndProc</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>,

<parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>HandleMouseHide</name><argument_list>(<argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_uMsg</name> <operator>=</operator> <name>uMsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_wParam</name> <operator>=</operator> <name>wParam</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_lParam</name> <operator>=</operator> <name>lParam</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>uMsg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_DEADCHAR</name></expr></argument>, <argument><expr><name>_OnDeadChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_SYSDEADCHAR</name></expr></argument>, <argument><expr><name>_OnDeadChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_CLOSE</name></expr></argument>, <argument><expr><name>_OnClose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_DESTROY</name></expr></argument>, <argument><expr><name>_OnDestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_DROPFILES</name></expr></argument>, <argument><expr><name>_OnDropFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_HSCROLL</name></expr></argument>, <argument><expr><name>_OnScroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_KILLFOCUS</name></expr></argument>, <argument><expr><name>_OnKillFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_COMMAND</name></expr></argument>, <argument><expr><name>_OnMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_SETFOCUS</name></expr></argument>, <argument><expr><name>_OnSetFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_SIZE</name></expr></argument>, <argument><expr><name>_OnSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_VSCROLL</name></expr></argument>, <argument><expr><name>_OnScroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_ACTIVATEAPP</name></expr></argument>, <argument><expr><name>_OnActivateApp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HANDLE_MSG</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_WINDOWPOSCHANGED</name></expr></argument>, <argument><expr><name>_OnWindowPosChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>WM_RBUTTONUP</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gui_mch_showing_tabline</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>(</operator><name>LPPOINT</name><operator>)</operator><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>show_tabline_popup_menu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0L</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>WM_LBUTTONDBLCLK</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gui_mch_showing_tabline</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>(</operator><name>LPPOINT</name><operator>)</operator><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>send_tabline_menu_event</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TABLINE_MENU_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>WM_QUERYENDSESSION</name></expr>:</case> 

<expr_stmt><expr><call><name>gui_shell_closed</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>FALSE</name></expr>;</return> 

<case>case <expr><name>WM_ENDSESSION</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>wParam</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>_OnEndSession</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0L</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>WM_CHAR</name></expr>:</case>

<expr_stmt><expr><call><name>_OnChar</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>wParam</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>short</name><operator>)</operator><call><name>LOWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0L</literal></expr>;</return>

<case>case <expr><name>WM_SYSCHAR</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name>

<operator>||</operator> <name><name>p_wak</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal>

<operator>||</operator> <operator>(</operator><name><name>p_wak</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gui_is_menu_shortcut</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>wParam</name></expr></argument>)</argument_list></call><operator>)</operator></expr>

)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>_OnSysChar</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>wParam</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>short</name><operator>)</operator><call><name>LOWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0L</literal></expr>;</return>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>WM_SYSKEYUP</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><literal type="number">0L</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>WM_SIZING</name></expr>:</case> 

<return>return <expr><call><name>_DuringSizing</name><argument_list>(<argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>wParam</name></expr></argument>, <argument><expr><operator>(</operator><name>LPRECT</name><operator>)</operator><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>WM_MOUSEWHEEL</name></expr>:</case>

<expr_stmt><expr><call><name>_OnMouseWheel</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0L</literal></expr>;</return>

<case>case <expr><name>WM_SETTINGCHANGE</name></expr>:</case>

<return>return <expr><call><name>_OnSettingChange</name><argument_list>(<argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>wParam</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>WM_NOTIFY</name></expr>:</case>

<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>LPNMHDR</name><operator>)</operator> <name>lParam</name><operator>)</operator><operator>-&gt;</operator><name>code</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>TTN_GETDISPINFOW</name></expr>:</case>

<case>case <expr><name>TTN_GETDISPINFO</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>LPNMHDR</name></type> <name>hdr</name> <init>= <expr><operator>(</operator><name>LPNMHDR</name><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tt_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>tt_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_mch_showing_tabline</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>hwndFrom</name></name> <operator>==</operator> <call><name>TabCtrl_GetToolTips</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ScreenToClient</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>TCHITTESTINFO</name></type> <name>htinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>htinfo</name><operator>.</operator><name>pt</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>pt</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>htinfo</name><operator>.</operator><name>pt</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>pt</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>TabCtrl_HitTest</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>get_tabline_label</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NameBuff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>idButton</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>pMenu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idButton</name> <operator>=</operator> <operator>(</operator><name>UINT</name><operator>)</operator> <name><name>hdr</name><operator>-&gt;</operator><name>idFrom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pMenu</name> <operator>=</operator> <call><name>gui_mswin_find_menu</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>idButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pMenu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>pMenu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>MENU_INDEX_TIP</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TTN_GETDISPINFOW</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>LPNMTTDISPINFOW</name></type> <name>lpdi</name> <init>= <expr><operator>(</operator><name>LPNMTTDISPINFOW</name><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>lpdi</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>hwndFrom</name></name></expr></argument>, <argument><expr><name>TTM_SETMAXTIPWIDTH</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tt_text</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lpdi</name><operator>-&gt;</operator><name>lpszText</name></name> <operator>=</operator> <name>tt_text</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>LPNMTTDISPINFO</name></type> <name>lpdi</name> <init>= <expr><operator>(</operator><name>LPNMTTDISPINFO</name><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>lpdi</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>hwndFrom</name></name></expr></argument>, <argument><expr><name>TTM_SETMAXTIPWIDTH</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>lpdi</name><operator>-&gt;</operator><name>szText</name></name></expr></argument>)</argument_list></sizeof>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>tt_text</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>lpdi</name><operator>-&gt;</operator><name>szText</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>lpdi</name><operator>-&gt;</operator><name>szText</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lpdi</name><operator>-&gt;</operator><name>lpszText</name></name> <operator>=</operator> <name>tt_text</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCN_SELCHANGE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>gui_mch_showing_tabline</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>LPNMHDR</name><operator>)</operator><name>lParam</name><operator>)</operator><operator>-&gt;</operator><name>hwndFrom</name> <operator>==</operator> <name>s_tabhwnd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>send_tabline_event</name><argument_list>(<argument><expr><call><name>TabCtrl_GetCurSel</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0L</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>NM_RCLICK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>gui_mch_showing_tabline</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>LPNMHDR</name><operator>)</operator><name>lParam</name><operator>)</operator><operator>-&gt;</operator><name>hwndFrom</name> <operator>==</operator> <name>s_tabhwnd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>show_tabline_popup_menu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0L</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_mch_showing_tabline</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>LPNMHDR</name><operator>)</operator><name>lParam</name><operator>)</operator><operator>-&gt;</operator><name>hwndFrom</name> <operator>==</operator> <name>s_tabhwnd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MENUHINTS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>WM_MENUSELECT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>UINT</name><operator>)</operator> <call><name>HIWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call>

<operator>&amp;</operator> <operator>(</operator><literal type="number">0xffff</literal> <operator>^</operator> <operator>(</operator><name>MF_MOUSESELECT</name> <operator>+</operator> <name>MF_BITMAP</name> <operator>+</operator> <name>MF_POPUP</name><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>==</operator> <name>MF_HILITE</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>idButton</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>pMenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_menu_tip</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>did_menu_tip</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_clr_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_menu_tip</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idButton</name> <operator>=</operator> <operator>(</operator><name>UINT</name><operator>)</operator><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pMenu</name> <operator>=</operator> <call><name>gui_mswin_find_menu</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>idButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pMenu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pMenu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>MENU_INDEX_TIP</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>GetMenuState</name><argument_list>(<argument><expr><name>s_menuBar</name></expr></argument>, <argument><expr><name><name>pMenu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>msg_hist_off</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pMenu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>MENU_INDEX_TIP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>msg_hist_off</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_menu_tip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0L</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>WM_NCHITTEST</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>LRESULT</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xPos</name> <init>= <expr><call><name>GET_X_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>HTCLIENT</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_mch_showing_tabline</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>yPos</name> <init>= <expr><call><name>GET_Y_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rct</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yPos</name> <operator>&lt;</operator> <name><name>rct</name><operator>.</operator><name>top</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gui_mch_get_winpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xPos</name> <operator>-=</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xPos</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>HTBOTTOMLEFT</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>HTBOTTOMRIGHT</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>WM_IME_NOTIFY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_OnImeNotify</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>wParam</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>lParam</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1L</literal></expr>;</return>

<case>case <expr><name>WM_IME_COMPOSITION</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_OnImeComposition</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1L</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN_FIND_REPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>uMsg</name> <operator>==</operator> <name>s_findrep_msg</name> <operator>&amp;&amp;</operator> <name>s_findrep_msg</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_OnFindRepl</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>MyWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>HWND</name></type> <name>vim_parent_hwnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type>

<name>FindWindowTitle</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetWindowText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>vim_parent_hwnd</name> <operator>=</operator> <call><name>FindWindowEx</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"MDIClient"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vim_parent_hwnd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_parent</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>EnumWindows</name><argument_list>(<argument><expr><name>FindWindowTitle</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vim_parent_hwnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E671: Cannot find window title \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_OLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_error</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IOSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>=</operator> <call><name>mch_is_gui_executable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E243: Argument not supported: \"-%s\"; Use the OLE version."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GUI_MAY_SPAWN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>gvim_error</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E988: GUI cannot be used. Cannot execute gvim.exe."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>starting</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>msg</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>gui_mch_do_spawn</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EXPERIMENTAL_GUI_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>tofree1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>name</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>cmd</name></decl>, <decl><type ref="prev"/><name>newcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>warg</name></decl>, <decl><type ref="prev"/><name>tofree2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STARTUPINFOW</name></type> <name>si</name> <init>= <expr><block>{<expr>sizeof<operator>(</operator><name>si</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetModuleFileNameW</name><argument_list>(<argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>wcsrchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">L"gvimd.exe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">L"gvim.exe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EXPERIMENTAL_GUI_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>starting</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GetCommandLineW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>L</name><literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>L</name><literal type="char">'\t'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L</name><literal type="char">'"'</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>L</name><literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EXPERIMENTAL_GUI_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>wsession</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>savebg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>session</name> <operator>=</operator> <call><name>vim_tempname</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>savebg</name> <operator>=</operator> <name>p_bg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_bg</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"light"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_session_file</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_bg</name> <operator>=</operator> <name>savebg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wsession</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wsession</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>wsession</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">27</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wsession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tofree1</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_snwprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">L" -S \"%s\" -c \"call delete('%s')\""</literal></expr></argument>,

<argument><expr><name>wsession</name></expr></argument>, <argument><expr><name>wsession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wsession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>warg</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>warg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tofree2</name> <operator>=</operator> <name>warg</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>warg</name> <operator>=</operator> <literal type="string">L""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>warg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newcmd</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newcmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_snwprintf</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">L"\"%s\"%s %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>warg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreateProcessW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>newcmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EXPERIMENTAL_GUI_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>session</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>gvim_error</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_prepare</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>silent</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <operator>*</operator><name>argc</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argc</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>STRICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"silent"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>silent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"register"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_OLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RegisterMe</name><argument_list>(<argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_error</name><argument_list>(<argument><expr><literal type="string">"register"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unregister"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_OLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>UnregisterMe</name><argument_list>(<argument><expr><operator>!</operator><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_error</name><argument_list>(<argument><expr><literal type="string">"unregister"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"embedding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_OLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>ole_error</name><argument_list>(<argument><expr><literal type="string">"embedding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_OLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bDoRestart</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitOLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bDoRestart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bDoRestart</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>arg</name> <operator>&lt;</operator> <operator>*</operator><name>argc</name></expr>;</condition> <incr><expr><name>arg</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"-nb"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>netbeansArg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><operator>--</operator><operator>*</operator><name>argc</name> <operator>-</operator> <name>arg</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><operator>*</operator><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>WCHAR</name></type> <name><name>szVimWndClassW</name><index>[]</index></name> <init>= <expr><name>VIM_CLASSW</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>WCHAR</name></type> <name><name>szTextAreaClassW</name><index>[]</index></name> <init>= <expr><literal type="string">L"VimTextArea"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WNDCLASSW</name></type> <name>wndclassw</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLOBAL_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ATOM</name></type> <name>atom</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>s_hwnd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>s_htearbitmap</name> <operator>=</operator> <call><name>LoadBitmap</name><argument_list>(<argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><literal type="string">"IDB_TEAROFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXVSCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYHSCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>border_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s_brush</name> <operator>=</operator> <call><name>CreateSolidBrush</name><argument_list>(<argument><expr><call><name>GetSysColor</name><argument_list>(<argument><expr><name>COLOR_BTNFACE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetClassInfoW</name><argument_list>(<argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><name>szVimWndClassW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wndclassw</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_DBLCLKS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <name>_WndProc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>cbClsExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>cbWndExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <name>g_hinst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <call><name>LoadIcon</name><argument_list>(<argument><expr><name><name>wndclassw</name><operator>.</operator><name>hInstance</name></name></expr></argument>, <argument><expr><literal type="string">"IDR_VIM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>hbrBackground</name></name> <operator>=</operator> <name>s_brush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>lpszMenuName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name>szVimWndClassW</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLOBAL_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>atom</name> <operator>=</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<call><name>RegisterClassW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wndclassw</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vim_parent_hwnd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TRY_EXCEPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__try</name></macro>

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s_hwnd</name> <operator>=</operator> <call><name>CreateWindowExW</name><argument_list>(

<argument><expr><name>WS_EX_MDICHILD</name></expr></argument>,

<argument><expr><name>szVimWndClassW</name></expr></argument>, <argument><expr><literal type="string">L"Vim MSWindows GUI"</literal></expr></argument>,

<argument><expr><name>WS_OVERLAPPEDWINDOW</name> <operator>|</operator> <name>WS_CHILD</name>

<operator>|</operator> <name>WS_CLIPSIBLINGS</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name> <operator>|</operator> <literal type="number">0xC000</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>gui_win_x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>CW_USEDEFAULT</name></expr> </then><else>: <expr><name>gui_win_x</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>gui_win_y</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>CW_USEDEFAULT</name></expr> </then><else>: <expr><name>gui_win_y</name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="number">100</literal></expr></argument>, 

<argument><expr><literal type="number">100</literal></expr></argument>, 

<argument><expr><name>vim_parent_hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TRY_EXCEPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block>

<macro><name>__except</name><argument_list>(<argument>EXCEPTION_EXECUTE_HANDLER</argument>)</argument_list></macro>

<block>{<block_content>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>s_hwnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E672: Unable to open window inside MDI application"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><operator>(</operator><name>HWND</name><operator>)</operator><name>win_socket_id</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>win_socket_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s_hwnd</name> <operator>=</operator> <call><name>CreateWindowW</name><argument_list>(

<argument><expr><name>szVimWndClassW</name></expr></argument>, <argument><expr><literal type="string">L"Vim MSWindows GUI"</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>win_socket_id</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>WS_OVERLAPPEDWINDOW</name></expr> </then><else>: <expr><name>WS_POPUP</name></expr></else></ternary><operator>)</operator>

<operator>|</operator> <name>WS_CLIPSIBLINGS</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>gui_win_x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>CW_USEDEFAULT</name></expr> </then><else>: <expr><name>gui_win_x</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>gui_win_y</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>CW_USEDEFAULT</name></expr> </then><else>: <expr><name>gui_win_y</name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="number">100</literal></expr></argument>, 

<argument><expr><literal type="number">100</literal></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_hwnd</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>win_socket_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetParent</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>(</operator><name>HWND</name><operator>)</operator><name>win_socket_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>SW_SHOWMAXIMIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s_hwnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLOBAL_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>global_ime_init</name><argument_list>(<argument><expr><name>atom</name></expr></argument>, <argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>dyn_imm_load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>GetClassInfoW</name><argument_list>(<argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><name>szTextAreaClassW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wndclassw</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_OWNDC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <name>_TextAreaWndProc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>cbClsExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>cbWndExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <name>g_hinst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>hbrBackground</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>lpszMenuName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndclassw</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name>szTextAreaClassW</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RegisterClassW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wndclassw</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s_textArea</name> <operator>=</operator> <call><name>CreateWindowExW</name><argument_list>(

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>szTextAreaClassW</name></expr></argument>, <argument><expr><literal type="string">L"Vim text area"</literal></expr></argument>,

<argument><expr><name>WS_CHILD</name> <operator>|</operator> <name>WS_VISIBLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">100</literal></expr></argument>, 

<argument><expr><literal type="number">100</literal></expr></argument>, 

<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_textArea</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LIBCALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hIcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_icon_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hIcon</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name>hIcon</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>WM_SETICON</name></expr></argument>, <argument><expr><name>ICON_SMALL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>hIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>s_menuBar</name> <operator>=</operator> <call><name>CreateMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s_hdc</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DragAcceptFiles</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_def_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_normal_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_check_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>highlight_gui_started</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_mouse_wheel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_dialog_font_metrics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>initialise_toolbar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>initialise_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN_FIND_REPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>s_findrep_msg</name> <operator>=</operator> <call><name>RegisterWindowMessage</name><argument_list>(<argument><expr><name>FINDMSGSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>lStructSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s_findrep_struct</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>lpstrFindWhat</name></name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>MSWIN_FR_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>lpstrFindWhat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>lpstrReplaceWith</name></name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>MSWIN_FR_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>lpstrReplaceWith</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>wFindWhatLen</name></name> <operator>=</operator> <name>MSWIN_FR_BUFSIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_findrep_struct</name><operator>.</operator><name>wReplaceWithLen</name></name> <operator>=</operator> <name>MSWIN_FR_BUFSIZE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1400</literal><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HandleToLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HandleToLong</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((long)(intptr_t)(h))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_WINDOWID</name></expr></argument>, <argument><expr><call><name>HandleToLong</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RENDER_OPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_rop</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gui_mch_set_rendering_options</name><argument_list>(<argument><expr><name>p_rop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>display_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_work_area</name><parameter_list>(<parameter><decl><type><name>RECT</name> <modifier>*</modifier></type><name>spi_rect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HMONITOR</name></type> <name>mon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MONITORINFO</name></type> <name>moninfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>MonitorFromWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>MONITOR_DEFAULTTOPRIMARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mon</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>moninfo</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MONITORINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetMonitorInfo</name><argument_list>(<argument><expr><name>mon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>moninfo</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>spi_rect</name> <operator>=</operator> <name><name>moninfo</name><operator>.</operator><name>rcWork</name></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SystemParametersInfo</name><argument_list>(<argument><expr><name>SPI_GETWORKAREA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>spi_rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_shellsize</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>min_width</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>min_height</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>base_width</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>base_height</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>workarea_rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>win_width</name></decl>, <decl><type ref="prev"/><name>win_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WINDOWPLACEMENT</name></type> <name>wndpl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_work_area</name><argument_list>(<argument><expr><operator>&amp;</operator><name>workarea_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndpl</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WINDOWPLACEMENT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowPlacement</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wndpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wndpl</name><operator>.</operator><name>showCmd</name></name> <operator>==</operator> <name>SW_SHOWMAXIMIZED</name> <operator>&amp;&amp;</operator> <name>starting</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>SW_SHOWNORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowPlacement</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wndpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>win_width</name> <operator>=</operator> <name>width</name> <operator>+</operator> <operator>(</operator><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXFRAME</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXPADDEDBORDER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>win_height</name> <operator>=</operator> <name>height</name> <operator>+</operator> <operator>(</operator><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYFRAME</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXPADDEDBORDER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal>

<operator>+</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYCAPTION</name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <call><name>gui_mswin_get_menu_height</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</expr_stmt>

<expr_stmt><expr><name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name>win_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>win_height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>direction</name> <operator>&amp;</operator> <name>RESIZE_HOR</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>right</name></name> <operator>&gt;</operator> <name><name>workarea_rect</name><operator>.</operator><name>right</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OffsetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name></name></expr></argument>,

<argument><expr><name><name>workarea_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>direction</name> <operator>&amp;</operator> <name>RESIZE_HOR</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>left</name></name> <operator>&lt;</operator> <name><name>workarea_rect</name><operator>.</operator><name>left</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OffsetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name></name></expr></argument>,

<argument><expr><name><name>workarea_rect</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>direction</name> <operator>&amp;</operator> <name>RESIZE_VERT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>bottom</name></name> <operator>&gt;</operator> <name><name>workarea_rect</name><operator>.</operator><name>bottom</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OffsetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>workarea_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>direction</name> <operator>&amp;</operator> <name>RESIZE_VERT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>top</name></name> <operator>&lt;</operator> <name><name>workarea_rect</name><operator>.</operator><name>top</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OffsetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>workarea_rect</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>wndpl</name><operator>.</operator><name>rcNormalPosition</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetWindowPlacement</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wndpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetActiveWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetFocus</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mswin_get_menu_height</name><argument_list>(<argument><expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_scrollbar_thumb</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SCROLLINFO</name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>scroll_shift</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">32767</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><name>max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>sb</name><operator>-&gt;</operator><name>scroll_shift</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>scroll_shift</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>fMask</name></name> <operator>=</operator> <name>SIF_POS</name> <operator>|</operator> <name>SIF_RANGE</name> <operator>|</operator> <name>SIF_PAGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>nPos</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>nMin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>nMax</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>nPage</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetScrollInfo</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>SB_CTL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_font</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>currFont</name></name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_fg_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_bg_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>currBgColor</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_sp_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>currSpColor</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ime.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;imm.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>LRESULT</name></type>

<name>_OnImeNotify</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>dwCommand</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <name>dwData</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LRESULT</name></type> <name>lResult</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HIMC</name></type> <name>hImc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pImmGetContext</name> <operator>||</operator> <operator>(</operator><name>hImc</name> <operator>=</operator> <call><name>pImmGetContext</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>(</operator><name>HIMC</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>lResult</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>dwCommand</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>IMN_SETOPENSTATUS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>pImmGetOpenStatus</name><argument_list>(<argument><expr><name>hImc</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pImmSetCompositionFontW</name><argument_list>(<argument><expr><name>hImc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>norm_logfont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>im_set_position</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>&amp;=</operator> <operator>~</operator><name>LANGMAP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>==</operator> <name>B_IMODE_LMAP</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_row</name> <init>= <expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_col</name> <init>= <expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_redraw_curbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>old_row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>old_col</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lResult</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>pImmReleaseContext</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>hImc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>lResult</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name></type>

<name>_OnImeComposition</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name> <name>dbcs</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>param</name> <operator>&amp;</operator> <name>GCS_RESULTSTR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetResultStr</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GCS_RESULTSTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>add_to_input_buf_csi</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>short_u</name> <modifier>*</modifier></type>

<name>GetCompositionString_inUCS2</name><parameter_list>(<parameter><decl><type><name>HIMC</name></type> <name>hIMC</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>GCS</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LONG</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>wbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pImmGetContext</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pImmGetCompositionStringW</name><argument_list>(<argument><expr><name>hIMC</name></expr></argument>, <argument><expr><name>GCS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>wbuf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pImmGetCompositionStringW</name><argument_list>(<argument><expr><name>hIMC</name></expr></argument>, <argument><expr><name>GCS</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>ret</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>short_u</name> <operator>*</operator><operator>)</operator><name>wbuf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pImmGetCompositionStringA</name><argument_list>(<argument><expr><name>hIMC</name></expr></argument>, <argument><expr><name>GCS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pImmGetCompositionStringA</name><argument_list>(<argument><expr><name>hIMC</name></expr></argument>, <argument><expr><name>GCS</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MultiByteToWideChar_alloc</name><argument_list>(<argument><expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbuf</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>short_u</name> <operator>*</operator><operator>)</operator><name>wbuf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>GetResultStr</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>GCS</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HIMC</name></type> <name>hIMC</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>convbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pImmGetContext</name> <operator>||</operator> <operator>(</operator><name>hIMC</name> <operator>=</operator> <call><name>pImmGetContext</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>(</operator><name>HIMC</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GetCompositionString_inUCS2</name><argument_list>(<argument><expr><name>hIMC</name></expr></argument>, <argument><expr><name>GCS</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>convbuf</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pImmReleaseContext</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>hIMC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>convbuf</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>im_set_font</name><parameter_list>(<parameter><decl><type><name>LOGFONTW</name> <modifier>*</modifier></type><name>lf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HIMC</name></type> <name>hImc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pImmGetContext</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>hImc</name> <operator>=</operator> <call><name>pImmGetContext</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>HIMC</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pImmSetCompositionFontW</name><argument_list>(<argument><expr><name>hImc</name></expr></argument>, <argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pImmReleaseContext</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>hImc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>im_set_position</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HIMC</name></type> <name>hImc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pImmGetContext</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>hImc</name> <operator>=</operator> <call><name>pImmGetContext</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>HIMC</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>COMPOSITIONFORM</name></type> <name>cfs</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cfs</name><operator>.</operator><name>dwStyle</name></name> <operator>=</operator> <name>CFS_POINT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfs</name><operator>.</operator><name>ptCurrentPos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfs</name><operator>.</operator><name>ptCurrentPos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MapWindowPoints</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfs</name><operator>.</operator><name>ptCurrentPos</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pImmSetCompositionWindow</name><argument_list>(<argument><expr><name>hImc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pImmReleaseContext</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>hImc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>im_set_active</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HIMC</name></type> <name>hImc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HIMC</name></type> <name>hImcOld</name> <init>= <expr><operator>(</operator><name>HIMC</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mbyte_im_set_active</name><argument_list>(<argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>pImmGetContext</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_imdisable</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hImcOld</name> <operator>==</operator> <operator>(</operator><name>HIMC</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hImcOld</name> <operator>=</operator> <call><name>pImmGetContext</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hImcOld</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pImmAssociateContext</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>(</operator><name>HIMC</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>hImcOld</name> <operator>!=</operator> <operator>(</operator><name>HIMC</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pImmAssociateContext</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>hImcOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hImcOld</name> <operator>=</operator> <operator>(</operator><name>HIMC</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hImc</name> <operator>=</operator> <call><name>pImmGetContext</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hImc</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>HKL</name></type> <name>hKL</name> <init>= <expr><call><name>GetKeyboardLayout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>hKL</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_KOREAN</name></expr></argument>, <argument><expr><name>SUBLANG_KOREAN</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>dwConversionSaved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dwSentenceSaved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>bSaved</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bSaved</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pImmSetConversionStatus</name><argument_list>(<argument><expr><name>hImc</name></expr></argument>, <argument><expr><name>dwConversionSaved</name></expr></argument>,

<argument><expr><name>dwSentenceSaved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bSaved</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pImmGetConversionStatus</name><argument_list>(<argument><expr><name>hImc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwConversionSaved</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dwSentenceSaved</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bSaved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pImmSetConversionStatus</name><argument_list>(<argument><expr><name>hImc</name></expr></argument>,

<argument><expr><name>dwConversionSaved</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>IME_CMODE_NATIVE</name>

<operator>|</operator> <name>IME_CMODE_FULLSHAPE</name><operator>)</operator></expr></argument>,

<argument><expr><name>dwSentenceSaved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pImmSetOpenStatus</name><argument_list>(<argument><expr><name>hImc</name></expr></argument>, <argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pImmReleaseContext</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>hImc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>im_get_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HIMC</name></type> <name>hImc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>mbyte_im_get_status</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>pImmGetContext</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>hImc</name> <operator>=</operator> <call><name>pImmGetContext</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>HIMC</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <ternary><condition><expr><call><name>pImmGetOpenStatus</name><argument_list>(<argument><expr><name>hImc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pImmReleaseContext</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>hImc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLOBAL_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>im_set_position</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MapWindowPoints</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>global_ime_set_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>im_set_active</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>global_ime_set_status</name><argument_list>(<argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>im_get_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>global_ime_get_status</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>latin9_to_ucs</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>unicodebuf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>text</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0xa4</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x20ac</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0xa6</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0160</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0xa8</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0161</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0xb4</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x017d</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0xb8</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x017e</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0xbc</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0152</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0xbd</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0153</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><literal type="number">0xbe</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0178</literal></expr>;</expr_stmt> <break>break;</break> 

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>unicodebuf</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>RevOut</name><parameter_list>( <parameter><decl><type><name>HDC</name></type> <name>s_hdc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>foptions</name></decl></parameter>,

<parameter><decl><type><name>CONST</name> <name>RECT</name> <modifier>*</modifier></type><name>pcliprect</name></decl></parameter>,

<parameter><decl><type><name>LPCTSTR</name></type> <name>text</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>CONST</name> <name>INT</name> <modifier>*</modifier></type><name>padding</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ix</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ix</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>ix</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ExtTextOut</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <call><name>TEXT_X</name><argument_list>(<argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>foptions</name></expr></argument>,

<argument><expr><name>pcliprect</name></expr></argument>, <argument><expr><name>text</name> <operator>+</operator> <name>ix</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>draw_line</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>,

<parameter><decl><type><name>COLORREF</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DWriteContext_DrawLine</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>HPEN</name></type> <name>hpen</name> <init>= <expr><call><name>CreatePen</name><argument_list>(<argument><expr><name>PS_SOLID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HPEN</name></type> <name>old_pen</name> <init>= <expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>hpen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MoveToEx</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LineTo</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>old_pen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_pixel</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>COLORREF</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DWriteContext_SetPixel</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>fill_rect</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>,

<parameter><decl><type><name>HBRUSH</name></type> <name>hbr</name></decl></parameter>,

<parameter><decl><type><name>COLORREF</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DWriteContext_FillRect</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>HBRUSH</name></type> <name>hbr2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hbr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hbr2</name> <operator>=</operator> <call><name>CreateSolidBrush</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hbr2</name> <operator>=</operator> <name>hbr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>FillRect</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>, <argument><expr><name>hbr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hbr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DeleteBrush</name><argument_list>(<argument><expr><name>hbr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_draw_string</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>padding</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pad_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>pcliprect</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>foptions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>unicodebuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>unicodepdy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>unibuflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HBRUSH</name></type> <name><name>hbr_cache</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>guicolor_T</name></type> <name><name>brush_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>INVALCOLOR</name></expr>, <expr><name>INVALCOLOR</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>brush_lru</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HBRUSH</name></type> <name>hbr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DRAW_TRANSP</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <call><name>mb_string2cells</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>currBgColor</name></name> <operator>==</operator> <name><name>brush_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hbr</name> <operator>=</operator> <name><name>hbr_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>brush_lru</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>gui</name><operator>.</operator><name>currBgColor</name></name> <operator>==</operator> <name><name>brush_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hbr</name> <operator>=</operator> <name><name>hbr_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>brush_lru</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hbr_cache</name><index>[<expr><name>brush_lru</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DeleteBrush</name><argument_list>(<argument><expr><name><name>hbr_cache</name><index>[<expr><name>brush_lru</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hbr_cache</name><index>[<expr><name>brush_lru</name></expr>]</index></name> <operator>=</operator> <call><name>CreateSolidBrush</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>currBgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>brush_color</name><index>[<expr><name>brush_lru</name></expr>]</index></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>currBgColor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hbr</name> <operator>=</operator> <name><name>hbr_cache</name><index>[<expr><name>brush_lru</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>brush_lru</name> <operator>=</operator> <operator>!</operator><name>brush_lru</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fill_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>hbr</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currBgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetBkMode</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>TRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_CURSOR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pcliprect</name> <operator>=</operator> <operator>&amp;</operator><name>rc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>foptions</name> <operator>=</operator> <name>ETO_CLIPPED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetTextColor</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectFont</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DWriteContext_SetFont</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>, <argument><expr><operator>(</operator><name>HFONT</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>currFont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>pad_size</name> <operator>!=</operator> <name>Columns</name> <operator>||</operator> <name>padding</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>padding</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pad_size</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>

<expr_stmt><expr><name>padding</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>pad_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>padding</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pad_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>padding</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>enc_utf8</name>

<operator>||</operator> <operator>(</operator><name>enc_codepage</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GetACP</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>enc_codepage</name><operator>)</operator>

<operator>||</operator> <name>enc_latin9</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>unicodebuf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <name>unibuflen</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>unicodebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unicodebuf</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>unicodepdy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unicodepdy</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unibuflen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>unicodebuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wlen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>clen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cells</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cw</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cells</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>unicodebuf</name><index>[<expr><name>wlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xD800</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>unicodebuf</name><index>[<expr><name>wlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xDC00</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>unicodebuf</name><index>[<expr><name>wlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>cw</name> <operator>=</operator> <call><name>utf_char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cw</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>cw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unicodepdy</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>unicodepdy</name><index>[<expr><name>wlen</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>cw</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>unicodepdy</name><index>[<expr><name>wlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>unicodepdy</name><index>[<expr><name>wlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cw</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cells</name> <operator>+=</operator> <name>cw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>clen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DWriteContext_DrawText</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>, <argument><expr><name>unicodebuf</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>,

<argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>cells</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>p_linespace</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name></expr></argument>,

<argument><expr><name>foptions</name></expr></argument>, <argument><expr><name>pcliprect</name></expr></argument>, <argument><expr><name>unicodepdy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ExtTextOutW</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>foptions</name></expr></argument>, <argument><expr><name>pcliprect</name></expr></argument>, <argument><expr><name>unicodebuf</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>, <argument><expr><name>unicodepdy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>cells</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>enc_codepage</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GetACP</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>enc_codepage</name><operator>)</operator> <operator>||</operator> <name>enc_latin9</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>unicodebuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_latin9</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>latin9_to_ucs</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>unicodebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>enc_codepage</name></expr></argument>,

<argument><expr><name>MB_PRECOMPOSED</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPWSTR</name><operator>)</operator><name>unicodebuf</name></expr></argument>, <argument><expr><name>unibuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>unicodepdy</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cw</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>cw</name> <operator>=</operator> <call><name>utf_char2cells</name><argument_list>(<argument><expr><name><name>unicodebuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cw</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>unicodepdy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>cw</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ExtTextOutW</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>foptions</name></expr></argument>, <argument><expr><name>pcliprect</name></expr></argument>, <argument><expr><name>unicodebuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>unicodepdy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RevOut</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>foptions</name></expr></argument>, <argument><expr><name>pcliprect</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ExtTextOut</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>foptions</name></expr></argument>, <argument><expr><name>pcliprect</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_linespace</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>p_linespace</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_STRIKE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currSpColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERC</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>val</name><index>[<expr><name>x</name> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_pixel</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currSpColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DWriteContext_Flush</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GdiFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_rect</name><parameter_list>(<parameter><decl><type><name>RECT</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fill_rect</name><argument_list>(<argument><expr><name>rcp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_get_screen_dimensions</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>workarea_rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_work_area</name><argument_list>(<argument><expr><operator>&amp;</operator><name>workarea_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_w</name> <operator>=</operator> <name><name>workarea_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>workarea_rect</name><operator>.</operator><name>left</name></name>

<operator>-</operator> <operator>(</operator><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXFRAME</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXPADDEDBORDER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_h</name> <operator>=</operator> <name><name>workarea_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>workarea_rect</name><operator>.</operator><name>top</name></name>

<operator>-</operator> <operator>(</operator><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYFRAME</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXPADDEDBORDER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal>

<operator>-</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYCAPTION</name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>-</operator> <call><name>gui_mswin_get_menu_height</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_add_menu</name><parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <call><name>CreatePopupMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>s_menu_id</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MENUITEMINFOW</name></type> <name>infow</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>infow</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>fMask</name></name> <operator>=</operator> <name>MIIM_DATA</name> <operator>|</operator> <name>MIIM_TYPE</name> <operator>|</operator> <name>MIIM_ID</name>

<operator>|</operator> <name>MIIM_SUBMENU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>dwItemData</name></name> <operator>=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><name>menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>wID</name></name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>fType</name></name> <operator>=</operator> <name>MFT_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>dwTypeData</name></name> <operator>=</operator> <name>wn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>cch</name></name> <operator>=</operator> <operator>(</operator><name>UINT</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infow</name><operator>.</operator><name>hSubMenu</name></name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InsertMenuItemW</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>parent</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>

?</condition><then> <expr><name>s_menuBar</name></expr> </then><else>: <expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>pos</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mswin_get_menu_height</name><argument_list>(<argument><expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rebuild_tearoff</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_show_popupmenu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>mp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>(</operator><name>LPPOINT</name><operator>)</operator><operator>&amp;</operator><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_show_popupmenu_at</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>mp</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>mp</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_make_popup</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mouse_pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><call><name>gui_find_menu</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDCOrgEx</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mouse_pos</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gui_mch_getmouse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>my</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <call><name>TEXT_X</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <call><name>TEXT_Y</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_show_popupmenu_at</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_make_tearoff</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><call><name>gui_find_menu</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_tearoff</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>, <argument><expr><literal type="number">0xffffL</literal></expr></argument>, <argument><expr><literal type="number">0xffffL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_add_menu_item</name><parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>s_menu_id</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TEAR_STRING</name></expr></argument>, <argument><expr><name>TEAR_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InsertMenu</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>idx</name></expr></argument>, <argument><expr><name>MF_BITMAP</name><operator>|</operator><name>MF_BYPOSITION</name></expr></argument>,

<argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>LPCTSTR</name><operator>)</operator> <name>s_htearbitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>TBBUTTON</name></type> <name>newtb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newtb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newtb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>newtb</name><operator>.</operator><name>iBitmap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newtb</name><operator>.</operator><name>fsStyle</name></name> <operator>=</operator> <name>TBSTYLE_SEP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>newtb</name><operator>.</operator><name>iBitmap</name></name> <operator>=</operator> <call><name>get_toolbar_bitmap</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newtb</name><operator>.</operator><name>fsStyle</name></name> <operator>=</operator> <name>TBSTYLE_BUTTON</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>newtb</name><operator>.</operator><name>idCommand</name></name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newtb</name><operator>.</operator><name>fsState</name></name> <operator>=</operator> <name>TBSTATE_ENABLED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newtb</name><operator>.</operator><name>iString</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>TB_INSERTBUTTON</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>idx</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>&amp;</operator><name>newtb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <operator>(</operator><name>HMENU</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InsertMenuW</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>idx</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name>MF_SEPARATOR</name></expr> </then><else>: <expr><name>MF_STRING</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>MF_BYPOSITION</name></expr></argument>,

<argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rebuild_tearoff</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>==</operator> <operator>(</operator><name>HMENU</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>iButton</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iButton</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>TB_COMMANDTOINDEX</name></expr></argument>,

<argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>TB_DELETEBUTTON</name></expr></argument>, <argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>iButton</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>menu_is_popup</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RemoveMenu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RemoveMenu</name><argument_list>(<argument><expr><name>s_menuBar</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DestroyMenu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>IsWindow</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rebuild_tearoff</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>rebuild_tearoff</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>trect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>roct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>thwnd</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowText</name><argument_list>(<argument><expr><name>thwnd</name></expr></argument>, <argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>thwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trect</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>GetWindowRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rct</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>GetClientRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>roct</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>trect</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>rct</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name><name>trect</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>rct</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <name><name>roct</name><operator>.</operator><name>bottom</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0xffffL</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>thwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_tearoff</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>trect</name><operator>.</operator><name>left</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>trect</name><operator>.</operator><name>top</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOZORDER</name> <operator>|</operator> <name>SWP_NOACTIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>gui_mch_menu_grey</name><parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>grey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>==</operator> <operator>(</operator><name>HMENU</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>TB_ENABLEBUTTON</name></expr></argument>,

<argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <call><name>MAKELONG</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>grey</name></expr> ?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>EnableMenuItem</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr> ?</condition><then> <expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr> </then><else>: <expr><name>s_menuBar</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>grey</name></expr> ?</condition><then> <expr><name>MF_GRAYED</name></expr> </then><else>: <expr><name>MF_ENABLED</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WORD</name></type> <name>menuID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>menuHandle</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menuID</name> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>menuID</name> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><literal type="number">0x8000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>menuHandle</name> <operator>=</operator> <call><name>GetDlgItem</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>, <argument><expr><name>menuID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menuHandle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EnableWindow</name><argument_list>(<argument><expr><name>menuHandle</name></expr></argument>, <argument><expr><operator>!</operator><name>grey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_string</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcpy((LPSTR)p, s); (LPSTR)p += (strlen((LPSTR)p) + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_word</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*p++ = (x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_long</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dwp = (DWORD *)p; *dwp++ = (x); p = (WORD *)dwp</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type>

<name>dialog_callback</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,

<parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name> <name>lParam</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <name>WM_INITDIALOG</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CenterWindow</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><call><name>GetWindow</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GW_OWNER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFocus</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dialog_default_button</name> <operator>&gt;</operator> <name>IDCANCEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFocus</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>dialog_default_button</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFocus</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>DLG_NONBUTTON_CONTROL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <name>WM_COMMAND</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>button</name> <init>= <expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&gt;=</operator> <name>DLG_NONBUTTON_CONTROL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s_textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDlgItemTextW</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>DLG_NONBUTTON_CONTROL</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>s_textfield</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <name>IDOK</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dialog_default_button</name> <operator>&gt;</operator> <name>IDCANCEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EndDialog</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>dialog_default_button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EndDialog</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>button</name> <operator>-</operator> <name>IDCANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>message</name> <operator>==</operator> <name>WM_SYSCOMMAND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>wParam</name> <operator>==</operator> <name>SC_CLOSE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>EndDialog</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dlg_icons</name><index>[]</index></name> <init>= 

<expr><block>{

<expr><literal type="string">"IDR_VIM"</literal></expr>,

<expr><literal type="string">"IDR_VIM_ERROR"</literal></expr>,

<expr><literal type="string">"IDR_VIM_ALERT"</literal></expr>,

<expr><literal type="string">"IDR_VIM_INFO"</literal></expr>,

<expr><literal type="string">"IDR_VIM_QUESTION"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>gui_mch_dialog</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dfltbutton</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>textfield</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>ex_cmd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WORD</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pdlgtemplate</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pnumitems</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>dwp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numButtons</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>buttonWidths</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buttonPositions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buttonYpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nchar</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>lStyle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dlgwidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dlgheight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>editboxheight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>horizWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msgheight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pstart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>last_white</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HFONT</name></type> <name>font</name></decl>, <decl><type ref="prev"/><name>oldFont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TEXTMETRIC</name></type> <name>fontInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fontHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textWidth</name></decl>, <decl><type ref="prev"/><name>minButtonWidth</name></decl>, <decl><type ref="prev"/><name>messageWidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxDialogWidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxDialogHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scroll_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertical</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dlgPaddingX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dlgPaddingY</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>LOGFONTW</name></type> <name>lfSysmenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_lfSysmenu</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CONSOLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>silent_mode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>dfltbutton</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>s_hwnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_dialog_font_metrics</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>type</name> <operator>&gt;</operator> <name>VIM_LAST_TYPE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pdlgtemplate</name> <operator>=</operator> <name>p</name> <operator>=</operator> <operator>(</operator><name>PWORD</name><operator>)</operator><call><name>LocalAlloc</name><argument_list>(<argument><expr><name>LPTR</name></expr></argument>,

<argument><expr><name>DLG_ALLOC_SIZE</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tbuffer</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tbuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>dfltbutton</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>numButtons</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tbuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tbuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DLG_BUTTON_SEP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>numButtons</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dfltbutton</name> <operator>&gt;=</operator> <name>numButtons</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dfltbutton</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buttonWidths</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>numButtons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buttonWidths</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buttonPositions</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>numButtons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buttonPositions</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>GetWindowDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_w32_get_menu_font</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lfSysmenu</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>CreateFontIndirectW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lfSysmenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_lfSysmenu</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>CreateFont</name><argument_list>(<argument><expr><operator>-</operator><name>DLG_FONT_POINT_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>VARIABLE_PITCH</name></expr></argument> , <argument><expr><name>DLG_FONT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s_usenewlook</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>oldFont</name> <operator>=</operator> <call><name>SelectFont</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dlgPaddingX</name> <operator>=</operator> <name>DLG_PADDING_X</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dlgPaddingY</name> <operator>=</operator> <name>DLG_PADDING_Y</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>oldFont</name> <operator>=</operator> <call><name>SelectFont</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><call><name>GetStockObject</name><argument_list>(<argument><expr><name>SYSTEM_FONT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dlgPaddingX</name> <operator>=</operator> <name>DLG_OLD_STYLE_PADDING_X</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dlgPaddingY</name> <operator>=</operator> <name>DLG_OLD_STYLE_PADDING_Y</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GetTextMetrics</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fontInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fontHeight</name> <operator>=</operator> <name><name>fontInfo</name><operator>.</operator><name>tmHeight</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>minButtonWidth</name> <operator>=</operator> <call><name>GetTextWidth</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Cancel"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_hwnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>workarea_rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_work_area</name><argument_list>(<argument><expr><operator>&amp;</operator><name>workarea_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxDialogWidth</name> <operator>=</operator> <name><name>workarea_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>workarea_rect</name><operator>.</operator><name>left</name></name> <operator>-</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxDialogWidth</name> <operator>&gt;</operator> <literal type="number">600</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxDialogWidth</name> <operator>=</operator> <literal type="number">600</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>maxDialogHeight</name> <operator>=</operator> <name><name>workarea_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>workarea_rect</name><operator>.</operator><name>top</name></name> <operator>-</operator> <literal type="number">150</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxDialogWidth</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name>

<operator>-</operator> <operator>(</operator><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXFRAME</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXPADDEDBORDER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxDialogWidth</name> <operator>&lt;</operator> <name>DLG_MIN_MAX_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxDialogWidth</name> <operator>=</operator> <name>DLG_MIN_MAX_WIDTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>maxDialogHeight</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name>

<operator>-</operator> <operator>(</operator><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYFRAME</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXPADDEDBORDER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">4</literal>

<operator>-</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYCAPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxDialogHeight</name> <operator>&lt;</operator> <name>DLG_MIN_MAX_HEIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxDialogHeight</name> <operator>=</operator> <name>DLG_MIN_MAX_HEIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>

<expr_stmt><expr><name>messageWidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msgheight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>msgheight</name> <operator>+=</operator> <name>fontHeight</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>textWidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_white</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pend</name> <operator>=</operator> <name>pstart</name></expr>;</init> <condition><expr><operator>*</operator><name>pend</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pend</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>pend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>pend</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>textWidth</name> <operator>&gt;</operator> <name>maxDialogWidth</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_white</name> <operator>=</operator> <name>pend</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>textWidth</name> <operator>+=</operator> <call><name>GetTextWidthEnc</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textWidth</name> <operator>&gt;=</operator> <name>maxDialogWidth</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>messageWidth</name> <operator>=</operator> <name>maxDialogWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msgheight</name> <operator>+=</operator> <name>fontHeight</name></expr>;</expr_stmt>

<expr_stmt><expr><name>textWidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_white</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pend</name> <operator>-</operator> <operator>(</operator><name>last_white</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>last_white</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_white</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>--</operator><name>l</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>*</operator><name>pend</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>textWidth</name> <operator>&gt;</operator> <name>messageWidth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>messageWidth</name> <operator>=</operator> <name>textWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>pend</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><name>pend</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>message</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>messageWidth</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>dlgwidth</name> <operator>=</operator> <name>messageWidth</name> <operator>+</operator> <name>DLG_ICON_WIDTH</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dlgPaddingX</name>

<operator>+</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXVSCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msgheight</name> <operator>&lt;</operator> <name>DLG_ICON_HEIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msgheight</name> <operator>=</operator> <name>DLG_ICON_HEIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vertical</name> <operator>=</operator> <operator>(</operator><name>p_go</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_VERTICAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vertical</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>horizWidth</name> <operator>=</operator> <name>dlgPaddingX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>tbuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>DLG_BUTTON_SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pend</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>pstart</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>pstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>textWidth</name> <operator>=</operator> <call><name>GetTextWidthEnc</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>pstart</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pend</name> <operator>-</operator> <name>pstart</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textWidth</name> <operator>&lt;</operator> <name>minButtonWidth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>textWidth</name> <operator>=</operator> <name>minButtonWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>textWidth</name> <operator>+=</operator> <name>dlgPaddingX</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buttonWidths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>textWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buttonPositions</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>horizWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>horizWidth</name> <operator>+=</operator> <name>textWidth</name> <operator>+</operator> <name>dlgPaddingX</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>pend</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><name>pend</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>horizWidth</name> <operator>&gt;</operator> <name>maxDialogWidth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vertical</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>horizWidth</name> <operator>&gt;</operator> <name>dlgwidth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dlgwidth</name> <operator>=</operator> <name>horizWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vertical</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>tbuffer</name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>DLG_BUTTON_SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pend</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>pstart</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>pstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>textWidth</name> <operator>=</operator> <call><name>GetTextWidthEnc</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>pstart</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pend</name> <operator>-</operator> <name>pstart</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textWidth</name> <operator>+=</operator> <name>dlgPaddingX</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>textWidth</name> <operator>+=</operator> <name>DLG_VERT_PADDING_X</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>textWidth</name> <operator>&gt;</operator> <name>dlgwidth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dlgwidth</name> <operator>=</operator> <name>textWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>pend</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><name>pend</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dlgwidth</name> <operator>&lt;</operator> <name>DLG_MIN_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dlgwidth</name> <operator>=</operator> <name>DLG_MIN_WIDTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>s_usenewlook</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lStyle</name> <operator>=</operator> <name>DS_MODALFRAME</name> <operator>|</operator> <name>WS_CAPTION</name> <operator>|</operator><name>DS_3DLOOK</name><operator>|</operator> <name>WS_VISIBLE</name> <operator>|</operator><name>DS_SETFONT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lStyle</name> <operator>=</operator> <name>DS_MODALFRAME</name> <operator>|</operator> <name>WS_CAPTION</name> <operator>|</operator><name>DS_3DLOOK</name><operator>|</operator> <name>WS_VISIBLE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>add_long</name><argument_list>(<argument><expr><name>lStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_long</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pnumitems</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>add_word</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>add_word</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>add_word</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>add_word</name><argument_list>(<argument><expr><call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>dlgwidth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>vertical</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dlgheight</name> <operator>=</operator> <name>msgheight</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dlgPaddingY</name>

<operator>+</operator> <name>DLG_VERT_PADDING_Y</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>fontHeight</name> <operator>*</operator> <name>numButtons</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dlgheight</name> <operator>=</operator> <name>msgheight</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dlgPaddingY</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>fontHeight</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>editboxheight</name> <operator>=</operator> <name>fontHeight</name> <operator>+</operator> <name>dlgPaddingY</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>DLG_VERT_PADDING_Y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dlgheight</name> <operator>+=</operator> <name>editboxheight</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dlgheight</name> <operator>&gt;</operator> <name>maxDialogHeight</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>msgheight</name> <operator>=</operator> <name>msgheight</name> <operator>-</operator> <operator>(</operator><name>dlgheight</name> <operator>-</operator> <name>maxDialogHeight</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dlgheight</name> <operator>=</operator> <name>maxDialogHeight</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scroll_flag</name> <operator>=</operator> <name>WS_VSCROLL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>messageWidth</name> <operator>=</operator> <name>dlgwidth</name> <operator>-</operator> <name>DLG_ICON_WIDTH</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>dlgPaddingX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_word</name><argument_list>(<argument><expr><call><name>PixelToDialogY</name><argument_list>(<argument><expr><name>dlgheight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_word</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>add_word</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <call><name>nCopyAnsiToWideChar</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>title</name></expr> ?</condition><then> <expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>title</name></expr>

</then><else>: <expr><operator>(</operator><name>LPSTR</name><operator>)</operator><operator>(</operator><literal type="string">"Vim "</literal><name>VIM_VERSION_MEDIUM</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>nchar</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_usenewlook</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>use_lfSysmenu</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>-</operator><call><name>MulDiv</name><argument_list>(<argument><expr><name><name>lfSysmenu</name><operator>.</operator><name>lfHeight</name></name></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>,

<argument><expr><call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>LOGPIXELSY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>lfSysmenu</name><operator>.</operator><name>lfFaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name><name>lfSysmenu</name><operator>.</operator><name>lfFaceName</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>DLG_FONT_POINT_SIZE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <call><name>nCopyAnsiToWideChar</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DLG_FONT_NAME</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>nchar</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buttonYpos</name> <operator>=</operator> <name>msgheight</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dlgPaddingY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buttonYpos</name> <operator>+=</operator> <name>editboxheight</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>tbuffer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vertical</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>horizWidth</name> <operator>=</operator> <operator>(</operator><name>dlgwidth</name> <operator>-</operator> <name>horizWidth</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numButtons</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>( <init><expr><name>pend</name> <operator>=</operator> <name>pstart</name></expr>;</init>

<condition><expr><operator>*</operator><name>pend</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>pend</name> <operator>!=</operator> <name>DLG_BUTTON_SEP</name><operator>)</operator></expr>;</condition>

<incr><expr><name>pend</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pend</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vertical</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>add_dialog_element</name><argument_list>(<argument><expr><name>p</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <name>dfltbutton</name></expr>

?</condition><then> <expr><name>BS_DEFPUSHBUTTON</name></expr> </then><else>: <expr><name>BS_PUSHBUTTON</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>WS_TABSTOP</name></expr></argument>,

<argument><expr><call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>DLG_VERT_PADDING_X</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>PixelToDialogY</name><argument_list>(<argument><expr><name>buttonYpos</name> 

<operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>fontHeight</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>dlgwidth</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>DLG_VERT_PADDING_X</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><call><name>PixelToDialogY</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>fontHeight</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><name>IDCANCEL</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><literal type="number">0x0080</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>add_dialog_element</name><argument_list>(<argument><expr><name>p</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <name>dfltbutton</name></expr>

?</condition><then> <expr><name>BS_DEFPUSHBUTTON</name></expr> </then><else>: <expr><name>BS_PUSHBUTTON</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>WS_TABSTOP</name></expr></argument>,

<argument><expr><call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>horizWidth</name> <operator>+</operator> <name><name>buttonPositions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>PixelToDialogY</name><argument_list>(<argument><expr><name>buttonYpos</name></expr></argument>)</argument_list></call></expr></argument>, 

<argument><expr><call><name>PixelToDialogX</name><argument_list>(<argument><expr><name><name>buttonWidths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><call><name>PixelToDialogY</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>fontHeight</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><name>IDCANCEL</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><literal type="number">0x0080</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>pend</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pnumitems</name> <operator>+=</operator> <name>numButtons</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>add_dialog_element</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SS_ICON</name></expr></argument>,

<argument><expr><call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>dlgPaddingX</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>PixelToDialogY</name><argument_list>(<argument><expr><name>dlgPaddingY</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>DLG_ICON_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>PixelToDialogY</name><argument_list>(<argument><expr><name>DLG_ICON_HEIGHT</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DLG_NONBUTTON_CONTROL</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><literal type="number">0x0082</literal></expr></argument>,

<argument><expr><name><name>dlg_icons</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>add_dialog_element</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ES_LEFT</name><operator>|</operator><name>scroll_flag</name><operator>|</operator><name>ES_MULTILINE</name><operator>|</operator><name>ES_READONLY</name></expr></argument>,

<argument><expr><call><name>PixelToDialogX</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>dlgPaddingX</name> <operator>+</operator> <name>DLG_ICON_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>PixelToDialogY</name><argument_list>(<argument><expr><name>dlgPaddingY</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>messageWidth</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><call><name>PixelToDialogY</name><argument_list>(<argument><expr><name>msgheight</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DLG_NONBUTTON_CONTROL</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><literal type="number">0x0081</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>add_dialog_element</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ES_LEFT</name><operator>|</operator><name>ES_AUTOHSCROLL</name><operator>|</operator><name>WS_TABSTOP</name><operator>|</operator><name>WS_BORDER</name></expr></argument>,

<argument><expr><call><name>PixelToDialogX</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>dlgPaddingX</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>PixelToDialogY</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>dlgPaddingY</name> <operator>+</operator> <name>msgheight</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>dlgwidth</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>dlgPaddingX</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>PixelToDialogY</name><argument_list>(<argument><expr><name>fontHeight</name> <operator>+</operator> <name>dlgPaddingY</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DLG_NONBUTTON_CONTROL</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><literal type="number">0x0081</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>textfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pnumitems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pnumitems</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectFont</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>oldFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dialog_default_button</name> <operator>=</operator> <name>DLG_NONBUTTON_CONTROL</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s_textfield</name> <operator>=</operator> <name>textfield</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>dialog_default_button</name> <operator>=</operator> <name>IDCANCEL</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>dfltbutton</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_textfield</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>DialogBoxIndirect</name><argument_list>(

<argument><expr><name>g_hinst</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPDLGTEMPLATE</name><operator>)</operator><name>pdlgtemplate</name></expr></argument>,

<argument><expr><name>s_hwnd</name></expr></argument>,

<argument><expr><operator>(</operator><name>DLGPROC</name><operator>)</operator><name>dialog_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><call><name>LocalHandle</name><argument_list>(<argument><expr><name>pdlgtemplate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buttonWidths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buttonPositions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFocus</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nchar</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>PWORD</name></type>

<name>add_dialog_element</name><parameter_list>(

<parameter><decl><type><name>PWORD</name></type> <name>p</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>lStyle</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>Id</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>clss</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>caption</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nchar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lpwAlign</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>lStyle</name> <operator>=</operator> <name>lStyle</name> <operator>|</operator> <name>WS_VISIBLE</name> <operator>|</operator> <name>WS_CHILD</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>LOWORD</name><argument_list>(<argument><expr><name>lStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>HIWORD</name><argument_list>(<argument><expr><name>lStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>Id</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator><literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>clss</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <call><name>nCopyAnsiToWideChar</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>caption</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>nchar</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><name>p</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LPWORD</name></type>

<name>lpwAlign</name><parameter_list>(

<parameter><decl><type><name>LPWORD</name></type> <name>lpIn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>ul</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ul</name> <operator>=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><name>lpIn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ul</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ul</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ul</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>LPWORD</name><operator>)</operator><name>ul</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>nCopyAnsiToWideChar</name><parameter_list>(

<parameter><decl><type><name>LPWORD</name></type> <name>lpWCStr</name></decl></parameter>,

<parameter><decl><type><name>LPSTR</name></type> <name>lpAnsiIn</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name></type> <name>use_enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nChar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>lstrlen</name><argument_list>(<argument><expr><name>lpAnsiIn</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>use_enc</name> <operator>&amp;&amp;</operator> <name>enc_codepage</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GetACP</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>enc_codepage</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>lpAnsiIn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>lpWCStr</name></expr></argument>, <argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nChar</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nChar</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nChar</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(

<argument><expr><ternary><condition><expr><name>enc_codepage</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>enc_codepage</name></expr> </then><else>: <expr><name>CP_ACP</name></expr></else></ternary></expr></argument>,

<argument><expr><name>MB_PRECOMPOSED</name></expr></argument>,

<argument><expr><name>lpAnsiIn</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name>lpWCStr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nChar</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>lpWCStr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>WORD</name><operator>)</operator><literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>lpWCStr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator><literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>nChar</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>HMENU</name></type>

<name>tearoff_lookup_menuhandle</name><parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><name>WORD</name></type> <name>menu_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>( <init>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><literal type="number">0x8000</literal><operator>)</operator> <operator>==</operator> <name>menu_id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type>

<name>tearoff_callback</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,

<parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <name>WM_INITDIALOG</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>DWLP_USER</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>HandleMouseHide</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <name>WM_COMMAND</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>mp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GetWindowRect</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>(</operator><name>vimmenu_T</name><operator>*</operator><operator>)</operator><call><name>GetWindowLongPtr</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>DWLP_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>TrackPopupMenu</name><argument_list>(

<argument><expr><call><name>tearoff_lookup_menuhandle</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>TPM_LEFTALIGN</name> <operator>|</operator> <name>TPM_LEFTBUTTON</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>mp</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>s_hwnd</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>WM_COMMAND</name></expr></argument>, <argument><expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFocus</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>message</name> <operator>==</operator> <name>WM_SYSCOMMAND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>wParam</name> <operator>==</operator> <name>SC_CLOSE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <name>WM_EXITSIZEMOVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetActiveWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_dialog_font_metrics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HFONT</name></type> <name>hfontTools</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dlgFontSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIZE</name></type> <name>size</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>LOGFONTW</name></type> <name>lfSysmenu</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s_usenewlook</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_w32_get_menu_font</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lfSysmenu</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hfontTools</name> <operator>=</operator> <call><name>CreateFontIndirectW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lfSysmenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>hfontTools</name> <operator>=</operator> <call><name>CreateFont</name><argument_list>(<argument><expr><operator>-</operator><name>DLG_FONT_POINT_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VARIABLE_PITCH</name></expr></argument> , <argument><expr><name>DLG_FONT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hfontTools</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>hfontTools</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetTextExtentPoint</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>,

<argument><expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</literal></expr></argument>,

<argument><expr><literal type="number">52</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_dlgfntwidth</name> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>size</name><operator>.</operator><name>cx</name></name> <operator>/</operator> <literal type="number">26</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s_dlgfntheight</name> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator><name><name>size</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_usenewlook</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s_usenewlook</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dlgFontSize</name> <operator>=</operator> <call><name>GetDialogBaseUnits</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>s_dlgfntwidth</name> <operator>=</operator> <call><name>LOWORD</name><argument_list>(<argument><expr><name>dlgFontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_dlgfntheight</name> <operator>=</operator> <call><name>HIWORD</name><argument_list>(<argument><expr><name>dlgFontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mch_tearoff</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>initX</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>initY</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WORD</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pdlgtemplate</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pnumitems</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptrueheight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>template_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nchar</name></decl>, <decl><type ref="prev"/><name>textWidth</name></decl>, <decl><type ref="prev"/><name>submenuWidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>lStyle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>lExtendedStyle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>dlgwidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>menuID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>pmenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>top_menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>the_menu</name> <init>= <expr><name>menu</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HFONT</name></type> <name>font</name></decl>, <decl><type ref="prev"/><name>oldFont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>, <decl><type ref="prev"/><name>spaceWidth</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>columnWidths</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>label</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>acLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nameLen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>padding0</name></decl>, <decl><type ref="prev"/><name>padding1</name></decl>, <decl><type ref="prev"/><name>padding2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sepPadding</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>LOGFONTW</name></type> <name>lfSysmenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_lfSysmenu</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>mp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>(</operator><name>LPPOINT</name><operator>)</operator><operator>&amp;</operator><name>mp</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>mp</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>SWP_NOACTIVATE</name> <operator>|</operator> <name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOZORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>title</name> <operator>==</operator> <name>MNU_HIDDEN_CHAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>title</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>template_len</name> <operator>=</operator> <name>DLG_ALLOC_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pdlgtemplate</name> <operator>=</operator> <name>p</name> <operator>=</operator> <operator>(</operator><name>WORD</name> <operator>*</operator><operator>)</operator><call><name>LocalAlloc</name><argument_list>(<argument><expr><name>LPTR</name></expr></argument>, <argument><expr><name>template_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>GetWindowDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_w32_get_menu_font</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lfSysmenu</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>CreateFontIndirectW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lfSysmenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_lfSysmenu</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>CreateFont</name><argument_list>(<argument><expr><operator>-</operator><name>DLG_FONT_POINT_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>VARIABLE_PITCH</name></expr></argument> , <argument><expr><name>DLG_FONT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s_usenewlook</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>oldFont</name> <operator>=</operator> <call><name>SelectFont</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>oldFont</name> <operator>=</operator> <call><name>SelectFont</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><call><name>GetStockObject</name><argument_list>(<argument><expr><name>SYSTEM_FONT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>spaceWidth</name> <operator>=</operator> <call><name>GetTextWidth</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>submenuWidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>columnWidths</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pmenu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</init> <condition><expr><name>pmenu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pmenu</name> <operator>=</operator> <name><name>pmenu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>col</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>pmenu</name><operator>-&gt;</operator><name>dname</name></name></expr> </then><else>: <expr><name><name>pmenu</name><operator>-&gt;</operator><name>actext</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>text</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>textWidth</name> <operator>=</operator> <call><name>GetTextWidthEnc</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textWidth</name> <operator>&gt;</operator> <name><name>columnWidths</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>columnWidths</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name>textWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pmenu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>submenuWidth</name> <operator>=</operator> <name>TEAROFF_COLUMN_PADDING</name> <operator>*</operator> <name>spaceWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>columnWidths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>submenuWidth</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>columnWidths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>submenuWidth</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>columnWidths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>spaceWidth</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>columnWidths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>TEAROFF_COLUMN_PADDING</name> <operator>*</operator> <name>spaceWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>columnWidths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>submenuWidth</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>textWidth</name> <operator>=</operator> <name><name>columnWidths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>columnWidths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>submenuWidth</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>submenuWidth</name> <operator>=</operator> <call><name>GetTextWidth</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>TEAROFF_SUBMENU_LABEL</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>TEAROFF_SUBMENU_LABEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textWidth</name> <operator>+=</operator> <name>submenuWidth</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dlgwidth</name> <operator>=</operator> <call><name>GetTextWidthEnc</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textWidth</name> <operator>&gt;</operator> <name>dlgwidth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dlgwidth</name> <operator>=</operator> <name>textWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dlgwidth</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>TEAROFF_PADDING_X</name> <operator>+</operator> <name>TEAROFF_BUTTON_PAD_X</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_usenewlook</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lStyle</name> <operator>=</operator> <name>DS_MODALFRAME</name> <operator>|</operator> <name>WS_CAPTION</name><operator>|</operator> <name>WS_SYSMENU</name> <operator>|</operator><name>DS_SETFONT</name><operator>|</operator> <name>WS_VISIBLE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lStyle</name> <operator>=</operator> <name>DS_MODALFRAME</name> <operator>|</operator> <name>WS_CAPTION</name><operator>|</operator> <name>WS_SYSMENU</name> <operator>|</operator> <name>WS_VISIBLE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>lExtendedStyle</name> <operator>=</operator> <name>WS_EX_TOOLWINDOW</name><operator>|</operator><name>WS_EX_STATICEDGE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>LOWORD</name><argument_list>(<argument><expr><name>lStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>HIWORD</name><argument_list>(<argument><expr><name>lStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>LOWORD</name><argument_list>(<argument><expr><name>lExtendedStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>HIWORD</name><argument_list>(<argument><expr><name>lExtendedStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pnumitems</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>gui_mch_getmouse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>initX</name> <operator>==</operator> <literal type="number">0xffffL</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>initX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>initY</name> <operator>==</operator> <literal type="number">0xffffL</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>PixelToDialogY</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>PixelToDialogY</name><argument_list>(<argument><expr><name>initY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>dlgwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>ptrueheight</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <call><name>nCopyAnsiToWideChar</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>title</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>title</name></expr>

</then><else>: <expr><operator>(</operator><name>LPSTR</name><operator>)</operator><operator>(</operator><literal type="string">"Vim "</literal><name>VIM_VERSION_MEDIUM</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>nchar</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_usenewlook</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>use_lfSysmenu</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>-</operator><call><name>MulDiv</name><argument_list>(<argument><expr><name><name>lfSysmenu</name><operator>.</operator><name>lfHeight</name></name></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>,

<argument><expr><call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>LOGPIXELSY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>lfSysmenu</name><operator>.</operator><name>lfFaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name><name>lfSysmenu</name><operator>.</operator><name>lfFaceName</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>DLG_FONT_POINT_SIZE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <call><name>nCopyAnsiToWideChar</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DLG_FONT_NAME</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>nchar</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TEAR_STRING</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>top_menu</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sepPadding</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pdlgtemplate</name><operator>)</operator> <operator>+</operator> <literal type="number">1000</literal> <operator>&gt;</operator> <name>template_len</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WORD</name> <modifier>*</modifier></type><name>newp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>(</operator><name>WORD</name> <operator>*</operator><operator>)</operator><call><name>LocalAlloc</name><argument_list>(<argument><expr><name>LPTR</name></expr></argument>, <argument><expr><name>template_len</name> <operator>+</operator> <literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>template_len</name> <operator>+=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>pdlgtemplate</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pdlgtemplate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>newp</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>pdlgtemplate</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pnumitems</name> <operator>=</operator> <name>newp</name> <operator>+</operator> <operator>(</operator><name>pnumitems</name> <operator>-</operator> <name>pdlgtemplate</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptrueheight</name> <operator>=</operator> <name>newp</name> <operator>+</operator> <operator>(</operator><name>ptrueheight</name> <operator>-</operator> <name>pdlgtemplate</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><call><name>LocalHandle</name><argument_list>(<argument><expr><name>pdlgtemplate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pdlgtemplate</name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>nameLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>padding0</name> <operator>=</operator> <operator>(</operator><name><name>columnWidths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <call><name>GetTextWidthEnc</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <name>spaceWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>padding0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>acLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>acLen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>textWidth</name> <operator>=</operator> <call><name>GetTextWidthEnc</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>, <argument><expr><name>acLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>textWidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>padding1</name> <operator>=</operator> <operator>(</operator><name><name>columnWidths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>textWidth</name><operator>)</operator> <operator>/</operator> <name>spaceWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>padding1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>padding2</name> <operator>=</operator> <name>submenuWidth</name> <operator>/</operator> <name>spaceWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>padding2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>menuID</name> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>TEAROFF_SUBMENU_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menuID</name> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><literal type="number">0x8000</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>label</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>nameLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>TAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>label</name> <operator>+</operator> <name>nameLen</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<while>while <condition>(<expr><name>padding0</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>text</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>, <argument><expr><name>acLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>+=</operator> <name>acLen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>padding1</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>text</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>TEAROFF_SUBMENU_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>TEAROFF_SUBMENU_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<while>while <condition>(<expr><name>padding2</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>text</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>text</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>add_dialog_element</name><argument_list>(<argument><expr><name>p</name></expr></argument>,

<argument><expr><name>BS_PUSHBUTTON</name><operator>|</operator><name>BS_LEFT</name></expr></argument>,

<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>TEAROFF_PADDING_X</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><name>sepPadding</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <operator>(</operator><operator>*</operator><name>pnumitems</name><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><call><name>PixelToDialogX</name><argument_list>(<argument><expr><name>dlgwidth</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>TEAROFF_PADDING_X</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><literal type="number">12</literal></expr></argument>,

<argument><expr><name>menuID</name></expr></argument>, <argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><literal type="number">0x0080</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pnumitems</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>ptrueheight</name> <operator>=</operator> <operator>(</operator><name>WORD</name><operator>)</operator><operator>(</operator><name>sepPadding</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <operator>(</operator><operator>*</operator><name>pnumitems</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name> <operator>=</operator> <call><name>CreateDialogIndirectParam</name><argument_list>(

<argument><expr><name>g_hinst</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPDLGTEMPLATE</name><operator>)</operator><name>pdlgtemplate</name></expr></argument>,

<argument><expr><name>s_hwnd</name></expr></argument>,

<argument><expr><operator>(</operator><name>DLGPROC</name><operator>)</operator><name>tearoff_callback</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>top_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><call><name>LocalHandle</name><argument_list>(<argument><expr><name>pdlgtemplate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectFont</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>oldFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetActiveWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>force_menu_update</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_w32_rc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TBSTYLE_FLAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBSTYLE_FLAT</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>initialise_toolbar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>InitCommonControls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_toolbarhwnd</name> <operator>=</operator> <call><name>CreateToolbarEx</name><argument_list>(

<argument><expr><name>s_hwnd</name></expr></argument>,

<argument><expr><name>WS_CHILD</name> <operator>|</operator> <name>TBSTYLE_TOOLTIPS</name> <operator>|</operator> <name>TBSTYLE_FLAT</name></expr></argument>,

<argument><expr><literal type="number">4000</literal></expr></argument>, 

<argument><expr><literal type="number">31</literal></expr></argument>, 

<argument><expr><name>g_hinst</name></expr></argument>,

<argument><expr><name>IDR_TOOLBAR1</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>TOOLBAR_BUTTON_WIDTH</name></expr></argument>, 

<argument><expr><name>TOOLBAR_BUTTON_HEIGHT</name></expr></argument>,

<argument><expr><name>TOOLBAR_BUTTON_WIDTH</name></expr></argument>,

<argument><expr><name>TOOLBAR_BUTTON_HEIGHT</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TBBUTTON</name></expr></argument>)</argument_list></sizeof></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>TB_SETSTYLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>TB_GETSTYLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>TBSTYLE_TRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_toolbar_wndproc</name> <operator>=</operator> <call><name>SubclassWindow</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>toolbar_wndproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_show_toolbar</name><argument_list>(<argument><expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type>

<name>toolbar_wndproc</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>,

<parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>HandleMouseHide</name><argument_list>(<argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>CallWindowProc</name><argument_list>(<argument><expr><name>s_toolbar_wndproc</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_toolbar_bitmap</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>menu</name><operator>-&gt;</operator><name>icon_builtin</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>fname</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hbitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_find_iconfile</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"bmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hbitmap</name> <operator>=</operator> <call><name>LoadImage</name><argument_list>(

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>fname</name></expr></argument>,

<argument><expr><name>IMAGE_BITMAP</name></expr></argument>,

<argument><expr><name>TOOLBAR_BUTTON_WIDTH</name></expr></argument>,

<argument><expr><name>TOOLBAR_BUTTON_HEIGHT</name></expr></argument>,

<argument><expr><name>LR_LOADFROMFILE</name> <operator>|</operator>

<name>LR_LOADMAP3DCOLORS</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hbitmap</name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>gui_find_bitmap</name><argument_list>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"bmp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hbitmap</name> <operator>=</operator> <call><name>LoadImage</name><argument_list>(

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>fname</name></expr></argument>,

<argument><expr><name>IMAGE_BITMAP</name></expr></argument>,

<argument><expr><name>TOOLBAR_BUTTON_WIDTH</name></expr></argument>,

<argument><expr><name>TOOLBAR_BUTTON_HEIGHT</name></expr></argument>,

<argument><expr><name>LR_LOADFROMFILE</name> <operator>|</operator>

<name>LR_LOADMAP3DCOLORS</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hbitmap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>TBADDBITMAP</name></type> <name>tbAddBitmap</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tbAddBitmap</name><operator>.</operator><name>hInst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbAddBitmap</name><operator>.</operator><name>nID</name></name> <operator>=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><name>hbitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_toolbarhwnd</name></expr></argument>, <argument><expr><name>TB_ADDBITMAP</name></expr></argument>,

<argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>&amp;</operator><name>tbAddBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>&lt;</operator> <name>TOOLBAR_BITMAP_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>initialise_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>InitCommonControls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_tabhwnd</name> <operator>=</operator> <call><name>CreateWindow</name><argument_list>(<argument><expr><name>WC_TABCONTROL</name></expr></argument>, <argument><expr><literal type="string">"Vim tabline"</literal></expr></argument>,

<argument><expr><name>WS_CHILD</name><operator>|</operator><name>TCS_FOCUSNEVER</name><operator>|</operator><name>TCS_TOOLTIPS</name></expr></argument>,

<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, <argument><expr><name>CW_USEDEFAULT</name></expr></argument>, <argument><expr><name>CW_USEDEFAULT</name></expr></argument>,

<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, <argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_tabline_wndproc</name> <operator>=</operator> <call><name>SubclassWindow</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><name>tabline_wndproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tabline_height</name></name> <operator>=</operator> <name>TABLINE_HEIGHT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSMENU_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_tabline_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tabpage_T</name> <modifier>*</modifier></type>

<name>GetTabFromPoint</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>,

<parameter><decl><type><name>POINT</name></type> <name>pt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>ptp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_mch_showing_tabline</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>TCHITTESTINFO</name></type> <name>htinfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>htinfo</name><operator>.</operator><name>pt</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_tabhwnd</name> <operator>==</operator> <name>hWnd</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>TabCtrl_HitTest</name><argument_list>(<argument><expr><name>s_tabhwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptp</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>POINT</name></type> <name>s_pt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HCURSOR</name></type> <name>s_hCursor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type>

<name>tabline_wndproc</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>,

<parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nCenter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HandleMouseHide</name><argument_list>(<argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>uMsg</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>WM_LBUTTONDOWN</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>s_pt</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GET_X_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_pt</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GET_Y_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetCapture</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_hCursor</name> <operator>=</operator> <call><name>GetCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_MOUSEMOVE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GetCapture</name><argument_list>()</argument_list></call> <operator>==</operator> <name>hwnd</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>wParam</name> <operator>&amp;</operator> <name>MK_LBUTTON</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GET_X_LPARAM</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>s_pt</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>pt</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>s_pt</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXDRAG</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_SIZEWE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>GetTabFromPoint</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>idx0</name> <operator>=</operator> <call><name>tabpage_index</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <call><name>tabpage_index</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TabCtrl_GetItemRect</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>idx1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nCenter</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>left</name></name> <operator>+</operator> <operator>(</operator><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx0</name> <operator>&lt;</operator> <name>idx1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>nCenter</name> <operator>&lt;</operator> <name><name>pt</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>tabpage_move</name><argument_list>(<argument><expr><name>idx1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>idx1</name> <operator>&lt;</operator> <name>idx0</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pt</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name>nCenter</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>tabpage_move</name><argument_list>(<argument><expr><name>idx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>WM_LBUTTONUP</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetCapture</name><argument_list>()</argument_list></call> <operator>==</operator> <name>hwnd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name>s_hCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseCapture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>CallWindowProc</name><argument_list>(<argument><expr><name>s_tabline_wndproc</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_OLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_set_foreground</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsIconic</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>, <argument><expr><name>WM_SYSCOMMAND</name></expr></argument>, <argument><expr><name>SC_RESTORE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>s_hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dyn_imm_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>hLibImm</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><literal type="string">"imm32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hLibImm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pImmGetCompositionStringA</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmGetCompositionStringA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmGetCompositionStringW</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmGetCompositionStringW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmGetContext</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmGetContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmAssociateContext</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmAssociateContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmReleaseContext</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmReleaseContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmGetOpenStatus</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmGetOpenStatus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmSetOpenStatus</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmSetOpenStatus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmGetCompositionFontW</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmGetCompositionFontW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmSetCompositionFontW</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmSetCompositionFontW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmSetCompositionWindow</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmSetCompositionWindow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmGetConversionStatus</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmGetConversionStatus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmSetConversionStatus</name>

<operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>, <argument><expr><literal type="string">"ImmSetConversionStatus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>pImmGetCompositionStringA</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>pImmGetCompositionStringW</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>pImmGetContext</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>pImmAssociateContext</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>pImmReleaseContext</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>pImmGetOpenStatus</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>pImmSetOpenStatus</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>pImmGetCompositionFontW</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>pImmSetCompositionFontW</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>pImmSetCompositionWindow</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>pImmGetConversionStatus</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>pImmSetConversionStatus</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hLibImm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hLibImm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pImmGetContext</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XPM_W32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_XPM</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>_signicon_t</name>

<block>{

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hImage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>uType</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XPM_W32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hShape</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>signicon_t</name>;</typedef>

<function><type><name>void</name></type>

<name>gui_mch_drawsign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>typenr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>signicon_t</name> <modifier>*</modifier></type><name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <operator>(</operator><name>sign</name> <operator>=</operator> <operator>(</operator><name>signicon_t</name> <operator>*</operator><operator>)</operator><call><name>sign_get_image</name><argument_list>(<argument><expr><name>typenr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DWriteContext_Flush</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>sign</name><operator>-&gt;</operator><name>uType</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>IMAGE_BITMAP</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdcMem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hbmpOld</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hdcMem</name> <operator>=</operator> <call><name>CreateCompatibleDC</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hbmpOld</name> <operator>=</operator> <operator>(</operator><name>HBITMAP</name><operator>)</operator><call><name>SelectObject</name><argument_list>(<argument><expr><name>hdcMem</name></expr></argument>, <argument><expr><name><name>sign</name><operator>-&gt;</operator><name>hImage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BitBlt</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>hdcMem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SRCCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>hdcMem</name></expr></argument>, <argument><expr><name>hbmpOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name>hdcMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>IMAGE_ICON</name></expr>:</case>

<case>case <expr><name>IMAGE_CURSOR</name></expr>:</case>

<expr_stmt><expr><call><name>DrawIconEx</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>HICON</name><operator>)</operator><name><name>sign</name><operator>-&gt;</operator><name>hImage</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DI_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XPM_W32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>IMAGE_XPM</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>HDC</name></type> <name>hdcMem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hbmpOld</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hdcMem</name> <operator>=</operator> <call><name>CreateCompatibleDC</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hbmpOld</name> <operator>=</operator> <operator>(</operator><name>HBITMAP</name><operator>)</operator><call><name>SelectObject</name><argument_list>(<argument><expr><name>hdcMem</name></expr></argument>, <argument><expr><name><name>sign</name><operator>-&gt;</operator><name>hShape</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BitBlt</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>hdcMem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SRCAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>hdcMem</name></expr></argument>, <argument><expr><name><name>sign</name><operator>-&gt;</operator><name>hImage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BitBlt</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>hdcMem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SRCPAINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>hdcMem</name></expr></argument>, <argument><expr><name>hbmpOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name>hdcMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>close_signicon_image</name><parameter_list>(<parameter><decl><type><name>signicon_t</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>sign</name><operator>-&gt;</operator><name>uType</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>IMAGE_BITMAP</name></expr>:</case>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><operator>(</operator><name>HGDIOBJ</name><operator>)</operator><name><name>sign</name><operator>-&gt;</operator><name>hImage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>IMAGE_CURSOR</name></expr>:</case>

<expr_stmt><expr><call><name>DestroyCursor</name><argument_list>(<argument><expr><operator>(</operator><name>HCURSOR</name><operator>)</operator><name><name>sign</name><operator>-&gt;</operator><name>hImage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>IMAGE_ICON</name></expr>:</case>

<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><operator>(</operator><name>HICON</name><operator>)</operator><name><name>sign</name><operator>-&gt;</operator><name>hImage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XPM_W32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>IMAGE_XPM</name></expr>:</case>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><operator>(</operator><name>HBITMAP</name><operator>)</operator><name><name>sign</name><operator>-&gt;</operator><name>hImage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><operator>(</operator><name>HBITMAP</name><operator>)</operator><name><name>sign</name><operator>-&gt;</operator><name>hShape</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>gui_mch_register_sign</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>signfile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>signicon_t</name></type> <name>sign</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sign</name><operator>.</operator><name>hImage</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <name>signfile</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>signfile</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>&gt;</operator> <name>signfile</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>do_load</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRICMP</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".bmp"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sign</name><operator>.</operator><name>uType</name></name> <operator>=</operator> <name>IMAGE_BITMAP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRICMP</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".ico"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sign</name><operator>.</operator><name>uType</name></name> <operator>=</operator> <name>IMAGE_ICON</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRICMP</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".cur"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>STRICMP</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".ani"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sign</name><operator>.</operator><name>uType</name></name> <operator>=</operator> <name>IMAGE_CURSOR</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>do_load</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_load</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sign</name><operator>.</operator><name>hImage</name></name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>LoadImage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>signfile</name></expr></argument>, <argument><expr><name><name>sign</name><operator>.</operator><name>uType</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>,

<argument><expr><name>LR_LOADFROMFILE</name> <operator>|</operator> <name>LR_CREATEDIBSECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XPM_W32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRICMP</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".xpm"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sign</name><operator>.</operator><name>uType</name></name> <operator>=</operator> <name>IMAGE_XPM</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LoadXpmImage</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>signfile</name></expr></argument>, <argument><expr><operator>(</operator><name>HBITMAP</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sign</name><operator>.</operator><name>hImage</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>HBITMAP</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sign</name><operator>.</operator><name>hShape</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psign</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sign</name><operator>.</operator><name>hImage</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>psign</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>signicon_t</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>psign</name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psign</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sign</name><operator>.</operator><name>hImage</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close_signicon_image</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_signdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>psign</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_sign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>close_signicon_image</name><argument_list>(<argument><expr><operator>(</operator><name>signicon_t</name> <operator>*</operator><operator>)</operator><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>multiline_balloon_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hDll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>comctl_dll</name><index>[]</index></name> <init>= <expr><literal type="string">"comctl32.dll"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>multiline_tip</name> <init>= <expr><name>MAYBE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>multiline_tip</name> <operator>!=</operator> <name>MAYBE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>multiline_tip</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hDll</name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>comctl_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hDll</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DLLGETVERSIONPROC</name></type> <name>pGetVer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pGetVer</name> <operator>=</operator> <operator>(</operator><name>DLLGETVERSIONPROC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hDll</name></expr></argument>, <argument><expr><literal type="string">"DllGetVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pGetVer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DLLVERSIONINFO</name></type> <name>dvi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dvi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dvi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dvi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dvi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call>(<modifier>*</modifier><name>pGetVer</name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>dvi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dvi</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>&gt;</operator> <literal type="number">4</literal>

<operator>||</operator> <operator>(</operator><name><name>dvi</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>==</operator> <literal type="number">4</literal>

<operator>&amp;&amp;</operator> <name><name>dvi</name><operator>.</operator><name>dwMinorVersion</name></name> <operator>&gt;=</operator> <literal type="number">70</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>multiline_tip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>multiline_tip</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwHandle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><call><name>GetFileVersionInfoSize</name><argument_list>(<argument><expr><name>comctl_dll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>VS_FIXEDFILEINFO</name> <modifier>*</modifier></type><name>ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>vlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>GetFileVersionInfo</name><argument_list>(<argument><expr><name>comctl_dll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>VerQueryValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>vlen</name>

<operator>&amp;&amp;</operator> <call><name>HIWORD</name><argument_list>(<argument><expr><name><name>ver</name><operator>-&gt;</operator><name>dwFileVersionMS</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><call><name>HIWORD</name><argument_list>(<argument><expr><name><name>ver</name><operator>-&gt;</operator><name>dwFileVersionMS</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal>

<operator>&amp;&amp;</operator> <call><name>LOWORD</name><argument_list>(<argument><expr><name><name>ver</name><operator>-&gt;</operator><name>dwFileVersionMS</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">70</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>multiline_tip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>multiline_tip</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>multiline_tip</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>multiline_tip</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>make_tooltip</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>POINT</name></type> <name>pt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TOOLINFOW</name> <modifier>*</modifier></type><name>pti</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ToolInfoSize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>multiline_balloon_available</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ToolInfoSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TOOLINFOW_NEW</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ToolInfoSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TOOLINFOW</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pti</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>ToolInfoSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pti</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>balloon</name></name> <operator>=</operator> <call><name>CreateWindowExW</name><argument_list>(<argument><expr><name>WS_EX_TOPMOST</name></expr></argument>, <argument><expr><name>TOOLTIPS_CLASSW</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>WS_POPUP</name> <operator>|</operator> <name>TTS_NOPREFIX</name> <operator>|</operator> <name>TTS_ALWAYSTIP</name></expr></argument>,

<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, <argument><expr><name>CW_USEDEFAULT</name></expr></argument>, <argument><expr><name>CW_USEDEFAULT</name></expr></argument>, <argument><expr><name>CW_USEDEFAULT</name></expr></argument>,

<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloon</name></name></expr></argument>, <argument><expr><name>HWND_TOPMOST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>SWP_NOMOVE</name> <operator>|</operator> <name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOACTIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>=</operator> <name>ToolInfoSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>uFlags</name></name> <operator>=</operator> <name>TTF_SUBCLASS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>=</operator> <name><name>beval</name><operator>-&gt;</operator><name>target</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>hinst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>uId</name></name> <operator>=</operator> <name>ID_BEVAL_TOOLTIP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>multiline_balloon_available</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TRUE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TOOLINFOW_NEW</name> <modifier>*</modifier></type><name>ptin</name> <init>= <expr><operator>(</operator><name>TOOLINFOW_NEW</name> <operator>*</operator><operator>)</operator><name>pti</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>lpszText</name></name> <operator>=</operator> <name>LPSTR_TEXTCALLBACKW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>tofree</name></name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name><operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptin</name><operator>-&gt;</operator><name>lParam</name></name> <operator>=</operator> <operator>(</operator><name>LPARAM</name><operator>)</operator><name><name>beval</name><operator>-&gt;</operator><name>tofree</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendMessageW</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloon</name></name></expr></argument>, <argument><expr><name>TTM_SETMAXTIPWIDTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name><name>rect</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>tofree</name></name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name><operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>lpszText</name></name> <operator>=</operator> <operator>(</operator><name>LPWSTR</name><operator>)</operator><name><name>beval</name><operator>-&gt;</operator><name>tofree</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>pt</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>pt</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>pt</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>pt</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendMessageW</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloon</name></name></expr></argument>, <argument><expr><name>TTM_ADDTOOLW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>pti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendMessageW</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloon</name></name></expr></argument>, <argument><expr><name>TTM_SETDELAYTIME</name></expr></argument>, <argument><expr><name>TTDT_INITIAL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SendMessageW</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloon</name></name></expr></argument>, <argument><expr><name>TTM_SETDELAYTIME</name></expr></argument>, <argument><expr><name>TTDT_AUTOPOP</name></expr></argument>, <argument><expr><literal type="number">30000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mouse_event</name><argument_list>(<argument><expr><name>MOUSEEVENTF_MOVE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mouse_event</name><argument_list>(<argument><expr><name>MOUSEEVENTF_MOVE</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>delete_tooltip</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloon</name></name></expr></argument>, <argument><expr><name>WM_CLOSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VOID</name> <name>CALLBACK</name></type>

<name>BevalTimerProc</name><parameter_list>(

<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>UINT</name> <name>uMsg</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>UINT_PTR</name> <name>idEvent</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>dwTime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_beval</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cur_beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>==</operator> <name>ShS_SHOWING</name> <operator>||</operator> <operator>!</operator><name>p_beval</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WindowFromPoint</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>s_textArea</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ScreenToClient</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PtInRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>LastActivity</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>dwTime</name> <operator>-</operator> <name>LastActivity</name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>p_bdlay</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>!=</operator> <name>ShS_PENDING</name>

<operator>||</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>cur_beval</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>pt</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal>

<operator>||</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>cur_beval</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cur_beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_PENDING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_beval</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>pt</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_beval</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>pt</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_beval</name><operator>-&gt;</operator><name>msgCB</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>cur_beval</name><operator>-&gt;</operator><name>msgCB</name></name>)<argument_list>(<argument><expr><name>cur_beval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_disable_beval_area</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier><name>beval</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>KillTimer</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><name>BevalTimerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_enable_beval_area</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>beval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>BevalTimerId</name> <operator>=</operator> <call><name>SetTimer</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><operator>(</operator><name>p_bdlay</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>BevalTimerProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_post_balloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <ternary><condition><expr><name>mesg</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>delete_tooltip</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_NEUTRAL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>==</operator> <name>ShS_SHOWING</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScreenToClient</name><argument_list>(<argument><expr><name>s_textArea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>pt</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_disable_beval_area</name><argument_list>(<argument><expr><name>cur_beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_SHOWING</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_tooltip</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mesg</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>BalloonEval</name> <modifier>*</modifier></type>

<name>gui_mch_create_beval_area</name><parameter_list>(

<parameter><decl><type><name>void</name> <modifier>*</modifier><name>target</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mesgCB</name>)<parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mesg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>mesgCB</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E232: Cannot create BalloonEval with both message and callback"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>beval</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>BalloonEval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>beval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>s_textArea</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_NEUTRAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <name>mesg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name> <operator>=</operator> <name>mesgCB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>clientData</name></name> <operator>=</operator> <name>clientData</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitCommonControls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_beval</name> <operator>=</operator> <name>beval</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_beval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_enable_beval_area</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>beval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Handle_WM_Notify</name><parameter_list>(<parameter><decl><type><name>HWND</name> <name>hwnd</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>LPNMHDR</name></type> <name>pnmh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pnmh</name><operator>-&gt;</operator><name>idFrom</name></name> <operator>!=</operator> <name>ID_BEVAL_TOOLTIP</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_beval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>pnmh</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>TTN_SHOW</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>TTN_POP</name></expr>:</case> 

<expr_stmt><expr><call><name>delete_tooltip</name><argument_list>(<argument><expr><name>cur_beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_enable_beval_area</name><argument_list>(<argument><expr><name>cur_beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_NEUTRAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TTN_GETDISPINFO</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>NMTTDISPINFO_NEW</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>NMTTDISPINFO_NEW</name> <operator>*</operator><operator>)</operator><name>pnmh</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>lpszText</name></name> <operator>=</operator> <operator>(</operator><name>LPSTR</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>lParam</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>uFlags</name></name> <operator>|=</operator> <name>TTF_DI_SETITEM</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>TTN_GETDISPINFOW</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>NMTTDISPINFOW_NEW</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>NMTTDISPINFOW_NEW</name> <operator>*</operator><operator>)</operator><name>pnmh</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>lpszText</name></name> <operator>=</operator> <operator>(</operator><name>LPWSTR</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>lParam</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>uFlags</name></name> <operator>|=</operator> <name>TTF_DI_SETITEM</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>TrackUserActivity</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uMsg</name> <operator>&gt;=</operator> <name>WM_MOUSEFIRST</name> <operator>&amp;&amp;</operator> <name>uMsg</name> <operator>&lt;=</operator> <name>WM_MOUSELAST</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>uMsg</name> <operator>&gt;=</operator> <name>WM_KEYFIRST</name> <operator>&amp;&amp;</operator> <name>uMsg</name> <operator>&lt;=</operator> <name>WM_KEYLAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>LastActivity</name> <operator>=</operator> <call><name>GetTickCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_beval_area</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>vts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>tofree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>netbeans_draw_multisign_indicator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>netbeans_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IS_ENABLE_DIRECTX</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DWriteContext_Flush</name><argument_list>(<argument><expr><name>s_dwc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPixel</name><argument_list>(<argument><expr><name>s_hdc</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>currFgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
