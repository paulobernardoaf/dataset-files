<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\regexp.c"><cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT_REGEXP_DUMP</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT_REGEXP_LOG</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT_REGEXP_DEBUG_LOG</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT_REGEXP_DEBUG_LOG_NAME</name></cpp:macro> <cpp:value>"bt_regexp_debug.log"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Magic</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x) - 256)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>un_Magic</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) + 256)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_Magic</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; 0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>no_Magic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_Magic</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>un_Magic</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>toggle_Magic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_Magic</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>un_Magic</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>Magic</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGMAGIC</name></cpp:macro> <cpp:value>0234</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCHARAT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)*(char_u *)(p))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG_RET_NULL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (emsg((m)), rc_did_emsg = TRUE, (void *)NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEMSG_RET_NULL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (iemsg((m)), rc_did_emsg = TRUE, (void *)NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG_RET_FAIL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (emsg((m)), rc_did_emsg = TRUE, FAIL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG2_RET_NULL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (semsg((const char *)(m), (c) ? "" : "\\"), rc_did_emsg = TRUE, (void *)NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG3_RET_NULL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (semsg((const char *)(m), (c) ? "" : "\\", (a)), rc_did_emsg = TRUE, (void *)NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG2_RET_FAIL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (semsg((const char *)(m), (c) ? "" : "\\"), rc_did_emsg = TRUE, FAIL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG_ONE_RET_NULL</name></cpp:macro> <cpp:value>EMSG2_RET_NULL(_("E369: invalid item in %s%%[]"), reg_magic == MAGIC_ALL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LIMIT</name></cpp:macro> <cpp:value>(32767L &lt;&lt; 16L)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_missingbracket</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E769: Missing ] after %s["</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_reverse_range</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E944: Reverse range in character class"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_large_class</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E945: Range too large in character class"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_unmatchedpp</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E53: Unmatched %s%%("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_unmatchedp</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E54: Unmatched %s("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_unmatchedpar</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E55: Unmatched %s)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_z_not_allowed</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E66: \\z( not allowed here"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_z1_not_allowed</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E67: \\z1 - \\z9 not allowed here"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_missing_sb</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E69: Missing ] after %s%%["</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_empty_sb</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E70: Empty %s%%[]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_recursive</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E956: Cannot use pattern recursively"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_MULTI</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTI_ONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTI_MULT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_FAIL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_CONT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_BREAK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_MATCH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_NOMATCH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>int</name></type>

<name>re_multi_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MULTI_ONE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MULTI_MULT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NOT_MULTI</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>reg_prev_sub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>REGEXP_INRANGE</name><index>[]</index></name> <init>= <expr><literal type="string">"]^-n\\"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>REGEXP_ABBR</name><index>[]</index></name> <init>= <expr><literal type="string">"nrtebdoxuU"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>backslash_trans</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <return>return <expr><name>CAR</name></expr>;</return>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <return>return <expr><name>TAB</name></expr>;</return>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <return>return <expr><name>ESC</name></expr>;</return>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <return>return <expr><name>BS</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_char_class</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>class_names</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{

<expr><literal type="string">"alnum:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_ALNUM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<expr><literal type="string">"alpha:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_ALPHA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<expr><literal type="string">"blank:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_BLANK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<expr><literal type="string">"cntrl:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_CNTRL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<expr><literal type="string">"digit:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_DIGIT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<expr><literal type="string">"graph:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_GRAPH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<expr><literal type="string">"lower:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_LOWER</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<expr><literal type="string">"print:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_PRINT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<expr><literal type="string">"punct:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_PUNCT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<expr><literal type="string">"space:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_SPACE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<expr><literal type="string">"upper:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_UPPER</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<expr><literal type="string">"xdigit:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_XDIGIT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<expr><literal type="string">"tab:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_TAB</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<expr><literal type="string">"return:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_RETURN</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<expr><literal type="string">"backspace:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_BACKSPACE</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<expr><literal type="string">"escape:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_ESCAPE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<expr><literal type="string">"ident:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_IDENT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<expr><literal type="string">"keyword:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_KEYWORD</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<expr><literal type="string">"fname:]"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_FNAME</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_NONE</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>class_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>class_names</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>class_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>class_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>class_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CLASS_NONE</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name><name>class_tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_DIGIT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_HEX</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_OCTAL</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_WORD</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_HEAD</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_ALPHA</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_LOWER</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_UPPER</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_WHITE</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_class_tab</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_DIGIT</name> <operator>+</operator> <name>RI_HEX</name> <operator>+</operator> <name>RI_OCTAL</name> <operator>+</operator> <name>RI_WORD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'8'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_DIGIT</name> <operator>+</operator> <name>RI_HEX</name> <operator>+</operator> <name>RI_WORD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_HEX</name> <operator>+</operator> <name>RI_WORD</name> <operator>+</operator> <name>RI_HEAD</name> <operator>+</operator> <name>RI_ALPHA</name> <operator>+</operator> <name>RI_LOWER</name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'i'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="char">'j'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'r'</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_WORD</name> <operator>+</operator> <name>RI_HEAD</name> <operator>+</operator> <name>RI_ALPHA</name> <operator>+</operator> <name>RI_LOWER</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_HEX</name> <operator>+</operator> <name>RI_WORD</name> <operator>+</operator> <name>RI_HEAD</name> <operator>+</operator> <name>RI_ALPHA</name> <operator>+</operator> <name>RI_UPPER</name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="char">'G'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'I'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator> <name>i</name> <operator>&gt;=</operator> <literal type="char">'J'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'R'</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'G'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_WORD</name> <operator>+</operator> <name>RI_HEAD</name> <operator>+</operator> <name>RI_ALPHA</name> <operator>+</operator> <name>RI_UPPER</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_WORD</name> <operator>+</operator> <name>RI_HEAD</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>class_tab</name><index>[<expr><literal type="char">' '</literal></expr>]</index></name> <operator>|=</operator> <name>RI_WHITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>class_tab</name><index>[<expr><literal type="char">'\t'</literal></expr>]</index></name> <operator>|=</operator> <name>RI_WHITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_digit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_DIGIT))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_hex</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_HEX))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_octal</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_OCTAL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_word</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_WORD))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_head</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_HEAD))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_alpha</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_ALPHA))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_lower</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_LOWER))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_upper</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_UPPER))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_white</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_WHITE))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_ICASE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_NOICASE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_HASNL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_ICOMBINE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_LOOKBH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regparse</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>regnpar</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>regnzpar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>re_has_z</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>regflags</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>had_eol</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reg_magic</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_NONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_OFF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_ON</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_ALL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reg_string</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reg_strict</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>META</name><index>[]</index></name> <init>= <expr><literal type="string">"%&amp;()*+.123456789&lt;=&gt;?@ACDFHIKLMOPSUVWX[_acdfhiklmnopsuvwxz{|~"</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>META_flags</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curchr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prevchr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prevprevchr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nextchr</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_NOPAREN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_PAREN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_ZPAREN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_NPAREN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>regparse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prevchr_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curchr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prevchr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prevprevchr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nextchr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>at_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_at_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>regnpar</name></decl>;</decl_stmt>

}</block></struct></type> <name>parse_state_T</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>initchr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>skipchr_keepstart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>peekchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>skipchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ungetchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>gethexchrs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxinputlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>getoctchrs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>getdecchrs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>coll_get_char</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>prog_magic_wrong</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cstrncmp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>cstrchr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>re_mult_next</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>reg_iswordc</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>regengine_T</name></type> <name>bt_regengine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>regengine_T</name></type> <name>nfa_regengine</name></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>re_multiline</name><parameter_list>(<parameter><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>prog</name><operator>-&gt;</operator><name>regflags</name></name> <operator>&amp;</operator> <name>RF_HASNL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_equi_class</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>EQUIVAL_CLASS_C</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"A\x62\x63\x64\x65\x66\x67"</literal></expr>,

<expr><literal type="string">"C\x68"</literal></expr>,

<expr><literal type="string">"E\x71\x72\x73\x74"</literal></expr>,

<expr><literal type="string">"I\x75\x76\x77\x78"</literal></expr>,

<expr><literal type="string">"N\x69"</literal></expr>,

<expr><literal type="string">"O\xEB\xEC\xED\xEE\xEF\x80"</literal></expr>,

<expr><literal type="string">"U\xFB\xFC\xFD\xFE"</literal></expr>,

<expr><literal type="string">"Y\xBA"</literal></expr>,

<expr><literal type="string">"a\x42\x43\x44\x45\x46\x47"</literal></expr>,

<expr><literal type="string">"c\x48"</literal></expr>,

<expr><literal type="string">"e\x51\x52\x53\x54"</literal></expr>,

<expr><literal type="string">"i\x55\x56\x57\x58"</literal></expr>,

<expr><literal type="string">"n\x49"</literal></expr>,

<expr><literal type="string">"o\xCB\xCC\xCD\xCE\xCF\x70"</literal></expr>,

<expr><literal type="string">"u\xDB\xDC\xDD\xDE"</literal></expr>,

<expr><literal type="string">"y\x8D\xDF"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_coll_element</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reg_cpo_lit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reg_cpo_bsl</name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_cpo_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>reg_cpo_lit</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_LITERAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>reg_cpo_bsl</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_BACKSL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>skip_anyof</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name>reg_cpo_bsl</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>REGEXP_INRANGE</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>reg_cpo_lit</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>REGEXP_ABBR</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_char_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CLASS_NONE</name>

<operator>&amp;&amp;</operator> <call><name>get_equi_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>get_coll_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>skip_regexp</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>startp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dirc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>skip_regexp_ex</name><argument_list>(<argument><expr><name>startp</name></expr></argument>, <argument><expr><name>dirc</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>skip_regexp_ex</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>startp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dirc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>newp</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dropped</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mymagic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>startp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>magic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mymagic</name> <operator>=</operator> <name>MAGIC_ON</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mymagic</name> <operator>=</operator> <name>MAGIC_OFF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>get_cpo_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>dirc</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name>mymagic</name> <operator>&gt;=</operator> <name>MAGIC_ON</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name>mymagic</name> <operator>&lt;=</operator> <name>MAGIC_OFF</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_anyof</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dirc</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name>newp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>newp</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>startp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>newp</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>startp</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dropped</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>dropped</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mymagic</name> <operator>=</operator> <name>MAGIC_ALL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mymagic</name> <operator>=</operator> <name>MAGIC_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prevchr_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>at_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_at_start</name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>initchr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>regparse</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevchr_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <name>prevprevchr</name> <operator>=</operator> <name>prevchr</name> <operator>=</operator> <name>nextchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>save_parse_state</name><parameter_list>(<parameter><decl><type><name>parse_state_T</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>regparse</name></name> <operator>=</operator> <name>regparse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>prevchr_len</name></name> <operator>=</operator> <name>prevchr_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>curchr</name></name> <operator>=</operator> <name>curchr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>prevchr</name></name> <operator>=</operator> <name>prevchr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>prevprevchr</name></name> <operator>=</operator> <name>prevprevchr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>nextchr</name></name> <operator>=</operator> <name>nextchr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>at_start</name></name> <operator>=</operator> <name>at_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>prev_at_start</name></name> <operator>=</operator> <name>prev_at_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>regnpar</name></name> <operator>=</operator> <name>regnpar</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>restore_parse_state</name><parameter_list>(<parameter><decl><type><name>parse_state_T</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>regparse</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>regparse</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevchr_len</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>prevchr_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>curchr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevchr</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>prevchr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevprevchr</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>prevprevchr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nextchr</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>nextchr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>at_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>prev_at_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>regnpar</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>regnpar</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>peekchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>after_slash</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curchr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>curchr</name> <operator>=</operator> <name><name>regparse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<case>case <expr><literal type="char">'~'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>reg_magic</name> <operator>&gt;=</operator> <name>MAGIC_ON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>Magic</name><argument_list>(<argument><expr><name>curchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'('</literal></expr>:</case>

<case>case <expr><literal type="char">')'</literal></expr>:</case>

<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<case>case <expr><literal type="char">'@'</literal></expr>:</case>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>

<case>case <expr><literal type="char">'|'</literal></expr>:</case>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<case>case <expr><literal type="char">'#'</literal></expr>:</case> 

<case>case <expr><literal type="char">'"'</literal></expr>:</case> 

<case>case <expr><literal type="char">'\''</literal></expr>:</case> 

<case>case <expr><literal type="char">','</literal></expr>:</case> 

<case>case <expr><literal type="char">'-'</literal></expr>:</case> 

<case>case <expr><literal type="char">':'</literal></expr>:</case> 

<case>case <expr><literal type="char">';'</literal></expr>:</case> 

<case>case <expr><literal type="char">'`'</literal></expr>:</case> 

<case>case <expr><literal type="char">'/'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>Magic</name><argument_list>(<argument><expr><name>curchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>reg_magic</name> <operator>&gt;=</operator> <name>MAGIC_ON</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>at_start</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>prev_at_start</name> <operator>&amp;&amp;</operator> <name>prevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>after_slash</name>

<operator>||</operator> <operator>(</operator><name>prevchr</name> <operator>!=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>prevchr</name> <operator>!=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>prevchr</name> <operator>!=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>reg_magic</name> <operator>&gt;=</operator> <name>MAGIC_OFF</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>at_start</name>

<operator>||</operator> <name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name>

<operator>||</operator> <name>prevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <name>prevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <name>prevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <name>prevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><call><name>no_Magic</name><argument_list>(<argument><expr><name>prevchr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'('</literal>

<operator>&amp;&amp;</operator> <name>prevprevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>reg_magic</name> <operator>&gt;=</operator> <name>MAGIC_OFF</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>regparse</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_magic_all</name> <init>= <expr><operator>(</operator><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal>

<operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal>

<operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'V'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_magic_all</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_magic_all</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal>

<operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>is_magic_all</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>regparse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><macro><name>vim_strchr</name><argument_list>(<argument>META</argument>, <argument>c</argument>)</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>c</name> <operator>&lt;=</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <name><name>META_flags</name><index>[<expr><name>c</name></expr>]</index></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name>at_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name>regparse</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>after_slash</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>regparse</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>after_slash</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>toggle_Magic</name><argument_list>(<argument><expr><name>curchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>REGEXP_ABBR</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>backslash_trans</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_NONE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>toggle_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>regparse</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>curchr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>skipchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prevchr_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prevchr_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regparse</name><index>[<expr><name>prevchr_len</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prevchr_len</name> <operator>+=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>regparse</name> <operator>+</operator> <name>prevchr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prevchr_len</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>regparse</name> <operator>+</operator> <name>prevchr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>prevchr_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regparse</name> <operator>+=</operator> <name>prevchr_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name>at_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevprevchr</name> <operator>=</operator> <name>prevchr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevchr</name> <operator>=</operator> <name>curchr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <name>nextchr</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>nextchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>skipchr_keepstart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>as</name> <init>= <expr><name>prev_at_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pr</name> <init>= <expr><name>prevchr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prpr</name> <init>= <expr><name>prevprevchr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>as</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevchr</name> <operator>=</operator> <name>pr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevprevchr</name> <operator>=</operator> <name>prpr</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>getchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>chr</name> <init>= <expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>chr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ungetchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>nextchr</name> <operator>=</operator> <name>curchr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <name>prevchr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevchr</name> <operator>=</operator> <name>prevprevchr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>prev_at_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>regparse</name> <operator>-=</operator> <name>prevchr_len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>

<name>gethexchrs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxinputlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxinputlen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>regparse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nr</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>|=</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>regparse</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><name>nr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>

<name>getdecchrs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>regparse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nr</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>regparse</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><name>nr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>

<name>getoctchrs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>nr</name> <operator>&lt;</operator> <literal type="number">040</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>regparse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nr</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>|=</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>regparse</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><name>nr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_limits</name><parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>minval</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>maxval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reverse</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>first_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>reverse</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_char</name> <operator>=</operator> <name>regparse</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>minval</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>maxval</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>maxval</name> <operator>=</operator> <name>MAX_LIMIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>first_char</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>maxval</name> <operator>=</operator> <operator>*</operator><name>minval</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>maxval</name> <operator>=</operator> <name>MAX_LIMIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG2_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E554: Syntax error in %s{...}"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>reverse</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>minval</name> <operator>&gt;</operator> <operator>*</operator><name>maxval</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reverse</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>minval</name> <operator>&lt;</operator> <operator>*</operator><name>maxval</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>*</operator><name>minval</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>minval</name> <operator>=</operator> <operator>*</operator><name>maxval</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>maxval</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_subexpr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_zsubexpr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>reg_nextline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>match_with_backref</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>start_lnum</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>start_col</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>end_lnum</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>end_col</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytelen</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>reg_tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>reg_tofreelen</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>reg_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>reg_mmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>reg_startp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>reg_endp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>reg_startpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>reg_endpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>reg_win</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>reg_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>reg_firstlnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>reg_maxline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg_line_lbr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>need_clear_subexpr</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>need_clear_zsubexpr</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>reg_ic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg_icombine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>reg_maxcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nfa_has_zend</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nfa_has_backref</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nfa_nsubexpr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nfa_listid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nfa_alt_listid</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>nfa_has_zsubexpr</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>regexec_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>regexec_T</name></type> <name>rex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rex_in_use</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>reg_iswordc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>reg_getline</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>+</operator> <name>lnum</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>+</operator> <name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name><name>reg_startzp</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name><name>reg_endzp</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name><name>reg_startzpos</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name><name>reg_endzpos</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_MULTI</name></cpp:macro> <cpp:value>(rex.reg_match == NULL)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>reg_extmatch_T</name> <modifier>*</modifier></type>

<name>make_extmatch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>em</name></decl>;</decl_stmt>

<expr_stmt><expr><name>em</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>reg_extmatch_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>em</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>em</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>em</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>reg_extmatch_T</name> <modifier>*</modifier></type>

<name>ref_extmatch</name><parameter_list>(<parameter><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>em</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>em</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>em</name><operator>-&gt;</operator><name>refcnt</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>em</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>unref_extmatch</name><parameter_list>(<parameter><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>em</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>em</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>em</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSUBEXP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>em</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>em</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>reg_prev_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>input</name></name> <operator>&gt;</operator> <name><name>rex</name><operator>.</operator><name>line</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>mb_get_class_buf</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>input</name></name> <operator>-</operator> <literal type="number">1</literal>

<operator>-</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>input</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>reg_match_visual</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>bot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><ternary><condition><expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>curwin</name></expr> </then><else>: <expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>start2</name></decl>, <decl><type ref="prev"/><name>end2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>cols</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>!=</operator> <name>curbuf</name> <operator>||</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_mode</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><name><name>top</name><operator>.</operator><name>lnum</name></name> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name><name>bot</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>rex</name><operator>.</operator><name>input</name></name> <operator>-</operator> <name><name>rex</name><operator>.</operator><name>line</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lnum</name> <operator>==</operator> <name><name>top</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name><name>top</name><operator>.</operator><name>col</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>lnum</name> <operator>==</operator> <name><name>bot</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <name><name>bot</name><operator>.</operator><name>col</name></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>p_sel</name> <operator>!=</operator> <literal type="char">'e'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start2</name> <operator>&lt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>start2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end2</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>end2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>top</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name>MAXCOL</name> <operator>||</operator> <name><name>bot</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>win_linetabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>rex</name><operator>.</operator><name>input</name></name> <operator>-</operator> <name><name>rex</name><operator>.</operator><name>line</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cols</name> <argument_list type="generic">&lt; <argument><expr><name>start</name> <operator>||</operator> <name>cols</name></expr></argument> &gt;</argument_list></name> <name>end</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>prog_magic_wrong</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prog</name> <operator>=</operator> <ternary><condition><expr><name>REG_MULTI</name></expr> ?</condition><then> <expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>regprog</name></name></expr> </then><else>: <expr><name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>regprog</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>engine</name></name> <operator>==</operator> <operator>&amp;</operator><name>nfa_regengine</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UCHARAT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>bt_regprog_T</name> <operator>*</operator><operator>)</operator><name>prog</name><operator>)</operator><operator>-&gt;</operator><name>program</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REGMAGIC</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_re_corr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>cleanup_subexpr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>need_clear_subexpr</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lpos_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lpos_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_endp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>need_clear_subexpr</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>cleanup_zsubexpr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>need_clear_zsubexpr</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>reg_startzpos</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lpos_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>reg_endzpos</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lpos_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>reg_startzp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>reg_endzp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>need_clear_zsubexpr</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>reg_nextline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>line</name></name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><operator>++</operator><name><name>rex</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>line</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>match_with_backref</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>start_lnum</name></decl></parameter>,

<parameter><decl><type><name>colnr_T</name></type> <name>start_col</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>end_lnum</name></decl></parameter>,

<parameter><decl><type><name>colnr_T</name></type> <name>end_col</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytelen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>clnum</name> <init>= <expr><name>start_lnum</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>ccol</name> <init>= <expr><name>start_col</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytelen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bytelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>line</name></name> <operator>!=</operator> <name>reg_tofree</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_tofree</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>reg_tofreelen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">50</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>reg_tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg_tofree</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_tofree</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>RA_FAIL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>reg_tofreelen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>reg_tofree</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>reg_tofree</name> <operator>+</operator> <operator>(</operator><name><name>rex</name><operator>.</operator><name>input</name></name> <operator>-</operator> <name><name>rex</name><operator>.</operator><name>line</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name>reg_tofree</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><name>clnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clnum</name> <operator>==</operator> <name>end_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end_col</name> <operator>-</operator> <name>ccol</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>ccol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cstrncmp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>ccol</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>RA_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>bytelen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bytelen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clnum</name> <operator>==</operator> <name>end_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>RA_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytelen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bytelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>clnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ccol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>RA_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>RA_MATCH</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>re_mult_next</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>re_multi_type</name><argument_list>(<argument><expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>MULTI_MULT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E888: (NFA regexp) cannot repeat %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc_did_emsg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <name>b</name>, <name>c</name>;</decl_stmt>

}</block></struct></type> <name>decomp_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>decomp_T</name></type> <name><name>decomp_table</name><index>[<expr><literal type="number">0xfb4f</literal><operator>-</operator><literal type="number">0xfb20</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="number">0x5e2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d4</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5db</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5dc</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5dd</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e8</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5ea</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'+'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e9</literal></expr>, <expr><literal type="number">0x5c1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e9</literal></expr>, <expr><literal type="number">0x5c2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e9</literal></expr>, <expr><literal type="number">0x5c1</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e9</literal></expr>, <expr><literal type="number">0x5c2</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d0</literal></expr>, <expr><literal type="number">0x5b7</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d0</literal></expr>, <expr><literal type="number">0x5b8</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d0</literal></expr>, <expr><literal type="number">0x5b4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d1</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d2</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d3</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d4</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d5</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d6</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0xfb37</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d8</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d9</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5da</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5db</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5dc</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0xfb3d</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5de</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0xfb3f</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e0</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e1</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0xfb42</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e3</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e4</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0xfb45</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e6</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e7</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e8</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e9</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5ea</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d5</literal></expr>, <expr><literal type="number">0x5b9</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d1</literal></expr>, <expr><literal type="number">0x5bf</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5db</literal></expr>, <expr><literal type="number">0x5bf</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5e4</literal></expr>, <expr><literal type="number">0x5bf</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x5d0</literal></expr>, <expr><literal type="number">0x5dc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mb_decompose</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decomp_T</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xfb20</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xfb4f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>decomp_table</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="number">0xfb20</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c1</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c2</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c3</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>c</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>c1</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c2</name> <operator>=</operator> <operator>*</operator><name>c3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>cstrncmp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>MB_STRNICMP</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>rex</name><operator>.</operator><name>reg_icombine</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c11</name></decl>, <decl><type ref="prev"/><name>c12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>junk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str1</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str2</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>str1</name> <operator>-</operator> <name>s1</name><operator>)</operator> <operator>&lt;</operator> <operator>*</operator><name>n</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>||</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mb_decompose</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c11</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>junk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mb_decompose</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c12</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>junk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c12</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c11</name> <operator>!=</operator> <name>c12</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>||</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c11</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c12</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>str2</name> <operator>-</operator> <name>s2</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>cstrchr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><call><name>MB_ISUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>MB_ISLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>MB_TOUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0x80</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>utf_fold</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>cc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>c</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>cc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>c</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>cc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <expr_stmt><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><call>(<modifier>*</modifier><name>fptr_T</name>)<argument_list>(<argument><expr><name>int</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt></typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vim_regsub_both</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backslash</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>fptr_T</name></type>

<name>do_upper</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>MB_TOUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fptr_T</name></type>

<name>do_Upper</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>MB_TOUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_Upper</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fptr_T</name></type>

<name>do_lower</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fptr_T</name></type>

<name>do_Lower</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_Lower</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>regtilde</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newsub</name> <init>= <expr><name>source</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmpsub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prevlen</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>newsub</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <name>magic</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>magic</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reg_prev_sub</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prevlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>reg_prev_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpsub</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>newsub</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>prevlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpsub</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>newsub</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>tmpsub</name></expr></argument>, <argument><expr><name>newsub</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>tmpsub</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>reg_prev_sub</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>prevlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>magic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>tmpsub</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>prevlen</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newsub</name> <operator>!=</operator> <name>source</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>newsub</name> <operator>=</operator> <name>tmpsub</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>newsub</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>prevlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>magic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>reg_prev_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newsub</name> <operator>!=</operator> <name>source</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>reg_prev_sub</name> <operator>=</operator> <name>newsub</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>reg_prev_sub</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>newsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>newsub</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>can_f_submatch</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>sm_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>sm_mmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>sm_firstlnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>sm_maxline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sm_line_lbr</name></decl>;</decl_stmt>

}</block></struct></type> <name>regsubmatch_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>regsubmatch_T</name></type> <name>rsm</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>fill_submatch_list</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argskip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>listarg</name> <init>= <expr><name>argv</name> <operator>+</operator> <name>argskip</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>==</operator> <name>argskip</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>argskip</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_static_list</name><argument_list>(<argument><expr><operator>(</operator><name>staticList10_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>listarg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>listarg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>startp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>argskip</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_submatch_list</name><parameter_list>(<parameter><decl><type><name>staticList10_T</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>vim_regsub</name><parameter_list>(

<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>backslash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regexec_T</name></type> <name>rex_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rex_in_use_save</name> <init>= <expr><name>rex_in_use</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rex_save</name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_match</name></name> <operator>=</operator> <name>rmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vim_regsub_both</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><name>backslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>rex_in_use_save</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rex</name> <operator>=</operator> <name>rex_save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vim_regsub_multi</name><parameter_list>(

<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>backslash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regexec_T</name></type> <name>rex_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rex_in_use_save</name> <init>= <expr><name>rex_in_use</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rex_save</name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_match</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name></name> <operator>=</operator> <name>rmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vim_regsub_both</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><name>backslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>rex_in_use_save</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rex</name> <operator>=</operator> <name>rex_save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>vim_regsub_both</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>backslash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fptr_T</name></type> <name>func_all</name> <init>= <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fptr_T</name></type> <name>func_one</name> <init>= <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>clnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>eval_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>expr</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prog_magic_wrong</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>source</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>source</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>eval_result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prev_can_f_submatch</name> <init>= <expr><name>can_f_submatch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regsubmatch_T</name></type> <name>rsm_save</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>can_f_submatch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rsm_save</name> <operator>=</operator> <name>rsm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>can_f_submatch</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rsm</name><operator>.</operator><name>sm_match</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_match</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rsm</name><operator>.</operator><name>sm_mmatch</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rsm</name><operator>.</operator><name>sm_firstlnum</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rsm</name><operator>.</operator><name>sm_maxline</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rsm</name><operator>.</operator><name>sm_line_lbr</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>staticList10_T</name></type> <name>matchList</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>funcexe_T</name></type> <name>funcexe</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>matchList</name><operator>.</operator><name>sl_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matchList</name><operator>.</operator><name>sl_list</name><operator>.</operator><name>lv_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funcexe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>funcexe</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>funcexe</name><operator>.</operator><name>argv_func</name></name> <operator>=</operator> <name>fill_submatch_list</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>funcexe</name><operator>.</operator><name>evaluate</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>expr</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcexe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>partial</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>partial_name</name><argument_list>(<argument><expr><name>partial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>funcexe</name><operator>.</operator><name>partial</name></name> <operator>=</operator> <name>partial</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcexe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>matchList</name><operator>.</operator><name>sl_list</name><operator>.</operator><name>lv_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_submatch_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>matchList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>eval_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>eval_result</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eval_result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>eval_result</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>eval_result</name> <operator>=</operator> <call><name>eval_to_string</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eval_result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>had_backslash</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>eval_result</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rsm</name><operator>.</operator><name>sm_line_lbr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rsm</name><operator>.</operator><name>sm_line_lbr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>had_backslash</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>had_backslash</name> <operator>&amp;&amp;</operator> <name>backslash</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eval_result</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>can_f_submatch</name> <operator>=</operator> <name>prev_can_f_submatch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>can_f_submatch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rsm</name> <operator>=</operator> <name>rsm_save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <name>magic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>no</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>magic</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>no</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <operator>*</operator><name>src</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>no</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"uUlLeE"</literal></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>src</name><operator>++</operator></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>func_one</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_upper</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'U'</literal></expr>:</case> <expr_stmt><expr><name>func_all</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_Upper</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name>func_one</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_lower</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><name>func_all</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_Lower</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<case>case <expr><literal type="char">'E'</literal></expr>:</case> <expr_stmt><expr><name>func_one</name> <operator>=</operator> <name>func_all</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>src</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_H</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <if_stmt><if>if <condition>(<expr><name>backslash</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>dst</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>func_one</name> <operator>!=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>func_one</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><operator>(</operator><call><name>func_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>func_all</name> <operator>!=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>func_all</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><operator>(</operator><call><name>func_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>totlen</name> <init>= <expr><call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_char2bytes</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&lt;</operator> <name>totlen</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>clen</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totlen</name> <operator>-</operator> <name>clen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>totlen</name> <operator>-</operator> <name>clen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>totlen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>clnum</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clnum</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><name>clnum</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name>clnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name>

<operator>-</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>startp</name><index>[<expr><name>no</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>-</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name>clnum</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><operator>++</operator><name>clnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name>clnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_re_damg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>backslash</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>func_one</name> <operator>!=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>func_one</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><operator>(</operator><call><name>func_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>func_all</name> <operator>!=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>func_all</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><operator>(</operator><call><name>func_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_char2bytes</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>no</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>dst</name> <operator>-</operator> <name>dest</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>reg_getline_submatch</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>save_first</name> <init>= <expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>save_max</name> <init>= <expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_firstlnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_maxline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>=</operator> <name>save_first</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <name>save_max</name></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>reg_submatch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>no</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_f_submatch</name> <operator>||</operator> <name>no</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rsm</name><operator>.</operator><name>sm_match</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name>lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name>

<operator>-</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>retval</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>retval</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>startp</name><index>[<expr><name>no</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>list_T</name> <modifier>*</modifier></type>

<name>reg_submatch_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>no</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>slnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>elnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>scol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>ecol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_f_submatch</name> <operator>||</operator> <name>no</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rsm</name><operator>.</operator><name>sm_match</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>slnum</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>elnum</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slnum</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>elnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scol</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ecol</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>slnum</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>scol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slnum</name> <operator>==</operator> <name>elnum</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ecol</name> <operator>-</operator> <name>scol</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elnum</name> <operator>-</operator> <name>slnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>slnum</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>elnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ecol</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>startp</name><index>[<expr><name>no</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_regexec_multi</name><parameter_list>(

<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>,

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, 

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_match</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name></name> <operator>=</operator> <name>rmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>=</operator> <name><name>rmp</name><operator>-&gt;</operator><name>rmm_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name> <operator>=</operator> <name><name>rmp</name><operator>-&gt;</operator><name>rmm_maxcol</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regexp_bt.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>regengine_T</name></type> <name>bt_regengine</name> <init>=

<expr><block>{

<expr><name>bt_regcomp</name></expr>,

<expr><name>bt_regfree</name></expr>,

<expr><name>bt_regexec_nl</name></expr>,

<expr><name>bt_regexec_multi</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regexp_nfa.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>regengine_T</name></type> <name>nfa_regengine</name> <init>=

<expr><block>{

<expr><name>nfa_regcomp</name></expr>,

<expr><name>nfa_regfree</name></expr>,

<expr><name>nfa_regexec_nl</name></expr>,

<expr><name>nfa_regexec_multi</name></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>regexp_engine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>regname</name><index>[]</index><index>[<expr><literal type="number">30</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"AUTOMATIC Regexp Engine"</literal></expr>,

<expr><literal type="string">"BACKTRACKING Regexp Engine"</literal></expr>,

<expr><literal type="string">"NFA Regexp Engine"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>regprog_T</name> <modifier>*</modifier></type>

<name>vim_regcomp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr_arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>re_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>prog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name>expr_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>called_emsg_before</name></decl>;</decl_stmt>

<expr_stmt><expr><name>regexp_engine</name> <operator>=</operator> <name>p_re</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="string">"\\%#="</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newengine</name> <init>= <expr><name><name>expr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newengine</name> <operator>==</operator> <name>AUTOMATIC_ENGINE</name>

<operator>||</operator> <name>newengine</name> <operator>==</operator> <name>BACKTRACKING_ENGINE</name>

<operator>||</operator> <name>newengine</name> <operator>==</operator> <name>NFA_ENGINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>regexp_engine</name> <operator>=</operator> <name><name>expr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>expr</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"New regexp mode selected (%d): %s"</literal></expr></argument>,

<argument><expr><name>regexp_engine</name></expr></argument>, <argument><expr><name><name>regname</name><index>[<expr><name>newengine</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E864: \\%#= can only be followed by 0, 1, or 2. The automatic engine will be used "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>regexp_engine</name> <operator>=</operator> <name>AUTOMATIC_ENGINE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bt_regengine</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nfa_regengine</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>called_emsg_before</name> <operator>=</operator> <name>called_emsg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regexp_engine</name> <operator>!=</operator> <name>BACKTRACKING_ENGINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prog</name> <operator>=</operator> <call><name><name>nfa_regengine</name><operator>.</operator><name>regcomp</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>,

<argument><expr><name>re_flags</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>regexp_engine</name> <operator>==</operator> <name>AUTOMATIC_ENGINE</name></expr> ?</condition><then> <expr><name>RE_AUTO</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prog</name> <operator>=</operator> <call><name><name>bt_regengine</name><operator>.</operator><name>regcomp</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prog</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BT_REGEXP_DEBUG_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>regexp_engine</name> <operator>!=</operator> <name>BACKTRACKING_ENGINE</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>BT_REGEXP_DEBUG_LOG_NAME</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in \"%s\"\n"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><literal type="string">"(NFA) Could not open \"%s\" to write !!!"</literal></expr></argument>,

<argument><expr><name>BT_REGEXP_DEBUG_LOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>regexp_engine</name> <operator>==</operator> <name>AUTOMATIC_ENGINE</name>

<operator>&amp;&amp;</operator> <name>called_emsg</name> <operator>==</operator> <name>called_emsg_before</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>regexp_engine</name> <operator>=</operator> <name>BACKTRACKING_ENGINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prog</name> <operator>=</operator> <call><name><name>bt_regengine</name><operator>.</operator><name>regcomp</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prog</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>re_engine</name></name> <operator>=</operator> <name>regexp_engine</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>re_flags</name></name> <operator>=</operator> <name>re_flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>prog</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vim_regfree</name><parameter_list>(<parameter><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prog</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>prog</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>regfree</name></name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>free_regexp_stuff</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>reg_tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>reg_prev_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>report_re_switch</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Switching to backtracking RE engine for pattern: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>regprog_in_use</name><parameter_list>(<parameter><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>prog</name><operator>-&gt;</operator><name>re_in_use</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>vim_regexec_string</name><parameter_list>(

<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, 

<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>nl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regexec_T</name></type> <name>rex_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rex_in_use_save</name> <init>= <expr><name>rex_in_use</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_recursive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_in_use</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rex_save</name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>regexec_nl</name></name><argument_list>(<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_in_use</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_engine</name></name> <operator>==</operator> <name>AUTOMATIC_ENGINE</name>

<operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>NFA_TOO_EXPENSIVE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_re</name> <init>= <expr><name>p_re</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>re_flags</name> <init>= <expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_flags</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>nfa_regprog_T</name> <operator>*</operator><operator>)</operator><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name><operator>)</operator><operator>-&gt;</operator><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_re</name> <operator>=</operator> <name>BACKTRACKING_ENGINE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>report_re_switch</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_in_use</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>regexec_nl</name></name><argument_list>(<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_in_use</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_re</name> <operator>=</operator> <name>save_p_re</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>rex_in_use_save</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rex</name> <operator>=</operator> <name>rex_save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vim_regexec_prog</name><parameter_list>(

<parameter><decl><type><name>regprog_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>prog</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ignore_case</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <operator>*</operator><name>prog</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>ignore_case</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vim_regexec_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>prog</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vim_regexec</name><parameter_list>(<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vim_regexec_string</name><argument_list>(<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vim_regexec_nl</name><parameter_list>(<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vim_regexec_string</name><argument_list>(<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type>

<name>vim_regexec_multi</name><parameter_list>(

<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>,

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, 

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, 

<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, 

<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regexec_T</name></type> <name>rex_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rex_in_use_save</name> <init>= <expr><name>rex_in_use</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_recursive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_in_use</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rex_save</name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>regexec_multi</name></name><argument_list>(

<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_in_use</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_engine</name></name> <operator>==</operator> <name>AUTOMATIC_ENGINE</name>

<operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>NFA_TOO_EXPENSIVE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_re</name> <init>= <expr><name>p_re</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>re_flags</name> <init>= <expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_flags</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>nfa_regprog_T</name> <operator>*</operator><operator>)</operator><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name><operator>)</operator><operator>-&gt;</operator><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_re</name> <operator>=</operator> <name>BACKTRACKING_ENGINE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>report_re_switch</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>reg_do_extmatch</name> <operator>=</operator> <name>REX_ALL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>reg_do_extmatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_in_use</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>regexec_multi</name></name><argument_list>(

<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_in_use</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_re</name> <operator>=</operator> <name>save_p_re</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>rex_in_use_save</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rex</name> <operator>=</operator> <name>rex_save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>result</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
